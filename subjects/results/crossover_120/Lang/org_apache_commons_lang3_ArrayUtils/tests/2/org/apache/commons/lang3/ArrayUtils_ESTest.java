/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:01:27 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-3.0), (-1191), 1.5);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-3.0)}, doubleArray0, 0.01);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-33), booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-3.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      ArrayUtils.swap((Object[]) integerArray0, 3, (-33), (-33));
      assertEquals(0, integerArray0.length);
      
      Boolean[] booleanArray2 = new Boolean[4];
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      booleanArray2[0] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray2[1] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      assertNotNull(boolean3);
      
      booleanArray2[2] = boolean3;
      Boolean boolean4 = new Boolean(false);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      booleanArray2[3] = boolean4;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray3));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertEquals(4, booleanArray3.length);
      assertEquals(4, booleanArray2.length);
      assertNotNull(booleanArray3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Float float0 = new Float((-2217.448213547));
      assertEquals((-2217.4482F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-2217.448213547));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2217.4482F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-2217.448213547));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-2217.4482F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-2217.448213547));
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-2217.4482F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2217.448213547);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-2217.448213547);
      doubleArray0[4] = (-2217.448213547);
      doubleArray0[5] = (double) (-775.0F);
      doubleArray0[6] = 1421.9495;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2217.448213547));
      assertArrayEquals(new double[] {(-2217.448213547), 1.0, 1.0, (-2217.448213547), (-2217.448213547), (-775.0), 1421.9495}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals("{0, 3, 4}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1.0F), (-3641.60499297443));
      assertArrayEquals(new double[] {(-2217.448213547), 1.0, 1.0, (-2217.448213547), (-2217.448213547), (-775.0), 1421.9495}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-39);
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, 44);
      assertEquals(0, objectArray0.length);
      assertNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 44);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-39), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {44, (-39), 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-39);
      floatArray0[2] = (float) (-39);
      floatArray0[3] = (float) (-39);
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = '=';
      ArrayUtils.swap(charArray0, (-1), (-985));
      assertArrayEquals(new char[] {'(', '='}, charArray0);
      assertEquals(2, charArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-39.0F);
      doubleArray0[1] = 2810.600354854;
      doubleArray0[2] = (double) '=';
      doubleArray0[3] = 1136.0;
      doubleArray0[4] = (double) '=';
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 44, 388);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-39.0), 2810.600354854, 61.0, 1136.0, 61.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'(', '='}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray1);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, 3.0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-39.0), 2810.600354854, 61.0, 1136.0, 61.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-39.0), 2810.600354854, 61.0, 1136.0, 61.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte) (-89);
      byteArray0[7] = (byte)33;
      byteArray0[8] = (byte) (-61);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-18), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -18, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-903.8F);
      floatArray0[1] = (-1.0F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-903.8F), (-1355));
      assertArrayEquals(new float[] {(-903.8F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1355);
      longArray0[1] = 8L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-1355);
      longArray0[4] = (long) (-1355);
      longArray0[5] = (long) (-1355);
      Character character0 = new Character('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) character0, (-1355));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray1 = new Long[5];
      longArray1[0] = (Long) 0L;
      longArray1[1] = (Long) 8L;
      longArray1[2] = (Long) (-1355L);
      longArray1[3] = (Long) 8L;
      longArray1[4] = (Long) (-1355L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {0L, 8L, (-1355L), 8L, (-1355L)}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(5, longArray2.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)56;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)2, (byte) (-62), (byte) (-43), (byte)21, (byte) (-1), (byte)56}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      longArray0[4] = 0L;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 25);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-861.025);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.1;
      doubleArray0[4] = 0.1;
      doubleArray0[7] = (-1.0);
      doubleArray0[6] = (-1788.50523173598);
      Long long0 = new Long((-2411L));
      assertEquals((-2411L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("", (-4418L));
      assertFalse(long1.equals((Object)long0));
      assertEquals((-4418L), (long)long1);
      assertNotNull(long1);
      
      Long long2 = new Long(127L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(127L, (long)long2);
      assertNotNull(long2);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long1;
      longArray0[1] = long2;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, 388, (-185));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      Integer[] integerArray0 = ArrayUtils.toArray((Integer[]) null);
      assertNull(integerArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "6zKzW$w!>");
      assertNull(stringArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-185), intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-861.025));
      assertArrayEquals(new double[] {(-861.025), 1.0, 0.1, 0.0, 0.1, 0.0, (-1788.50523173598), (-1.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(13.295317864415491);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(13.295318F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false}, booleanArray0));
      assertEquals(4, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(5, booleanArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-243L);
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 0, Integer.MAX_VALUE);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-243L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = 1215;
      ArrayUtils.swap(doubleArray0, 1638, 1215, 1215);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1215;
      longArray0[1] = (long) 1215;
      longArray0[2] = (long) 1215;
      ArrayUtils.swap(longArray0, (-505), (-505), 1638);
      assertArrayEquals(new long[] {1215L, 1215L, 1215L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Character[] characterArray0 = new Character[0];
      Comparator<Character> comparator0 = (Comparator<Character>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(characterArray0, comparator0);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1638);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1638, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1638);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1638, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      try { 
        Integer.decode("java.lang.Integer");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Integer\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-861.025);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.1;
      doubleArray0[4] = (-861.025);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1788.50523173598);
      doubleArray0[7] = 2132.385218924532;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (-1));
      assertArrayEquals(new double[] {(-861.025), 1.0, 0.1, 0.0, (-861.025), (-1.0), (-1788.50523173598), 2132.385218924532}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      longArray0[8] = (long) (-1);
      long[] longArray1 = ArrayUtils.insert(1, longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-1L), 1L, 1L, 1L, 1L, (-1L), 1L, 1L, (-1L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(18, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-861.025);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.1;
      doubleArray0[4] = (-2799.1532526446254);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1788.50523173598);
      doubleArray0[7] = 2132.385218924532;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (-1));
      assertArrayEquals(new double[] {(-861.025), 1.0, 0.1, 0.0, (-2799.1532526446254), (-1.0), (-1788.50523173598), 2132.385218924532}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      longArray0[8] = (long) (-1);
      long[] longArray1 = ArrayUtils.insert(1, longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-1L), 1L, 1L, 1L, 1L, (-1L), 1L, 1L, (-1L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(18, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      ArrayUtils.shift(intArray0, (-3195), 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "{}");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-87);
      shortArray0[1] = (short) (-185);
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0, (-3902), (int) (short) (-185));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      ArrayUtils.shift(doubleArray0, (int) (short) (-185));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 9);
      Class<Short> class0 = Short.class;
      classArray0[0] = class0;
      Class<Short> class1 = Short.class;
      classArray0[1] = class1;
      Class<Short> class2 = Short.class;
      classArray0[2] = class2;
      Class<Short> class3 = Short.class;
      classArray0[3] = class3;
      Class<Short> class4 = Short.class;
      classArray0[4] = class4;
      Class<Short> class5 = Short.class;
      classArray0[5] = class5;
      Class<Short> class6 = Short.class;
      classArray0[6] = class6;
      Class<Short> class7 = Short.class;
      classArray0[7] = class7;
      Class<Short> class8 = Short.class;
      classArray0[8] = class8;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(9, classArray0.length);
      assertEquals(9, classArray1.length);
      assertNotNull(classArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-13));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-13);
      longArray0[1] = (long) (-13);
      longArray0[2] = (long) (-13);
      longArray0[3] = (long) (-13);
      longArray0[4] = (long) (-13);
      longArray0[5] = (long) (-13);
      longArray0[6] = (long) (-13);
      ArrayUtils.shift(longArray0, (-13));
      assertArrayEquals(new long[] {(-13L), (-13L), (-13L), (-13L), (-13L), (-13L), (-13L)}, longArray0);
      assertEquals(7, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-13L);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1355), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1355, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'v';
      floatArray0[1] = (float) 'v';
      floatArray0[2] = (-2634.0627F);
      floatArray0[3] = (float) 'v';
      floatArray0[4] = (float) 'v';
      floatArray0[5] = (float) 'v';
      floatArray0[7] = (float) 'v';
      floatArray0[8] = (float) 'v';
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {118.0F, 118.0F, (-2634.0627F), 118.0F, 118.0F, 118.0F, 0.0F, 118.0F, 118.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 0, (-1825));
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-2685));
      assertNull(intArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 118.0F;
      objectArray0[1] = (Object) (-2634.0627F);
      objectArray0[2] = (Object) 118.0F;
      objectArray0[3] = (Object) 118.0F;
      objectArray0[4] = (Object) 0.0F;
      objectArray0[5] = (Object) 118.0F;
      objectArray0[6] = (Object) 118.0F;
      objectArray0[7] = (Object) (-2634.0627F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1597.100366163039);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1597.100366163039, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[2] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0.0);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[4] = double3;
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(2147483647L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(2147483647L, (long)long2);
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(33L);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertEquals(33L, (long)long3);
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(680L);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertEquals(680L, (long)long4);
      assertNotNull(long4);
      
      longArray0[4] = long4;
      Long long5 = new Long(1989L);
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long2));
      assertEquals(1989L, (long)long5);
      assertNotNull(long5);
      
      longArray0[5] = long5;
      Long[] longArray1 = new Long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = long2;
      longArray1[1] = long2;
      longArray1[2] = long5;
      Long[] longArray2 = ArrayUtils.insert(0, longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertEquals(3, longArray1.length);
      assertEquals(6, longArray0.length);
      assertEquals(9, longArray2.length);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1161L));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = Float.valueOf(479.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(479.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) (byte)0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1618.0F));
      assertArrayEquals(new float[] {1.0F, 479.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)91);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)91}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((double) (short) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(1845.841F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(1845.841F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(0.0F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[6] = float5;
      floatArray0[8] = floatArray0[7];
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (Object) short0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (float)floatArray0[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-115.14));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-115.14), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) short0;
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) floatArray0[3];
      Object[] objectArray1 = ArrayUtils.removeAllOccurrences(objectArray0, (Object) float3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotEquals((float)float3, (float)float4, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float5, 0.01F);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(9, floatArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1161.0), 250);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray2 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray2, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-39);
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, 44);
      assertEquals(0, objectArray0.length);
      assertNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 44);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-39), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {44, (-39), 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-39);
      floatArray0[2] = (float) (-39);
      floatArray0[3] = (float) (-39);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (-39);
      floatArray0[6] = (float) 44;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-39.0F), (-39.0F), (-39.0F), 0.0F, (-39.0F), 44.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-39.0F), (-39.0F), (-39.0F), 0.0F, (-39.0F), 44.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1566), floatArray1, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1566, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 1.0;
      doubleArray0[2] = 12.31;
      doubleArray0[3] = (-1414.5095293760658);
      doubleArray0[4] = (-1503.0);
      doubleArray0[5] = (-1414.5095293760658);
      ArrayUtils.shift(doubleArray0, 51, 0, 708);
      assertArrayEquals(new double[] {0.0, 0.0, 12.31, (-1414.5095293760658), (-1503.0), (-1414.5095293760658), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)98, 13);
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(doubleArray0, 0, (int) (byte)9, 98);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 12.31, (-1414.5095293760658), (-1503.0), (-1414.5095293760658)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)9;
      ArrayUtils.reverse(shortArray0, (-3507), (-1354));
      assertArrayEquals(new short[] {(short)9}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) "UantX{BM");
      assertEquals("UantX{BM", object0);
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType("UantX{BM", "UantX{BM");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[10];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0, 472, 1881);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[2] = (float) 1881;
      floatArray0[4] = (float) (byte)0;
      ArrayUtils.shift(intArray0, 5);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, ',', 472);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (-1));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.swap(floatArray0, (int) (byte)0, (-1), 1681);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1881.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertEquals('A', (char)character1);
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = new Character('w');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('w', (char)character2);
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      Character character3 = Character.valueOf('Z');
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertEquals('Z', (char)character3);
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      characterArray0[5] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertArrayEquals(new char[] {'A', 'A', 'A', 'w', 'Z', 'A'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'x';
      doubleArray0[1] = 5176.038;
      doubleArray0[2] = (double) (char)character2;
      doubleArray0[3] = (double) (char)character2;
      doubleArray0[4] = (double) (char)character0;
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'b');
      assertArrayEquals(new char[] {'A', 'A', 'A', 'w', 'Z', 'A'}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) character0);
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character1));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1147);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 'v';
      doubleArray1[1] = 1708.0355911;
      doubleArray1[2] = (double) 'v';
      doubleArray1[3] = (double) 'v';
      doubleArray1[4] = (-226.7424956);
      doubleArray1[5] = (-540.05);
      doubleArray1[6] = (-55.0);
      doubleArray1[7] = (double) 'v';
      doubleArray1[8] = (double) 'v';
      int int0 = new Character('v');
      assertEquals('v', int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 1708.0355911;
      objectArray0[1] = (Object) (-540.05);
      objectArray0[2] = (Object) 118.0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 'v';
      objectArray0[5] = (Object) 118.0;
      Integer integer0 = new Integer((-1147));
      assertEquals((-1147), (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(6, objectArray0.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-1147), 645);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-1545), (-2116), (-1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      Character character0 = Character.valueOf('O');
      assertEquals('O', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'O', 'O', 'O', 'O', 'O', 'O'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'r';
      longArray0[1] = (long) 'r';
      longArray0[3] = 1235L;
      longArray0[4] = (long) 'r';
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {114L, 114L, 0L, 1235L, 114L}, longArray0);
      assertArrayEquals(new long[] {114L, 114L, 0L, 1235L, 114L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '6';
      ArrayUtils.shift(charArray1, 3060);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'6'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)54}, byteArray1);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1235L, (double) 0L);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 818;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {818.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 1235L, (int) (byte)89, (-6.0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 603.5548702090445;
      doubleArray0[1] = 1421.9495;
      doubleArray0[2] = 1.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0);
      assertArrayEquals(new double[] {603.5548702090445, 1421.9495, 1.0}, doubleArray0, 0.01);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-966.0F);
      floatArray0[1] = (-1.0F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-966.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      Float[] floatArray1 = new Float[8];
      floatArray1[0] = (Float) (-1.0F);
      floatArray1[1] = (Float) (-1.0F);
      MutableInt mutableInt0 = new MutableInt((-1.0F));
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      int int0 = ArrayUtils.indexOf((Object[]) floatArray1, (Object) mutableInt0, 1132);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals(8, floatArray1.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 1132;
      intArray0[2] = (-1);
      intArray0[3] = 1132;
      intArray0[4] = (-1);
      int int1 = mutableInt0.getAndAdd((Number) 1132);
      assertTrue(int1 == int0);
      assertEquals("1131", mutableInt0.toString());
      assertEquals((byte)107, mutableInt0.byteValue());
      assertEquals(1131.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1131, mutableInt0.shortValue());
      assertEquals(1131, mutableInt0.intValue());
      assertEquals(1131L, mutableInt0.longValue());
      assertEquals(1131.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1131, (int)mutableInt0.toInteger());
      assertEquals(1131, (int)mutableInt0.getValue());
      assertEquals((-1), int1);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), (-2009));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-1), 1132, (-1), 1132, (-1)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotNull(intArray1);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) floatArray1, (Random) mockRandom0);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Character character0 = new Character('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('s');
      assertTrue(character1.equals((Object)character0));
      assertEquals('s', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[26];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[6] = character0;
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-1284), (int) character0, 2144966186);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(character0.equals((Object)character1));
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2131.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2501.8F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 3354);
      assertArrayEquals(new float[] {2131.0F, 0.0F, (-2501.8F), (-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1201L;
      longArray0[1] = (long) 3354;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 3354;
      longArray0[4] = (long) 3354;
      ArrayUtils.shift(longArray0, 3354);
      assertArrayEquals(new long[] {3354L, (-1L), 3354L, 3354L, 1201L}, longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 2131.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-2501.8F);
      doubleArray0[5] = (double) 3354L;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1708.0355911, (-1));
      assertArrayEquals(new double[] {2131.0, 0.0, 0.0, 0.0, (-2501.800048828125), 3354.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals(10, doubleArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 643.974F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2501.8F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 3354);
      assertArrayEquals(new float[] {643.974F, 0.0F, (-2501.8F), (-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1201L;
      longArray0[1] = (long) 3354;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 3354;
      longArray0[4] = (long) 3354;
      ArrayUtils.shift(longArray0, 3354);
      assertArrayEquals(new long[] {3354L, (-1L), 3354L, 3354L, 1201L}, longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 643.974F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-2501.8F);
      doubleArray0[5] = (double) 3354L;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1708.0355911, (-1));
      assertArrayEquals(new double[] {643.9739990234375, 0.0, 0.0, 0.0, (-2501.800048828125), 3354.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2433.0F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, floatArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)120);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)120}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertNotNull(byteArray2);
      
      ArrayUtils.swap(floatArray0, (int) (byte) (-1), (-5458));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'J';
      charArray0[2] = 'n';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'P', 'J', 'n'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'P', 'J', 'n'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      Float float0 = new Float((float) 3);
      assertEquals(3.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(43.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(43.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(13.295317864415491);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(13.295318F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertArrayEquals(new int[] {3, 3}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-2015));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3, (-2015), (double) (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[14];
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 33, 33, (-1678));
      assertEquals(14, booleanArray0.length);
      
      Character character0 = Character.valueOf('n');
      assertEquals('n', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'n';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-705L));
      assertArrayEquals(new long[] {110L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)3;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(958);
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte) (-95), (byte)8, (byte)127, (byte)3, (byte)32}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      char[] charArray1 = ArrayUtils.insert(33, charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("-`oe@pa(dwZMx2#", long0);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      
      longArray0[0] = long1;
      long long2 = 0L;
      Long long3 = new Long(0L);
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertEquals(0L, (long)long3);
      assertNotNull(long3);
      
      longArray0[1] = long3;
      Long long4 = Long.valueOf(long2);
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertEquals(0L, (long)long4);
      assertNotNull(long4);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-1), 958);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)16;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = ':';
      charArray0[2] = 'w';
      charArray0[3] = '@';
      charArray0[4] = 'w';
      charArray0[5] = 'w';
      byte[] byteArray2 = new byte[4];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)30;
      byteArray2[1] = (byte)16;
      byteArray2[2] = (byte)8;
      byte[] byteArray3 = ArrayUtils.insert((int) (byte)16, byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte)30, (byte)16, (byte)8, (byte)0}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(16, byteArray0.length);
      assertEquals(4, byteArray2.length);
      assertEquals(20, byteArray3.length);
      assertNotNull(byteArray3);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)8;
      longArray0[1] = (long) 'w';
      longArray0[2] = (long) 'w';
      longArray0[3] = (long) (byte)8;
      longArray0[4] = (long) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 8L, 70);
      assertArrayEquals(new long[] {8L, 119L, 119L, 8L, 0L}, longArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(5, longArray0.length);
      assertNotNull(bitSet0);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertArrayEquals(new long[] {8L, 119L, 119L, 8L, 0L}, longArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(5, longArray0.length);
      assertNull(object0);
      
      ArrayUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)16;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = ':';
      charArray0[2] = 'w';
      charArray0[3] = '@';
      charArray0[4] = 'w';
      charArray0[5] = 'w';
      byte[] byteArray2 = new byte[4];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)30;
      byteArray2[1] = (byte)16;
      byteArray2[2] = (byte)8;
      byteArray2[3] = (byte)16;
      byte[] byteArray3 = ArrayUtils.insert((int) (byte)16, byteArray0, byteArray2);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)30, (byte)16, (byte)8, (byte)16}, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(20, byteArray3.length);
      assertEquals(16, byteArray0.length);
      assertEquals(4, byteArray2.length);
      assertNotNull(byteArray3);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)8;
      longArray0[1] = (long) 'w';
      longArray0[2] = (long) 'w';
      longArray0[3] = (-1L);
      longArray0[4] = (long) (byte)16;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 8L, 70);
      assertArrayEquals(new long[] {8L, 119L, 119L, (-1L), 16L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(5, longArray0.length);
      assertNotNull(bitSet0);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertArrayEquals(new long[] {8L, 119L, 119L, (-1L), 16L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(5, longArray0.length);
      assertNull(object0);
      
      ArrayUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Character character0 = new Character('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('s');
      assertTrue(character1.equals((Object)character0));
      assertEquals('s', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[26];
      characterArray0[0] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[6] = character0;
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) (char)character0;
      floatArray0[2] = (float) (char)character0;
      floatArray0[3] = (float) (char)character0;
      floatArray0[4] = (float) (char)character0;
      floatArray0[5] = (float) (char)character0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (char)character0;
      intArray0[1] = (int) 's';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 115, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Float float0 = new Float((-2217.448213547));
      assertEquals((-2217.4482F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-2916.6628F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2916.6628F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-2217.448213547));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-2217.4482F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-2217.448213547));
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((-2217.4482F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2317);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-10));
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean1);
      
      Boolean[] booleanArray2 = new Boolean[7];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray2[0] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray2[1] = boolean3;
      booleanArray2[2] = (Boolean) true;
      booleanArray2[3] = (Boolean) false;
      booleanArray2[4] = (Boolean) false;
      booleanArray2[5] = (Boolean) true;
      booleanArray2[6] = (Boolean) true;
      Comparator<Boolean> comparator0 = (Comparator<Boolean>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1034), (-1034), 1).when(comparator0).compare(anyBoolean() , anyBoolean());
      boolean boolean4 = ArrayUtils.isSorted(booleanArray2, comparator0);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertEquals(7, booleanArray2.length);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-1124));
      assertEquals((-1124), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2165));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-2165), (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1323);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(1323, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(962);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(962, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-692));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertEquals((-692), (int)integer5);
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertEquals(0, (int)integer6);
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(962);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertEquals(962, (int)integer7);
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = ArrayUtils.get(integerArray0, (int) integerArray0[7]);
      assertEquals(8, integerArray0.length);
      assertNull(integer8);
      
      Float float0 = new Float((float) integerArray0[7]);
      assertEquals(8, integerArray0.length);
      assertEquals(962.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) float0);
      assertEquals(8, integerArray0.length);
      assertEquals((-1), int0);
      
      Float float1 = new Float(Float.NaN);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(Float.NaN, (float)float1, 0.01F);
      assertNotNull(float1);
      
      // Undeclared exception!
      try { 
        ByteBuffer.allocate((int) integerArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1.0F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.5);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, (-2308), (-2308), (-2308));
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1.0F);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Float float3 = new Float(3037.055084753295);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(3037.0552F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float((-1376.2));
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((-1376.2F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {1.5F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertNotNull(floatArray2);
      
      ArrayUtils.shift(floatArray2, (-2793), 1542, (-1421));
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {1.5F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-13));
      assertEquals((byte) (-13), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) floatArray0, (Object) byte0, (-2308));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-2630L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-861.025);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.1;
      doubleArray0[4] = (-2799.1532526446254);
      doubleArray0[5] = (-1.0);
      doubleArray0[4] = (-1788.50523173598);
      doubleArray0[7] = 2132.385218924532;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (-1));
      assertArrayEquals(new double[] {(-861.025), 1.0, 0.1, 0.0, (-1788.50523173598), (-1.0), 0.0, 2132.385218924532}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.indexOf((long[]) null, (long) 1, 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte0);
      assertNotNull(byte0);
      
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      assertEquals(48, mutableInt0.intValue());
      assertEquals(48L, mutableInt0.longValue());
      assertEquals("48", mutableInt0.toString());
      assertEquals((short)48, mutableInt0.shortValue());
      assertEquals(48, (int)mutableInt0.getValue());
      assertEquals(48, (int)mutableInt0.toInteger());
      assertEquals(48.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)48, mutableInt0.byteValue());
      assertEquals(48.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      mutableInt0.setValue((Number) byte0);
      assertEquals(48, mutableInt0.intValue());
      assertEquals(48L, mutableInt0.longValue());
      assertEquals("48", mutableInt0.toString());
      assertEquals((short)48, mutableInt0.shortValue());
      assertEquals(48, (int)mutableInt0.getValue());
      assertEquals(48, (int)mutableInt0.toInteger());
      assertEquals(48.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)48, mutableInt0.byteValue());
      assertEquals(48.0, mutableInt0.doubleValue(), 0.01);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(48, mutableInt0.intValue());
      assertEquals(48L, mutableInt0.longValue());
      assertEquals("48", mutableInt0.toString());
      assertEquals((short)48, mutableInt0.shortValue());
      assertEquals(48, (int)mutableInt0.getValue());
      assertEquals(48, (int)mutableInt0.toInteger());
      assertEquals(48.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)48, mutableInt0.byteValue());
      assertEquals(48.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2, (int)integer1);
      assertNotNull(integer1);
      
      int int0 = mutableInt0.getAndAdd(3038);
      assertEquals(3086, mutableInt0.intValue());
      assertEquals(3086L, mutableInt0.longValue());
      assertEquals("3086", mutableInt0.toString());
      assertEquals(3086.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3086.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)3086, mutableInt0.shortValue());
      assertEquals((byte)14, mutableInt0.byteValue());
      assertEquals(3086, (int)mutableInt0.getValue());
      assertEquals(3086, (int)mutableInt0.toInteger());
      assertEquals(48, int0);
      
      ArrayUtils.shift((boolean[]) null, 5382);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte) (-28);
      ArrayUtils.shift(byteArray0, 1792, 321, 966);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-28), (byte) (-28), (byte)5, (byte)48, (byte)48, (byte) (-28), (byte) (-28)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-28);
      shortArray0[1] = (short) (byte) (-28);
      shortArray0[2] = (short)59;
      shortArray0[3] = (short) (byte) (-28);
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-303), (short) (-28));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -303, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)6;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      MutableInt mutableInt0 = new MutableInt((int) (byte)6);
      assertEquals(6.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(6, (int)mutableInt0.getValue());
      assertEquals((byte)6, mutableInt0.byteValue());
      assertEquals(6, (int)mutableInt0.toInteger());
      assertEquals(6, mutableInt0.intValue());
      assertEquals((short)6, mutableInt0.shortValue());
      assertEquals("6", mutableInt0.toString());
      assertEquals(6.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(6L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.addAndGet((Number) (byte)6);
      assertEquals(12.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(12L, mutableInt0.longValue());
      assertEquals(12, (int)mutableInt0.getValue());
      assertEquals((byte)12, mutableInt0.byteValue());
      assertEquals(12.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(12, (int)mutableInt0.toInteger());
      assertEquals("12", mutableInt0.toString());
      assertEquals(12, mutableInt0.intValue());
      assertEquals((short)12, mutableInt0.shortValue());
      assertEquals(12, int0);
      
      int int1 = mutableInt0.getAndAdd((-191));
      assertTrue(int1 == int0);
      assertEquals((-179), (int)mutableInt0.toInteger());
      assertEquals((-179L), mutableInt0.longValue());
      assertEquals((-179), (int)mutableInt0.getValue());
      assertEquals((byte)77, mutableInt0.byteValue());
      assertEquals((-179), mutableInt0.intValue());
      assertEquals((short) (-179), mutableInt0.shortValue());
      assertEquals("-179", mutableInt0.toString());
      assertEquals((-179.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-179.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals(12, int1);
      
      ArrayUtils.shift((boolean[]) null, 889);
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)6;
      ArrayUtils.shift(byteArray2, (int) (byte) (-28), (int) (byte) (-28), 889);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)6}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(1, byteArray2.length);
      
      int int2 = ArrayUtils.indexOf((float[]) null, (float) (byte)6, (-1200));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals(711, mutableInt0.intValue());
      assertEquals(711L, mutableInt0.longValue());
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte)15;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-96), (byte) (-96), (byte)41, (byte) (-93), (byte)15, (byte)1, (byte) (-96), (byte)15}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-96), (byte) (-96), (byte)41, (byte) (-93), (byte)15, (byte)1, (byte) (-96), (byte)15}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray1);
      
      Byte[] byteArray2 = new Byte[0];
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)118);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertNotNull(byteArray3);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-96);
      shortArray0[1] = (short) (byte)15;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte) (-96);
      shortArray0[4] = (short) (byte)1;
      shortArray0[5] = (short) (byte)15;
      shortArray0[6] = (short)242;
      shortArray0[7] = (short) (byte) (-96);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-96), (short)15, (short)1, (short) (-96), (short)1, (short)15, (short)242, (short) (-96)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-87);
      shortArray0[1] = (short) (byte) (-87);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-87), (short) (-87)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-87);
      intArray0[2] = (int) (short) (-87);
      intArray0[3] = (int) (byte)43;
      intArray0[4] = (-221);
      intArray0[5] = (-1);
      intArray0[6] = 2;
      ArrayUtils.shift(intArray0, 2145922749, (-1399), (-116));
      assertArrayEquals(new int[] {(-87), 0, (-87), 43, (-221), (-1), 2, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean1);
      
      MutableInt mutableInt0 = new MutableInt((Number) 2);
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((Number) (-1));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals("-1", mutableInt1.toString());
      assertEquals((-1L), mutableInt1.longValue());
      assertEquals((-1), mutableInt1.intValue());
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertNotNull(mutableInt1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-409.0F);
      floatArray0[1] = (float) (byte) (-87);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (-132.56F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 55.0F, (int) (byte)43);
      assertArrayEquals(new float[] {(-409.0F), (-87.0F), (-1.0F), (-1.0F), (-132.56F)}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(5, floatArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = 5176.038;
      doubleArray0[1] = 104.0;
      doubleArray0[2] = (double) 51;
      doubleArray0[4] = (double) 4;
      ArrayUtils.shift(doubleArray0, 0, 51, Integer.MAX_VALUE);
      assertEquals(17, doubleArray0.length);
      
      ArrayUtils.shift(intArray1, 4, 34, (-38));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)127;
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)74;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)47);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)47, (short)127, (short)7, (short)74}, shortArray1);
      assertArrayEquals(new short[] {(short)127, (short)7, (short)74}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1591L;
      longArray0[3] = 0L;
      longArray0[4] = 1591L;
      longArray0[5] = 1591L;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1591L;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Long long0 = new Long((-900L));
      assertEquals((-900L), (long)long0);
      assertNotNull(long0);
      
      ArrayUtils.shift((short[]) null, 1, (-1284), 2089380780);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      Character character1 = new Character('w');
      assertFalse(character1.equals((Object)character0));
      assertEquals('w', (char)character1);
      assertNotNull(character1);
      
      characterArray0[3] = character1;
      Character character2 = Character.valueOf('Z');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('Z', (char)character2);
      assertNotNull(character2);
      
      characterArray0[4] = character2;
      characterArray0[5] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertArrayEquals(new char[] {'A', 'A', 'A', 'w', 'Z', 'A'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[6] = false;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(10, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray2);
      
      ArrayUtils.swap(booleanArray2, 1679, (int) character0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false}, booleanArray1));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(10, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      
      ArrayUtils.shift(charArray0, 1679, (int) character0, 1990);
      assertArrayEquals(new char[] {'A', 'A', 'A', 'w', 'Z', 'A'}, charArray0);
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'A', 'A', 'A', 'w', 'Z', 'A'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1679;
      longArray0[1] = (long) (char)character1;
      ArrayUtils.shift(longArray0, (-1602));
      assertArrayEquals(new long[] {1679L, 119L}, longArray0);
      assertEquals(2, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) character0);
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals("{0, 1, 2, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(6, characterArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      Character[] characterArray0 = new Character[3];
      char char0 = 'y';
      Character character0 = Character.valueOf('y');
      assertEquals('y', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertEquals('y', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('y');
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertEquals('y', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '(');
      assertArrayEquals(new char[] {'y', 'y', 'y'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(10, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.swap(booleanArray1, (int) char0, 2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(10, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      ArrayUtils.shift(charArray0, (-1), 2229, 1679);
      assertArrayEquals(new char[] {'y', 'y', 'y'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'y', 'y', 'y'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift(longArray0, 2);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)31;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-22));
      assertArrayEquals(new byte[] {(byte) (-69), (byte)92, (byte)9, (byte)0, (byte)121, (byte) (-1), (byte) (-56), (byte) (-1), (byte)31}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(9, byteArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = 707L;
      longArray0[2] = (-873L);
      longArray0[3] = (-3L);
      longArray0[4] = (-597L);
      longArray0[5] = (-3445L);
      longArray0[6] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 707L, (-873L), (-3L), (-597L), (-3445L), 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 707L, (-873L), (-3L), (-597L), (-3445L), 0L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1590.337);
      doubleArray0[1] = (-2733.16542);
      doubleArray0[2] = (double) 707L;
      doubleArray0[3] = (double) (-873L);
      doubleArray0[4] = (double) (-873L);
      doubleArray0[5] = 707.0;
      doubleArray0[6] = (double) (-597L);
      doubleArray0[7] = (double) (-3L);
      doubleArray0[8] = (double) 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1356.9));
      assertArrayEquals(new double[] {(-1590.337), (-2733.16542), 707.0, (-873.0), (-873.0), 707.0, (-597.0), (-3.0), 0.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(9, doubleArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {')'}, charArray0);
      assertArrayEquals(new char[] {')'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      
      Long[] longArray2 = new Long[1];
      longArray2[0] = (Long) 0L;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertArrayEquals(new long[] {0L}, longArray3);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertEquals(1, longArray2.length);
      assertEquals(1, longArray3.length);
      assertNotNull(longArray3);
      
      ArrayUtils.reverse(longArray0);
      assertSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray3);
      assertArrayEquals(new long[] {0L, (-3445L), (-597L), (-3L), (-873L), 707L, 0L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray3));
      assertEquals(7, longArray0.length);
      
      ArrayUtils.reverse((Object[]) longArray2);
      assertEquals(1, longArray2.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) ')';
      intArray0[1] = (int) ')';
      intArray0[2] = (int) ')';
      intArray0[3] = (int) ')';
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) ')';
      intArray1[1] = (int) ')';
      intArray1[2] = (int) ')';
      intArray1[3] = (int) ')';
      intArray1[4] = (int) ')';
      intArray1[5] = (int) ')';
      intArray1[6] = (int) ')';
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertArrayEquals(new int[] {41, 41, 41, 41, 41, 41, 41}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {41, 41, 41, 41}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(7, intArray1.length);
      assertEquals(0, intArray2.length);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-32), (-18));
      assertArrayEquals(new byte[] {(byte)2, (byte) (-32), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-32);
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) (-32.0);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 1907.55);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-32.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, true, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(10, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.shift(byteArray0, (-2091));
      assertArrayEquals(new byte[] {(byte)2, (byte) (-32), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-32);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-32), (-18));
      assertArrayEquals(new byte[] {(byte)2, (byte) (-32), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-32);
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) (-32.0);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 1907.55);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-32.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, true, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(10, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.shift(byteArray0, (-2091));
      assertArrayEquals(new byte[] {(byte)2, (byte) (-32), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'X';
      charArray0[2] = '@';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'F', 'X', '@', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertNotNull(characterArray0);
      
      ArrayUtils.swap((short[]) null, 436, 436, 896);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 896);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)5;
      ArrayUtils.shift(byteArray0, (-4060), (int) (byte) (-28), (-2993));
      assertArrayEquals(new byte[] {(byte)5, (byte)5, (byte)5, (byte)5, (byte) (-28), (byte)5}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("711", mutableInt0.toString());
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711, mutableInt0.intValue());
      assertEquals(711L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("711", mutableInt0.toString());
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711, mutableInt0.intValue());
      assertEquals(711L, mutableInt0.longValue());
      assertEquals(711, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(7);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(7, (int)integer1);
      assertNotNull(integer1);
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals("712", mutableInt0.toString());
      assertEquals((byte) (-56), mutableInt0.byteValue());
      assertEquals(712.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(712, (int)mutableInt0.getValue());
      assertEquals(712, (int)mutableInt0.toInteger());
      assertEquals((short)712, mutableInt0.shortValue());
      assertEquals(712L, mutableInt0.longValue());
      assertEquals(712.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(712, mutableInt0.intValue());
      assertEquals(711, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 7;
      doubleArray0[1] = (double) 711;
      mutableInt0.subtract((Number) 711.0);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1, mutableInt0.shortValue());
      
      doubleArray0[2] = (double) (int)integer1;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 711.0, 7.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 711;
      intArray0[2] = 711;
      intArray0[3] = (int) integer1;
      intArray0[4] = 711;
      intArray0[5] = 711;
      intArray0[7] = 711;
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {0, 711, 711, 7, 711, 711, 0, 711}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, intArray0.length);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = ArrayUtils.contains(charArray0, ')');
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, charArray0.length);
      assertFalse(boolean2);
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ')';
      charArray1[1] = ')';
      charArray1[2] = ')';
      charArray1[3] = ')';
      charArray1[4] = ')';
      charArray1[5] = ')';
      charArray1[6] = ')';
      charArray1[7] = ')';
      char[] charArray2 = ArrayUtils.remove(charArray1, 7);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {')', ')', ')', ')', ')', ')', ')', ')'}, charArray1);
      assertArrayEquals(new char[] {')', ')', ')', ')', ')', ')', ')'}, charArray2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(8, charArray1.length);
      assertEquals(7, charArray2.length);
      assertNotNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1161L));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1161L);
      doubleArray0[1] = (double) (-1161L);
      doubleArray0[2] = (double) (-1161L);
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-1161.0), (-1161.0), (-1161.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float float0 = new Float((-1161.0));
      assertEquals((-1161.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1161.0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1161.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(98.0F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(98.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = Float.valueOf(23.15F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(23.15F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float(1247.6092027696);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals(1247.6093F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      Float float5 = new Float(0.0);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      Float float6 = Float.valueOf(104.0F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertEquals(104.0F, (float)float6, 0.01F);
      assertNotNull(float6);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float3;
      floatArray0[1] = float5;
      floatArray0[2] = float5;
      floatArray0[3] = float5;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {23.15F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray1);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0, 2344, (-1161.0));
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new double[] {(-1161.0), (-1161.0), (-1161.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet1);
      
      Object object0 = ArrayUtils.get((Object[]) floatArray0, (-1), (Object) null);
      assertEquals(4, floatArray0.length);
      assertNull(object0);
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new double[] {(-1161.0), (-1161.0), (-1161.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(5, doubleArray0.length);
      assertNull(object1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2131;
      shortArray0[1] = (short)2131;
      ArrayUtils.swap(byteArray0, (int) (short)0, (int) (short)0, 15);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)2131;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (short)2131);
      assertArrayEquals(new float[] {2131.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)2131;
      intArray0[1] = 5;
      intArray0[2] = (int) (byte)43;
      intArray0[3] = 15;
      intArray0[4] = 15;
      ArrayUtils.shift(intArray0, (int) (short)2131);
      assertArrayEquals(new int[] {15, 2131, 5, 43, 15}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, object1);
      assertNotSame(object1, object0);
      assertFalse(boolean1 == boolean0);
      assertFalse(object1.equals((Object)object0));
      assertEquals(6, objectArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, (-2146677334), (-937), 512);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'a';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'w', 'a'}, charArray0);
      assertArrayEquals(new char[] {'w', 'a'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      
      short[] shortArray0 = new short[16];
      shortArray0[0] = (short)3048;
      shortArray0[1] = (short)6;
      shortArray0[2] = (short)6;
      shortArray0[3] = (short) (-3858);
      shortArray0[4] = (short)100;
      shortArray0[5] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short)0, (int) (short)3048, (-2650));
      assertEquals(16, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, (-2146677334), (-937), 512);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'a';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'w', 'a'}, charArray0);
      assertArrayEquals(new char[] {'w', 'a'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3048;
      shortArray0[1] = (short)6;
      shortArray0[2] = (short)3735;
      shortArray0[3] = (short) (-3858);
      shortArray0[4] = (short)100;
      shortArray0[5] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short) (-3858), (int) (short)3048, (-2650));
      assertArrayEquals(new short[] {(short)100, (short) (-1), (short)3048, (short)6, (short)3735, (short) (-3858)}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[0];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, (-2146677334), (-937), 512);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'a';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'w', 'a'}, charArray0);
      assertArrayEquals(new char[] {'w', 'a'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3048;
      shortArray0[1] = (short)6;
      shortArray0[2] = (short)3048;
      shortArray0[3] = (short) (-3858);
      shortArray0[4] = (short)100;
      shortArray0[5] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short) (-3858), (int) (short)3048, (-2650));
      assertArrayEquals(new short[] {(short)100, (short) (-1), (short)3048, (short)6, (short)3048, (short) (-3858)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'w', 'a', 'w', 'a'}, charArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'w', 'a'}, charArray0);
      assertArrayEquals(new char[] {'w', 'a'}, charArray1);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (int) (short)100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3353.89412554);
      doubleArray0[2] = 1.0;
      doubleArray0[2] = 12.31;
      doubleArray0[3] = (-1414.5095293760658);
      doubleArray0[4] = (-1503.0);
      doubleArray0[5] = (-1414.5095293760658);
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = 'U';
      charArray0[2] = '\'';
      charArray0[3] = '^';
      charArray0[4] = 'W';
      charArray0[5] = '}';
      charArray0[6] = ';';
      ArrayUtils.shift(charArray0, Integer.MAX_VALUE, 51, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'a', 'U', '\'', '^', 'W', '}', ';'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) '\'';
      objectArray0[1] = (Object) 'U';
      objectArray0[2] = (Object) 'W';
      objectArray0[3] = (Object) (-1414.5095293760658);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-593);
      shortArray0[1] = (short)1173;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short) (-593));
      assertArrayEquals(new short[] {(short)1173, (short)1, (short) (-1), (short) (-593)}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1757.9735));
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3983;
      shortArray0[1] = (short)2024;
      ArrayUtils.shift(shortArray0, (int) (short)2024);
      assertArrayEquals(new short[] {(short)3983, (short)2024}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'H';
      charArray0[2] = 'G';
      charArray0[3] = '~';
      charArray0[4] = '-';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'f', 'H', 'G', '~', '-'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      ArrayUtils.reverse(byteArray0, 472, 1881);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-966);
      floatArray0[2] = (float) 1881;
      floatArray0[3] = (float) (-966);
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (byte) (-1);
      ArrayUtils.shift(intArray0, 5);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, ',', 472);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (-1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray1.length);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray1);
      
      ArrayUtils.swap(floatArray0, (-571), (-1), 1681);
      assertArrayEquals(new float[] {(-966.0F), 0.0F, 1881.0F, (-966.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2131;
      shortArray0[1] = (short)2131;
      shortArray0[2] = (short) (byte)43;
      shortArray0[3] = (short) (byte)43;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)10);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2131, (short)2131, (short)43, (short)43}, shortArray0);
      assertArrayEquals(new short[] {(short)2131, (short)2131, (short)43, (short)43}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)43;
      intArray0[1] = (int) (short)2131;
      intArray0[2] = (-2146990312);
      intArray0[3] = (int) (short)2131;
      intArray0[4] = (int) (short)10;
      intArray0[5] = (int) (byte)43;
      intArray0[6] = (int) (short)43;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)43;
      intArray1[1] = (int) (byte)43;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertArrayEquals(new int[] {43, 43}, intArray1);
      assertArrayEquals(new int[] {2131, (-2146990312), 2131, 10, 43}, intArray2);
      assertArrayEquals(new int[] {43, 2131, (-2146990312), 2131, 10, 43, 43}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray1.length);
      assertEquals(5, intArray2.length);
      assertEquals(7, intArray0.length);
      assertNotNull(intArray2);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-2146990312), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146990312, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'X';
      charArray0[2] = '@';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'X', '@', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertNotNull(characterArray0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-1142), 2406);
      assertNull(intArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 2688, (-1142), (double) 2406);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((long[]) null, 1787, (-1), 436);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int1 = 91;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 91, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1161L));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1161L);
      doubleArray0[1] = (double) (-1161L);
      doubleArray0[2] = (double) (-1161L);
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-1161.0), (-1161.0), (-1161.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float float0 = new Float((-1161.0));
      assertEquals((-1161.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1161.0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1161.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((float) (byte)0);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = Float.valueOf(23.15F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(23.15F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float(1247.6092027696);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals(1247.6093F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      Float float5 = new Float(0.0);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      Float float6 = Float.valueOf(104.0F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertEquals(104.0F, (float)float6, 0.01F);
      assertNotNull(float6);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float3;
      floatArray0[1] = float5;
      floatArray0[2] = float5;
      floatArray0[3] = float5;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {23.15F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray1);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      char char0 = 'A';
      Character character0 = new Character('A');
      assertTrue(character0.equals((Object)char0));
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char char1 = 'F';
      int int0 = (-51);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'F';
      intArray0[2] = (-51);
      intArray0[3] = (-51);
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("h.'1)");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      int int1 = 1;
      int int2 = 1072;
      ArrayUtils.shift(booleanArray1, 1, 70, 1072);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      Character character1 = Character.valueOf('A');
      assertFalse(character1.equals((Object)char1));
      assertTrue(character1.equals((Object)character0));
      assertEquals('A', (char)character1);
      assertNotNull(character1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      char char0 = 'A';
      Character character0 = new Character('A');
      assertTrue(character0.equals((Object)char0));
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char char1 = 'F';
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'F';
      intArray0[2] = (-51);
      intArray0[3] = (-51);
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("h.'1)");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      int int0 = 1;
      ArrayUtils.shift(booleanArray1, 1, 70, 1072);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      Character character1 = Character.valueOf('A');
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char1));
      assertEquals('A', (char)character1);
      assertNotNull(character1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)67;
      ArrayUtils.shift((boolean[]) null, (int) (byte)84, (-1678), 33);
      Character character0 = Character.valueOf('n');
      assertEquals('n', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1474);
      shortArray0[1] = (short)2116;
      shortArray0[2] = (short)1968;
      shortArray0[3] = (short) (-1474);
      shortArray0[4] = (short)4;
      ArrayUtils.swap(shortArray0, (-1285), (-2457), 990);
      assertArrayEquals(new short[] {(short) (-1474), (short)2116, (short)1968, (short) (-1474), (short)4}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, 11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float((-2446.506520974484));
      assertEquals((-2446.5066F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals((-2446.5066F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-3538.947F));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-3538.947F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = Float.valueOf(4037.8215F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(4037.8215F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(1215.0F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals(1215.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(4037.8215F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertEquals(4037.8215F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = Float.valueOf((float) floatArray0[4]);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(1215.0F, (float)float6, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-2446.5066F), (-2446.5066F), (-3538.947F), 4037.8215F, 1215.0F, 4037.8215F, 1215.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
      
      Character[] characterArray0 = new Character[2];
      char char0 = '6';
      Character character0 = Character.valueOf('6');
      assertEquals('6', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertEquals('6', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.addAll(characterArray0, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(2, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals(711, mutableInt0.intValue());
      assertEquals(711L, mutableInt0.longValue());
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(711, mutableInt0.intValue());
      assertEquals(711L, mutableInt0.longValue());
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals(711, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(7);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(7, (int)integer1);
      assertNotNull(integer1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 711;
      floatArray0[2] = (float) 7;
      floatArray0[3] = (float) 711;
      floatArray0[4] = (float) 7;
      floatArray0[5] = (-70.49477F);
      floatArray0[6] = (float) 7;
      floatArray0[7] = (float) 2636;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-770.9F), (-2358));
      assertArrayEquals(new float[] {711.0F, 0.0F, 7.0F, 711.0F, 7.0F, (-70.49477F), 7.0F, 2636.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)91, object0);
      assertNotNull(object0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)91;
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[7] = 'Z';
      charArray0[4] = 'Z';
      charArray0[5] = 'Z';
      charArray0[6] = 'Z';
      charArray0[7] = 'Z';
      charArray0[8] = 'Z';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Z');
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', '\u0000', 'Z', 'Z', 'Z', 'Z', 'Z'}, charArray0);
      assertEquals(8, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(9, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 4, 5, 6, 7, 8}", bitSet0.toString());
      assertEquals(9, charArray0.length);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1638.0F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.removeAll(floatArray1, intArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(0, intArray0.length);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)91);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = 5176.038;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 0, 0);
      assertEquals("{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}", bitSet0.toString());
      assertEquals(17, bitSet0.length());
      assertEquals(16, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(17, doubleArray0.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0L;
      doubleArray1[6] = 5176.038;
      doubleArray1[7] = (double) 0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5176.038, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(8, doubleArray1.length);
      assertEquals(17, doubleArray0.length);
      assertFalse(boolean0);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = (-1314);
      Short short0 = new Short((short) (-29));
      assertEquals((short) (-29), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)8);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)8, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short)641);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)641, (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-29));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertEquals((short) (-29), (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short)2);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertEquals((short)2, (short)short4);
      assertNotNull(short4);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-5888);
      doubleArray0[1] = (double) (short)8;
      doubleArray0[2] = (-304.589);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3066), (-3066));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-5888.0), 8.0, (-304.589)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = (double) (short) (-29);
      doubleArray2[2] = (double) (short)641;
      doubleArray2[3] = (double) (short)641;
      doubleArray2[4] = (double) (-5888);
      doubleArray2[5] = (-2275.8673);
      doubleArray2[6] = (double) (short)641;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-5888.0), 8.0, (-304.589)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-29.0), 641.0, 641.0, (-5888.0), (-2275.8673), 641.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(boolean0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((float) (short) (-29));
      assertEquals((-29.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (-1314));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1314.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-29.0F), (-1314.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = new BitSet((short)8);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte) (-64);
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-31), (byte)64, (byte)0, (byte)106, (byte) (-115), (byte) (-18), (byte)66, (byte) (-64)}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.5);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, (-2308), (-2308), (-2308));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (-2308);
      intArray0[2] = (-2308);
      intArray0[3] = (-2308);
      boolean boolean0 = ArrayUtils.contains(intArray0, 1968);
      assertArrayEquals(new int[] {0, (-2308), (-2308), (-2308), 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Object[] objectArray0 = new Object[18];
      Object object0 = ArrayUtils.get((Object[]) floatArray0, 1379);
      assertEquals(1, floatArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) float1;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(18, objectArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, floatArray1.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 824;
      intArray0[1] = 824;
      intArray0[2] = 824;
      intArray0[3] = 824;
      intArray0[4] = 824;
      intArray0[5] = 824;
      intArray0[6] = 824;
      ArrayUtils.shift(intArray0, 474, 824, 824);
      assertArrayEquals(new int[] {824, 824, 824, 824, 824, 824, 824}, intArray0);
      assertEquals(7, intArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short)1006;
      shortArray0[2] = (short)147;
      shortArray0[3] = (short)147;
      shortArray0[4] = (short) (-1474);
      shortArray0[5] = (short) (-1474);
      shortArray0[6] = (short)52;
      shortArray0[7] = (short) (-1962);
      shortArray0[8] = (short)52;
      ArrayUtils.swap(shortArray0, 109, (-2145121868), (int) (short)4);
      assertArrayEquals(new short[] {(short)4, (short)1006, (short)147, (short)147, (short) (-1474), (short) (-1474), (short)52, (short) (-1962), (short)52}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      int[] intArray1 = ArrayUtils.remove(intArray0, (int) (short)4);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {824, 824, 824, 824, 824, 824, 824}, intArray0);
      assertArrayEquals(new int[] {824, 824, 824, 824, 824, 824}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      char char0 = 'A';
      Character character0 = new Character('A');
      assertTrue(character0.equals((Object)char0));
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char char1 = 'F';
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'F';
      intArray0[2] = (-51);
      intArray0[3] = (-51);
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("h.'1)");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      int int0 = 1;
      ArrayUtils.shift(booleanArray1, 1, 70, 1072);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      Character character1 = Character.valueOf('A');
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char1));
      assertEquals('A', (char)character1);
      assertNotNull(character1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      boolean boolean4 = true;
      Boolean boolean5 = Boolean.valueOf(true);
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5);
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = new Boolean("");
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6);
      assertNotNull(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean1));
      assertTrue(boolean7);
      assertNotNull(boolean7);
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = new Boolean(false);
      assertTrue(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean5));
      assertFalse(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean3));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean6));
      assertFalse(boolean8);
      assertNotNull(boolean8);
      
      booleanArray0[7] = boolean8;
      Boolean boolean9 = new Boolean(boolean4);
      assertFalse(boolean9.equals((Object)boolean3));
      assertFalse(boolean9.equals((Object)boolean2));
      assertFalse(boolean9.equals((Object)boolean6));
      assertTrue(boolean9.equals((Object)boolean7));
      assertFalse(boolean9.equals((Object)boolean0));
      assertFalse(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean1));
      assertTrue(boolean9.equals((Object)boolean5));
      assertTrue(boolean9.equals((Object)boolean4));
      assertTrue(boolean9);
      assertNotNull(boolean9);
      
      booleanArray0[8] = boolean9;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, true, false, true}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'y';
      charArray0[5] = 'L';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'L');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'J', 'J', 'm', 'm', 'y', 'L'}, charArray0);
      assertArrayEquals(new char[] {'J', 'J', 'm', 'm', 'y'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[4];
      Double double0 = new Double((byte) (-96));
      assertEquals((-96.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1018.511385878));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1018.511385878), (double)double1, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-96.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) 'J');
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, int0);
      
      ArrayUtils.shift(doubleArray1, 1205, (-1717), (int) (byte)127);
      assertArrayEquals(new double[] {(-96.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      MutableInt[] mutableIntArray1 = ArrayUtils.clone(mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertEquals(0, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertNotNull(mutableIntArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertFalse(mutableIntArray0.equals((Object)mutableIntArray1));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertEquals(0, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.reverse(doubleArray1);
      assertArrayEquals(new double[] {(-96.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'm';
      charArray0[3] = 'Y';
      charArray0[4] = 'y';
      charArray0[5] = 'L';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'L');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'J', 'J', 'm', 'Y', 'y', 'L'}, charArray0);
      assertArrayEquals(new char[] {'J', 'J', 'm', 'Y', 'y'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[4];
      Double double0 = new Double((byte) (-96));
      assertEquals((-96.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1018.511385878));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1018.511385878), (double)double1, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-96.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, 53);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, int0);
      
      ArrayUtils.shift(doubleArray1, 1205, (-1717), (int) (byte)127);
      assertArrayEquals(new double[] {(-96.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      MutableInt[] mutableIntArray1 = ArrayUtils.clone(mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertEquals(0, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertNotNull(mutableIntArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertFalse(mutableIntArray0.equals((Object)mutableIntArray1));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertEquals(0, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.reverse(doubleArray1);
      assertArrayEquals(new double[] {(-96.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 0;
      longArray0[4] = 1L;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), 0L, 1L, (-1L), 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(1L);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      ArrayUtils.shift(floatArray1, (-99), (int) (byte)127, 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray2);
      
      ArrayUtils.reverse(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      
      Float float0 = new Float((double) doubleArray0[0]);
      assertEquals(3, doubleArray0.length);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) doubleArray0, (Object) float0, (-1));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 2406);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2406, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('~');
      assertEquals('~', (char)character0);
      assertNotNull(character0);
      
      characterArray0[1] = character0;
      Character character1 = new Character('{');
      assertFalse(character1.equals((Object)character0));
      assertEquals('{', (char)character1);
      assertNotNull(character1);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.5);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, (-2308), (-2308), (-2308));
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[7] = true;
      ArrayUtils.shift(booleanArray0, (-2295), 2991, (-2308));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      Character character0 = Character.valueOf('O');
      assertEquals('O', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.5);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, (-2308), (-2308), (-2308));
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.shift(booleanArray0, (-2295), 2991, (-2308));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      Character character0 = Character.valueOf('O');
      assertEquals('O', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 603.5548702090445;
      doubleArray0[1] = 1421.9495;
      doubleArray0[2] = 1421.9495;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1421.9495);
      assertArrayEquals(new double[] {603.5548702090445, 1421.9495, 1421.9495}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-966.0F);
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)102);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)102, (byte)byte3);
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-87));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte) (-87), (byte)byte4);
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)7);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertEquals((byte)7, (byte)byte5);
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte)102);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertEquals((byte)102, (byte)byte6);
      assertNotNull(byte6);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte7 = new Byte((byte)87);
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertEquals((byte)87, (byte)byte7);
      assertNotNull(byte7);
      
      byteArray0[0] = byte7;
      byteArray0[1] = byte1;
      byteArray0[2] = byte5;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) 2, byte3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte3.equals((Object)byte4));
      assertFalse(byte3.equals((Object)byte7));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte6));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte5));
      assertEquals(4, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray1);
      
      MutableInt mutableInt0 = new MutableInt((Number) byte2);
      assertFalse(byte2.equals((Object)byte4));
      assertFalse(byte2.equals((Object)byte5));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte6));
      assertFalse(byte2.equals((Object)byte3));
      assertFalse(byte2.equals((Object)byte7));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals("2", mutableInt0.toString());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.setValue((Number) 603.5548702090445);
      assertFalse(byte2.equals((Object)byte4));
      assertFalse(byte2.equals((Object)byte5));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte6));
      assertFalse(byte2.equals((Object)byte3));
      assertFalse(byte2.equals((Object)byte7));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals(603, mutableInt0.intValue());
      assertEquals("603", mutableInt0.toString());
      assertEquals(603.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(603L, mutableInt0.longValue());
      assertEquals((short)603, mutableInt0.shortValue());
      assertEquals(603.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(603, (int)mutableInt0.toInteger());
      assertEquals(603, (int)mutableInt0.getValue());
      assertEquals((byte)91, mutableInt0.byteValue());
      
      MutableInt[] mutableIntArray0 = ArrayUtils.addFirst((MutableInt[]) null, mutableInt0);
      assertFalse(byte2.equals((Object)byte4));
      assertFalse(byte2.equals((Object)byte5));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte6));
      assertFalse(byte2.equals((Object)byte3));
      assertFalse(byte2.equals((Object)byte7));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals(603, mutableInt0.intValue());
      assertEquals("603", mutableInt0.toString());
      assertEquals(603.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(603L, mutableInt0.longValue());
      assertEquals((short)603, mutableInt0.shortValue());
      assertEquals(603.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(603, (int)mutableInt0.toInteger());
      assertEquals(603, (int)mutableInt0.getValue());
      assertEquals((byte)91, mutableInt0.byteValue());
      assertEquals(1, mutableIntArray0.length);
      assertNotNull(mutableIntArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(491.63460000000003);
      assertEquals(491.63460000000003, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[7];
      Double double1 = new Double((-1L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)9, 2144966225);
      assertArrayEquals(new byte[] {(byte)0, (byte)127, (byte)0, (byte)127, (byte)127}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(doubleArray1, (-5888), 69, 2912);
      assertArrayEquals(new double[] {(-1.0), 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1L);
      longArray1[1] = (long) (byte)0;
      longArray1[2] = (long) (byte)0;
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 18688);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = 'S';
      charArray0[2] = 'U';
      charArray0[3] = '@';
      charArray0[4] = 'A';
      charArray0[5] = 'O';
      charArray0[6] = 'p';
      charArray0[7] = '.';
      charArray0[8] = 'c';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, '/');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'/', 'S', 'U', '@', 'A', 'O', 'p', '.', 'c'}, charArray0);
      assertArrayEquals(new char[] {'/', '/', 'S', 'U', '@', 'A', 'O', 'p', '.', 'c'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(10, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      boolean[] booleanArray0 = new boolean[7];
      Float float0 = new Float((double) 818);
      assertEquals(818.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) 818);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(818.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 88;
      intArray0[1] = (-603);
      intArray0[2] = (int) 'r';
      intArray0[3] = (int) 'r';
      intArray0[4] = 818;
      intArray0[5] = 88;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1261));
      assertArrayEquals(new int[] {88, (-603), 114, 114, 818, 88}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte)54}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte)54, (byte) (-85), (byte)54, (byte)54}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean boolean2 = ArrayUtils.isSorted(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte)54}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte)54, (byte) (-85), (byte)54, (byte)54}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = ArrayUtils.contains(byteArray1, (byte) (-85));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte)54}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte)54, (byte) (-85), (byte)54, (byte)54}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertTrue(boolean4);
      
      boolean boolean5 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {88, (-603), 114, 114, 818, 88}, intArray0);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertEquals(6, intArray0.length);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Float float0 = new Float(14.862798F);
      assertEquals(14.862798F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.5);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float1;
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.contains(intArray0, 88);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-85);
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-85);
      byteArray1[1] = (byte)54;
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte)54;
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-85), (byte) (-85), (byte)54, (byte) (-85), (byte)54}, byteArray2);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-85)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte) (-85), (byte)54}, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(6, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray2);
      
      boolean boolean2 = ArrayUtils.isSorted(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-85), (byte) (-85), (byte)54, (byte) (-85), (byte)54}, byteArray2);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-85)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte) (-85), (byte)54}, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(6, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(boolean2);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-85);
      shortArray0[1] = (short) (byte)54;
      shortArray0[2] = (short) (byte)54;
      shortArray0[3] = (short) (byte) (-85);
      shortArray0[4] = (short) (byte) (-85);
      boolean boolean3 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-85), (short)54, (short)54, (short) (-85), (short) (-85)}, shortArray0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean3);
      
      boolean boolean4 = ArrayUtils.contains(byteArray1, (byte)1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte) (-85), (byte)54}, byteArray1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(4, byteArray1.length);
      assertFalse(boolean4);
      
      boolean boolean5 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 5482L;
      longArray0[3] = 1L;
      longArray0[4] = 997L;
      longArray0[5] = 2115L;
      MockRandom mockRandom0 = new MockRandom(693L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'n';
      charArray0[2] = '~';
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) 997L;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 101, 101);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Long[] longArray1 = new Long[1];
      longArray1[0] = (Long) 5482L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) 101);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {5482L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertNotNull(longArray2);
      
      ArrayUtils.reverse((Object[]) longArray1, 117, (-634));
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = (-1314);
      intArray0[2] = (-1314);
      intArray0[3] = (-1217);
      intArray0[4] = (-1217);
      intArray0[5] = 49;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2;
      ArrayUtils.swap(longArray0, (-1), 49, 49);
      assertArrayEquals(new long[] {2L}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.swap(byteArray0, (-634), (int) (byte)45, 1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 49, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer(2048);
      assertEquals(2048, (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 'Y';
      doubleArray0[2] = (double) 'Y';
      doubleArray0[3] = (double) '\\';
      doubleArray0[4] = (double) 1072;
      doubleArray0[5] = (double) 'm';
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) 1072;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 89.0, 89.0, 92.0, 1072.0, 109.0, (-1.0), 1072.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(16, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2048;
      intArray0[1] = 2048;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {2048, 2048}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      BitSet bitSet0 = new BitSet((short)0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2048, 2048}, intArray0);
      assertArrayEquals(new int[] {2048, 2048}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 89.0, 89.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 89.0, 89.0, 92.0, 1072.0, 109.0, (-1.0), 1072.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(16, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      Float[] floatArray1 = new Float[1];
      Float float0 = new Float(2132.385218924532);
      assertEquals(2132.3853F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2132.385218924532;
      doubleArray0[1] = 2132.385218924532;
      doubleArray0[2] = 2132.385218924532;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {2132.385218924532, 2132.385218924532, 2132.385218924532}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float float1 = new Float(2132.385218924532);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2132.3853F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(2132.385218924532);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(2132.3853F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-1655.5234F));
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((-1655.5234F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = Float.valueOf(98.0F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals(98.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      Float float5 = new Float(0.7);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals(0.7F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      Float float6 = new Float((double) 98.0F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals(98.0F, (float)float6, 0.01F);
      assertNotNull(float6);
      
      Float float7 = Float.valueOf((-428.17276F));
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertEquals((-428.17276F), (float)float7, 0.01F);
      assertNotNull(float7);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      ArrayUtils.reverse(byteArray0, 472, 1881);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-966);
      floatArray0[2] = (float) 1881;
      floatArray0[3] = (float) (-966);
      floatArray0[4] = (float) (byte) (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 472);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {472}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) boolean0;
      objectArray0[1] = (Object) (-1.0F);
      Object object0 = ArrayUtils.get(objectArray0, 1881);
      assertEquals(2, objectArray0.length);
      assertNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, (int) (byte)91);
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
      
      Float[] floatArray1 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)67;
      ArrayUtils.shift((boolean[]) null, (int) (byte)0, (-1665), 33);
      char char0 = 'n';
      Character character0 = Character.valueOf('n');
      assertEquals('n', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'n', 'n', 'n'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray0);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'n';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'n', 'n', 'n'}, charArray0);
      assertArrayEquals(new char[] {'n'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) char0;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)67;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)67, (short)0, (short)0}, shortArray0);
      assertEquals("{0, 1, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) "", bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 33, 33, (-1678));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Character character0 = Character.valueOf('n');
      assertEquals('n', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) character0;
      ArrayUtils.swap(objectArray0, 6, 33, (-454));
      assertEquals(4, objectArray0.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-1678));
      assertEquals((-1678.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2816.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2816.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(33);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(33.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(3983.0);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(3983.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-2816.0));
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((-2816.0), (double)double4, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-3.0));
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((-3.0), (double)double5, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(3983.0);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals(3983.0, (double)double6, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[5]);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((-3.0), (double)double7, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      Double double8 = Double.valueOf((double) doubleArray0[4]);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertEquals((double)double8, (double)double1, 0.01);
      assertEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((-2816.0), (double)double8, 0.01);
      assertNotNull(double8);
      
      doubleArray0[8] = double8;
      Integer integer0 = new Integer((-2318));
      assertEquals((-2318), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-2318), object0);
      assertNotNull(object0);
      
      Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, object0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      Character character0 = new Character('4');
      assertEquals('4', (char)character0);
      assertNotNull(character0);
      
      Short short0 = new Short((short)1);
      assertEquals((short)1, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)1, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short)1);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short)1, (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)321);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short)321, (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short)1);
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertEquals((short)1, (short)short4);
      assertNotNull(short4);
      
      Short short5 = new Short((short) (-34));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertEquals((short) (-34), (short)short5);
      assertNotNull(short5);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-34);
      doubleArray0[1] = (double) (short) (-34);
      doubleArray0[2] = (double) '4';
      doubleArray0[3] = (double) (short) (-2622);
      doubleArray0[4] = (double) (short) (-34);
      doubleArray0[5] = (double) (short)1;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)321;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) '4';
      intArray0[5] = (int) (short)1;
      intArray0[6] = (int) (short) (-2622);
      intArray0[7] = (int) '4';
      intArray0[8] = (int) (short)321;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals(711L, mutableInt0.longValue());
      assertEquals(711, mutableInt0.intValue());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals((short)711, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1393);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "S}4d";
      stringArray0[1] = "^\"";
      stringArray0[2] = "S}4d";
      stringArray0[4] = "^\"";
      stringArray0[5] = "S}4d";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      ArrayUtils.shuffle(longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '-';
      charArray0[2] = 'H';
      charArray0[3] = '{';
      charArray0[4] = ',';
      charArray0[5] = '8';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      charArray0[8] = 'x';
      ArrayUtils.shift(charArray0, (int) (short)1393);
      assertArrayEquals(new char[] {'H', '{', ',', '8', 'n', 'n', 'x', '>', '-'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[4] = ',';
      charArray1[1] = 'g';
      charArray1[2] = 'n';
      charArray1[3] = ',';
      charArray1[4] = '8';
      charArray1[5] = '8';
      charArray1[6] = ',';
      charArray1[7] = 'g';
      ArrayUtils.shift(charArray1, 16);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'g', 'n', ',', '8', '8', ',', 'g'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(8, charArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'n';
      longArray0[1] = 1L;
      longArray0[2] = (long) '8';
      longArray0[3] = (long) 'n';
      ArrayUtils.reverse(longArray0, 2493, 897);
      assertArrayEquals(new long[] {110L, 1L, 56L, 110L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals("711", mutableInt0.toString());
      assertEquals(711L, mutableInt0.longValue());
      assertEquals(711, mutableInt0.intValue());
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1393);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "N)xLpnJ]ZR";
      stringArray0[1] = "^\"";
      stringArray0[2] = "N)xLpnJ]ZR";
      stringArray0[4] = "^\"";
      stringArray0[5] = "S}4d";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      ArrayUtils.shuffle(longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '-';
      charArray0[2] = 'H';
      charArray0[3] = '{';
      charArray0[4] = ',';
      charArray0[5] = '8';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      charArray0[8] = 'x';
      ArrayUtils.shift(charArray0, (int) (short)1393);
      assertArrayEquals(new char[] {'H', '{', ',', '8', 'n', 'n', 'x', '>', '-'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short) (-3254);
      shortArray0[2] = (short)3672;
      shortArray0[3] = (short) (-595);
      shortArray0[4] = (short)51;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)51;
      doubleArray0[1] = (double) (short)51;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {51.0, 51.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, (int) (short)3672, 2, 1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      ArrayUtils.shift((char[]) null, (int) (short)3672, (-990), (int) (short)51);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-1.0));
      assertArrayEquals(new double[] {51.0, 51.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, 2732);
      assertNull(intArray0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, ' ');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((double) (-1.0F));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      int[] intArray0 = new int[7];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 3048;
      intArray0[3] = 5;
      intArray0[4] = (-2308);
      intArray0[5] = 5;
      intArray0[6] = 5;
      ArrayUtils.shift(intArray0, 2);
      assertArrayEquals(new int[] {5, 5, 5, 5, 3048, 5, (-2308)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2131;
      shortArray0[1] = (short)2131;
      ArrayUtils.swap(byteArray0, (int) (short)0, (int) (short)0, 15);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)2131;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (short)2131);
      assertArrayEquals(new float[] {2131.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)2131;
      intArray0[1] = 5;
      intArray0[2] = (int) (byte)43;
      intArray0[3] = 15;
      intArray0[4] = 15;
      ArrayUtils.shift(intArray0, (int) (short)2131);
      assertArrayEquals(new int[] {15, 2131, 5, 43, 15}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, object1);
      assertNotSame(object1, object0);
      assertFalse(boolean1 == boolean0);
      assertFalse(object1.equals((Object)object0));
      assertEquals(6, objectArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(3.0);
      assertEquals(3.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 3.0);
      assertArrayEquals(new double[] {3.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float((-70.49477F));
      assertEquals((-70.49477F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(3.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(3.0);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(3.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(3.0);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(3.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) floatArray0[3]);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(3.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float((double) floatArray0[3]);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(3.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = new Float((-1.0F));
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals((-1.0F), (float)float6, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = '/';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      charArray0[6] = '/';
      charArray0[7] = '/';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'g', '\u0000', 'g', '/', 'g', 'g', '/', '/'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertNotNull(charArray1);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'g', '\u0000', 'g', '/', 'g', 'g', '/', '/'}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray2.length);
      assertNotNull(charArray2);
      
      ArrayUtils.shift((boolean[]) null, (-1), 66, (-1975));
      int int1 = ArrayUtils.lastIndexOf((int[]) null, 2012);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (-1975));
      assertArrayEquals(new float[] {(-1975.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      
      Float[] floatArray1 = new Float[8];
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[0] = float0;
      Float float1 = new Float((double) 0.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray1[1] = float1;
      Float float2 = new Float((float) floatArray1[1]);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray1[2] = float2;
      Float float3 = new Float((-2935.0F));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-2935.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray1[3] = float3;
      Float float4 = new Float((double) 0.0F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray1[4] = float4;
      Float float5 = Float.valueOf((float) (-1));
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray1[5] = float5;
      Float float6 = new Float((-1392.347F));
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((-1392.347F), (float)float6, 0.01F);
      assertNotNull(float6);
      
      floatArray1[6] = float6;
      Float float7 = new Float((double) 66);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertEquals(66.0F, (float)float7, 0.01F);
      assertNotNull(float7);
      
      floatArray1[7] = float7;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray2.length);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1658);
      shortArray0[1] = (short) (-1658);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1658), (short) (-1658)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1658), (short) (-1658)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((short) (-1658));
      assertEquals((-1658), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short) (-1658));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1658), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((short) (-1658));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals((-1658), (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-1658), (-1658), (-1658)}, intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short) (-1658), (short) (-1658)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1658), (short) (-1658)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1658), (short) (-1658), (short) (-1658), (short) (-1658)}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertNotNull(shortArray2);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (int)integerArray0[1];
      longArray0[1] = (long) (short) (-1658);
      longArray0[2] = (long) (short) (-1658);
      longArray0[3] = (long) (short) (-1658);
      longArray0[4] = (long) (int)integerArray0[2];
      longArray0[5] = 0L;
      longArray0[6] = (long) (int)integerArray0[2];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1658L), 2);
      assertArrayEquals(new long[] {(-1658L), (-1658L), (-1658L), (-1658L), (-1658L), 0L, (-1658L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(2, int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "long");
      assertEquals(3, integerArray0.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 24336.0F;
      floatArray0[4] = (-2911.3816F);
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1591.0F;
      floatArray0[5] = Float.NaN;
      floatArray0[6] = 0.0F;
      floatArray0[7] = Float.NaN;
      floatArray0[4] = 2536.816F;
      ArrayUtils.shift(floatArray0, (-133));
      assertArrayEquals(new float[] {Float.NaN, 0.0F, 24336.0F, 0.0F, Float.NaN, 1.0F, 2536.816F, Float.NaN, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 24336.0F;
      floatArray0[1] = (-2911.2246F);
      floatArray0[2] = (-893.84F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1591.0F;
      floatArray0[5] = Float.NaN;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 2782.0713F;
      floatArray0[8] = 2536.823F;
      ArrayUtils.shift(floatArray0, (-133));
      assertArrayEquals(new float[] {2782.0713F, 2536.823F, 24336.0F, (-2911.2246F), (-893.84F), 1.0F, 1591.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-133);
      intArray0[1] = (-133);
      intArray0[2] = (-133);
      intArray0[3] = (-133);
      intArray0[4] = (-133);
      intArray0[5] = (-133);
      intArray0[6] = (-133);
      intArray0[7] = (-133);
      intArray0[8] = (-133);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 472, (-133));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-133), (-133), (-133), (-133), (-133), (-133), (-133), (-133), (-133)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(13.295317864415491);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(13.295318F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((byte[]) null, (byte) (-96));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((double) (short)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.valueOf("Array element ");
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(booleanArray1, (Comparator<Boolean>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-1911.7383884133);
      doubleArray0[2] = (-5612.396077154137);
      doubleArray0[3] = (-335.045);
      doubleArray0[4] = 2617.099982964864;
      doubleArray0[5] = (-1911.7383884133);
      doubleArray0[6] = 2617.099982964864;
      MutableInt mutableInt0 = new MutableInt((-9));
      assertEquals((-9), (int)mutableInt0.toInteger());
      assertEquals((-9), (int)mutableInt0.getValue());
      assertEquals((-9), mutableInt0.intValue());
      assertEquals((short) (-9), mutableInt0.shortValue());
      assertEquals((-9.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-9L), mutableInt0.longValue());
      assertEquals("-9", mutableInt0.toString());
      assertEquals((-9.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-9), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals((-9), (int)mutableInt0.toInteger());
      assertEquals((-9), (int)mutableInt0.getValue());
      assertEquals((-9), mutableInt0.intValue());
      assertEquals((short) (-9), mutableInt0.shortValue());
      assertEquals((-9.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-9L), mutableInt0.longValue());
      assertEquals("-9", mutableInt0.toString());
      assertEquals((-9.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-9), mutableInt0.byteValue());
      assertEquals((-9), (int)integer0);
      assertNotNull(integer0);
      
      mutableInt0.setValue((-9));
      assertEquals((-9), (int)mutableInt0.toInteger());
      assertEquals((-9), (int)mutableInt0.getValue());
      assertEquals((-9), mutableInt0.intValue());
      assertEquals((short) (-9), mutableInt0.shortValue());
      assertEquals((-9.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-9L), mutableInt0.longValue());
      assertEquals("-9", mutableInt0.toString());
      assertEquals((-9.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-9), mutableInt0.byteValue());
      
      mutableInt0.add((Number) 2617.099982964864);
      assertEquals((short)2608, mutableInt0.shortValue());
      assertEquals(2608, (int)mutableInt0.getValue());
      assertEquals((byte)48, mutableInt0.byteValue());
      assertEquals(2608, (int)mutableInt0.toInteger());
      assertEquals("2608", mutableInt0.toString());
      assertEquals(2608.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2608, mutableInt0.intValue());
      assertEquals(2608.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2608L, mutableInt0.longValue());
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer1 = new Integer((-9));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-9), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 2617.099982964864;
      doubleArray1[1] = (Double) 2617.099982964864;
      doubleArray1[2] = (Double) 2617.099982964864;
      doubleArray1[3] = (Double) 2617.099982964864;
      doubleArray1[4] = (Double) 2617.099982964864;
      doubleArray1[5] = (Double) (-1911.7383884133);
      doubleArray1[6] = (Double) (-335.045);
      doubleArray1[7] = (Double) (-1911.7383884133);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyDouble() , anyDouble());
      boolean boolean1 = ArrayUtils.isSorted(doubleArray1, comparator0);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, doubleArray1.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.5);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, (-2308), (-2308), (-2308));
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.shift(booleanArray0, (-2295), 2991, (-2308));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      Character character0 = Character.valueOf('O');
      assertEquals('O', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      ArrayUtils.shift((char[]) null, 127, 3297, (-2308));
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-174));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, true, false}, booleanArray0));
      assertEquals(8, bitSet0.length());
      assertEquals("{0, 1, 5, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(8, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = 'X';
      charArray0[2] = '@';
      charArray0[3] = 't';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'4', 'X', '@', 't'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertNotNull(characterArray0);
      
      ArrayUtils.swap((short[]) null, (-2458), (-2458), 908);
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)3169);
      assertNull(shortArray0);
      
      char[] charArray1 = Character.toChars((int) '4');
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'4'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '4');
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'4', 'X', '@', 't'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(4, charArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-2458));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false, true, false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 3, 7}", bitSet0.toString());
      assertEquals(9, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = false;
      booleanArray0[0] = false;
      booleanArray0[3] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 708;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 51;
      doubleArray0[3] = (double) 708;
      doubleArray0[4] = (double) 51;
      doubleArray0[5] = (double) 51;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 708;
      doubleArray0[8] = 1465.92385063871;
      ArrayUtils.shift(doubleArray0, (-2147483640), 0, (-2668));
      assertArrayEquals(new double[] {708.0, 0.0, 51.0, 708.0, 51.0, 51.0, 0.0, 708.0, 1465.92385063871}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(76, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 76, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      boolean[] booleanArray0 = new boolean[7];
      Float float0 = new Float((double) 818);
      assertEquals(818.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) 818);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(818.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte)54}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte)54, (byte) (-85), (byte)54, (byte)54}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte)54}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte)54, (byte) (-85), (byte)54, (byte)54}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.contains(byteArray1, (byte) (-85));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte)54}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte)54, (byte) (-85), (byte)54, (byte)54}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float float0 = new Float(14.862798F);
      assertEquals(14.862798F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.5);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float1;
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.contains(intArray0, 88);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)54;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-85);
      shortArray0[2] = (short) (byte)54;
      shortArray0[3] = (short) (byte) (-85);
      shortArray0[4] = (short) (byte) (-85);
      boolean boolean2 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-85), (short)0, (short)54, (short) (-85), (short) (-85)}, shortArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.contains(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte) (-85), (byte)54}, byteArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean3);
      
      boolean boolean4 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertEquals(5, intArray0.length);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.5);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float1;
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.contains(intArray0, 88);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-85);
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-85);
      byteArray1[1] = (byte)86;
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte)86;
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-85), (byte) (-85), (byte)86, (byte) (-85), (byte)86}, byteArray2);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-85)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)86, (byte) (-85), (byte)86}, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(6, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray2);
      
      boolean boolean2 = ArrayUtils.isSorted(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-85), (byte) (-85), (byte)86, (byte) (-85), (byte)86}, byteArray2);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-85)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)86, (byte) (-85), (byte)86}, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(6, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(boolean2);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-85);
      shortArray0[1] = (short) (byte)86;
      shortArray0[2] = (short) (byte)86;
      shortArray0[3] = (short) (byte) (-85);
      shortArray0[4] = (short) (byte) (-85);
      boolean boolean3 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-85), (short)86, (short)86, (short) (-85), (short) (-85)}, shortArray0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)91, object0);
      assertNotNull(object0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)91;
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[2] = 'l';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      charArray0[6] = 'l';
      charArray0[7] = 'l';
      charArray0[8] = 'l';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'l');
      assertArrayEquals(new char[] {'l', 'l', 'l', '\u0000', 'l', 'l', 'l', 'l', 'l'}, charArray0);
      assertEquals(9, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 4, 5, 6, 7, 8}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.cardinality());
      assertEquals(9, charArray0.length);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1638.0F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.removeAll(floatArray1, intArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(0, intArray0.length);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) floatArray0, (Object) boolean0, (-226));
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals(0, floatArray0.length);
      assertNotNull(bitSet1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'l';
      longArray0[1] = (long) 'l';
      longArray0[2] = (long) 'l';
      longArray0[3] = 1647L;
      longArray0[4] = (long) 'l';
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {108L, 108L, 1647L, 108L, 108L}, longArray0);
      assertEquals(5, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-226), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -226, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 33, (-1424), (-1678));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      Character character0 = Character.valueOf('n');
      assertEquals('n', (char)character0);
      assertNotNull(character0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) character0, 91);
      assertEquals(5, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-111);
      byteArray0[4] = (byte)17;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte) (-111);
      longArray0[2] = (long) (byte) (-111);
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte) (-70);
      longArray0[5] = (long) (byte)17;
      longArray0[6] = (long) (byte)17;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(33, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 33, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 33, (-1424), (-1678));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      Character character0 = Character.valueOf('n');
      assertEquals('n', (char)character0);
      assertNotNull(character0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) character0, 91);
      assertEquals(5, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)17;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)17);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-70), (byte) (-85), (byte)99}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-70), (byte) (-85), (byte)99, (byte)17}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)99;
      longArray0[1] = (long) (byte) (-85);
      longArray0[2] = (long) (byte) (-85);
      longArray0[3] = (long) (byte) (-70);
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = (long) (byte)17;
      longArray0[6] = (long) (byte)17;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(33, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 33, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'X';
      charArray0[2] = '@';
      charArray0[3] = 't';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'F', 'X', '@', 't'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertNotNull(characterArray0);
      
      int int0 = 436;
      ArrayUtils.swap((short[]) null, 436, 436, 896);
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)3169);
      assertNull(shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2668), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2668, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'X';
      charArray0[2] = '@';
      char char0 = 't';
      charArray0[1] = 't';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'F', 't', '@', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertNotNull(characterArray0);
      
      ArrayUtils.swap((short[]) null, 436, 436, 896);
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)3169);
      assertNull(shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2660), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2660, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[4];
      longArray0[2] = (long) (byte)84;
      longArray0[3] = (long) (-606);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-99), (int) (byte)0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 84L, (-606L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)67);
      assertNull(byteArray1);
      
      long[] longArray2 = ArrayUtils.insert((-2601), longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 84L, (-606L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 84L, (-606L)}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-3440));
      assertEquals((-3440), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(4, integerArray0.length);
      assertEquals((-3440), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle", integerArray0[0]);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(4, integerArray0.length);
      assertEquals((-3440), (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1653);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(1653, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-121);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-121)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = '}';
      charArray0[2] = 'E';
      charArray0[3] = 'K';
      ArrayUtils.swap(charArray0, (int) integerArray0[1], (int) integerArray0[1], (-3440));
      assertArrayEquals(new char[] {'V', '}', 'E', 'K'}, charArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, charArray0.length);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-80);
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte) (-80);
      byteArray1[3] = (byte) (-80);
      byteArray1[4] = (byte) (-121);
      byteArray1[5] = (byte) (-80);
      byteArray1[6] = (byte) (-80);
      byteArray1[7] = (byte) (-80);
      byteArray1[8] = (byte) (-80);
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray1, (byte) (-43));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-121), (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-121), (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80)}, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray2.length);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)6;
      floatArray0[1] = (float) (byte)6;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1.0F);
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {6.0F, 6.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean1);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray1 = new Float[7];
      floatArray1[0] = (Float) (-1.0F);
      floatArray1[1] = (Float) 6.0F;
      floatArray1[2] = (Float) 6.0F;
      floatArray1[3] = float0;
      floatArray1[4] = (Float) 6.0F;
      floatArray1[5] = float0;
      floatArray1[6] = float0;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, 24336.0F);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 6.0F, 6.0F, 0.0F, 6.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(7, floatArray2.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2131;
      shortArray0[1] = (short)2131;
      shortArray0[3] = (short) (byte)43;
      ArrayUtils.swap(byteArray0, (int) (short)0, (int) (short)0, 15);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {15L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(1L);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)15, (-2181));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      ArrayUtils.shift(doubleArray2, (-2048), (-1), (-2181));
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray2.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = 'A';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'A', '5'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2131;
      shortArray0[1] = (short)2131;
      shortArray0[3] = (short) (byte)43;
      ArrayUtils.swap(byteArray0, (int) (short)0, (int) (short)0, 15);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {15L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(1L);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)15, (-2181));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      ArrayUtils.shift(doubleArray2, (-2048), (-1), (-2181));
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray2.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = 'A';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'A', '5'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 643.974F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2501.8F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-2500.7744F);
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 3354);
      assertArrayEquals(new float[] {643.974F, 0.0F, (-2501.8F), (-1.0F), 0.0F, 0.0F, (-2500.7744F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1201L;
      longArray0[1] = (long) 3354;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 3354;
      longArray0[4] = (long) 3354;
      ArrayUtils.shift(longArray0, 3354);
      assertArrayEquals(new long[] {3354L, (-1L), 3354L, 3354L, 1201L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2144695728;
      intArray0[1] = 12;
      intArray0[2] = (-252);
      intArray0[3] = (-2139318310);
      int int0 = ArrayUtils.indexOf(intArray0, 2144695728, 1047);
      assertArrayEquals(new int[] {2144695728, 12, (-252), (-2139318310)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 9);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      Class<String> class6 = String.class;
      classArray0[6] = class6;
      Class<String> class7 = String.class;
      classArray0[7] = class7;
      Class<String> class8 = String.class;
      classArray0[8] = class8;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(9, classArray0.length);
      assertEquals(9, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 0;
      longArray0[4] = 1L;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), 0L, 1L, (-1L), 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(1L);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)127;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (-2048));
      assertArrayEquals(new byte[] {(byte)0, (byte)127}, byteArray0);
      assertTrue(int1 == int0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int1);
      
      ArrayUtils.shift(doubleArray1, 0, (-26), (-2048));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      
      float[] floatArray3 = new float[9];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      
      floatArray3[0] = (float) (byte)0;
      floatArray3[1] = (float) (-1L);
      floatArray3[2] = (float) (byte)0;
      floatArray3[3] = 2197.18F;
      floatArray3[4] = (-1.0F);
      floatArray3[5] = (float) 0L;
      floatArray3[6] = (float) (byte)127;
      floatArray3[7] = (float) 1L;
      floatArray3[8] = (float) (byte)127;
      boolean boolean1 = ArrayUtils.contains(floatArray3, Float.NaN);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 2197.18F, (-1.0F), 0.0F, 127.0F, 1.0F, 127.0F}, floatArray3, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertEquals(9, floatArray3.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[4] = 1L;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 1L, (-1L), 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(1L);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)127;
      ArrayUtils.shift(doubleArray1, 0, (-26), (-2048));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      
      float[] floatArray3 = new float[9];
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (float) (byte)0;
      floatArray3[1] = (float) (-1L);
      floatArray3[2] = (float) (byte)0;
      floatArray3[3] = 2197.18F;
      floatArray3[4] = (-1.0F);
      floatArray3[5] = (float) 0L;
      floatArray3[7] = (float) 1L;
      floatArray3[8] = (float) (byte)127;
      boolean boolean1 = ArrayUtils.contains(floatArray3, Float.NaN);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 2197.18F, (-1.0F), 0.0F, 0.0F, 1.0F, 127.0F}, floatArray3, 0.01F);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(boolean1 == boolean0);
      assertEquals(9, floatArray3.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1883.0939814585126);
      doubleArray0[1] = (-1883.0939814585126);
      doubleArray0[2] = (-1883.0939814585126);
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'w';
      charArray0[4] = '$';
      charArray0[5] = 'w';
      charArray0[6] = '^';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'h', 'h', 'h', 'w', '$', 'w', '^'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '^';
      floatArray0[1] = (float) '$';
      floatArray0[2] = (float) '$';
      floatArray0[3] = (float) 'h';
      floatArray0[4] = (float) 'w';
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {94.0F, 36.0F, 36.0F, 104.0F, 119.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {94.0F, 36.0F, 36.0F, 104.0F, 119.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.valueOf("fi)NwvBC11ZJ8");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)24372;
      shortArray0[1] = (short)1016;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)24372);
      assertArrayEquals(new short[] {(short)24372, (short)1016}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
      
      short[] shortArray1 = new short[7];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1345);
      shortArray1[1] = (short)81;
      shortArray1[2] = (short)1016;
      shortArray1[3] = (short)1016;
      shortArray1[4] = (short)24372;
      shortArray1[5] = (short)1016;
      shortArray1[6] = (short)24372;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short)89, (int) (short) (-1345));
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1345), (short)81, (short)1016, (short)1016, (short)24372, (short)1016, (short)24372}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(7, shortArray1.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1161L));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)94;
      Float float0 = new Float((double) (byte)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ", Length: ";
      stringArray0[1] = ", Length: ";
      String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) floatArray0[0]);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertEquals(3, floatArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1161.2238;
      doubleArray0[1] = (double) (byte)116;
      doubleArray0[2] = (double) (-1161L);
      doubleArray0[3] = (double) (byte)116;
      doubleArray0[4] = (double) (-1161L);
      doubleArray0[5] = (double) (-1161L);
      doubleArray0[6] = (double) (byte)94;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (double) (byte)0);
      assertArrayEquals(new double[] {1161.2238, 116.0, (-1161.0), 116.0, (-1161.0), (-1161.0), 94.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) 94, stringArray0, stringArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 94, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      short short0 = (short) (-1);
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((double) (short) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(1845.841F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals(1845.841F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      MockRandom mockRandom0 = new MockRandom((short) (-1));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 1638, 1215, 1215);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1215;
      longArray0[1] = (long) 1215;
      longArray0[2] = (long) 1215;
      longArray0[3] = (long) 1638;
      Double[] doubleArray1 = new Double[1];
      Double double0 = new Double(1215L);
      assertEquals(1215.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1215.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-27);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {1215L, 1215L, 1215L, 1638L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-27);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)43;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-27), (short)0, (short)43}, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-27);
      intArray0[1] = (int) (byte) (-27);
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)43;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 818;
      intArray0[3] = 818;
      ArrayUtils.swap(intArray0, 0, 818);
      assertArrayEquals(new int[] {0, 818, 0, 818}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'r';
      longArray0[1] = (long) 'r';
      longArray0[2] = (long) 818;
      longArray0[3] = 1235L;
      longArray0[4] = (long) 'r';
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {114L, 114L, 818L, 1235L, 114L}, longArray1);
      assertArrayEquals(new long[] {114L, 114L, 818L, 1235L, 114L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotNull(longArray1);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '6';
      ArrayUtils.shift(charArray1, 3060);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'6'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)89);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      assertArrayEquals(new byte[] {(byte)54}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      assertArrayEquals(new byte[] {(byte)54}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertNotNull(byteArray2);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1235L, (double) 818L);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 818;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {818.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.shift(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      ArrayUtils.swap(objectArray0, 54, 0);
      assertEquals(1, objectArray0.length);
      
      char[] charArray2 = new char[3];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 'E';
      charArray2[1] = '.';
      charArray2[2] = '&';
      boolean boolean0 = ArrayUtils.isEmpty(charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'E', '.', '&'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(3, charArray2.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'E';
      doubleArray0[1] = (double) '.';
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) '&';
      doubleArray0[4] = (double) 'E';
      doubleArray0[5] = (double) '&';
      doubleArray0[6] = (double) 54;
      doubleArray0[7] = (double) '.';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 836.8, (-1147));
      assertArrayEquals(new double[] {69.0, 46.0, 0.0, 38.0, 69.0, 38.0, 54.0, 46.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      
      ArrayUtils.shift((float[]) null, (-1147));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1911.7383884133);
      doubleArray0[1] = (-2050.09573038531);
      doubleArray0[2] = (-5612.396077154137);
      doubleArray0[3] = (-335.045);
      doubleArray0[4] = 2617.099982964864;
      doubleArray0[5] = (-2050.09573038531);
      doubleArray0[6] = 2617.099982964864;
      MutableInt mutableInt0 = new MutableInt(3);
      assertEquals(3, (int)mutableInt0.getValue());
      assertEquals((byte)3, mutableInt0.byteValue());
      assertEquals(3, (int)mutableInt0.toInteger());
      assertEquals("3", mutableInt0.toString());
      assertEquals(3.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3, mutableInt0.intValue());
      assertEquals(3L, mutableInt0.longValue());
      assertEquals((short)3, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(3, (int)mutableInt0.getValue());
      assertEquals((byte)3, mutableInt0.byteValue());
      assertEquals(3, (int)mutableInt0.toInteger());
      assertEquals("3", mutableInt0.toString());
      assertEquals(3.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3, mutableInt0.intValue());
      assertEquals(3L, mutableInt0.longValue());
      assertEquals((short)3, mutableInt0.shortValue());
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      mutableInt0.setValue(3);
      assertEquals(3, (int)mutableInt0.getValue());
      assertEquals((byte)3, mutableInt0.byteValue());
      assertEquals(3, (int)mutableInt0.toInteger());
      assertEquals("3", mutableInt0.toString());
      assertEquals(3.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3, mutableInt0.intValue());
      assertEquals(3L, mutableInt0.longValue());
      assertEquals((short)3, mutableInt0.shortValue());
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer1 = new Integer(3);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((int[]) null, 2013265920, 3);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-2699L);
      longArray0[1] = 707L;
      longArray0[2] = (-873L);
      longArray0[3] = (-3L);
      longArray0[4] = (-597L);
      longArray0[5] = (-3445L);
      longArray0[6] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-2699L), 707L, (-873L), (-3L), (-597L), (-3445L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-2699L), 707L, (-873L), (-3L), (-597L), (-3445L), 0L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1590.337);
      doubleArray0[1] = (-2733.16542);
      doubleArray0[2] = (double) 707L;
      doubleArray0[3] = (double) (-873L);
      doubleArray0[4] = (double) (-873L);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) (-597L);
      doubleArray0[7] = (double) (-3L);
      doubleArray0[8] = (double) 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1356.9));
      assertArrayEquals(new double[] {(-1590.337), (-2733.16542), 707.0, (-873.0), (-873.0), 1.0, (-597.0), (-3.0), 0.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(9, doubleArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {')'}, charArray0);
      assertArrayEquals(new char[] {')'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      
      ArrayUtils.swap((short[]) null, 1072, 76, 877);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'X';
      charArray0[2] = '@';
      char char0 = 't';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'F', 'X', '@', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertNotNull(characterArray0);
      
      ArrayUtils.swap((short[]) null, 436, 436, 896);
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)3169);
      assertNull(shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) 'F', charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 70, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.swap(doubleArray0, 1638, 1215, 1215);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1215;
      longArray0[1] = (long) 1215;
      longArray0[2] = (long) 1215;
      longArray0[3] = (long) 1638;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {1215L, 1215L, 1215L, 1638L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      
      Double[] doubleArray1 = new Double[1];
      Double double0 = new Double(1638);
      assertEquals(1638.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1638.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {1215L, 1215L, 1215L, 1638L, 0L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1215L;
      floatArray0[1] = (float) 1215;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1215.0F, 1215.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 1638L);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1215.0F, 1215.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(9, floatArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, (float) 1638L);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1638.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {1215.0F, 1215.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 1638, (-2480.366125238158));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1638, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      Character character0 = new Character('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 567, 90);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)6;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)8;
      shortArray0[1] = (short) (byte) (-99);
      shortArray0[2] = (short) (byte)69;
      shortArray0[3] = (short) (byte)69;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)8;
      longArray0[1] = (long) 90;
      longArray0[2] = (long) (short) (-99);
      longArray0[3] = 1L;
      longArray0[4] = (long) 567;
      longArray0[5] = (long) 90;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)6, (int) (byte)6);
      assertArrayEquals(new long[] {8L, 90L, (-99L), 1L, 567L, 90L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 1638, 1215, 1215);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1215;
      longArray0[1] = (long) 1215;
      longArray0[2] = (long) 1215;
      longArray0[3] = (long) 1638;
      Double[] doubleArray1 = new Double[1];
      Double double0 = new Double(1215L);
      assertEquals(1215.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1215.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-27);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)127, (-316));
      assertArrayEquals(new byte[] {(byte)87, (byte) (-27)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) doubleArray1[0];
      doubleArray3[1] = (double) (-316);
      doubleArray3[2] = (double) 1215;
      doubleArray3[3] = (double) 1215L;
      doubleArray3[4] = (-402.865942);
      doubleArray3[5] = (double) (-1);
      doubleArray3[6] = (double) (byte) (-27);
      ArrayUtils.shift(doubleArray3, (int) (byte)87, 2912, 1130);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {1215.0, (-316.0), 1215.0, 1215.0, (-402.865942), (-1.0), (-27.0)}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(7, doubleArray3.length);
      
      double[] doubleArray4 = ArrayUtils.toPrimitive(doubleArray1, (double) 1638);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {1215.0}, doubleArray4, 0.01);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray4.length);
      assertNotNull(doubleArray4);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray3, 133);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 133, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[8];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) 0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      boolean boolean0 = ArrayUtils.isEquals(mutableInt0, mutableInt0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[2] = double1;
      Double double2 = new Double(338.40170666852123);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(338.40170666852123, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(0.0);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ArrayUtils.swap((int[]) null, (-523), (-523));
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = (double) (-523);
      doubleArray0[1] = (-1356.9);
      doubleArray0[2] = (double) (-523);
      doubleArray0[3] = (double) (-523);
      doubleArray0[4] = (double) (-523);
      doubleArray0[5] = (-1356.9);
      doubleArray0[6] = (double) (-523);
      doubleArray0[7] = (-1356.9);
      doubleArray0[8] = (-1356.9);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 489.70445);
      assertArrayEquals(new double[] {0.0, (-1356.9), (-523.0), (-523.0), (-523.0), (-1356.9), (-523.0), (-1356.9), (-1356.9)}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(9, doubleArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 603.5548702090445;
      doubleArray0[1] = 1421.9495;
      doubleArray0[2] = 1.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0);
      assertArrayEquals(new double[] {603.5548702090445, 1421.9495, 1.0}, doubleArray0, 0.01);
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-966.0F);
      floatArray0[1] = (-1.0F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-966.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      Float[] floatArray1 = new Float[8];
      floatArray1[0] = (Float) (-1.0F);
      floatArray1[1] = (Float) (-1.0F);
      floatArray1[2] = (Float) (-1.0F);
      Float float0 = new Float((double) floatArray1[2]);
      assertEquals(8, floatArray1.length);
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[3] = float0;
      floatArray1[6] = (Float) (-966.0F);
      floatArray1[5] = (Float) (-1.0F);
      floatArray1[6] = (Float) (-966.0F);
      floatArray1[7] = (Float) (-1.0F);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) floatArray1[5]);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-966.0F), (-1.0F)}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(8, floatArray2.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1192);
      intArray0[1] = 76;
      intArray0[2] = (-25179);
      intArray0[3] = 2146561189;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-25179);
      intArray1[1] = (-25179);
      intArray1[2] = 76;
      intArray1[3] = 2146561189;
      intArray1[4] = 76;
      intArray1[5] = (-1192);
      intArray1[6] = (-25179);
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1192), 76, (-25179), 2146561189}, intArray0);
      assertArrayEquals(new int[] {(-25179), (-25179), 76, 2146561189, 76, (-1192), (-25179)}, intArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int[] intArray0 = new int[0];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[3] = (byte)45;
      ArrayUtils.reverse(byteArray0, 472, 1881);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)0, (byte)45}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      int[] intArray1 = ArrayUtils.add(intArray0, 472);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {472}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) boolean0;
      objectArray0[1] = (Object) (byte)45;
      Object object0 = ArrayUtils.get(objectArray0, 1881);
      assertEquals(2, objectArray0.length);
      assertNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, (int) (byte)45);
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = 5176.038;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 44;
      doubleArray0[3] = (-1493.8663438634007);
      doubleArray0[6] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0, 44, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 44.0, (-1493.8663438634007), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 44.0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) 0L;
      objectArray0[6] = (Object) 0L;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], (-2437));
      assertEquals(7, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Float float0 = new Float((-2217.448213547));
      assertEquals((-2217.4482F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-2916.6628F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2916.6628F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-2217.448213547));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-2217.4482F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-2217.448213547));
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-2217.4482F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf(true);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1725;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 1725;
      intArray0[4] = 1725;
      intArray0[5] = 1725;
      intArray0[6] = 1725;
      int[] intArray1 = ArrayUtils.add(intArray0, 1725);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {1725, 2, 2, 1725, 1725, 1725, 1725, 1725}, intArray1);
      assertArrayEquals(new int[] {1725, 2, 2, 1725, 1725, 1725, 1725}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray1.length);
      assertEquals(7, intArray0.length);
      assertNotNull(intArray1);
      
      Object object0 = ArrayUtils.get((Object[]) booleanArray0, 2);
      assertSame(booleanArray0, booleanArray1);
      assertFalse(object0.equals((Object)boolean1));
      assertEquals(3, booleanArray0.length);
      assertEquals(true, object0);
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, (Object) boolean0, (-3858));
      assertSame(booleanArray0, booleanArray1);
      assertFalse(boolean0.equals((Object)boolean1));
      assertEquals(3, booleanArray0.length);
      assertEquals((-1), int0);
      
      Float[] floatArray1 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)91, object0);
      assertNotNull(object0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)91;
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[7] = 'Z';
      charArray0[4] = 'Z';
      charArray0[5] = 'Z';
      charArray0[6] = 'Z';
      charArray0[7] = 'Z';
      charArray0[8] = 'Z';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Z');
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', '\u0000', 'Z', 'Z', 'Z', 'Z', 'Z'}, charArray0);
      assertEquals(9, bitSet0.length());
      assertEquals("{0, 1, 2, 4, 5, 6, 7, 8}", bitSet0.toString());
      assertEquals(8, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, charArray0.length);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1638.0F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.removeAll(floatArray1, intArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(0, intArray0.length);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      
      Short short0 = new Short((short)91);
      assertEquals((short)91, (short)short0);
      assertNotNull(short0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray0, (Object) short0, 340);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = ArrayUtils.removeElements((Object[]) floatArray0, (Object[]) floatArray0);
      assertNotSame(floatArray0, objectArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray0 = ArrayUtils.insert((-1), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      long[] longArray0 = new long[24];
      longArray0[0] = (long) 'J';
      longArray0[1] = (long) 'J';
      longArray0[2] = (long) 'J';
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) 'J';
      longArray0[5] = (long) 'J';
      longArray0[6] = (long) 'J';
      longArray0[7] = (long) 'J';
      longArray0[8] = (long) 'J';
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) 'J', (-2146685957));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(24, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'J';
      objectArray0[1] = (Object) 74L;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(2, objectArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-693);
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short)1393;
      shortArray0[4] = (short)108;
      MutableInt mutableInt0 = new MutableInt((-1139));
      assertEquals((-1139), mutableInt0.intValue());
      assertEquals((-1139L), mutableInt0.longValue());
      assertEquals((-1139), (int)mutableInt0.getValue());
      assertEquals("-1139", mutableInt0.toString());
      assertEquals((byte) (-115), mutableInt0.byteValue());
      assertEquals((-1139), (int)mutableInt0.toInteger());
      assertEquals((short) (-1139), mutableInt0.shortValue());
      assertEquals((-1139.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1139.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndAdd((int) (short) (-693));
      assertEquals((-1832), (int)mutableInt0.toInteger());
      assertEquals((-1832), (int)mutableInt0.getValue());
      assertEquals((byte) (-40), mutableInt0.byteValue());
      assertEquals((short) (-1832), mutableInt0.shortValue());
      assertEquals((-1832), mutableInt0.intValue());
      assertEquals((-1832.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1832", mutableInt0.toString());
      assertEquals((-1832.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1832L), mutableInt0.longValue());
      assertEquals((-1139), int0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Float float0 = new Float((-2217.448213547));
      assertEquals((-2217.4482F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-2916.6628F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2916.6628F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-2217.448213547));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-2217.4482F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-2217.448213547));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((-2217.4482F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2317);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-10));
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray1 = ArrayUtils.subarray((byte[]) null, (int) (byte)2, (int) (byte)2);
      assertNull(byteArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)2;
      longArray0[1] = 8L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {8L, 2L}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'm';
      charArray0[3] = 'Y';
      charArray0[4] = 'y';
      charArray0[5] = 'L';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'L');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'J', 'J', 'm', 'Y', 'y', 'L'}, charArray0);
      assertArrayEquals(new char[] {'J', 'J', 'm', 'Y', 'y'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), (int) (short)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)50, (byte) (-1), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-96);
      longArray0[1] = (long) 'y';
      longArray0[2] = (-2481L);
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {121L, (-2481L), (-96L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      ArrayUtils.reverse(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte)50, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.shift(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      ArrayUtils.swap(objectArray0, 54, 0);
      assertEquals(1, objectArray0.length);
      
      char[] charArray2 = new char[3];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 'E';
      charArray2[1] = '.';
      charArray2[2] = '&';
      boolean boolean0 = ArrayUtils.isEmpty(charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'E', '.', '&'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(3, charArray2.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'E';
      doubleArray0[1] = (double) '.';
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) '&';
      doubleArray0[4] = (double) 'E';
      doubleArray0[5] = (double) '&';
      doubleArray0[6] = (double) 54;
      doubleArray0[7] = (double) '.';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 836.8, (-1147));
      assertArrayEquals(new double[] {69.0, 46.0, 0.0, 38.0, 69.0, 38.0, 54.0, 46.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2131;
      shortArray0[1] = (short)2131;
      shortArray0[2] = (short) (byte)43;
      shortArray0[3] = (short) (byte)43;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)10);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2131, (short)2131, (short)43, (short)43}, shortArray0);
      assertArrayEquals(new short[] {(short)2131, (short)2131, (short)43, (short)43}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)43;
      intArray0[1] = (int) (short)2131;
      intArray0[2] = (int) (short)2131;
      intArray0[3] = (int) (short)2131;
      intArray0[4] = (int) (short)10;
      intArray0[6] = (int) (short)43;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)43;
      intArray1[1] = (int) (byte)43;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertArrayEquals(new int[] {43, 43}, intArray1);
      assertArrayEquals(new int[] {2131, 2131, 2131, 10, 0}, intArray2);
      assertArrayEquals(new int[] {43, 2131, 2131, 2131, 10, 0, 43}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray1.length);
      assertEquals(5, intArray2.length);
      assertEquals(7, intArray0.length);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Float float0 = new Float((-2217.448213547));
      assertEquals((-2217.4482F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-2916.6628F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2916.6628F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-2217.448213547));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-2217.4482F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-2217.448213547));
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((-2217.4482F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2317);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-10));
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 2317;
      longArray0[1] = (long) (byte) (-10);
      longArray0[2] = (long) 2317;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1239L), 0);
      assertArrayEquals(new long[] {2317L, (-10L), 2317L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = (long) 0;
      longArray0[2] = 4802L;
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0.0);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double2;
      Double double4 = new Double(1.5);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals(1.5, (double)double4, 0.01);
      assertNotNull(double4);
      
      doubleArray0[1] = double4;
      doubleArray0[2] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 450L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 4802L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 4802L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1);
      
      Byte byte0 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)78);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)78, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)5);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)5, (byte)byte2);
      assertNotNull(byte2);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 's');
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-2195L), (-1));
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 4802L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(int1 == int0);
      assertEquals(6, longArray0.length);
      assertEquals((-1), int1);
      
      ArrayUtils.shift(charArray0, 9);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(491.63460000000003);
      assertEquals(491.63460000000003, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[7];
      Double double1 = new Double((-1L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)9, 2144966225);
      assertArrayEquals(new byte[] {(byte)0, (byte)127, (byte)0, (byte)127, (byte)127}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(doubleArray1, (-5888), 69, 2912);
      assertArrayEquals(new double[] {(-1.0), 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-1));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-851.344238910652);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.1, 1995.0);
      assertArrayEquals(new double[] {1.5, (-851.344238910652)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2933);
      intArray0[1] = 59;
      intArray0[2] = 3227;
      intArray0[3] = (-1363);
      intArray0[4] = (-87);
      intArray0[5] = 171;
      intArray0[7] = 99;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {(-2933), 59, 3227, (-1363), (-87), 171, 0, 99}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {1.5, (-851.344238910652)}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean2 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = 'b';
      charArray0[2] = 'y';
      charArray0[3] = '>';
      charArray0[4] = 'q';
      charArray0[5] = 'r';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '@', (-87));
      assertArrayEquals(new char[] {'%', 'b', 'y', '>', 'q', 'r'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      Character character0 = Character.valueOf('8');
      assertEquals('8', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = '\'';
      charArray0[2] = '8';
      charArray0[3] = 'd';
      charArray0[4] = '8';
      charArray0[5] = '8';
      charArray0[6] = 'd';
      charArray0[7] = 'd';
      charArray0[8] = 'd';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'f', (-1217));
      assertArrayEquals(new char[] {'f', '\'', '8', 'd', '8', '8', 'd', 'd', 'd'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, 1004);
      assertArrayEquals(new int[] {2}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, intArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((double) (-1.0F));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, (-2308), 3048, (-2308));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3048;
      intArray0[1] = (-2308);
      intArray0[2] = (-2308);
      int int0 = ArrayUtils.indexOf(intArray0, (-2308), (-2165));
      assertArrayEquals(new int[] {3048, (-2308), (-2308)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1, int0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 337L, (-2308));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, longArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (-2308));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 0, (-2308));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("N`i`f");
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(false);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 8, 3048);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'm';
      charArray0[3] = 'Y';
      charArray0[4] = 'y';
      charArray0[5] = 'L';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'L');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'J', 'J', 'm', 'Y', 'y', 'L'}, charArray0);
      assertArrayEquals(new char[] {'J', 'J', 'm', 'Y', 'y'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[4];
      Double double0 = new Double((byte) (-96));
      assertEquals((-96.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1018.511385878));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1018.511385878), (double)double1, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-96.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, 66);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, int0);
      
      ArrayUtils.shift(doubleArray1, 1205, (-1717), (int) (byte)127);
      assertArrayEquals(new double[] {(-96.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      MutableInt[] mutableIntArray1 = ArrayUtils.clone(mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertEquals(0, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertNotNull(mutableIntArray1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)117);
      assertEquals((byte)117, (byte)byte0);
      assertNotNull(byte0);
      
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      assertEquals(117.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)117, mutableInt0.shortValue());
      assertEquals(117, (int)mutableInt0.getValue());
      assertEquals((byte)117, mutableInt0.byteValue());
      assertEquals(117, (int)mutableInt0.toInteger());
      assertEquals(117, mutableInt0.intValue());
      assertEquals(117L, mutableInt0.longValue());
      assertEquals(117.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("117", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      mutableInt0.add((Number) byte0);
      assertEquals(234, (int)mutableInt0.toInteger());
      assertEquals(234.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(234, (int)mutableInt0.getValue());
      assertEquals((byte) (-22), mutableInt0.byteValue());
      assertEquals("234", mutableInt0.toString());
      assertEquals(234L, mutableInt0.longValue());
      assertEquals((short)234, mutableInt0.shortValue());
      assertEquals(234, mutableInt0.intValue());
      assertEquals(234.0, mutableInt0.doubleValue(), 0.01);
      
      mutableInt0.add((int) (byte)117);
      assertEquals(351, mutableInt0.intValue());
      assertEquals(351L, mutableInt0.longValue());
      assertEquals("351", mutableInt0.toString());
      assertEquals((short)351, mutableInt0.shortValue());
      assertEquals(351.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(351, (int)mutableInt0.getValue());
      assertEquals((byte)95, mutableInt0.byteValue());
      assertEquals(351.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(351, (int)mutableInt0.toInteger());
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(mutableInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'F';
      intArray0[2] = (-51);
      intArray0[3] = (-51);
      Boolean[] booleanArray0 = new Boolean[2];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray0, "FullDetail must be true when using JsonToStringStyle");
      assertEquals(2, booleanArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 70;
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2, (double) (-51));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {70.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {70.0, (-1.0), (-51.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)122, (int) character0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-63);
      ArrayUtils.swap(byteArray0, (int) (byte)0, (int) (byte)1, 0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte) (-63), (byte) (-63), (byte) (-63), (byte) (-63)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-63), 755);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 755;
      longArray0[2] = (long) 755;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = 4802L;
      longArray0[5] = (long) (byte) (-63);
      longArray0[6] = (long) (byte) (-63);
      longArray0[7] = (long) (-1);
      longArray0[8] = (long) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-1L), 755L, 755L, 0L, 4802L, (-63L), (-63L), (-1L), 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = 'A';
      charArray0[2] = ' ';
      charArray0[3] = 'q';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'A');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'X', 'A', ' ', 'q'}, charArray0);
      assertArrayEquals(new char[] {'X', ' ', 'q'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) "");
      assertEquals("", object0);
      assertNotNull(object0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 809;
      intArray0[1] = (-1);
      intArray0[2] = 1391;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), 2688);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {809, (-1), 1391}, intArray0);
      assertArrayEquals(new int[] {809, (-1), 1391}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-1), 2688, (double) (-1));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 1391;
      ArrayUtils.shift(longArray0, 2688, 3037, 809);
      assertArrayEquals(new long[] {(-1L), 1391L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1591L;
      longArray0[3] = 0L;
      longArray0[4] = 1591L;
      longArray0[2] = 1591L;
      longArray0[6] = 1591L;
      longArray0[7] = 1591L;
      int[] intArray0 = new int[6];
      intArray0[0] = (-1992);
      intArray0[1] = 0;
      intArray0[2] = 637;
      intArray0[3] = 51;
      intArray0[4] = 2135419133;
      intArray0[5] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), 637);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1992), 0, 637, 51, 2135419133, (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1992), 0, 637, 51, 2135419133, (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      
      Double double0 = new Double((-1838.72));
      assertEquals((-1838.72), (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertEquals((-1838.72), object0);
      assertNotNull(object0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 2135419133, (-579.8F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2135419133, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[3] = 0L;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 177.0F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-53));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-53);
      shortArray0[1] = (short) (byte) (-53);
      shortArray0[2] = (short) (byte) (-53);
      shortArray0[3] = (short) (byte) (-53);
      longArray0[3] = (long) (byte) (-53);
      shortArray0[5] = (short) (byte) (-53);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)553);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-53), (short) (-53), (short) (-53), (short) (-53), (short)0, (short) (-53)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-53), (short) (-53), (short) (-53), (short) (-53), (short)0, (short) (-53), (short)553}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1591L;
      longArray0[3] = 0L;
      longArray0[4] = 1591L;
      longArray0[2] = 1591L;
      longArray0[6] = 1591L;
      longArray0[7] = 1591L;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 177.0F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-53));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-53);
      shortArray0[1] = (short) (byte) (-53);
      shortArray0[2] = (short) (byte) (-53);
      shortArray0[3] = (short) (byte) (-53);
      shortArray0[4] = (short) (byte) (-53);
      shortArray0[5] = (short) (byte) (-53);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)553);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-53), (short) (-53), (short) (-53), (short) (-53), (short) (-53), (short) (-53), (short)553}, shortArray1);
      assertArrayEquals(new short[] {(short) (-53), (short) (-53), (short) (-53), (short) (-53), (short) (-53), (short) (-53)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(7, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-2699L);
      longArray0[1] = 707L;
      longArray0[2] = (-873L);
      longArray0[4] = (-597L);
      longArray0[5] = (-3445L);
      longArray0[6] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-2699L), 707L, (-873L), 0L, (-597L), (-3445L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-2699L), 707L, (-873L), 0L, (-597L), (-3445L), 0L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1590.337);
      doubleArray0[1] = (-2733.16542);
      doubleArray0[2] = (double) 707L;
      int[] intArray0 = new int[2];
      intArray0[0] = 127;
      intArray0[1] = 127;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {127, 127}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-2935));
      assertEquals((-2935), (int)integer0);
      assertNotNull(integer0);
      
      Long long0 = new Long(707L);
      assertEquals(707L, (long)long0);
      assertNotNull(long0);
      
      ArrayUtils.shift((short[]) null, (-1284), 127, 458);
      boolean boolean1 = ArrayUtils.isSameType(long0, integer0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (-873L);
      longArray2[1] = (-1L);
      longArray2[2] = (long) 127;
      longArray2[3] = (long) 127;
      longArray2[4] = 707L;
      longArray2[5] = (-1267L);
      longArray2[6] = (long) 458;
      ArrayUtils.reverse(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {458L, (-1267L), 707L, 127L, 127L, (-1L), (-873L)}, longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(7, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3353.89412554);
      doubleArray0[2] = 1.0;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, true, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-716);
      intArray0[1] = (-716);
      intArray0[2] = (-716);
      intArray0[3] = (-716);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {(-716), (-716), (-716), (-716)}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1474);
      shortArray0[1] = (short)742;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)18688;
      shortArray0[4] = (short)9;
      shortArray0[5] = (short)16;
      shortArray0[6] = (short) (-1390);
      shortArray0[7] = (short)90;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1474), (short)742, (short)0, (short)18688, (short)9, (short)16, (short) (-1390), (short)90}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1474), (short)742, (short)0, (short)18688, (short)9, (short)16, (short) (-1390), (short)90}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-2460));
      assertArrayEquals(new int[] {(-2460)}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray1 = ArrayUtils.removeElement((int[]) null, (-653));
      assertNull(intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'U');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Object[] objectArray0 = new Object[7];
      objectArray0[4] = (Object) true;
      objectArray0[6] = (Object) true;
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) boolean0, 1);
      assertEquals(7, objectArray0.length);
      assertEquals(4, int0);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 1;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)9, 16);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 1, 1509);
      assertArrayEquals(new long[] {1L, 1L, (-1L), 1L, 0L, 0L, 0L}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(7, longArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 263L;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {4.0, 263.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 263.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(491.63460000000003);
      assertEquals(491.63460000000003, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)0;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)9, 2144966186);
      assertArrayEquals(new byte[] {(byte)0, (byte)127, (byte)0, (byte)127, (byte)127}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 263L, 69);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)127;
      doubleArray0[1] = 2.146197743E9;
      doubleArray0[2] = (double) 69;
      doubleArray0[3] = (double) (-1L);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2.146197743E9);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {127.0, 69.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {127.0, 2.146197743E9, 69.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(491.63460000000003);
      assertEquals(491.63460000000003, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)9, 2144966225);
      assertArrayEquals(new byte[] {(byte)0, (byte)127, (byte)0, (byte)127, (byte)127}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 263L, 69);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)127;
      doubleArray0[1] = 2.146197743E9;
      doubleArray0[2] = (double) 69;
      doubleArray0[3] = (double) (-1L);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2.146197743E9);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {127.0, 69.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {127.0, 2.146197743E9, 69.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(37.895130396185834);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(37.89513F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(37.895130396185834);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(37.89513F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {37.89513F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, (-2308), (-2308), (-2308));
      assertArrayEquals(new float[] {37.89513F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (-2308);
      intArray0[2] = (-2308);
      intArray0[3] = (-2308);
      boolean boolean0 = ArrayUtils.contains(intArray0, 88);
      assertArrayEquals(new int[] {0, (-2308), (-2308), (-2308), 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get((Object[]) floatArray0, 1379);
      assertEquals(1, floatArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) float1;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(floatArray1);
      assertArrayEquals(new float[] {37.89513F}, floatArray1, 0.01F);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 88, 1379);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2912;
      shortArray0[1] = (short) (-440);
      shortArray0[2] = (short)946;
      shortArray0[3] = (short)2225;
      shortArray0[4] = (short)1022;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short) (-8), 69);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new short[] {(short)2912, (short) (-440), (short)946, (short)2225, (short)1022}, shortArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 3}", bitSet0.toString());
      assertEquals(4, booleanArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = ArrayUtils.insert(0, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = 'p';
      charArray0[2] = '#';
      charArray0[3] = 'h';
      int int1 = ArrayUtils.indexOf(charArray0, 'h', (-1));
      assertArrayEquals(new char[] {'h', 'p', '#', 'h'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(4, charArray0.length);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'h';
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) '#';
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 'p';
      doubleArray0[6] = (double) '#';
      doubleArray0[7] = (double) 'h';
      doubleArray0[8] = 1.0;
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 104.0, 0, 0.0);
      assertArrayEquals(new double[] {104.0, 0.0, 0.0, 35.0, 0.0, 112.0, 35.0, 104.0, 1.0}, doubleArray0, 0.01);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1314);
      intArray0[2] = 985;
      intArray0[3] = (-1277);
      intArray0[4] = 109;
      intArray0[5] = 49;
      intArray0[6] = 49;
      intArray0[7] = 985;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-1314), 985, (-1277), 109, 49, 49, 985}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      assertNotNull(intArray1);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((double) 985);
      assertEquals(985.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 49);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(49.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) 985);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(985.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) 109);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(109.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) (-1));
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((-1.0F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (float)floatArray0[2];
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 3439.8653064960704;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 985, 3512.200515432);
      assertArrayEquals(new double[] {985.0, (-1.0), 3439.8653064960704}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '985.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)3983;
      shortArray0[3] = (short)645;
      shortArray0[4] = (short) (-1377);
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1595));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)3, (short)3983, (short)645, (short) (-1377), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)3, (short)3983, (short)645, (short) (-1377), (short)0, (short) (-1595)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[3];
      intArray0[1] = (int) (short) (-1377);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-1377), 0}, intArray0);
      assertArrayEquals(new int[] {(-1377), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      Byte byte0 = new Byte((byte)16);
      assertEquals((byte)16, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.swap(intArray0, (-1), (-1), (-1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, (-1377), 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(3, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'L';
      charArray0[2] = 'b';
      charArray0[3] = 'z';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'M', 'L', 'b', 'z'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.5);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float1;
      Integer integer0 = new Integer(98);
      assertEquals(98, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 703);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (float) 703;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (float) 98;
      floatArray1[4] = (float) 98;
      int int0 = ArrayUtils.lastIndexOf(floatArray1, 0.0F);
      assertArrayEquals(new float[] {(-1.0F), 703.0F, 0.0F, 98.0F, 98.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(2, int0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(68.0);
      assertEquals(68.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(703.0F);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(703.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0F));
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-560.5673267701));
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((-560.5673267701), (double)double4, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray1 = ArrayUtils.add(doubleArray0, double4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'a');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'a'}, charArray0);
      assertArrayEquals(new char[] {'a', 'a'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      
      ArrayUtils.reverse(floatArray1, 2, 2);
      assertArrayEquals(new float[] {(-1.0F), 703.0F, 0.0F, 98.0F, 98.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1911.7383884133);
      doubleArray0[3] = (-2050.09573038531);
      doubleArray0[2] = (-5612.396077154137);
      doubleArray0[3] = (-335.045);
      doubleArray0[4] = 2617.099982964864;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 963.583089258056;
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '\\', 1968);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 2617.099982964864;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 963.583089258056;
      objectArray0[5] = (Object) (-335.045);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], 1968);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(6, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = new int[8];
      Short short0 = new Short((short) (-29));
      assertEquals((short) (-29), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)653);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)653, (short)short1);
      assertNotNull(short1);
      
      ArrayUtils.swap((boolean[]) null, (int) (short)8, (int) (short)653, (int) (short)8);
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = '\\';
      charArray0[2] = 'V';
      charArray0[3] = '\"';
      charArray0[4] = 'V';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new char[] {'%', '\\', 'V', '\"', 'V'}, charArray0);
      assertArrayEquals(new char[] {'\\', 'V', '\"', 'V'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(8, intArray0.length);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.clone(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new char[] {'%', '\\', 'V', '\"', 'V'}, charArray0);
      assertArrayEquals(new char[] {'\\', 'V', '\"', 'V'}, charArray1);
      assertArrayEquals(new char[] {'\\', 'V', '\"', 'V'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(8, intArray0.length);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray2.length);
      assertNotNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1314);
      intArray0[2] = 985;
      intArray0[3] = (-1277);
      intArray0[5] = (-1314);
      intArray0[6] = (-1314);
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-3), 985, 91);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Float float0 = new Float((float) (-1314));
      assertEquals((-1314.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) 985);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(985.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((float) (-1277));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1277.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Short short0 = new Short((short) (-1485));
      assertEquals((short) (-1485), (short)short0);
      assertNotNull(short0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 109, (-1), (-1314));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 985, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2147483648L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1097L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-2147483648L)}, longArray0);
      assertArrayEquals(new long[] {(-2147483648L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = 'k';
      charArray0[2] = 'x';
      charArray0[3] = 'W';
      charArray0[4] = '@';
      charArray0[5] = '[';
      charArray0[6] = 'S';
      charArray0[7] = ' ';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'j', 89);
      assertArrayEquals(new char[] {'j', 'k', 'x', 'W', '@', '[', 'S', ' '}, charArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(8, charArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'j';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 89);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {106}, intArray0);
      assertArrayEquals(new int[] {89, 106}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      int int0 = ArrayUtils.indexOf(charArray0, '[');
      assertArrayEquals(new char[] {'j', 'k', 'x', 'W', '@', '[', 'S', ' '}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1995.0;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE, 0, 0);
      assertArrayEquals(new double[] {1995.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.reverse(floatArray0, (-801), (-801));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-801), 0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[3] = class1;
      Class<String> class2 = String.class;
      classArray0[3] = class2;
      Class<String> class3 = String.class;
      classArray0[4] = class3;
      classArray0[5] = classArray0[1];
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) classArray0[1];
      objectArray0[1] = (Object) class0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(6, classArray0.length);
      assertEquals(6, classArray1.length);
      assertNotNull(classArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 18688);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, 2, 2);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)36);
      assertArrayEquals(new byte[] {(byte)36}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = '&';
      charArray0[2] = 'M';
      charArray0[3] = 'f';
      charArray0[4] = '\\';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'_', '&', 'M', 'f', '\\'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)0;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils.reverse(longArray0, Integer.MAX_VALUE, 0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean2 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-80);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)6);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-80), (byte)6}, byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-80)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = (-1314);
      Short short0 = new Short((short) (-29));
      assertEquals((short) (-29), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)8);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)8, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short)653);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)653, (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-29));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short) (-29), (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short)2);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertEquals((short)2, (short)short4);
      assertNotNull(short4);
      
      Short short5 = new Short((short)653);
      assertFalse(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertEquals((short)653, (short)short5);
      assertNotNull(short5);
      
      Short short6 = new Short((short)1526);
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertEquals((short)1526, (short)short6);
      assertNotNull(short6);
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short5;
      shortArray0[1] = short6;
      shortArray0[2] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)653, (short)1526, (short)2}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-29);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)shortArray0[1];
      doubleArray0[1] = (double) (short)shortArray0[1];
      doubleArray0[2] = (double) (short) (-29);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-606), (int) (short)653);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-29L)}, longArray1);
      assertArrayEquals(new long[] {(-29L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) shortArray0, (Object[]) shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.swap(doubleArray0, (int) (short)1393, 2137401565);
      assertArrayEquals(new double[] {1526.0, 1526.0, (-29.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray2 = ArrayUtils.insert((int) (short)2, shortArray1, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertArrayEquals(new short[] {(short)653, (short)1526, (short)653, (short)1526, (short)2, (short)2}, shortArray2);
      assertArrayEquals(new short[] {(short)653, (short)1526, (short)2}, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(6, shortArray2.length);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray2);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (short)8, 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1591L;
      longArray0[3] = 0L;
      longArray0[4] = 1591L;
      longArray0[5] = 1591L;
      longArray0[6] = 1591L;
      longArray0[7] = 1591L;
      int int0 = ArrayUtils.indexOf(longArray0, 1591L, (-2935));
      assertArrayEquals(new long[] {1591L, 0L, 0L, 0L, 1591L, 1591L, 1591L, 1591L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {1}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 1591L;
      floatArray0[2] = (float) 1591L;
      floatArray0[3] = (float) (-2935);
      floatArray0[4] = (float) 1591L;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 91.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 1591.0F, 1591.0F, (-2935.0F), 1591.0F, 0.0F, 91.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1591.0F, 1591.0F, (-2935.0F), 1591.0F, 0.0F, 91.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = 'y';
      charArray0[2] = 'S';
      charArray0[3] = 'w';
      charArray0[4] = '7';
      int int1 = ArrayUtils.indexOf(charArray0, 'S', 1);
      assertArrayEquals(new char[] {'\"', 'y', 'S', 'w', '7'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(5, charArray0.length);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 1638, 1215, 1215);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1215;
      longArray0[1] = (long) 1215;
      longArray0[2] = (long) 1215;
      longArray0[3] = (long) 1638;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {1215L, 1215L, 1215L, 1638L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[3] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = new boolean[25];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray2[5] = true;
      booleanArray2[6] = true;
      booleanArray2[7] = true;
      booleanArray2[8] = true;
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurrences(booleanArray2, false);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray3));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(9, booleanArray3.length);
      assertEquals(25, booleanArray2.length);
      assertNotNull(booleanArray3);
      
      String[] stringArray0 = ArrayUtils.removeElement((String[]) null, (Object) "");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '5';
      charArray0[2] = '9';
      charArray0[3] = '{';
      charArray0[4] = 'f';
      charArray0[5] = 'u';
      charArray0[6] = '-';
      charArray0[7] = ' ';
      charArray0[8] = '5';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 1215);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1215, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 64L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {64L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.shift((Object[]) null, 10);
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 10;
      longArray1[1] = 2147483647L;
      longArray1[2] = (long) 1;
      longArray1[3] = (long) 1;
      longArray1[4] = 64L;
      longArray1[5] = (long) 1;
      longArray1[6] = (long) 1;
      longArray1[7] = (long) 10;
      ArrayUtils.reverse(longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {10L, 1L, 1L, 64L, 1L, 1L, 2147483647L, 10L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      long[] longArray0 = new long[24];
      longArray0[0] = (long) 'J';
      longArray0[1] = (long) 'J';
      longArray0[2] = (long) 'J';
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) 'J';
      longArray0[5] = (long) 'J';
      longArray0[6] = (long) 'J';
      longArray0[7] = (long) 'J';
      longArray0[8] = (long) 'J';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 29, (-2146685957));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(24, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'J';
      objectArray0[1] = (Object) 74L;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(2, objectArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-693);
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short)1393;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'J';
      ArrayUtils.shuffle(doubleArray0, (Random) null);
      assertArrayEquals(new double[] {74.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)15;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-96), (byte) (-93), (byte) (-87), (byte)1, (byte)15}, byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-96), (byte) (-93), (byte) (-87), (byte)1, (byte)15}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      
      Byte[] byteArray2 = new Byte[1];
      byteArray2[0] = (Byte) (byte) (-93);
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)46);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-93)}, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray3.length);
      assertNotNull(byteArray3);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-87);
      shortArray0[1] = (short) (byte)15;
      shortArray0[2] = (short) (byte) (-96);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-87), (short)15, (short) (-96)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[8];
      boolean[] booleanArray0 = new boolean[4];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      Byte byte0 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)97, object0);
      assertNotNull(object0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)1;
      ArrayUtils.swap(shortArray0, (int) (byte)1, (int) (byte)1);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)10;
      shortArray0[2] = (short) (-96);
      shortArray0[3] = (short)10;
      shortArray0[4] = (short)10;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)10;
      shortArray0[7] = (short)10;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)8);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)10, (short)10, (short) (-96), (short)10, (short)10, (short) (-1), (short)10, (short)10}, shortArray0);
      assertArrayEquals(new short[] {(short)10, (short)10, (short) (-96), (short)10, (short)10, (short) (-1), (short)10, (short)10}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)10;
      intArray0[1] = (int) (short)10;
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (int) (short) (-96);
      intArray0[4] = (int) (short)10;
      intArray0[5] = (int) (short)8;
      intArray0[6] = (int) (short)10;
      intArray0[7] = (int) (short)10;
      intArray0[8] = (int) (short)10;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {10, 10, (-1), (-96), 10, 8, 10, 10, 10}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1;
      short short0 = (short)26;
      shortArray0[1] = (short)26;
      shortArray0[2] = (short)3323;
      shortArray0[3] = (short) (-1147);
      shortArray0[4] = (short)14;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)26, (short)3323, (short) (-1147), (short)14}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-1147);
      intArray0[1] = (int) (short)3323;
      intArray0[2] = (int) (short)3323;
      intArray0[3] = (int) (short) (-1147);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1147), 3323, 3323, (-1147)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, (int) (short) (-1147));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1147, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, mutableInt0.intValue());
      assertEquals(711L, mutableInt0.longValue());
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals(711, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, mutableInt0.intValue());
      assertEquals(711L, mutableInt0.longValue());
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals(711, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(3);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(3, (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      int int0 = mutableInt0.getAndAdd((int) integerArray0[1]);
      assertEquals(1422, mutableInt0.intValue());
      assertEquals(1422.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1422, (int)mutableInt0.getValue());
      assertEquals((byte) (-114), mutableInt0.byteValue());
      assertEquals(1422, (int)mutableInt0.toInteger());
      assertEquals((short)1422, mutableInt0.shortValue());
      assertEquals(1422L, mutableInt0.longValue());
      assertEquals(1422.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1422", mutableInt0.toString());
      assertEquals(5, integerArray0.length);
      assertEquals(711, int0);
      
      integerArray0[2] = integer0;
      boolean[] booleanArray0 = new boolean[5];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float((-2446.506520974484));
      assertEquals((-2446.5066F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals((-2446.5066F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-3538.947F));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-3538.947F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = Float.valueOf(4037.8215F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(4037.8215F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-2446.506520974484));
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals((-2446.5066F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float((double) 4037.8215F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertEquals(4037.8215F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = Float.valueOf((float) floatArray0[4]);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals((-2446.5066F), (float)float6, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-2446.5066F), (-2446.5066F), (-3538.947F), 4037.8215F, (-2446.5066F), 4037.8215F, (-2446.5066F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      Byte byte0 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)8, object0);
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(mutableInt0, object0);
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1", mutableInt0.toString());
      assertFalse(boolean0);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      Float float0 = new Float((double) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-5853.0F));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-5853.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = Float.valueOf(1.445301F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(1.445301F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float((float) (-1));
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      Float float5 = new Float(2212.433900273681);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals(2212.4338F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      Float float6 = Float.valueOf(4037.8215F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertEquals(4037.8215F, (float)float6, 0.01F);
      assertNotNull(float6);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float6;
      floatArray0[2] = float0;
      floatArray0[2] = float5;
      floatArray0[3] = float1;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1215.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1215.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-4790.95283761), 1236.10249139);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1);
      
      ArrayUtils.swap(intArray0, 0, 0, (-1324));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      int[] intArray0 = new int[15];
      intArray0[7] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.0;
      MutableInt mutableInt0 = new MutableInt((-3440));
      assertEquals((-3440.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3440), (int)mutableInt0.getValue());
      assertEquals((byte) (-112), mutableInt0.byteValue());
      assertEquals((-3440), (int)mutableInt0.toInteger());
      assertEquals((-3440.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3440), mutableInt0.intValue());
      assertEquals((-3440L), mutableInt0.longValue());
      assertEquals("-3440", mutableInt0.toString());
      assertEquals((short) (-3440), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals((-3440.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3440), (int)mutableInt0.getValue());
      assertEquals((byte) (-112), mutableInt0.byteValue());
      assertEquals((-3440), (int)mutableInt0.toInteger());
      assertEquals((-3440.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3440), mutableInt0.intValue());
      assertEquals((-3440L), mutableInt0.longValue());
      assertEquals("-3440", mutableInt0.toString());
      assertEquals((short) (-3440), mutableInt0.shortValue());
      assertEquals((-3440), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-3440));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-3440), (int)integer1);
      assertNotNull(integer1);
      
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, 3131);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.shift((byte[]) null, 958, 0, 0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ML/ RWj=aD('PqQ";
      stringArray0[1] = "w%Y[JWz";
      stringArray0[2] = "";
      stringArray0[3] = ", Length: ";
      String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) "ML/ RWj=aD('PqQ");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      ArrayUtils.shift((byte[]) null, 85, 19, 19);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 19;
      floatArray0[1] = (float) 85;
      floatArray0[2] = (float) 19;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) 19;
      floatArray0[5] = (float) 85;
      floatArray0[6] = (float) 85;
      floatArray0[7] = (float) 19;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 85);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {19.0F, 85.0F, 19.0F, 1.0F, 19.0F, 85.0F, 85.0F, 19.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {19.0F, 19.0F, 1.0F, 19.0F, 85.0F, 85.0F, 19.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(8, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float((-2446.506520974484));
      assertEquals((-2446.5066F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals((-2446.5066F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-3538.947F));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-3538.947F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Object object0 = ArrayUtils.get((Object[]) floatArray0, 5);
      assertEquals(7, floatArray0.length);
      assertNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) floatArray0, (Object) null, 824);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(7, floatArray0.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 5;
      intArray0[1] = 1;
      intArray0[2] = 824;
      intArray0[3] = 5;
      intArray0[4] = 824;
      intArray0[5] = 824;
      intArray0[6] = 824;
      intArray0[7] = 824;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 5);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {5, 1, 824, 5, 824, 824, 824, 824}, intArray0);
      assertArrayEquals(new int[] {1, 824, 824, 824, 824, 824}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      
      int int0 = ArrayUtils.indexOf(intArray1, 824);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {5, 1, 824, 5, 824, 824, 824, 824}, intArray0);
      assertArrayEquals(new int[] {1, 824, 824, 824, 824, 824}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = 5176.038;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 44;
      doubleArray0[3] = (-1493.8663438634007);
      doubleArray0[6] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0, 44, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 44.0, (-1493.8663438634007), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, 44);
      assertEquals(0, objectArray0.length);
      assertNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '8';
      charArray0[2] = 'g';
      charArray0[3] = '8';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'g');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'/', '8', 'g', '8'}, charArray0);
      assertArrayEquals(new char[] {'/', '8', '8'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      
      char[] charArray2 = new char[8];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'g';
      charArray0[1] = '/';
      charArray2[2] = 'g';
      charArray2[3] = '/';
      charArray2[4] = 'g';
      charArray2[5] = 'g';
      charArray2[6] = '/';
      charArray2[7] = '/';
      char[] charArray3 = ArrayUtils.addAll(charArray2, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertArrayEquals(new char[] {'g', '\u0000', 'g', '/', 'g', 'g', '/', '/'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertEquals(8, charArray2.length);
      assertEquals(16, charArray3.length);
      assertNotNull(charArray3);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.insert((-2550), doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = (-1314);
      Short short0 = new Short((short) (-29));
      assertEquals((short) (-29), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)8);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)8, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short)641);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)641, (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-29));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short) (-29), (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short)2);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertEquals((short)2, (short)short4);
      assertNotNull(short4);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-5888);
      doubleArray0[1] = (double) (short)8;
      doubleArray0[2] = (-304.589);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3066), (-3066));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-5888.0), 8.0, (-304.589)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (short)8);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf((char[]) null, '&');
      assertEquals((-1), int0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Double[] doubleArray2 = new Double[5];
      doubleArray2[0] = (Double) 8.0;
      doubleArray2[1] = (Double) (-5888.0);
      doubleArray2[2] = (Double) 8.0;
      doubleArray2[3] = (Double) 8.0;
      doubleArray2[4] = (Double) (-5888.0);
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray2);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, doubleArray2.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-1);
      ArrayUtils.reverse(byteArray0, 472, 1881);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)91, (byte) (-1)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-966);
      floatArray0[2] = (float) 1881;
      floatArray0[3] = (float) (-966);
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (byte) (-1);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) (byte) (-1));
      assertArrayEquals(new float[] {(-966.0F), 0.0F, 1881.0F, (-966.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils.shift(intArray0, 5);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2131;
      shortArray0[1] = (short)2131;
      shortArray0[2] = (short) (byte)43;
      shortArray0[3] = (short) (byte)43;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)10);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2131, (short)2131, (short)43, (short)43}, shortArray0);
      assertArrayEquals(new short[] {(short)2131, (short)2131, (short)43, (short)43}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)43;
      intArray0[1] = (int) (short)2131;
      intArray0[2] = (int) (short)2131;
      intArray0[3] = (int) (short)2131;
      intArray0[4] = (int) (short)10;
      intArray0[6] = (int) (short)43;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)43;
      intArray1[1] = (int) (byte)43;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertArrayEquals(new int[] {43, 43}, intArray1);
      assertArrayEquals(new int[] {2131, 2131, 2131, 10, 0}, intArray2);
      assertArrayEquals(new int[] {43, 2131, 2131, 2131, 10, 0, 43}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray1.length);
      assertEquals(5, intArray2.length);
      assertEquals(7, intArray0.length);
      assertNotNull(intArray2);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)109);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1911.7383884133);
      doubleArray0[3] = (-2050.09573038531);
      doubleArray0[2] = (-5612.396077154137);
      doubleArray0[3] = (-335.045);
      doubleArray0[4] = 2617.099982964864;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 963.583089258056;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-1);
      ArrayUtils.reverse(byteArray0, (-966), (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte)81, (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (-966);
      floatArray0[2] = (float) (byte) (-1);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (byte)81);
      assertArrayEquals(new float[] {(-1.0F), (-966.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift((int[]) null, Integer.MAX_VALUE);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (int) (byte) (-1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)54);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)81, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)81, (byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)56;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)5;
      shortArray0[3] = (short) (-1115);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)74;
      shortArray0[6] = (short)46;
      ArrayUtils.swap(shortArray0, (int) (short) (-1115), 3193);
      assertArrayEquals(new short[] {(short)56, (short)2, (short)5, (short) (-1115), (short) (-1), (short)74, (short)46}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(491.63460000000003);
      assertEquals(491.63460000000003, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[7];
      Double double1 = new Double((-1L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)107;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)9, 2144966225);
      assertArrayEquals(new byte[] {(byte)0, (byte)107, (byte)0, (byte)107, (byte)107}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(doubleArray1, (-5853), 69, 2912);
      assertArrayEquals(new double[] {(-1.0), 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (byte)107;
      longArray1[1] = (long) (byte)107;
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {107L, 107L}, longArray1);
      assertArrayEquals(new long[] {107L, 107L}, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      assertNotNull(longArray2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 107L;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-5853);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) 107L;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-5853.0F));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {107.0F, (-1.0F), 0.0F, 107.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {107.0F, (-1.0F), (-5853.0F), 0.0F, 107.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'F';
      intArray0[2] = (-51);
      intArray0[3] = (-51);
      intArray0[4] = (-553);
      intArray0[5] = (int) 'A';
      ArrayUtils.shift(intArray0, (-51), 824, (-553));
      assertArrayEquals(new int[] {0, (-51), (-51), (-553), 65, 70}, intArray0);
      assertEquals(6, intArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)147;
      shortArray0[1] = (short)1006;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = 3;
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals(711L, mutableInt0.longValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, mutableInt0.intValue());
      assertEquals((short)711, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertFalse(integer0.equals((Object)int0));
      assertEquals(711L, mutableInt0.longValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, mutableInt0.intValue());
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(3);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(3, (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      int int1 = mutableInt0.getAndAdd((int) integerArray0[1]);
      assertFalse(int1 == int0);
      assertEquals((byte) (-114), mutableInt0.byteValue());
      assertEquals(1422, (int)mutableInt0.toInteger());
      assertEquals(1422, (int)mutableInt0.getValue());
      assertEquals(1422.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1422, mutableInt0.shortValue());
      assertEquals(1422, mutableInt0.intValue());
      assertEquals("1422", mutableInt0.toString());
      assertEquals(1422.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1422L, mutableInt0.longValue());
      assertEquals(5, integerArray0.length);
      assertEquals(711, int1);
      
      integerArray0[2] = integer0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, 1983);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)5;
      ArrayUtils.shift(byteArray0, 3, (int) (byte) (-28), (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-28), (byte)5}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 711;
      intArray0[1] = int0;
      intArray0[2] = 3;
      intArray0[3] = 116;
      intArray0[4] = (int) (byte)5;
      intArray0[5] = 1983;
      ArrayUtils.swap(intArray0, (int) (byte) (-28), 759, (-1490));
      assertArrayEquals(new int[] {711, 3, 3, 116, 5, 1983}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ArrayUtils.swap((int[]) null, (-523), (-523));
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-523));
      assertEquals((-523), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) (-523));
      assertEquals((-523.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals((-523.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-523.0F), (-523.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, (-1), (-1), (-2308));
      assertArrayEquals(new float[] {(-523.0F), (-523.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-2308));
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'G';
      charArray0[2] = 'q';
      charArray0[3] = 'E';
      charArray0[4] = '?';
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "Sd";
      stringArray0[2] = "jdk@CM C]]Td=;[=&";
      String[] stringArray1 = ArrayUtils.clone(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1161L));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-82);
      Double double0 = new Double((byte)116);
      assertEquals(116.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((byte)116);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(116.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)94, (byte)116, (byte)94, (byte) (-1), (byte) (-82)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)94, (byte)116, (byte)94, (byte) (-1), (byte) (-82)}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '\\');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\\', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Object[] objectArray0 = new Object[9];
      Boolean boolean0 = new Boolean(".\"S;cUq./P{`]~3 ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Object object0 = ArrayUtils.get(objectArray0, (int) 94, (Object) boolean0);
      assertEquals(9, objectArray0.length);
      assertEquals(false, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) (byte)94;
      MutableInt mutableInt0 = new MutableInt((Number) (byte) (-1));
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("-`oe@pa(dwZMx2#", long0);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      
      longArray0[0] = long1;
      long long2 = 0L;
      Long long3 = new Long(0L);
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertEquals(0L, (long)long3);
      assertNotNull(long3);
      
      longArray0[1] = long3;
      Long long4 = Long.valueOf(long2);
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long0));
      assertEquals(0L, (long)long4);
      assertNotNull(long4);
      
      longArray0[2] = long4;
      Long long5 = new Long(0);
      assertTrue(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long2));
      assertEquals(0L, (long)long5);
      assertNotNull(long5);
      
      longArray0[3] = long5;
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.indexOf(booleanArray1, true);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1156L));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1165L);
      floatArray0[1] = (float) (-1165L);
      floatArray0[2] = (float) (-1165L);
      floatArray0[3] = (float) (-1165L);
      floatArray0[8] = (float) (-1165L);
      floatArray0[5] = (float) (-1156L);
      floatArray0[6] = (float) (-1165L);
      floatArray0[7] = (float) (-1165L);
      floatArray0[8] = (float) (-1165L);
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {(-1165.0F), (-1165.0F), (-1165.0F), 0.0F, (-1156.0F), (-1165.0F), (-1165.0F), (-1165.0F), (-1165.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = 'B';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'B', ' '}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(997L);
      assertEquals(997L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-2645L));
      assertFalse(long1.equals((Object)long0));
      assertEquals((-2645L), (long)long1);
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-3440));
      assertEquals((-3440), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(4, integerArray0.length);
      assertEquals((-3440), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle", integerArray0[0]);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(4, integerArray0.length);
      assertEquals((-3440), (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1653);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(1653, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integer2.equals((Object)integer3));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(4, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotNull(integerArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-121);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-121)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = '}';
      charArray0[2] = 'E';
      charArray0[3] = 'K';
      ArrayUtils.swap(charArray0, (int) integerArray0[1], 64, (-3440));
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new char[] {'V', '}', 'E', 'K'}, charArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(4, charArray0.length);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1072L;
      longArray0[1] = 0L;
      longArray0[2] = 2060L;
      longArray0[3] = 2147483647L;
      longArray0[4] = (-996L);
      longArray0[5] = 1030L;
      longArray0[6] = 2125L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {1072L, 0L, 2060L, 2147483647L, (-996L), 1030L, 2125L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      
      Character[] characterArray0 = new Character[8];
      char char0 = 'J';
      Character character0 = new Character('J');
      assertTrue(character0.equals((Object)char0));
      assertEquals('J', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('J');
      assertTrue(character1.equals((Object)character0));
      assertEquals('J', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('J');
      assertTrue(character2.equals((Object)character0));
      assertEquals('J', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('D');
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('D', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('=');
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertEquals('=', (char)character4);
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character(']');
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character3));
      assertEquals(']', (char)character5);
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf(char0);
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)character0));
      assertEquals('J', (char)character6);
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character(char0);
      assertFalse(character7.equals((Object)character4));
      assertTrue(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character5));
      assertTrue(character7.equals((Object)character6));
      assertTrue(character7.equals((Object)character0));
      assertTrue(character7.equals((Object)character2));
      assertTrue(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character3));
      assertEquals('J', (char)character7);
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, characterArray1.length);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-475.2014F);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-475.2013854980469)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean2);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)91, object0);
      assertNotNull(object0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)91;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)91, (byte)91, (byte)91, (byte)0, (byte)0, (byte)91, (byte)91}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = '{';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(2072L, 1166L, 2072L);
      assertNotNull(longStream0);
      
      boolean boolean1 = mockRandom0.nextBoolean();
      assertFalse(boolean1);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'{', 'v'}, charArray0);
      assertEquals(2, charArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)91;
      floatArray0[1] = (float) (byte)91;
      floatArray0[2] = (float) (byte)91;
      floatArray0[3] = (float) (byte)91;
      floatArray0[4] = (float) (byte)91;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {91.0F, 91.0F, 91.0F, 91.0F, 91.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      long[] longArray1 = new long[6];
      longArray1[0] = (long) (byte)1;
      longArray1[1] = (long) (byte)91;
      longArray1[2] = 467L;
      longArray1[3] = (long) '{';
      longArray1[4] = (long) (byte)91;
      longArray1[5] = (long) (byte)91;
      ArrayUtils.shift(longArray1, (int) (byte)91, (int) (byte)91, 1506);
      assertArrayEquals(new long[] {1L, 91L, 467L, 123L, 91L, 91L}, longArray1);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.5);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, (-2308), (-2308), (-2308));
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2308);
      intArray0[1] = (-2308);
      intArray0[2] = (-2308);
      intArray0[3] = (-2308);
      boolean boolean0 = ArrayUtils.contains(intArray0, 88);
      assertArrayEquals(new int[] {(-2308), (-2308), (-2308), (-2308), 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get((Object[]) floatArray0, 1379);
      assertEquals(1, floatArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) float1;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(floatArray1);
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2308);
      doubleArray0[1] = (double) 1379;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-2308);
      doubleArray0[4] = (double) 1379;
      doubleArray0[5] = 639.0949647487791;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2308.0), 88, 0.0);
      assertArrayEquals(new double[] {(-2308.0), 1379.0, (-1.0), (-2308.0), 1379.0, 639.0949647487791}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(3, int0);
      
      Boolean boolean3 = Boolean.TRUE;
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      assertNotNull(boolean3);
      
      boolean boolean4 = ArrayUtils.isEquals(object0, boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean4);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2259);
      shortArray0[2] = (short)3876;
      shortArray0[3] = (short)5506;
      shortArray0[4] = (short)458;
      shortArray0[5] = (short)353;
      shortArray0[6] = (short)57;
      shortArray0[7] = (short) (-1335);
      shortArray0[8] = (short) (-290);
      int int1 = ArrayUtils.indexOf(shortArray0, (short)3);
      assertArrayEquals(new short[] {(short)0, (short) (-2259), (short)3876, (short)5506, (short)458, (short)353, (short)57, (short) (-1335), (short) (-290)}, shortArray0);
      assertFalse(int1 == int0);
      assertEquals(9, shortArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (-2050.09573038531);
      doubleArray0[2] = (-5612.396077154137);
      doubleArray0[3] = (-335.045);
      doubleArray0[4] = 2617.099982964864;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 963.583089258056;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byte byte0 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      ArrayUtils.reverse(byteArray0, (-966), (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte)81, (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (-966);
      floatArray0[2] = (float) (byte) (-1);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (byte)81);
      assertArrayEquals(new float[] {(-1.0F), (-966.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift((int[]) null, Integer.MAX_VALUE);
      int int0 = 1201;
      ArrayUtils.swap(doubleArray0, 1201, 311);
      assertArrayEquals(new double[] {0.0, 0.0, (-5612.396077154137), (-335.045), 2617.099982964864, 0.0, 963.583089258056, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[0];
      int int1 = (-764);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-764));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -764, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1314);
      intArray0[2] = 985;
      intArray0[3] = (-1277);
      intArray0[4] = 109;
      intArray0[5] = 49;
      intArray0[6] = 49;
      intArray0[7] = 985;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-1314), 985, (-1277), 109, 49, 49, 985}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      assertNotNull(intArray1);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((double) 985);
      assertEquals(985.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 49);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(49.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) 985);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(985.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) 109);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(109.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) (-1));
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-849.8774F));
      assertArrayEquals(new float[] {985.0F, 49.0F, 985.0F, 109.0F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray0, "V>Bc]dXa[rk;Bbk?>");
      assertEquals(5, stringArray0.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (float)floatArray0[0];
      doubleArray0[1] = (double) 109;
      doubleArray0[2] = (double) (-1277);
      doubleArray0[3] = (double) 109;
      doubleArray0[4] = (double) (-1314);
      doubleArray0[5] = (double) 49;
      doubleArray0[6] = (double) (float)floatArray0[4];
      doubleArray0[7] = 109.7;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 557.8129617645727, 219, (-1.0));
      assertArrayEquals(new double[] {985.0, 109.0, (-1277.0), 109.0, (-1314.0), 49.0, (-1.0), 109.7}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'F';
      intArray0[2] = (-51);
      intArray0[3] = (-51);
      intArray0[4] = (-553);
      intArray0[5] = (int) 'A';
      ArrayUtils.shift(intArray0, (-51), 824, (-553));
      assertArrayEquals(new int[] {0, (-51), (-51), (-553), 65, 70}, intArray0);
      assertEquals(6, intArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)127;
      shortArray0[1] = (short)1006;
      shortArray0[2] = (short)52;
      shortArray0[3] = (short) (-1474);
      shortArray0[4] = (short)4;
      ArrayUtils.swap(shortArray0, (-2145121868), (int) (short)1006, (int) (short) (-1474));
      assertArrayEquals(new short[] {(short)127, (short)1006, (short)52, (short) (-1474), (short)4}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (int) (short) (-1474));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1474, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 32, 1072);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0L;
      Object object0 = ArrayUtils.get(objectArray0, 1072);
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[1] = null;
      longArray0[2] = 0L;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) 0L;
      objectArray0[6] = (Object) 0L;
      objectArray0[7] = (Object) 0L;
      ArrayUtils.shift(objectArray0, 1072);
      assertEquals(8, objectArray0.length);
      
      Character[] characterArray0 = new Character[7];
      char char0 = ';';
      Character character0 = new Character(';');
      assertTrue(character0.equals((Object)char0));
      assertEquals(';', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(';');
      assertTrue(character1.equals((Object)character0));
      assertEquals(';', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('N');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertEquals('N', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('N');
      assertFalse(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertEquals('N', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf((char) character0);
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertEquals(';', (char)character4);
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf(char0);
      assertFalse(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertEquals(';', (char)character5);
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf(char0);
      assertFalse(character6.equals((Object)character3));
      assertTrue(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertEquals(';', (char)character6);
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {';', ';', 'N', 'N', ';', ';', ';'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)43, (byte)43}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-87);
      shortArray0[1] = (short) (byte) (-87);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-87), (short) (-87)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Character character0 = Character.valueOf('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character(')');
      assertFalse(character1.equals((Object)character0));
      assertEquals(')', (char)character1);
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('w');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('w', (char)character2);
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'b');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, (int) (byte) (-87), 451);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1L);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-3L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-3L), (long)long2);
      assertNotNull(long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {(-1L), 1L, (-3L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.shuffle(longArray1);
      assertArrayEquals(new long[] {1L, (-3L), (-1L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[2] = (byte)43;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)0, (byte)43}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-87);
      byteArray0[0] = (byte) (-87);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-87)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Character character0 = Character.valueOf('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character(')');
      assertFalse(character1.equals((Object)character0));
      assertEquals(')', (char)character1);
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('w');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('w', (char)character2);
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'b');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, (int) (byte) (-87), 451);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1L);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-3L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-3L), (long)long2);
      assertNotNull(long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {(-1L), 1L, (-3L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.swap(longArray1, 0, (-1));
      assertArrayEquals(new long[] {(-1L), 1L, (-3L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = (-1314);
      Short short0 = new Short((short) (-29));
      assertEquals((short) (-29), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)8);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)8, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short)653);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)653, (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-29));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertEquals((short) (-29), (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short)2);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertEquals((short)2, (short)short4);
      assertNotNull(short4);
      
      Short short5 = new Short((short)653);
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertEquals((short)653, (short)short5);
      assertNotNull(short5);
      
      Short short6 = new Short((short)1526);
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short2));
      assertEquals((short)1526, (short)short6);
      assertNotNull(short6);
      
      Short[] shortArray0 = new Short[3];
      Float float0 = new Float((double) (byte)1);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (short) (-29));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-29.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((double) (-1314));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1314.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((double) (short) (-29));
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((-29.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      Short short7 = new Short((short) (-991));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short0));
      assertEquals((short) (-991), (short)short7);
      assertNotNull(short7);
      
      int int0 = ArrayUtils.indexOf((Object[]) shortArray0, (Object) short1, (-1314));
      assertFalse(short1.equals((Object)short2));
      assertFalse(short1.equals((Object)short3));
      assertFalse(short1.equals((Object)short6));
      assertFalse(short1.equals((Object)short7));
      assertFalse(short1.equals((Object)short5));
      assertFalse(short1.equals((Object)short4));
      assertFalse(short1.equals((Object)short0));
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0, "[eIU.|wTnD['$");
      assertEquals(3, stringArray0.length);
      assertEquals(3, shortArray0.length);
      assertNotNull(stringArray0);
      
      Short short8 = new Short((byte)1);
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short5));
      assertFalse(short8.equals((Object)short6));
      assertFalse(short8.equals((Object)short4));
      assertEquals((short)1, (short)short8);
      assertNotNull(short8);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(short8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)20;
      Float float0 = new Float((double) (byte)67);
      assertEquals(67.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (byte)84);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(84.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((float) (byte)20);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(20.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((double) (byte)1);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float(2578.5695);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(2578.5696F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {84.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (float) (byte)20, (int) (byte)84);
      assertArrayEquals(new float[] {84.0F}, floatArray1, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)84;
      shortArray0[1] = (short) (byte)20;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      shortArray0[4] = (short) (byte)1;
      shortArray0[5] = (short) (byte)84;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)20;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (byte)1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)84, (short)20, (short)1, (short)1, (short)1, (short)84, (short)0, (short)20}, shortArray0);
      assertArrayEquals(new short[] {(short)84, (short)20, (short)84, (short)0, (short)20}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      
      Short short0 = new Short((short)20);
      assertEquals((short)20, (short)short0);
      assertNotNull(short0);
      
      int int0 = ArrayUtils.indexOf((Object[]) floatArray0, (Object) short0, (int) (byte)0);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray1, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertArrayEquals(new float[] {84.0F, 84.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {84.0F}, floatArray1, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(2, floatArray2.length);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray2);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray0, "W");
      assertEquals(1, floatArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-2146686033));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146686033, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 49;
      intArray0[3] = 49;
      ArrayUtils.swap(intArray0, 0, 49);
      assertArrayEquals(new int[] {0, 49, 0, 49}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      ArrayUtils.swap(charArray0, 521, (-3), 32);
      assertArrayEquals(new char[] {'r', 'r', 'r'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Float float0 = new Float((double) 49);
      assertEquals(49.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-446.4F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-446.4F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-1018.1760101525174));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1018.176F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((float) 49);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(49.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Short short0 = new Short((short) (-1485));
      assertEquals((short) (-1485), (short)short0);
      assertNotNull(short0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'r', 'r', 'r'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, 1053, (-2432), 658);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-446.4F);
      doubleArray0[1] = (double) 521;
      doubleArray0[2] = (double) (-2432);
      doubleArray0[3] = (double) (-3);
      doubleArray0[4] = (double) 521;
      doubleArray0[5] = (double) 49;
      doubleArray0[6] = (double) 1053;
      ArrayUtils.swap(doubleArray0, (-684), (int) (short) (-1485));
      assertArrayEquals(new double[] {(-446.3999938964844), 521.0, (-2432.0), (-3.0), 521.0, 49.0, 1053.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray1 = new Boolean[2];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = boolean0;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)24336;
      shortArray0[1] = (short)24336;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)24336);
      assertArrayEquals(new short[] {(short)24336, (short)24336}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils.shift((Object[]) booleanArray1, (-231), 2618, (-216));
      assertEquals(2, booleanArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)24336;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (short)24336;
      floatArray0[3] = (float) (short)24336;
      floatArray0[4] = (float) (short)24336;
      floatArray0[5] = (-70.49477F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)24336, 2636);
      assertArrayEquals(new float[] {24336.0F, 0.0F, 24336.0F, 24336.0F, 24336.0F, (-70.49477F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[7];
      longArray0[4] = 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(1L);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      ArrayUtils.reverse(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      Float float0 = new Float((double) doubleArray0[0]);
      assertEquals(3, doubleArray0.length);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 2406);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2406, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1.0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray1.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (-5233), (double) 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int1 == int0);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, 0, 2502);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(3, intArray1.length);
      assertEquals(2, intArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)2, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)102);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)102, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)55);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte)55, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)48);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertEquals((byte)48, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)2);
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertEquals((byte)2, (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte(byte0);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertEquals((byte)2, (byte)byte7);
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      Byte[] byteArray1 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      Character character0 = new Character('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('s');
      assertTrue(character1.equals((Object)character0));
      assertEquals('s', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      Character character2 = ArrayUtils.get(characterArray0, (int) character0, character0);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character1));
      assertEquals(7, characterArray0.length);
      assertEquals('s', (char)character2);
      assertNotNull(character2);
      
      MutableInt mutableInt0 = new MutableInt((-329));
      assertEquals((-329L), mutableInt0.longValue());
      assertEquals((-329.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-329), mutableInt0.shortValue());
      assertEquals((-329), mutableInt0.intValue());
      assertEquals((byte) (-73), mutableInt0.byteValue());
      assertEquals("-329", mutableInt0.toString());
      assertEquals((-329), (int)mutableInt0.getValue());
      assertEquals((-329), (int)mutableInt0.toInteger());
      assertEquals((-329.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-1);
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-79));
      assertArrayEquals(new byte[] {(byte)50, (byte) (-1)}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, byteArray0.length);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap((char[]) null, 1926, 6, 2228);
      ArrayUtils.swap((long[]) null, 2228, 70);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (char)character0;
      intArray0[1] = (int) (char)character0;
      intArray0[2] = (int) (byte)50;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {115, 115, 50}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals("711", mutableInt0.toString());
      assertEquals(711L, mutableInt0.longValue());
      assertEquals(711, mutableInt0.intValue());
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1393);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      
      Float float0 = new Float((double) (short)1393);
      assertEquals(1393.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(2122.8674987010418);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2122.8674F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(3700.731F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(3700.731F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(1.5);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(1.5F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float(3016.044230817768);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(3016.0442F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      Float[] floatArray0 = new Float[1];
      Float float5 = new Float(2578.5695);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals(2578.5696F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[0] = float5;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {2578.5696F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray1, 2725.2798F, 711);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new float[] {2578.5696F}, floatArray1, 0.01F);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(bitSet1);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)57);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Short short0 = new Short((short)48);
      assertEquals((short)48, (short)short0);
      assertNotNull(short0);
      
      int int0 = ArrayUtils.indexOf((Object[]) floatArray0, (Object) short0, 711);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 49;
      intArray0[3] = 49;
      ArrayUtils.swap(intArray0, 0, 49);
      assertArrayEquals(new int[] {0, 49, 0, 49}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[3];
      intArray0[3] = (int) 'r';
      charArray0[1] = '\u0000';
      charArray0[2] = 'r';
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(7, booleanArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 49);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 49, 0, 114}, intArray0);
      assertArrayEquals(new int[] {0, 0, 114}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(40.0);
      assertEquals(40.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2938.663781143062));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2938.663781143062), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-2938.663781143062), (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {40.0, (-2938.663781143062), (-2938.663781143062)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) Integer.MAX_VALUE;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) 49);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {2147483647L}, longArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 49);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 49, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 818;
      intArray0[3] = 818;
      ArrayUtils.swap(intArray0, 0, 818);
      assertArrayEquals(new int[] {0, 818, 0, 818}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false}, booleanArray0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(7, booleanArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 818);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 818, 0, 818}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(40.0);
      assertEquals(40.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2938.663781143062));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2938.663781143062), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-2938.663781143062), (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {40.0, (-2938.663781143062), (-2938.663781143062)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) Integer.MAX_VALUE;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) 818);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {2147483647L}, longArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'r';
      floatArray0[1] = (float) 'r';
      floatArray0[2] = (float) 'r';
      floatArray0[3] = (float) 'r';
      floatArray0[4] = (float) 2147483647L;
      floatArray0[5] = (float) 'r';
      ArrayUtils.swap(floatArray0, (-3975), 0);
      assertArrayEquals(new float[] {114.0F, 114.0F, 114.0F, 114.0F, 2.14748365E9F, 114.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[3] = 818;
      ArrayUtils.swap(intArray0, 0, 818);
      assertArrayEquals(new int[] {0, 0, 0, 818}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false}, booleanArray0));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(7, booleanArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 818);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 818}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(40.0);
      assertEquals(40.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2938.663781143062));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2938.663781143062), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = doubleArray0[0];
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(40.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {40.0, 40.0, 40.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) Integer.MAX_VALUE;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) 818);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {2147483647L}, longArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'r';
      floatArray0[1] = (float) 'r';
      charArray0[2] = 'r';
      longArray0[0] = 2147483647L;
      floatArray0[5] = (float) 'r';
      ArrayUtils.swap(floatArray0, (-3975), 0);
      assertArrayEquals(new float[] {114.0F, 114.0F, 0.0F, 0.0F, 0.0F, 114.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2016.4827F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 51.0F;
      floatArray0[5] = 1072.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 2016.4827F, 1.0F, 0.0F, 51.0F, 1072.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '<', 2712);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 603.5548702090445;
      doubleArray0[1] = 1421.9495;
      doubleArray0[2] = 1.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0);
      assertArrayEquals(new double[] {603.5548702090445, 1421.9495, 1.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-966.0F);
      floatArray0[1] = (-1.0F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-966.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2172.121105137, (-1.0));
      assertArrayEquals(new double[] {603.5548702090445, 1421.9495, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 1421.9495;
      objectArray0[1] = (Object) (-1.0F);
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = (Object) 1.0;
      objectArray0[4] = (Object) bitSet0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '1421.9495', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)26;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      
      Short short0 = new Short((short) (-700));
      assertEquals((short) (-700), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)1700);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)1700, (short)short1);
      assertNotNull(short1);
      
      Short[] shortArray1 = new Short[4];
      Short short2 = new Short((short)1);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)1, (short)short2);
      assertNotNull(short2);
      
      shortArray1[0] = short2;
      shortArray1[1] = (Short) (short)1;
      shortArray1[2] = short0;
      shortArray1[3] = short0;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short) (-700), (short) (-700)}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int int0 = 3;
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals(711L, mutableInt0.longValue());
      assertEquals(711, mutableInt0.intValue());
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertFalse(integer0.equals((Object)int0));
      assertEquals(711L, mutableInt0.longValue());
      assertEquals(711, mutableInt0.intValue());
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(711, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(3);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(3, (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      int int1 = mutableInt0.getAndAdd((int) integerArray0[1]);
      assertFalse(int1 == int0);
      assertEquals((byte) (-114), mutableInt0.byteValue());
      assertEquals(1422, (int)mutableInt0.toInteger());
      assertEquals(1422, (int)mutableInt0.getValue());
      assertEquals((short)1422, mutableInt0.shortValue());
      assertEquals(1422L, mutableInt0.longValue());
      assertEquals(1422.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1422, mutableInt0.intValue());
      assertEquals("1422", mutableInt0.toString());
      assertEquals(1422.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(5, integerArray0.length);
      assertEquals(711, int1);
      
      integerArray0[2] = integer0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int[] intArray0 = new int[1];
      intArray0[0] = int0;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {3}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)2139);
      assertEquals((short)2139, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)2139);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)2139, (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertArrayEquals(new short[] {(short)2139, (short)2139}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)20;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte)84, (byte)0, (byte)67, (byte)1, (byte)1, (byte)20, (byte)0, (byte)0}, byteArray0);
      assertEquals("{4, 5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(9, byteArray0.length);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.reverse((Object[]) null, Integer.MAX_VALUE, (int) (byte)84);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Character character0 = new Character('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('s');
      assertTrue(character1.equals((Object)character0));
      assertEquals('s', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[26];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (int) character0, (-1205));
      assertTrue(character0.equals((Object)character1));
      assertNull(byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      charArray0[1] = (char) character0;
      charArray0[3] = (char) character0;
      charArray0[4] = (char) character0;
      charArray0[5] = (char) character0;
      int int0 = ArrayUtils.indexOf(charArray0, 'J');
      assertArrayEquals(new char[] {'s', 's', '\u0000', 's', 's', 's'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'s', 's', '\u0000', 's', 's', 's'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Character character0 = new Character('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('s');
      assertTrue(character1.equals((Object)character0));
      assertEquals('s', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (int) character0, (-1205));
      assertTrue(character0.equals((Object)character1));
      assertNull(byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      charArray0[1] = (char) character0;
      charArray0[2] = (char) character0;
      charArray0[3] = (char) character0;
      charArray0[4] = (char) character0;
      charArray0[5] = (char) character0;
      int int0 = ArrayUtils.indexOf(charArray0, 'J');
      assertArrayEquals(new char[] {'s', 's', 's', 's', 's', 's'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'s', 's', 's', 's', 's', 's'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = Character.valueOf('b');
      assertFalse(character1.equals((Object)character0));
      assertEquals('b', (char)character1);
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = new Character('w');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('w', (char)character2);
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      Character character3 = Character.valueOf('Z');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('Z', (char)character3);
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      characterArray0[5] = character0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)6;
      Long long0 = new Long((byte)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      String string0 = ArrayUtils.toString((Object) long0, "w<mC($");
      assertEquals("0", string0);
      assertNotNull(string0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1147);
      doubleArray0[1] = 934.173;
      doubleArray0[2] = (double) (-1147);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 488.41973, (-316));
      assertArrayEquals(new double[] {(-1147.0), 934.173, (-1147.0)}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'v';
      longArray0[1] = (long) 'v';
      longArray0[2] = (long) 'v';
      longArray0[3] = (long) 'v';
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-401L));
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {118L, 118L, 118L, 118L}, longArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet1);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 118L);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1147.0), 934.173, (-1147.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {118.0, (-1147.0), 934.173, (-1147.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1072;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)3448;
      shortArray0[3] = (short)1585;
      shortArray0[4] = (short)772;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)1072, (short)0, (short)3448, (short)1585, (short)772}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((short)3448);
      assertEquals(3448, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1115);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1115, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int[] intArray0 = new int[5];
      intArray0[0] = 1719;
      intArray0[1] = (int) integerArray0[0];
      intArray0[2] = (int) (short)1072;
      intArray0[3] = (int) integerArray0[0];
      intArray0[4] = (int) (short)3448;
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {1719, 3448, 1072, 3448, 3448}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = '\"';
      charArray0[4] = 'd';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'd', 45);
      assertArrayEquals(new char[] {'d', 'd', 'd', '\"', 'd'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(4, int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 3448;
      floatArray0[1] = 2190.8984F;
      floatArray0[2] = (float) (short)3448;
      floatArray0[3] = (float) (short)1072;
      floatArray0[4] = (float) (short)3448;
      floatArray0[5] = (float) (short)1072;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 81.0F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {3448.0F, 2190.8984F, 3448.0F, 1072.0F, 3448.0F, 1072.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {3448.0F, 2190.8984F, 3448.0F, 1072.0F, 3448.0F, 1072.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Character character0 = new Character('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('s');
      assertTrue(character1.equals((Object)character0));
      assertEquals('s', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      Character character2 = ArrayUtils.get(characterArray0, (int) character0, character0);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character1));
      assertEquals(9, characterArray0.length);
      assertEquals('s', (char)character2);
      assertNotNull(character2);
      
      MutableInt mutableInt0 = new MutableInt((int) character0);
      assertTrue(character0.equals((Object)character1));
      assertEquals((byte)115, mutableInt0.byteValue());
      assertEquals("115", mutableInt0.toString());
      assertEquals(115, (int)mutableInt0.getValue());
      assertEquals(115, (int)mutableInt0.toInteger());
      assertEquals(115.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(115L, mutableInt0.longValue());
      assertEquals(115, mutableInt0.intValue());
      assertEquals((short)115, mutableInt0.shortValue());
      assertEquals(115.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      byte[] byteArray0 = new byte[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), (-56));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(2, byteArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = 5176.038;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-177);
      doubleArray0[3] = (-1493.8663438634007);
      doubleArray0[6] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0, (-177), (-2048));
      assertArrayEquals(new double[] {0.0, 0.0, (-177.0), (-1493.8663438634007), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, (-177));
      assertEquals(0, objectArray0.length);
      assertNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(doubleArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.5);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float1;
      Integer integer0 = new Integer(98);
      assertEquals(98, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 703);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (float) 703;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (float) 98;
      floatArray1[4] = (float) 98;
      int int0 = ArrayUtils.lastIndexOf(floatArray1, 0.0F);
      assertArrayEquals(new float[] {(-1.0F), 703.0F, 0.0F, 98.0F, 98.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(2, int0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 98;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) 98.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(doubleArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-128);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-87), Integer.MAX_VALUE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)45, (byte)0, (byte) (-1), (byte) (-128)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)45, (byte)0, (byte) (-1), (byte) (-128)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-87);
      doubleArray0[1] = 1723.7958;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (byte) (-128);
      doubleArray0[5] = (double) (byte)45;
      doubleArray0[6] = (double) (byte) (-1);
      doubleArray0[7] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, (int) (byte)0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1723.7958, 0.0, 0.0, (-128.0), 45.0, (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-87.0), 1723.7958, 0.0, 0.0, (-128.0), 45.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-3440));
      assertEquals((-3440), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(4, integerArray0.length);
      assertEquals((-3440), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle", integerArray0[0]);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(4, integerArray0.length);
      assertEquals((-3440), (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1653);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(1653, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(4, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotNull(integerArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-121);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte) (-80)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = '}';
      charArray0[2] = 'E';
      charArray0[3] = 'K';
      ArrayUtils.swap(charArray0, (int) integerArray0[1], 64, (-3440));
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new char[] {'V', '}', 'E', 'K'}, charArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(4, integerArray0.length);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-3440));
      assertEquals((-3440), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = Integer.getInteger("org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle", integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(4, integerArray0.length);
      assertEquals((-3440), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(1653);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1653, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[3] = integer2;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(4, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotNull(integerArray1);
      
      byte[] byteArray0 = new byte[21];
      byteArray0[1] = (byte) (-121);
      char[] charArray0 = new char[4];
      charArray0[1] = '}';
      charArray0[2] = 'E';
      charArray0[3] = 'K';
      ArrayUtils.swap(charArray0, (int) integerArray0[1], 64, (-3440));
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new char[] {'\u0000', '}', 'E', 'K'}, charArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(4, integerArray0.length);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-1314);
      short short0 = (short) (-29);
      Short short1 = new Short((short) (-29));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-29), (short)short1);
      assertNotNull(short1);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int)  (-29), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -29, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = 'J';
      charArray0[2] = 'l';
      charArray0[3] = 'j';
      charArray0[4] = 'u';
      charArray0[5] = 'u';
      charArray0[6] = 'u';
      ArrayUtils.swap(charArray0, 127, 127);
      assertArrayEquals(new char[] {'V', 'J', 'l', 'j', 'u', 'u', 'u'}, charArray0);
      assertEquals(7, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)91, object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)91;
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[7] = 'Z';
      charArray0[4] = 'Z';
      charArray0[5] = 'Z';
      charArray0[6] = 'Z';
      charArray0[7] = 'Z';
      charArray0[8] = 'Z';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Z');
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', '\u0000', 'Z', 'Z', 'Z', 'Z', 'Z'}, charArray0);
      assertEquals(9, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 4, 5, 6, 7, 8}", bitSet0.toString());
      assertEquals(8, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, charArray0.length);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1638.0F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.removeAll(floatArray1, intArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(0, intArray0.length);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      
      Short[] shortArray1 = ArrayUtils.removeElements((Short[]) null, (Short[]) null);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 1266.08467659, (-1));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-154);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-1080);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1378);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {1378, (-1), (-1), (-1), (-154), (-1), (-1), (-1), (-1), (-1080)}, intArray1);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-154), (-1), (-1), (-1), (-1), (-1080)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(10, intArray1.length);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1098;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)19;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1098, (short)8, (short)1, (short)19}, shortArray0);
      assertArrayEquals(new short[] {(short)1098, (short)8, (short)1, (short)19}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.removeAllOccurences(longArray2, (long) (short)8);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertNotNull(longArray3);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 49;
      intArray0[3] = 49;
      ArrayUtils.swap(intArray0, 0, 49);
      assertArrayEquals(new int[] {0, 49, 0, 49}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      ArrayUtils.swap(charArray0, 521, (-3), 32);
      assertArrayEquals(new char[] {'r', 'r', 'r'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Float float0 = new Float((double) 49);
      assertEquals(49.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-446.4F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-446.4F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-1018.1760101525174));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1018.176F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((float) 49);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(49.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Short short0 = new Short((short) (-1485));
      assertEquals((short) (-1485), (short)short0);
      assertNotNull(short0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'r', 'r', 'r'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, 1053, (-2432), 658);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      Float float4 = new Float(2941.1295388970175);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals(2941.1296F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) float4, (-1399));
      assertArrayEquals(new char[] {'r', 'r', 'r'}, charArray0);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 49;
      longArray0[1] = (long) 49;
      longArray0[2] = (long) 'r';
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {49L, 49L, 114L}, longArray0);
      assertArrayEquals(new long[] {49L, 49L, 114L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byte0;
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)91;
      shortArray0[2] = (short)9;
      shortArray0[3] = (short) (byte)91;
      shortArray0[4] = (short) (byte)91;
      shortArray0[5] = (short)6;
      shortArray0[6] = (short) (byte)91;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)9, (short)91, (short)91, (short)6, (short)91, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 4802L;
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0L;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((double) (-1.0F));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, (-2308), 3048, (-2308));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3048;
      intArray0[1] = (-2308);
      intArray0[2] = (-2308);
      int int0 = ArrayUtils.indexOf(intArray0, (-2308), (-2165));
      assertArrayEquals(new int[] {3048, (-2308), (-2308)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1, int0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertNotNull(floatArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (-1.0F), (-2308));
      assertNotSame(floatArray1, floatArray2);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)122;
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)767;
      shortArray0[3] = (short) (-1785);
      shortArray0[4] = (short)1316;
      shortArray0[5] = (short) (-2308);
      shortArray0[6] = (short)512;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)1368);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)122, (short)7, (short)767, (short) (-1785), (short)1316, (short) (-2308), (short)512}, shortArray1);
      assertArrayEquals(new short[] {(short)122, (short)7, (short)767, (short) (-1785), (short)1316, (short) (-2308), (short)512}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertNotNull(shortArray1);
      
      Short short0 = new Short((short) (-2308));
      assertEquals((short) (-2308), (short)short0);
      assertNotNull(short0);
      
      int int1 = ArrayUtils.indexOf((Object[]) floatArray0, (Object) null, 3048);
      assertFalse(int1 == int0);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)20;
      Float float0 = new Float((double) (byte)77);
      assertEquals(77.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (byte)84);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(84.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((double) (byte)0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(41.0);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(41.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float(2578.5695);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(2578.5696F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float1;
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L), (int) (byte)77);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(0, longArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float((-2446.506520974484));
      assertEquals((-2446.5066F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals((-2446.5066F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-3538.947F));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-3538.947F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = Float.valueOf(4037.8215F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(4037.8215F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-2446.506520974484));
      assertEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((-2446.5066F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float((double) 4037.8215F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals(4037.8215F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = Float.valueOf((float) floatArray0[4]);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals((-2446.5066F), (float)float6, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-2446.5066F), (-2446.5066F), (-3538.947F), 4037.8215F, (-2446.5066F), 4037.8215F, (-2446.5066F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[2] = true;
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float((-2446.506520974484));
      assertEquals((-2446.5066F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals((-2446.5066F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-3538.947F));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-3538.947F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = Float.valueOf(4037.8215F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(4037.8215F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(1215.0F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(1215.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float((double) 4037.8215F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals(4037.8215F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = Float.valueOf((float) floatArray0[4]);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(1215.0F, (float)float6, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-2446.5066F), (-2446.5066F), (-3538.947F), 4037.8215F, 1215.0F, 4037.8215F, 1215.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)14;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)14, (int) (byte)112);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)46, (byte)65, (byte)112, (byte)14}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(5, byteArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)112;
      doubleArray0[1] = (double) (byte)46;
      doubleArray0[2] = (double) (byte) (-8);
      doubleArray0[3] = (double) (byte)14;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1038.579889697466);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {112.0, 46.0, (-8.0), 14.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1038.579889697466, 112.0, 46.0, (-8.0), 14.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[4];
      doubleArray2[0] = (Double) (-8.0);
      doubleArray2[1] = (Double) (-8.0);
      doubleArray2[2] = (Double) 46.0;
      doubleArray2[3] = (Double) 112.0;
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-8.0), (-8.0), 46.0, 112.0}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray3);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)46, (byte)65, (byte)112, (byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)46, (byte)65, (byte)112, (byte)14}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte) (-8), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)112;
      intArray0[1] = (int) (byte)65;
      intArray0[2] = (int) (byte) (-8);
      intArray0[3] = (int) (byte)112;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {112, 65, (-8), 112}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[2] = '#';
      charArray0[3] = '(';
      charArray0[4] = 'r';
      ArrayUtils.swap(charArray0, (int) (short)0, (int) (short)0, 870);
      assertArrayEquals(new char[] {'e', '\u0000', '#', '(', 'r'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Float float0 = new Float((double) (short)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) 870);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(870.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((float) '#');
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(35.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((double) 870);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(870.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float((-1199.4113F));
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((-1199.4113F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'e', '\u0000', '#', '(', 'r'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 1136, 1136, 1136);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, 870, (-554));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray2, (short)2, 78);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'r';
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) 'e';
      floatArray0[3] = (float) 'e';
      floatArray0[4] = (-657.42883F);
      floatArray0[5] = (float) 'r';
      boolean boolean2 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {114.0F, 2.0F, 101.0F, 101.0F, (-657.42883F), 114.0F}, floatArray0, 0.01F);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)91, object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character('z');
      assertEquals('z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('z');
      assertTrue(character1.equals((Object)character0));
      assertEquals('z', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('y');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('y', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character(' ');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals(' ', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertEquals(4, characterArray1.length);
      assertEquals(4, characterArray0.length);
      assertNotNull(characterArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = '\"';
      charArray0[2] = (char) character0;
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      charArray0[5] = (char) character2;
      char[] charArray1 = ArrayUtils.add(charArray0, '\"');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'x', '\"', 'z', ' ', ' ', 'y'}, charArray0);
      assertArrayEquals(new char[] {'x', '\"', 'z', ' ', ' ', 'y', '\"'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.5);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, (-2308), (-2308), (-2308));
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2308);
      intArray0[1] = (-2308);
      intArray0[2] = (-2308);
      intArray0[3] = (-2308);
      boolean boolean0 = ArrayUtils.contains(intArray0, 88);
      assertArrayEquals(new int[] {(-2308), (-2308), (-2308), (-2308), 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = new Boolean(false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get((Object[]) floatArray0, 1379);
      assertEquals(1, floatArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) float1;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(floatArray1);
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      char char0 = 'A';
      Character character0 = new Character('A');
      assertTrue(character0.equals((Object)char0));
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertEquals('A', (char)character1);
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = new Character('w');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertEquals('w', (char)character2);
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      Character character3 = Character.valueOf('Z');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertEquals('Z', (char)character3);
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      characterArray0[5] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertArrayEquals(new char[] {'A', 'A', 'A', 'w', 'Z', 'A'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'x';
      doubleArray0[1] = 5176.038;
      doubleArray0[2] = (double) (char)character2;
      doubleArray0[3] = (double) (char)character2;
      doubleArray0[4] = (double) (char)character0;
      ArrayUtils.swap(doubleArray0, (-2145201518), 775, 48);
      assertArrayEquals(new double[] {120.0, 5176.038, 119.0, 119.0, 65.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 2114.3603937806, (int) char0, (double) character2);
      assertArrayEquals(new double[] {120.0, 5176.038, 119.0, 119.0, 65.0}, doubleArray0, 0.01);
      assertFalse(character2.equals((Object)character3));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      long[] longArray0 = null;
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = '(';
      charArray0[4] = 'r';
      ArrayUtils.swap(charArray0, (int) (short)0, (int) (short)0, (int) '(');
      assertArrayEquals(new char[] {'e', '\u0000', 'e', '(', 'r'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Float float0 = new Float((double) (short)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) 'e');
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(101.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((float) 'e');
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(101.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((double) 'e');
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals(101.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float((-1199.4113F));
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((-1199.4113F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'e', '\u0000', 'e', '(', 'r'}, charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertNotNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 1136, 1136, 1136);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (int) 'e', (-554));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Float float5 = new Float((-1199.4113F));
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((-1199.4113F), (float)float5, 0.01F);
      assertNotNull(float5);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) characterArray0, (Object) float5);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Float
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1591L;
      longArray0[3] = 0L;
      longArray0[4] = 1591L;
      longArray0[5] = 1591L;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1591L;
      floatArray0[1] = (float) 1591L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 1591L;
      floatArray0[5] = (float) 1591L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertArrayEquals(new float[] {1591.0F, 1591.0F, 0.0F, 1591.0F, 0.0F, 1591.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(6, int0);
      
      Double double0 = new Double(1423.311);
      assertEquals(1423.311, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(885.21192119);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(885.21192119, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(68.0);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(68.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(1591L);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(1591.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.add(doubleArray0, double0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'a');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'a', 'a', 'a'}, charArray0);
      assertArrayEquals(new char[] {'a', 'a', 'a', 'a'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      
      ArrayUtils.reverse(floatArray0, 2, 2);
      assertArrayEquals(new float[] {1591.0F, 1591.0F, 0.0F, 1591.0F, 0.0F, 1591.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      long[] longArray0 = null;
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[2] = '#';
      charArray0[3] = '(';
      charArray0[4] = 'r';
      ArrayUtils.swap(charArray0, (int) (short)0, (int) (short)0, 870);
      assertArrayEquals(new char[] {'e', '\u0000', '#', '(', 'r'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Float float0 = new Float((double) (short)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) 870);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(870.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((float) '#');
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(35.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((double) 870);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals(870.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float((-1199.4113F));
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((-1199.4113F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'e', '\u0000', '#', '(', 'r'}, charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertNotNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 1136, 1136, 1136);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, 870, (-554));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Float float5 = new Float((-1199.4113F));
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals((-1199.4113F), (float)float5, 0.01F);
      assertNotNull(float5);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) characterArray0, (Object) float5);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Float
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = (-1314);
      intArray0[3] = (-1277);
      intArray0[4] = 109;
      intArray0[5] = 49;
      intArray0[6] = 49;
      intArray0[7] = 985;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-1314), 0, (-1277), 109, 49, 49, 985}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      assertNotNull(intArray1);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((double) 985);
      assertEquals(985.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 49);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(49.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) 985);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(985.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) 109);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(109.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-849.8774F));
      assertArrayEquals(new float[] {985.0F, 49.0F, 985.0F, 109.0F, (-849.8774F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
      
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((short)5408);
      assertEquals((short)5408, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-29));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-29), (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      short short2 = (short)121;
      Short short3 = new Short((short)121);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertEquals((short)121, (short)short3);
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short((short)316);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertEquals((short)316, (short)short4);
      assertNotNull(short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short((short)316);
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertEquals((short)316, (short)short5);
      assertNotNull(short5);
      
      shortArray0[4] = short5;
      Short short6 = new Short(short2);
      assertFalse(short6.equals((Object)short5));
      assertTrue(short6.equals((Object)short2));
      assertTrue(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short1));
      assertEquals((short)121, (short)short6);
      assertNotNull(short6);
      
      shortArray0[5] = short6;
      Short short7 = new Short((short) (-956));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short3));
      assertEquals((short) (-956), (short)short7);
      assertNotNull(short7);
      
      shortArray0[6] = short7;
      Short short8 = new Short((short) (-151));
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short4));
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short6));
      assertFalse(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short5));
      assertEquals((short) (-151), (short)short8);
      assertNotNull(short8);
      
      shortArray0[7] = short8;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)5408, (short) (-29), (short)121, (short)316, (short)316, (short)121, (short) (-956), (short) (-151)}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 127;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {127}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = 'W';
      charArray0[2] = 'u';
      charArray0[3] = '\"';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'W', 127);
      assertArrayEquals(new char[] {'&', 'W', 'u', '\"'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(1, int0);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(747L);
      assertEquals(747L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      ArrayUtils.shift((short[]) null, (-1284), (-1284), 127);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((double) (short) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(1845.841F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(1845.841F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(0.0F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[6] = float5;
      floatArray0[8] = floatArray0[7];
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (Object) short0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = 'I';
      charArray0[2] = 'X';
      charArray0[3] = '*';
      charArray0[4] = 'E';
      charArray0[5] = 'M';
      charArray0[6] = '#';
      charArray0[7] = '2';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'I');
      assertArrayEquals(new char[] {'1', 'I', 'X', '*', 'E', 'M', '#', '2'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-87);
      shortArray0[1] = (short) (byte) (-87);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-87), (short) (-87)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-87);
      intArray0[2] = (int) (short) (-87);
      intArray0[3] = (int) (byte)43;
      intArray0[4] = (-221);
      intArray0[5] = (-1);
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float((double) (short) (-87));
      assertEquals((-87.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, 381, (int) (short) (-87), (int) (short) (-87));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (-87));
      assertArrayEquals(new int[] {(-87), 0, (-87), 43, (-221), (-1), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)0;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.contains(intArray0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean3 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean3);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) false;
      Object object0 = ArrayUtils.get(objectArray0, (-220));
      assertEquals(4, objectArray0.length);
      assertNull(object0);
      
      ArrayUtils.shuffle(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 18688;
      intArray0[1] = (-2390);
      intArray0[3] = 18688;
      intArray0[3] = (-2133794028);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2390), (-682));
      assertArrayEquals(new int[] {18688, (-2390), 0, (-2133794028)}, intArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(4, intArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      Class<String> class0 = String.class;
      classArray0[1] = class0;
      Class<String> class1 = String.class;
      classArray0[2] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      assertNotNull(classArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = '';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'J');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'J', 'W', ''}, charArray1);
      assertArrayEquals(new char[] {'W', ''}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray1.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'W', ''}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte) (-9);
      ArrayUtils.reverse(byteArray0, 51, (int) (byte)50);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-1), (byte)102, (byte)50, (byte)83, (byte)11, (byte)19, (byte)12, (byte) (-9)}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      int int0 = 1968;
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 1968;
      intArray0[2] = 1968;
      intArray0[2] = 1968;
      intArray0[4] = 1968;
      intArray0[5] = 1968;
      boolean boolean0 = ArrayUtils.contains(intArray0, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {2, 1968, 1968, 0, 1968, 1968}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Object object0 = ArrayUtils.get((Object[]) null, 1968);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float1;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, (-2308), (-2308), (-2308));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (-2308);
      intArray0[2] = (-2308);
      intArray0[3] = (-2308);
      boolean boolean0 = ArrayUtils.contains(intArray0, 1968);
      assertArrayEquals(new int[] {0, (-2308), (-2308), (-2308), 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Object[] objectArray0 = new Object[18];
      Object object0 = ArrayUtils.get((Object[]) floatArray0, 1379);
      assertEquals(1, floatArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) float0;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(18, objectArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, floatArray1.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.5);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, (-2308), (-2308), (-2308));
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2308);
      intArray0[1] = (-2308);
      intArray0[2] = (-2308);
      intArray0[3] = (-2308);
      boolean boolean0 = ArrayUtils.contains(intArray0, 88);
      assertArrayEquals(new int[] {(-2308), (-2308), (-2308), (-2308), 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get((Object[]) floatArray0, 1379);
      assertEquals(1, floatArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) float1;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((double) (short)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(1845.841F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals(1845.841F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(0.0F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[6] = float5;
      floatArray0[8] = floatArray0[7];
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (Object) short0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = '@';
      charArray0[2] = 'F';
      charArray0[3] = '2';
      charArray0[4] = '-';
      charArray0[5] = 'h';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'W');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'W', '@', 'F', '2', '-', 'h'}, charArray0);
      assertArrayEquals(new char[] {'@', 'F', '2', '-', 'h'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711, mutableInt0.intValue());
      assertEquals(711L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711, mutableInt0.intValue());
      assertEquals(711L, mutableInt0.longValue());
      assertEquals(711, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(7);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(7, (int)integer1);
      assertNotNull(integer1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 711;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 7;
      floatArray0[3] = (float) 711;
      floatArray0[4] = (float) 7;
      floatArray0[5] = (-70.49477F);
      floatArray0[6] = (float) 7;
      floatArray0[7] = (float) 2636;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-770.9F), (-2358));
      assertArrayEquals(new float[] {711.0F, 0.0F, 7.0F, 711.0F, 7.0F, (-70.49477F), 7.0F, 2636.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2147483648L);
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = 'k';
      charArray0[2] = 'x';
      charArray0[3] = 'W';
      charArray0[4] = '@';
      charArray0[5] = '[';
      charArray0[6] = 'S';
      charArray0[7] = ' ';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'j', 89);
      assertArrayEquals(new char[] {'j', 'k', 'x', 'W', '@', '[', 'S', ' '}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(8, charArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'k';
      floatArray0[1] = (float) 'W';
      floatArray0[2] = (float) '[';
      floatArray0[3] = (float) 'W';
      floatArray0[4] = (float) 'x';
      floatArray0[5] = (float) 'k';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 114.0F, 2852);
      assertArrayEquals(new float[] {107.0F, 87.0F, 91.0F, 87.0F, 120.0F, 107.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711L, mutableInt0.longValue());
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711L, mutableInt0.longValue());
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, mutableInt0.intValue());
      assertEquals(711, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(3);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(3, (int)integer1);
      assertNotNull(integer1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-101), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -101, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-72);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(472, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 472, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = Character.valueOf('b');
      assertFalse(character1.equals((Object)character0));
      assertEquals('b', (char)character1);
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = new Character('w');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('w', (char)character2);
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      char char0 = 'Z';
      Character character3 = Character.valueOf('Z');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals('Z', (char)character3);
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      characterArray0[5] = character0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-110);
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)6;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) char0, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-475.2014F);
      floatArray0[2] = 2108.31F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 3045.7175F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-2694.7014F);
      floatArray0[8] = 3045.7175F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-475.2014F), 2108.31F, (-1.0F), (-1.0F), 3045.7175F, 0.0F, (-2694.7014F), 3045.7175F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2108.31F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-475.2014F);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {2108.31005859375, 0.0, (-475.2013854980469)}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-2694.7014F);
      objectArray0[1] = (Object) (-1.0F);
      objectArray0[2] = (Object) 3045.7175F;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(4, objectArray0.length);
      assertEquals((-2694.7014F), object0);
      assertNotNull(object0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(objectArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, objectArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isNotEmpty(intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(1, intArray0.length);
      assertTrue(boolean3);
      
      char[] charArray0 = new char[0];
      boolean boolean4 = ArrayUtils.contains(charArray0, '`');
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertEquals(0, charArray0.length);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      charArray0[5] = ')';
      charArray0[6] = ')';
      charArray0[7] = ')';
      charArray0[8] = ')';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'J');
      assertArrayEquals(new char[] {')', ')', ')', ')', ')', ')', ')', ')', ')'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) float0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1590.337));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)56;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte) (-24), (byte)35, (byte) (-119), (byte) (-44), (byte)56, (byte) (-108)}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (-8), object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertEquals(2, objectArray0.length);
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1152);
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)3983;
      shortArray0[3] = (short)645;
      shortArray0[4] = (short) (-1377);
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1595));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1152), (short)3, (short)3983, (short)645, (short) (-1377), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1152), (short)3, (short)3983, (short)645, (short) (-1377), (short)0, (short) (-1595)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-8);
      intArray0[1] = (int) (short) (-1377);
      intArray0[2] = (int) (short) (-1595);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1595));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-8), (-1377)}, intArray1);
      assertArrayEquals(new int[] {(-8), (-1377), (-1595)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray1.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray1);
      
      Byte byte0 = new Byte((byte)108);
      assertEquals((byte)108, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) byte0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      int int0 = 0;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(2, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.get(objectArray0, 0, (Object) null);
      assertEquals(2, objectArray0.length);
      assertNull(object1);
      
      objectArray0[1] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      Character character0 = new Character('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 567, 90);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)117;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte)6, (byte) (-99), (byte)117, (byte)117, (byte)69}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)8;
      longArray0[1] = (long) (byte)8;
      ArrayUtils.swap(byteArray0, (int) (byte)69, 0, (int) (byte)43);
      assertArrayEquals(new byte[] {(byte)8, (byte)6, (byte) (-99), (byte)117, (byte)117, (byte)69}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1054L);
      longArray0[1] = 2147483647L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-1054L), 2147483647L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(6, int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertFalse(int1 == int0);
      assertEquals(7, booleanArray0.length);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-96);
      int int2 = ArrayUtils.indexOf(byteArray0, (byte) (-96));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-109), (byte) (-65), (byte)23, (byte) (-111), (byte) (-96)}, byteArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(6, byteArray0.length);
      assertEquals(5, int2);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 584;
      intArray0[1] = 2486;
      intArray0[2] = 1552;
      intArray0[3] = 763;
      intArray0[4] = (-1552);
      intArray0[5] = (-233);
      intArray0[6] = (-1212);
      intArray0[7] = 0;
      intArray0[8] = 2099761789;
      ArrayUtils.reverse(intArray0, (-3073), 259);
      assertArrayEquals(new int[] {2099761789, 0, (-1212), (-233), (-1552), 763, 1552, 2486, 584}, intArray0);
      assertEquals(9, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-2699L);
      longArray0[1] = 707L;
      longArray0[2] = (-873L);
      longArray0[3] = (-3L);
      longArray0[4] = (-627L);
      longArray0[5] = (-3445L);
      longArray0[6] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-2699L), 707L, (-873L), (-3L), (-627L), (-3445L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-2699L), 707L, (-873L), (-3L), (-627L), (-3445L), 0L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1808;
      intArray0[1] = (-1);
      intArray0[2] = (-2780);
      intArray0[3] = 111;
      intArray0[4] = 3751;
      intArray0[5] = (-1212);
      ArrayUtils.shift(intArray0, (-1856));
      assertArrayEquals(new int[] {(-2780), 111, 3751, (-1212), 1808, (-1)}, intArray0);
      assertEquals(6, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, true, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 49;
      intArray0[3] = 49;
      ArrayUtils.swap(intArray0, 0, 49);
      assertArrayEquals(new int[] {0, 49, 0, 49}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false}, booleanArray0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(7, booleanArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 49);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 49, 0, 49}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray1.length);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray1);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(40.0);
      assertEquals(40.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2938.663781143062));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2938.663781143062), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-2938.663781143062), (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {40.0, (-2938.663781143062), (-2938.663781143062)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) Integer.MAX_VALUE;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) 49);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {2147483647L}, longArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet1);
      
      int[] intArray2 = ArrayUtils.add(intArray0, 49);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 49, 0, 49}, intArray0);
      assertArrayEquals(new int[] {0, 49, 0, 49, 49}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray2.length);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3353.89412554);
      doubleArray0[2] = 1.0;
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = '%';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'m', 'm', '%'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = '*';
      charArray0[2] = 'm';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'(', '*', 'm'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 18688;
      intArray0[1] = (-2390);
      intArray0[3] = 51;
      intArray0[3] = (-2133794028);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 97, (-682));
      assertArrayEquals(new int[] {18688, (-2390), 0, (-2133794028)}, intArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(4, intArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      assertNotNull(classArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = '';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'J');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'J', 'W', ''}, charArray1);
      assertArrayEquals(new char[] {'W', ''}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray1.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'W', ''}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte) (-9);
      ArrayUtils.reverse(byteArray0, 51, (int) (byte)50);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-1), (byte)102, (byte)50, (byte)83, (byte)11, (byte)19, (byte)12, (byte) (-9)}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1084));
      assertEquals((-1084), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1084);
      intArray0[1] = 2146594715;
      intArray0[2] = (-1084);
      ArrayUtils.swap(intArray0, (int) integerArray0[0], (-507));
      assertArrayEquals(new int[] {(-1084), 2146594715, (-1084)}, intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(3, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = ',';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {',', ','}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1084), 2146594715, (-1084)}, intArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean2);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1084);
      floatArray0[1] = (float) (-507);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-1084);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 187, (-14));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1084.0F), (-507.0F), 0.0F, (-1084.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotNull(integerArray1);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray1, (-403.51987F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-1084.0F), (-507.0F), 0.0F, (-1084.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) ',';
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 2146594715;
      doubleArray0[3] = (double) (-1084);
      doubleArray0[4] = (double) (-403.51987F);
      doubleArray0[5] = 2188.0;
      doubleArray0[6] = (double) (-1084.0F);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 44.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 2.146594715E9, (-1084.0), (-403.5198669433594), 2188.0, (-1084.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {44.0, 0.0, 2.146594715E9, (-1084.0), (-403.5198669433594), 2188.0, (-1084.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1591L;
      longArray0[3] = 0L;
      longArray0[4] = 1591L;
      longArray0[5] = 1591L;
      longArray0[6] = 1591L;
      longArray0[7] = 1591L;
      int int0 = ArrayUtils.indexOf(longArray0, 1591L, (-2935));
      assertArrayEquals(new long[] {1591L, 0L, 0L, 0L, 1591L, 1591L, 1591L, 1591L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {1}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)68;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)22);
      assertArrayEquals(new byte[] {(byte)53, (byte)22, (byte)103, (byte) (-43), (byte) (-1), (byte)68}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(6, byteArray0.length);
      assertEquals(1, int1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)68;
      doubleArray0[1] = (double) (-2935);
      doubleArray0[2] = (double) (byte)68;
      doubleArray0[3] = (double) (byte) (-43);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1242.695);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {68.0, (-2935.0), 68.0, (-43.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {68.0, (-2935.0), 68.0, (-43.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)0;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      int[] intArray0 = new int[9];
      intArray0[0] = (-2406);
      intArray0[1] = (-2406);
      intArray0[2] = (-2406);
      intArray0[3] = (-2406);
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-2406), (-2406), (-2406));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)99;
      shortArray0[1] = (short)2261;
      shortArray0[2] = (short)2576;
      shortArray0[3] = (short) (-5742);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1006);
      intArray0[0] = (int) (short) (-1645);
      shortArray0[7] = (short) (-1363);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)99, (short)2261, (short)2576, (short) (-5742), (short)0, (short) (-1006), (short)0, (short) (-1363)}, shortArray1);
      assertArrayEquals(new short[] {(short)99, (short)2261, (short)2576, (short) (-5742), (short)0, (short) (-1006), (short)0, (short) (-1363)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(shortArray1);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) (-2406);
      integerArray0[1] = (Integer) (-2406);
      integerArray0[2] = (Integer) (-2406);
      integerArray0[3] = (Integer) (-2406);
      integerArray0[4] = (Integer) (-2406);
      integerArray0[5] = (Integer) (-2406);
      integerArray0[6] = (Integer) (-2406);
      integerArray0[7] = (Integer) (-2406);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2406), (-2406), (-2406), (-2406), (-2406), (-2406), (-2406), (-2406)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)99, (short)2261, (short)2576, (short) (-5742), (short)0, (short) (-1006), (short)0, (short) (-1363)}, shortArray1);
      assertArrayEquals(new short[] {(short)99, (short)2261, (short)2576, (short) (-5742), (short)0, (short) (-1006), (short)0, (short) (-1363)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertEquals(16, shortArray2.length);
      assertNotNull(shortArray2);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)55;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)43, (byte)55}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-87);
      shortArray0[1] = (short) (byte) (-87);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-87), (short) (-87)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Character character0 = Character.valueOf('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character(')');
      assertFalse(character1.equals((Object)character0));
      assertEquals(')', (char)character1);
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('w');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('w', (char)character2);
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'b');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, (int) (byte) (-87), 451);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1L);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-3L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-3L), (long)long2);
      assertNotNull(long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {(-1L), 1L, (-3L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)113;
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)55, (byte) (-45), (byte)113}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNull(byteArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)113;
      shortArray0[1] = (short) (byte)40;
      shortArray0[2] = (short) (byte) (-45);
      shortArray0[3] = (short) (byte)40;
      shortArray0[4] = (short) (byte)113;
      shortArray0[5] = (short) (byte)40;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)40, (short) (-45), (short)40, (short)113, (short)40, (short)113}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((-1431.0));
      assertEquals((-1431.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(32.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(32.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-1497.0));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1497.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1423.6705556520437);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(1423.6705F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(1.0);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float((float) floatArray0[1]);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(32.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1431.0F), 32.0F, (-1497.0F), 1423.6705F, 1.0F, 32.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)91, object0);
      assertNotNull(object0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = '^';
      charArray0[2] = ' ';
      charArray0[3] = 'm';
      charArray0[4] = '@';
      int int0 = ArrayUtils.indexOf(charArray0, 'z', (int) (byte)91);
      assertArrayEquals(new char[] {'z', '^', ' ', 'm', '@'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      long[] longArray0 = new long[24];
      longArray0[0] = (long) 'J';
      longArray0[1] = (long) 'J';
      longArray0[2] = (long) 'J';
      longArray0[3] = (long) 'J';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 76, (-2146685957));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(24, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 74L;
      objectArray0[1] = (Object) 74L;
      objectArray0[2] = (Object) 74L;
      objectArray0[3] = (Object) 74L;
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 74L;
      objectArray1[1] = (Object) 74L;
      objectArray1[2] = (Object) 74L;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(4, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift(objectArray0, 549);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(4, objectArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)595;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short)595}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-3195), 76);
      assertArrayEquals(new short[] {(short)595}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)595;
      intArray0[1] = (int) (short)595;
      intArray0[2] = (-1);
      intArray0[3] = 549;
      intArray0[4] = (-1654);
      intArray0[5] = 549;
      int[] intArray1 = ArrayUtils.remove(intArray0, 2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {595, 595, (-1), 549, (-1654), 549}, intArray0);
      assertArrayEquals(new int[] {595, 595, 549, (-1654), 549}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5176.038;
      doubleArray0[1] = 104.0;
      doubleArray0[2] = (double) 44;
      ArrayUtils.shift(intArray0, (-3195), 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "{}");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-87);
      shortArray0[1] = (short) (-185);
      char[] charArray0 = new char[0];
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5176.038;
      doubleArray0[1] = 104.0;
      doubleArray0[2] = (double) 44;
      ArrayUtils.shift(intArray0, (-3195), 1760, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "P55$E");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-87);
      shortArray0[1] = (short) (-185);
      shortArray0[2] = (short) (-185);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-87), (short) (-185), (short) (-185)}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("-`oe@pa(dwZMx2#", long0);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      
      longArray0[0] = long1;
      long long2 = 0L;
      Long long3 = new Long(0L);
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertEquals(0L, (long)long3);
      assertNotNull(long3);
      
      longArray0[1] = long3;
      Long long4 = Long.valueOf(long2);
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long3));
      assertEquals(0L, (long)long4);
      assertNotNull(long4);
      
      longArray0[2] = long4;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) long2;
      doubleArray0[1] = (double) long2;
      doubleArray0[2] = (double) long2;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) long2;
      doubleArray0[5] = (double) 0L;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = 0.0F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) long2;
      floatArray1[2] = (float) long2;
      floatArray1[3] = (float) long2;
      floatArray1[4] = (float) 0L;
      floatArray1[5] = (float) 0;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1084));
      assertEquals((-1084), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1084);
      intArray0[1] = 2146594715;
      intArray0[2] = (-1084);
      ArrayUtils.swap(intArray0, (int) integerArray0[0], (-507));
      assertArrayEquals(new int[] {(-1084), 2146594715, (-1084)}, intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(3, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {',', '\u0000'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1084), 2146594715, (-1084)}, intArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean2);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'N', 2);
      assertArrayEquals(new char[] {',', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1084);
      floatArray0[1] = (-3235.046F);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 187, 2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1084.0F), (-3235.046F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean boolean3 = ArrayUtils.isSameLength(floatArray1, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1084.0F), (-3235.046F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertTrue(boolean3);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 768);
      assertArrayEquals(new int[] {(-1084), 2146594715, (-1084)}, intArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(3, intArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray1 = new char[19];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'N';
      charArray1[1] = 'N';
      charArray1[2] = ',';
      charArray1[3] = ',';
      charArray1[4] = ',';
      charArray1[5] = ',';
      ArrayUtils.shift(charArray1, (-1084), (-1654), 768);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(19, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1084));
      assertEquals((-1084), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1084);
      intArray0[1] = 2146594715;
      intArray0[2] = (-1084);
      ArrayUtils.swap(intArray0, (int) integerArray0[0], (-507));
      assertArrayEquals(new int[] {(-1084), 2146594715, (-1084)}, intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(3, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = ',';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {',', ','}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1084), 2146594715, (-1084)}, intArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean2);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'N', 2);
      assertArrayEquals(new char[] {',', ','}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1084);
      floatArray0[1] = (-3235.046F);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 187, 2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1084.0F), (-3235.046F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean boolean3 = ArrayUtils.isSameLength(floatArray1, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1084.0F), (-3235.046F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertTrue(boolean3);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 768);
      assertArrayEquals(new int[] {(-1084), 2146594715, (-1084)}, intArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, intArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'N';
      charArray1[1] = 'N';
      charArray1[2] = ',';
      charArray1[3] = ',';
      charArray1[4] = ',';
      charArray1[5] = ',';
      ArrayUtils.shift(charArray1, (-1084), (-1654), 768);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'N', 'N', ',', ',', ',', ','}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1658);
      shortArray0[1] = (short) (-1658);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1658), (short) (-1658)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1658), (short) (-1658)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer((short) (-1658));
      assertEquals((-1658), (int)integer0);
      assertNotNull(integer0);
      
      Short short0 = new Short((short) (-1658));
      assertEquals((short) (-1658), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)1, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-1658));
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short) (-1658), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)321);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short)321, (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short) (-34));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertEquals((short) (-34), (short)short4);
      assertNotNull(short4);
      
      Short short5 = new Short((short)1777);
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertEquals((short)1777, (short)short5);
      assertNotNull(short5);
      
      Short[] shortArray2 = new Short[6];
      shortArray2[0] = short2;
      shortArray2[1] = short1;
      shortArray2[2] = short3;
      shortArray2[3] = short3;
      shortArray2[4] = short1;
      shortArray2[5] = short3;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertArrayEquals(new short[] {(short) (-1658), (short)1, (short)321, (short)321, (short)1, (short)321}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertEquals(6, shortArray3.length);
      assertEquals(6, shortArray2.length);
      assertNotNull(shortArray3);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-2622);
      int[] intArray0 = new int[0];
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2622.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {(-2622.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)67;
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)67;
      longArray0[2] = (long) (byte)84;
      longArray0[3] = (long) (-606);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-99), (int) (byte)0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 67L, 84L, (-606L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (double) (byte)84;
      doubleArray0[1] = (double) (-606L);
      ArrayUtils.swap(doubleArray0, 104, (int) (byte)67);
      assertEquals(16, doubleArray0.length);
      
      short[] shortArray2 = ArrayUtils.insert((int) (byte)0, shortArray1, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray2);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 19.0F, (int) (byte)67);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1658);
      shortArray0[1] = (short) (-1658);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1658), (short) (-1658)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1658), (short) (-1658)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer((short) (-1658));
      assertEquals((-1658), (int)integer0);
      assertNotNull(integer0);
      
      Short short0 = new Short((short) (-1658));
      assertEquals((short) (-1658), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)1, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-1658));
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short) (-1658), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)321);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short)321, (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short) (-34));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertEquals((short) (-34), (short)short4);
      assertNotNull(short4);
      
      short short5 = (short) (-2622);
      Short short6 = new Short((short) (-2622));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short2));
      assertTrue(short6.equals((Object)short5));
      assertEquals((short) (-2622), (short)short6);
      assertNotNull(short6);
      
      Short short7 = new Short((short)1777);
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short4));
      assertEquals((short)1777, (short)short7);
      assertNotNull(short7);
      
      Short[] shortArray2 = new Short[6];
      shortArray2[0] = short2;
      shortArray2[2] = short3;
      shortArray2[3] = short3;
      shortArray2[4] = short1;
      shortArray2[5] = short3;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1314);
      intArray0[2] = 985;
      intArray0[3] = (-1277);
      intArray0[4] = 109;
      intArray0[5] = 49;
      intArray0[6] = 49;
      intArray0[7] = 985;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-1314), 985, (-1277), 109, 49, 49, 985}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      assertNotNull(intArray1);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((double) 985);
      assertEquals(985.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 49);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(49.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) 985);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(985.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) 109);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(109.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) (-1));
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-849.8774F));
      assertArrayEquals(new float[] {985.0F, 49.0F, 985.0F, 109.0F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
      
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((short)5408);
      assertEquals((short)5408, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-29));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-29), (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      short short2 = (short)121;
      Short short3 = new Short((short)121);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertEquals((short)121, (short)short3);
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short((short)316);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertEquals((short)316, (short)short4);
      assertNotNull(short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short((short)316);
      assertFalse(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertEquals((short)316, (short)short5);
      assertNotNull(short5);
      
      shortArray0[4] = short5;
      Short short6 = new Short(short2);
      assertTrue(short6.equals((Object)short2));
      assertTrue(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      assertEquals((short)121, (short)short6);
      assertNotNull(short6);
      
      shortArray0[5] = short6;
      Short short7 = new Short((short) (-956));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short6));
      assertEquals((short) (-956), (short)short7);
      assertNotNull(short7);
      
      shortArray0[6] = short7;
      Short short8 = new Short((short) (-151));
      assertFalse(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short5));
      assertFalse(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short4));
      assertFalse(short8.equals((Object)short6));
      assertFalse(short8.equals((Object)short1));
      assertEquals((short) (-151), (short)short8);
      assertNotNull(short8);
      
      shortArray0[7] = short8;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)5408, (short) (-29), (short)121, (short)316, (short)316, (short)121, (short) (-956), (short) (-151)}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)102;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)32;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)32, (short)0, (short)102}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)32;
      doubleArray0[1] = (double) (short)32;
      doubleArray0[2] = 4439.8393;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)32;
      doubleArray0[5] = 0.7;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = 157.36948999999998;
      doubleArray0[8] = (double) (short)32;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), Double.NaN);
      assertArrayEquals(new double[] {32.0, 32.0, 4439.8393, 0.0, 32.0, 0.7, 0.0, 157.36948999999998, 32.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2131;
      shortArray0[1] = (short)2131;
      ArrayUtils.swap(byteArray0, (int) (short)0, (int) (short)0, 15);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      int int0 = ArrayUtils.indexOf(charArray0, 'z', (int) (short)2131);
      assertArrayEquals(new char[] {'v'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)43;
      doubleArray0[1] = (double) (short)2131;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0, 1.0);
      assertArrayEquals(new double[] {43.0, 2131.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int1);
      
      byte[] byteArray1 = ArrayUtils.insert((-313), byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1.0F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.5);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, (-2308), (-2308), (-2308));
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1.0F);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) floatArray0, (Object) floatArray0[0], (-2990));
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2308);
      longArray0[1] = (long) (-2990);
      boolean boolean0 = ArrayUtils.contains(longArray0, 896L);
      assertArrayEquals(new long[] {(-2308L), (-2990L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2990), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2990, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Float float0 = new Float((-2217.448213547));
      assertEquals((-2217.4482F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-2916.6628F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2916.6628F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-2217.448213547));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-2217.4482F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-2916.6628F));
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-2916.6628F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2317);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-10));
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) float0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2317;
      longArray0[1] = (long) (byte) (-10);
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 2317L);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {2317L, (-10L)}, longArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(1, bitSet1.cardinality());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertEquals(2, longArray0.length);
      assertNotNull(bitSet1);
      
      byte[] byteArray1 = ArrayUtils.insert(54, (byte[]) null, (byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      int[] intArray0 = new int[9];
      intArray0[0] = (-2406);
      Double double0 = new Double((-2406));
      assertEquals((-2406.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-2406));
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2406.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((-2406));
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((-2406.0), (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0L);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double1;
      doubleArray0[1] = double2;
      doubleArray0[2] = double2;
      doubleArray0[3] = double3;
      doubleArray0[4] = double1;
      doubleArray0[5] = double1;
      doubleArray0[6] = double3;
      doubleArray0[8] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray1, 2636L);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)78);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)78, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)97);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)97, (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-96));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-96), (byte)byte3);
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, (-5056L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertTrue(boolean1 == boolean0);
      assertEquals(6, longArray0.length);
      assertFalse(boolean1);
      
      int[] intArray1 = ArrayUtils.add(intArray0, 2, (int) (byte)97);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2406), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-2406), 0, 97, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(9, intArray0.length);
      assertEquals(10, intArray1.length);
      assertNotNull(intArray1);
      
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)78;
      byteArray2[1] = (byte) (-96);
      byteArray2[2] = (byte) (-96);
      byteArray2[3] = (byte) (-96);
      byteArray2[4] = (byte)97;
      byteArray2[5] = (byte) (-96);
      byteArray2[6] = (byte)78;
      byteArray2[7] = (byte)78;
      byte[] byteArray3 = ArrayUtils.insert(91, (byte[]) null, byteArray2);
      assertArrayEquals(new byte[] {(byte)78, (byte) (-96), (byte) (-96), (byte) (-96), (byte)97, (byte) (-96), (byte)78, (byte)78}, byteArray2);
      assertEquals(8, byteArray2.length);
      assertNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5176.038;
      doubleArray0[1] = 104.0;
      doubleArray0[2] = (double) 44;
      doubleArray0[3] = (-1493.8663438634007);
      doubleArray0[6] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0, 44, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {0.0, 5176.038, 104.0, 44.0, (-1493.8663438634007), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      char[] charArray1 = ArrayUtils.add(charArray0, '3');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'P', '3'}, charArray1);
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray1.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Float float0 = new Float((-2217.448213547));
      assertEquals((-2217.4482F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-2916.6628F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2916.6628F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-2217.448213547));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-2217.4482F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-2217.448213547));
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-2217.4482F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-10));
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 'S';
      charArray0[2] = 'w';
      charArray0[3] = '3';
      charArray0[4] = 'u';
      charArray0[5] = '\\';
      charArray0[6] = 'f';
      char[] charArray1 = ArrayUtils.add(charArray0, 'N');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'H', 'S', 'w', '3', 'u', '\\', 'f'}, charArray0);
      assertArrayEquals(new char[] {'H', 'S', 'w', '3', 'u', '\\', 'f', 'N'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      int int0 = (-31);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-31), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -31, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 32, 1072);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0L;
      Object object0 = ArrayUtils.get(objectArray0, 1072);
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[1] = null;
      longArray0[2] = 0L;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) 0L;
      objectArray0[6] = (Object) 0L;
      objectArray0[7] = (Object) 0L;
      ArrayUtils.shift(objectArray0, 1072);
      assertEquals(8, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.reverse(booleanArray0, 32, 1072);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 32);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertEquals('A', (char)character1);
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = new Character('w');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('w', (char)character2);
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      Character character3 = Character.valueOf('Z');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('Z', (char)character3);
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      characterArray0[5] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertArrayEquals(new char[] {'A', 'A', 'A', 'w', 'Z', 'A'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[6] = false;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(7, booleanArray1.length);
      assertEquals(10, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertNotNull(booleanArray2);
      
      ArrayUtils.swap(booleanArray2, 1679, (int) character0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertEquals(7, booleanArray1.length);
      assertEquals(10, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      
      ArrayUtils.shift(charArray0, 1679, (int) character0, 1990);
      assertArrayEquals(new char[] {'A', 'A', 'A', 'w', 'Z', 'A'}, charArray0);
      assertFalse(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1679;
      longArray0[1] = (long) (char)character2;
      ArrayUtils.shift(longArray0, (int) character0);
      assertArrayEquals(new long[] {119L, 1679L}, longArray0);
      assertFalse(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 127;
      intArray0[1] = (int) (char)character0;
      intArray0[2] = (int) 'A';
      intArray0[3] = 2360;
      intArray0[4] = 1679;
      intArray0[5] = (int) 'Z';
      intArray0[6] = (int) (char)character0;
      intArray0[7] = (int) (char)character0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertArrayEquals(new int[] {127, 65, 65, 2360, 1679, 90, 65, 65}, intArray1);
      assertArrayEquals(new int[] {127, 65, 65, 2360, 1679, 90, 65, 65}, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)91, object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)91;
      shortArray0[1] = (short) (byte)91;
      shortArray0[2] = (short)9;
      shortArray0[3] = (short) (byte)91;
      shortArray0[4] = (short) (byte)91;
      shortArray0[5] = (short)6;
      shortArray0[6] = (short) (byte)91;
      shortArray0[7] = (short) (byte)91;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)91, (short)91, (short)9, (short)91, (short)91, (short)6, (short)91, (short)91}, shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(shortArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'D');
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) bitSet0, objectArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(491.63460000000003);
      assertEquals(491.63460000000003, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[7];
      Double double1 = new Double((-1L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)9, 2144966225);
      assertArrayEquals(new byte[] {(byte)0, (byte)127, (byte)0, (byte)127, (byte)127}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(doubleArray1, (-5888), 69, 2912);
      assertArrayEquals(new double[] {(-1.0), 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003, 491.63460000000003}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      int int1 = ArrayUtils.indexOf(charArray0, '+');
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int1);
      
      long[] longArray1 = ArrayUtils.removeElements((long[]) null, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1161L));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.lang3.builder.ToStringStyle$NoClassNameToStringStyle";
      stringArray0[1] = "PT8AzNro";
      stringArray0[2] = "";
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1161L);
      floatArray0[1] = (float) (-1161L);
      floatArray0[2] = (float) (-1161L);
      floatArray0[3] = (float) (-1161L);
      floatArray0[4] = (float) (-1161L);
      floatArray0[5] = (float) (-1161L);
      floatArray0[6] = (float) (-1161L);
      floatArray0[7] = (float) (-1161L);
      floatArray0[8] = (float) (-1161L);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1161.0F), (-1161.0F), (-1161.0F), (-1161.0F), (-1161.0F), (-1161.0F), (-1161.0F), (-1161.0F), (-1161.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1161.0F), (-1161.0F), (-1161.0F), (-1161.0F), (-1161.0F), (-1161.0F), (-1161.0F), (-1161.0F), (-1161.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Character character0 = Character.valueOf('8');
      assertEquals('8', (char)character0);
      assertNotNull(character0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)112;
      longArray0[1] = 0L;
      longArray0[2] = (long) '8';
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {112L, 0L, 56L}, longArray0);
      assertArrayEquals(new long[] {112L, 0L, 56L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)112;
      intArray0[1] = (int) (byte)112;
      intArray0[2] = (int) (byte)112;
      intArray0[3] = (int) (byte)112;
      intArray0[4] = (int) (byte)112;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {112, 112, 112, 112, 112}, intArray0);
      assertEquals(5, intArray0.length);
      
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)112;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)112, (byte)112, (byte)112, (byte)112, (byte)112}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.removeElements(longArray2, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertNotNull(longArray3);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3353.89412554);
      doubleArray0[2] = 1.0;
      doubleArray0[2] = 12.31;
      doubleArray0[3] = (-1414.5095293760658);
      doubleArray0[4] = (-1503.0);
      doubleArray0[5] = (-1414.5095293760658);
      ArrayUtils.shift(doubleArray0, 51, 0, 708);
      assertArrayEquals(new double[] {(-3353.89412554), 0.0, 12.31, (-1414.5095293760658), (-1503.0), (-1414.5095293760658), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)9;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)98, 13);
      assertArrayEquals(new byte[] {(byte)9, (byte)98, (byte)9}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(1, int0);
      
      ArrayUtils.shift(doubleArray0, 0, (int) (byte)9, 98);
      assertArrayEquals(new double[] {0.0, 0.0, (-3353.89412554), 0.0, 12.31, (-1414.5095293760658), (-1503.0), (-1414.5095293760658)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.5);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float1;
      Integer integer0 = new Integer(98);
      assertEquals(98, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 703);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (float) 703;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (float) 98;
      floatArray1[4] = (float) 98;
      int int0 = ArrayUtils.lastIndexOf(floatArray1, 0.0F);
      assertArrayEquals(new float[] {(-1.0F), 703.0F, 0.0F, 98.0F, 98.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(2, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 98.0F;
      doubleArray0[1] = (double) 98.0F;
      doubleArray0[2] = 1.0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 876, (double) 0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 876, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) 0.0F;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', is neither of type Map.Entry nor an Array");
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 583L;
      doubleArray0[1] = (double) 583L;
      doubleArray0[2] = (double) 583L;
      doubleArray0[3] = (double) 583L;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-1039), 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1039, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      byte byte0 = (byte)6;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)6;
      shortArray0[1] = (short) (byte)6;
      ArrayUtils.reverse(shortArray0, (int) (short)6, 241);
      assertArrayEquals(new short[] {(short)6, (short)6}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)6;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)6, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)0, (byte)6, (byte)6, (byte)6, (byte)6}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)6;
      shortArray0[1] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0, (int) (short)6, 241);
      assertArrayEquals(new short[] {(short)6, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)6;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)6, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5176.038;
      doubleArray0[1] = 104.0;
      doubleArray0[2] = (double) 44;
      doubleArray0[3] = (-1490.4102717211429);
      doubleArray0[6] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0, 44, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {0.0, 5176.038, 104.0, 44.0, (-1490.4102717211429), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      
      char[] charArray0 = new char[10];
      charArray0[0] = 'P';
      char[] charArray1 = ArrayUtils.add(charArray0, '3');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(11, charArray1.length);
      assertEquals(10, charArray0.length);
      assertNotNull(charArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-994), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -994, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = 5176.038;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 44;
      doubleArray0[3] = (-1493.8663438634007);
      doubleArray0[6] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0, 44, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 44.0, (-1493.8663438634007), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Short[]) null, 0, (Short) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1.0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray1.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 2146173407, (double) 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int1 == int0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, int1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, 0, 2502);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, intArray1.length);
      assertEquals(2, intArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)102);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)102, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)55);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte)55, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)48);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertEquals((byte)48, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)2);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte(byte0);
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertEquals((byte)2, (byte)byte7);
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, byte6);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte7));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(8, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Double double0 = new Double(2827.1865);
      assertEquals(2827.1865, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2827.1865);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2827.1865, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double1;
      doubleArray0[7] = double1;
      Double double2 = new Double(1.5);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(1.5, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[8] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = '\\';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '\\');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\\', '\\', '\\', ':', ':', '\\'}, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)3040;
      shortArray0[2] = (short) (-2258);
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)3, (short)3040, (short) (-2258), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)3, (short)3040, (short) (-2258), (short)0, (short)3}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1161L));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)94;
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1161L));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1161.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(32.0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(32.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = new float[0];
      ArrayUtils.shift(floatArray1, (int) (byte) (-1), 1649, (-1452));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte)116;
      intArray0[2] = (-1452);
      intArray0[3] = (int) (byte) (-1);
      int int0 = ArrayUtils.indexOf(intArray0, 1690, (int) (byte)116);
      assertArrayEquals(new int[] {(-1), 116, (-1452), (-1)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals((-1), int0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((long[]) null, 0L, (int) (byte) (-1));
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)43;
      intArray0[2] = (int) (byte)43;
      intArray0[3] = (int) (byte)43;
      intArray0[4] = (-221);
      intArray0[5] = (-1);
      intArray0[6] = 2;
      ArrayUtils.shift(intArray0, 2145922749, (-1399), (int) (byte) (-87));
      assertArrayEquals(new int[] {43, 0, 43, 43, (-221), (-1), 2, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 2145922749;
      ArrayUtils.reverse(booleanArray0, 2145922749, 2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-87);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 721);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 721, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      ArrayUtils.shift((float[]) null, 115, 0, 0);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1645);
      shortArray0[1] = (short) (-1006);
      shortArray0[2] = (short)2261;
      shortArray0[3] = (short)2576;
      shortArray0[4] = (short)99;
      shortArray0[5] = (short) (-1006);
      shortArray0[6] = (short) (-1363);
      shortArray0[7] = (short)2576;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-1645), (short) (-1006), (short)2261, (short)2576, (short)99, (short) (-1006), (short) (-1363), (short)2576}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1645), (short) (-1006), (short)2261, (short)2576, (short)99, (short) (-1006), (short) (-1363), (short)2576}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(shortArray1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-1645), (short) (-1006), (short)2261, (short)2576, (short)99, (short) (-1006), (short) (-1363), (short)2576}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1645), (short) (-1006), (short)2261, (short)2576, (short)99, (short) (-1006), (short) (-1363), (short)2576}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(8, shortArray1.length);
      assertEquals(16, shortArray2.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(shortArray2);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-1645), (short) (-1006), (short)2261, (short)2576, (short)99, (short) (-1006), (short) (-1363), (short)2576}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(8, shortArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (short) (-1006));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1006, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1591L;
      longArray0[3] = 0L;
      longArray0[4] = 1591L;
      longArray0[5] = 1591L;
      longArray0[6] = 1591L;
      longArray0[7] = 1591L;
      int int0 = ArrayUtils.indexOf(longArray0, 1591L, (-2935));
      assertArrayEquals(new long[] {1591L, 0L, 0L, 0L, 1591L, 1591L, 1591L, 1591L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {1}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 177.0F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Byte byte0 = new Byte((byte)94);
      assertEquals((byte)94, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)94, object0);
      assertNotNull(object0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[20];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[12] = 'Z';
      charArray0[4] = 'Z';
      charArray0[5] = 'Z';
      charArray0[6] = 'Z';
      charArray0[7] = 'Z';
      charArray0[8] = 'Z';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Z');
      assertEquals(13, bitSet0.length());
      assertEquals("{0, 1, 2, 4, 5, 6, 7, 8, 12}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(9, bitSet0.cardinality());
      assertEquals(20, charArray0.length);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1638.0F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 18688;
      intArray0[1] = (-2390);
      intArray0[3] = 51;
      intArray0[3] = (-2133794028);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 97, (-682));
      assertArrayEquals(new int[] {18688, (-2390), 0, (-2133794028)}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(4, intArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      assertNotNull(classArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = '';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'J');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'J', 'W', ''}, charArray1);
      assertArrayEquals(new char[] {'W', ''}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray1.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray1);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) (-2390);
      integerArray0[1] = (Integer) (-2390);
      Integer integer0 = new Integer(30);
      assertEquals(30, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) 18688;
      integerArray0[4] = (Integer) 18688;
      integerArray0[5] = (Integer) (-2390);
      integerArray0[6] = (Integer) (-2390);
      integerArray0[7] = (Integer) (-2390);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray0, 51);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)55;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)22);
      assertArrayEquals(new byte[] {(byte)1, (byte)15, (byte) (-20), (byte) (-46), (byte) (-1), (byte)0, (byte)53, (byte)55}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (int) (byte)55, (int) (byte)53);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = (Byte) (byte) (-20);
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)55);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotNull(byteArray2);
      
      byte[] byteArray3 = ArrayUtils.addFirst(byteArray2, (byte)0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-20)}, byteArray3);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertEquals(2, byteArray3.length);
      assertNotNull(byteArray3);
      
      Boolean boolean0 = new Boolean("sXTdS|cOc0oJ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      String string0 = ArrayUtils.toString((Object) boolean0, "sXTdS|cOc0oJ");
      assertEquals("false", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-46);
      shortArray0[1] = (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-2145121868));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2145121868, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 18688;
      intArray0[1] = (-2390);
      intArray0[3] = 18688;
      intArray0[3] = (-2133794028);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2390), (-682));
      assertArrayEquals(new int[] {18688, (-2390), 0, (-2133794028)}, intArray0);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(4, intArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 16);
      Class<String> class0 = String.class;
      classArray0[2] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(16, classArray0.length);
      assertEquals(16, classArray1.length);
      assertNotNull(classArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = '';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'J');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'W', ''}, charArray0);
      assertArrayEquals(new char[] {'J', 'W', ''}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'W', ''}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (-2133794028));
      assertEquals((-2133794028), (int)mutableInt0.getValue());
      assertEquals((byte)20, mutableInt0.byteValue());
      assertEquals((short) (-7404), mutableInt0.shortValue());
      assertEquals((-2.133794028E9), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2133794028L), mutableInt0.longValue());
      assertEquals((-2133794028), mutableInt0.intValue());
      assertEquals((-2.13379405E9F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-2133794028", mutableInt0.toString());
      assertEquals((-2133794028), (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0);
      assertEquals((-2133794028), (int)mutableInt0.getValue());
      assertEquals((byte)20, mutableInt0.byteValue());
      assertEquals((short) (-7404), mutableInt0.shortValue());
      assertEquals((-2.133794028E9), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2133794028L), mutableInt0.longValue());
      assertEquals((-2133794028), mutableInt0.intValue());
      assertEquals((-2.13379405E9F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-2133794028", mutableInt0.toString());
      assertEquals((-2133794028), (int)mutableInt0.toInteger());
      assertEquals("-2133794028", string0);
      assertNotNull(string0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[5] = true;
      booleanArray0[0] = false;
      booleanArray0[2] = true;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (-1L);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) 0;
      ArrayUtils.shift(longArray0, 76);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, (-1L), 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) (-1L));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'B'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift((long[]) null, 1);
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, 20L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 20L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 0L;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)67;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((-3167), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)102);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-45), (byte)11, (byte)76, (byte)67}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-45), (byte)11, (byte)76, (byte)67}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.indexOf(shortArray1, (short) (byte)67);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(intArray0, (int) (byte)67);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3353.89412554);
      doubleArray0[2] = 1.0;
      doubleArray0[2] = 12.31;
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)722);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "S}4d";
      stringArray0[1] = "S}4d";
      stringArray0[2] = "N)xLpnJ]ZR";
      stringArray0[3] = "S}4d";
      stringArray0[4] = "^\"";
      stringArray0[5] = "S}4d";
      stringArray0[6] = "\"<";
      stringArray0[7] = "^\"";
      stringArray0[8] = "S}4d";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)722;
      longArray0[1] = (long) (short)722;
      longArray0[2] = (long) (short)722;
      longArray0[3] = (long) (short)722;
      longArray0[4] = (long) (short)722;
      longArray0[5] = (long) (short)722;
      longArray0[6] = (long) (short)722;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {722L, 722L, 722L, 722L, 722L, 722L, 722L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(7, longArray0.length);
      assertEquals(14, longArray1.length);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = '9';
      charArray0[2] = '|';
      charArray0[3] = 'U';
      charArray0[4] = 'p';
      charArray0[5] = '}';
      charArray0[6] = '?';
      ArrayUtils.reverse(charArray0, 1139, 4);
      assertArrayEquals(new char[] {'X', '9', '|', 'U', 'p', '}', '?'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      long[] longArray0 = new long[24];
      longArray0[0] = (long) 'J';
      longArray0[1] = (long) 'J';
      longArray0[2] = (long) 'J';
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) 'J';
      longArray0[5] = (long) 'J';
      longArray0[6] = (long) 'J';
      longArray0[7] = (long) 'J';
      longArray0[8] = (long) 'J';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 29, (-2146685957));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(24, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'J';
      objectArray0[1] = (Object) 74L;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(2, objectArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-693);
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short)1393;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'J';
      ArrayUtils.swap(doubleArray0, (-2146685957), 2);
      assertArrayEquals(new double[] {74.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(29, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertEquals('A', (char)character1);
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = new Character('w');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('w', (char)character2);
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      Character character3 = Character.valueOf('Z');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('Z', (char)character3);
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      characterArray0[5] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertArrayEquals(new char[] {'A', 'A', 'A', 'w', 'Z', 'A'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[3] = true;
      booleanArray1[6] = false;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, true, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(7, booleanArray1.length);
      assertEquals(10, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertNotNull(booleanArray2);
      
      ArrayUtils.swap(booleanArray2, 1679, (int) character0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, true, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character3));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(7, booleanArray1.length);
      assertEquals(10, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'x';
      doubleArray0[1] = 5176.038;
      doubleArray0[2] = (double) (char)character2;
      doubleArray0[3] = (double) (char)character2;
      doubleArray0[4] = (double) (char)character0;
      ArrayUtils.swap(doubleArray0, (-2145201518), 775, 48);
      assertArrayEquals(new double[] {120.0, 5176.038, 119.0, 119.0, 65.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      ArrayUtils.swap((int[]) null, (-571), (-571));
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-571));
      assertEquals((-571), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) (-571));
      assertEquals((-571.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-571.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, (-1), (-1), (-2308));
      assertArrayEquals(new float[] {(-571.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-2308));
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'G';
      charArray0[2] = 'q';
      charArray0[3] = 'E';
      charArray0[4] = '?';
      charArray0[5] = '=';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Z');
      assertArrayEquals(new char[] {'w', 'G', 'q', 'E', '?', '='}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(6, charArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (-8), object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertEquals(2, objectArray0.length);
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)3;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)3, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Object[] objectArray0 = new Object[7];
      objectArray0[4] = (Object) true;
      objectArray0[6] = (Object) true;
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) boolean0, 1);
      assertEquals(7, objectArray0.length);
      assertEquals(4, int0);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 4;
      longArray0[5] = (long) 4;
      longArray0[6] = (long) 1;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {1L, 1L, (-1L), 1L, 4L, 4L, 1L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 4L;
      doubleArray0[5] = (double) 4L;
      doubleArray0[6] = (double) 4L;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 1.0, (-1.0), 4.0, 1.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 708;
      doubleArray0[2] = (-1503.0);
      doubleArray0[3] = (double) 51;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 708;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 51;
      doubleArray0[8] = (double) 708;
      ArrayUtils.shift(doubleArray0, 708, (-99), 2);
      assertArrayEquals(new double[] {0.0, 708.0, (-1503.0), 51.0, 0.0, 708.0, 0.0, 51.0, 708.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(51, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      intArray0[2] = 51;
      intArray0[3] = 76;
      intArray0[4] = 704;
      intArray0[6] = (-32);
      intArray0[7] = 1;
      intArray0[8] = (-2134008774);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 992, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {4, 0, 51, 76, 704, 0, (-32), 1, (-2134008774)}, intArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(9, intArray0.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(76, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 76, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)91, object0);
      assertNotNull(object0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)91;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)91, (byte)91, (byte)91, (byte)0, (byte)0, (byte)91, (byte)91}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = '{';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'{', 'v'}, charArray0);
      assertEquals(2, charArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)91;
      floatArray0[1] = (float) (byte)91;
      floatArray0[2] = (float) (byte)91;
      floatArray0[3] = (float) (byte)91;
      floatArray0[4] = (float) (byte)91;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {91.0F, 91.0F, 91.0F, 91.0F, 91.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-4281L);
      longArray0[1] = 227L;
      longArray0[2] = (-1497L);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-4281L), 227L, (-1497L)}, longArray0);
      assertArrayEquals(new long[] {(-4281L), 227L, (-1497L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2572.905226925;
      doubleArray0[1] = (double) (-1497L);
      doubleArray0[2] = (double) (-1497L);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-1497L), (-2906), (-940.0));
      assertArrayEquals(new double[] {2572.905226925, (-1497.0), (-1497.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '<', (-2906));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, charArray0.length);
      assertNotNull(bitSet0);
      
      MockRandom mockRandom0 = new MockRandom(1166L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      mockRandom0.setSeed(64L);
      DoubleStream doubleStream0 = mockRandom0.doubles(64L);
      assertNotNull(doubleStream0);
      
      long long1 = mockRandom0.nextLong();
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, (-2906), (-1602));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-4281L), 227L, (-1497L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {(-4281L), 227L, (-1497L)}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray2.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray2);
      
      int int1 = mockRandom0.nextInt((-777));
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      long long2 = mockRandom0.nextLong();
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(2L, long2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1497L);
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(1, objectArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '<');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'<'}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray1.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray1);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2572.905226925, (-1497.0), (-1497.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1808;
      intArray0[1] = (-1);
      intArray0[2] = (-2780);
      intArray0[3] = 111;
      intArray0[4] = 3751;
      ArrayUtils.shift(intArray0, (-1856));
      assertArrayEquals(new int[] {(-2780), 111, 3751, 0, 1808, (-1)}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-2699L);
      longArray0[1] = 707L;
      longArray0[2] = (-873L);
      longArray0[3] = (-3L);
      longArray0[4] = (-597L);
      longArray0[5] = (-3445L);
      longArray0[6] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-2699L), 707L, (-873L), (-3L), (-597L), (-3445L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-2699L), 707L, (-873L), (-3L), (-597L), (-3445L), 0L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1808;
      intArray0[1] = (-1);
      intArray0[2] = (-2780);
      intArray0[3] = 111;
      intArray0[4] = 3751;
      intArray0[5] = (-1212);
      ArrayUtils.shift(intArray0, (-1856));
      assertArrayEquals(new int[] {(-2780), 111, 3751, (-1212), 1808, (-1)}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      int int0 = (-5);
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711L, mutableInt0.longValue());
      assertEquals(711, mutableInt0.intValue());
      assertEquals((short)711, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertFalse(integer0.equals((Object)int0));
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711L, mutableInt0.longValue());
      assertEquals(711, mutableInt0.intValue());
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-5));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-5), (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer1;
      integerArray0[3] = integer1;
      integerArray0[2] = integer0;
      ArrayUtils.swap((char[]) null, int0, (-2), (int) integerArray0[2]);
      assertEquals(5, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)66, 55);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[4] = 'y';
      long[] longArray0 = new long[1];
      longArray0[0] = (-2564L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-2564L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-96);
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)3;
      shortArray0[3] = (short)3;
      shortArray0[4] = (short)3;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-96), (short)3, (short)3, (short)3, (short)3}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)3;
      intArray0[1] = (int) 'G';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 71, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 49;
      intArray0[3] = 49;
      ArrayUtils.swap(intArray0, 0, 49);
      assertArrayEquals(new int[] {0, 49, 0, 49}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true, false}, booleanArray0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(7, booleanArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 49);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 49, 0, 49}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(40.0);
      assertEquals(40.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2938.663781143062));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2938.663781143062), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-2938.663781143062), (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {40.0, (-2938.663781143062), (-2938.663781143062)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) Integer.MAX_VALUE;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) 49);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {2147483647L}, longArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[7];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1911.7383884133);
      doubleArray0[1] = (-2050.09573038531);
      doubleArray0[2] = (-5612.396077154137);
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = '^';
      charArray0[3] = 'w';
      charArray0[4] = '$';
      charArray0[5] = 'w';
      charArray0[6] = '^';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'^', '^', '^', 'w', '$', 'w', '^'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '^';
      floatArray0[1] = (float) '$';
      floatArray0[2] = (float) '$';
      floatArray0[3] = (float) '^';
      floatArray0[4] = (float) 'w';
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {94.0F, 36.0F, 36.0F, 94.0F, 119.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {94.0F, 36.0F, 36.0F, 94.0F, 119.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.valueOf("fi)NwvBC11ZJ8");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)24372;
      shortArray0[1] = (short)1016;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)24372);
      assertArrayEquals(new short[] {(short)24372, (short)1016}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils.shift((Object[]) booleanArray0, 5390, 9, 81);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)3983;
      shortArray0[3] = (short)645;
      shortArray0[4] = (short) (-1377);
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[3];
      intArray0[1] = (int) (short) (-1377);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-1377), 0}, intArray0);
      assertArrayEquals(new int[] {(-1377), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      Byte byte0 = new Byte((byte)16);
      assertEquals((byte)16, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.swap(intArray0, 32, 32, 32);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, (-1377), 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(3, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'L';
      charArray0[2] = 'b';
      charArray0[3] = 'z';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'M', 'L', 'b', 'z'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1130;
      shortArray0[4] = (short)5028;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-5093);
      shortArray0[7] = (short)1285;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)1130, (short)0, (short)5028, (short) (-1), (short) (-5093), (short)1285, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) (short)0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.indexOf(longArray1, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (short)1130;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {1130.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (-1);
      intArray0[3] = (int) (short)1130;
      intArray0[4] = (int) (short)1285;
      intArray0[5] = (int) (short)1285;
      intArray0[6] = (int) (short)0;
      intArray0[7] = 0;
      intArray0[8] = (int) (short)1130;
      ArrayUtils.swap(intArray0, 788, (-2329), 47);
      assertArrayEquals(new int[] {0, (-1), (-1), 1130, 1285, 1285, 0, 0, 1130}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertEquals('A', (char)character1);
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = new Character('w');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('w', (char)character2);
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      char char0 = 'Z';
      Character character3 = Character.valueOf('Z');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertEquals('Z', (char)character3);
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      characterArray0[5] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertArrayEquals(new char[] {'A', 'A', 'A', 'w', 'Z', 'A'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'x';
      doubleArray0[1] = 5176.038;
      doubleArray0[2] = (double) (char)character2;
      doubleArray0[3] = (double) (char)character2;
      doubleArray0[4] = (double) (char)character0;
      ArrayUtils.swap(doubleArray0, (-2145201518), 775, 48);
      assertArrayEquals(new double[] {120.0, 5176.038, 119.0, 119.0, 65.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      ArrayUtils.swap((int[]) null, (int) char0, (-4809), (-2935));
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(13.295317864415491);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(13.295318F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray1.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 2146173407, (double) 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int1 == int0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)55;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)43, (byte)55}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-87);
      shortArray0[1] = (short) (byte) (-87);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-87), (short) (-87)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Character character0 = Character.valueOf('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte)55);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte) (-87);
      doubleArray0[2] = (double) 'b';
      doubleArray0[3] = (-620.26418442);
      doubleArray0[4] = (double) (byte)55;
      doubleArray0[5] = (double) (short) (-87);
      doubleArray0[6] = (double) (byte) (-87);
      doubleArray0[7] = (double) (short) (-87);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 98.0, (int) (short) (-87), 909.26511);
      assertArrayEquals(new double[] {0.0, (-87.0), 98.0, (-620.26418442), 55.0, (-87.0), (-87.0), (-87.0)}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray1 = new Boolean[2];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = boolean0;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)24336;
      shortArray0[1] = (short)24336;
      int int0 = ArrayUtils.lastIndexOf(booleanArray2, false, (int) (short)24336);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertEquals(1, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)24336;
      doubleArray0[1] = (double) 2146173407;
      doubleArray0[2] = (double) 2146173407;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 2.146173407E9, 2146173407, 24336.0);
      assertArrayEquals(new double[] {24336.0, 2.146173407E9, 2.146173407E9}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) 0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-1.0));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(1.0);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray1.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 2146173407, (double) 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int1 == int0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(491.63460000000003);
      assertEquals(491.63460000000003, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 1L, (int) (byte) (-1));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) (-1L);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 117);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 117, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      int int0 = (-5);
      MutableInt mutableInt0 = new MutableInt((-1217));
      assertEquals("-1217", mutableInt0.toString());
      assertEquals((byte)63, mutableInt0.byteValue());
      assertEquals((-1217.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1217), (int)mutableInt0.getValue());
      assertEquals((-1217), (int)mutableInt0.toInteger());
      assertEquals((short) (-1217), mutableInt0.shortValue());
      assertEquals((-1217.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1217L), mutableInt0.longValue());
      assertEquals((-1217), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-3436));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mutableInt0;
      objectArray0[1] = (Object) true;
      int[] intArray0 = new int[7];
      intArray0[0] = (-5);
      intArray0[1] = (-7);
      intArray0[2] = (-3436);
      intArray0[3] = (-3436);
      intArray0[4] = (-3436);
      intArray0[5] = (-3436);
      intArray0[6] = (-1217);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-2042L);
      longArray0[1] = 1L;
      longArray0[2] = (-1341L);
      longArray0[3] = 1L;
      longArray0[4] = (-2186L);
      longArray0[5] = 0L;
      longArray0[7] = 1L;
      char[] charArray0 = new char[8];
      charArray0[1] = '-';
      charArray0[2] = 'f';
      charArray0[4] = '6';
      charArray0[5] = '^';
      charArray0[6] = 'R';
      charArray0[7] = 'g';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '8');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '-', 'f', '\u0000', '6', '^', 'R', 'g'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '-', 'f', '\u0000', '6', '^', 'R', 'g'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertArrayEquals(new char[] {'\u0000', '-', 'f', '\u0000', '6', '^', 'R', 'g'}, charArray0);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(16, charArray2.length);
      assertEquals(8, charArray0.length);
      assertNotNull(charArray2);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) 1L);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)19994;
      shortArray0[1] = (short)1808;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-2780);
      shortArray0[4] = (short) (-1214);
      shortArray0[5] = (short) (-1058);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short)19994, (short)1808, (short) (-1), (short) (-2780), (short) (-1214), (short) (-1058)}, shortArray0);
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(514.2649312341052);
      assertEquals(514.2649312341052, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[7];
      Double double1 = new Double((-1L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 514.2649312341052, 514.2649312341052, 514.2649312341052, 514.2649312341052, 514.2649312341052, 514.2649312341052}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)9, 2144966225);
      assertArrayEquals(new byte[] {(byte)0, (byte)127, (byte)0, (byte)127, (byte)127}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(doubleArray1, (-5888), 69, 2912);
      assertArrayEquals(new double[] {(-1.0), 514.2649312341052, 514.2649312341052, 514.2649312341052, 514.2649312341052, 514.2649312341052, 514.2649312341052}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (byte)127);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1130;
      shortArray0[4] = (short)5028;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-5093);
      shortArray0[7] = (short)1285;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)1130, (short)0, (short)5028, (short) (-1), (short) (-5093), (short)1285, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) (short)0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.indexOf(longArray1, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (short)1130;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) 0);
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {1130.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (int) (short) (-1), 1285L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 5482L;
      longArray0[2] = 479L;
      longArray0[3] = 1L;
      longArray0[4] = 997L;
      longArray0[5] = 2115L;
      MockRandom mockRandom0 = new MockRandom(693L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {0L, 479L, 1L, 997L, 2115L, 5482L}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'n';
      charArray0[2] = '~';
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'n';
      objectArray0[1] = (Object) 2115L;
      objectArray0[2] = (Object) '\u0000';
      objectArray0[3] = (Object) 'n';
      objectArray0[4] = (Object) 'n';
      objectArray0[5] = (Object) 1L;
      objectArray0[6] = (Object) 479L;
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 997L;
      objectArray1[2] = (Object) 997L;
      objectArray1[3] = (Object) '~';
      objectArray1[4] = (Object) 479L;
      Object object0 = ArrayUtils.get(objectArray1, (-1217));
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(5, objectArray1.length);
      assertNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null, 2);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(7, objectArray0.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.shift(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      ArrayUtils.swap(objectArray0, 54, 0);
      assertEquals(1, objectArray0.length);
      
      char[] charArray2 = new char[3];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 'E';
      charArray2[1] = '.';
      charArray2[2] = '&';
      boolean boolean0 = ArrayUtils.isEmpty(charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'E', '.', '&'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(3, charArray2.length);
      assertFalse(boolean0);
      
      char[] charArray3 = ArrayUtils.removeAllOccurences(charArray1, '\'');
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray3);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray3.length);
      assertNotNull(charArray3);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '&';
      longArray0[1] = (long) 'E';
      longArray0[2] = (long) '.';
      longArray0[3] = (long) '.';
      longArray0[4] = (long) 54;
      longArray0[5] = (-1828L);
      ArrayUtils.swap(longArray0, 54, 1, 2);
      assertArrayEquals(new long[] {38L, 69L, 46L, 46L, 54L, (-1828L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-7);
      byteArray0[8] = (byte)119;
      ArrayUtils.swap(byteArray0, (int) (byte) (-7), (int) (byte) (-125), (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)1, (byte)2, (byte)17, (byte) (-125), (byte)45, (byte) (-1), (byte)0, (byte) (-7), (byte)119}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '.');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '&';
      ArrayUtils.swap(longArray0, 1714, 2432, 1996);
      assertArrayEquals(new long[] {38L}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-7);
      ArrayUtils.swap(byteArray0, (int) (byte)119, (int) (byte)1, (-494));
      assertArrayEquals(new byte[] {(byte)2, (byte) (-7), (byte)0, (byte)2, (byte)2, (byte)119, (byte)45, (byte)1, (byte) (-7)}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)84;
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[4];
      longArray0[2] = (long) (byte)84;
      longArray0[3] = (long) (-589);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-99), (int) (byte)0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 84L, (-589L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.swap(byteArray0, (-589), (-99), (-278));
      assertArrayEquals(new byte[] {(byte)0, (byte)84, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      String string0 = "";
      Boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      short short0 = (short)17;
      shortArray0[1] = (short)17;
      shortArray0[2] = (short)3;
      shortArray0[3] = (short)3;
      shortArray0[4] = (short)3788;
      shortArray0[5] = (short)1013;
      shortArray0[6] = (short) (-405);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3);
      assertArrayEquals(new short[] {(short) (-1), (short)17, (short)3, (short)3, (short)3788, (short)1013, (short) (-405)}, shortArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{2, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals(7, shortArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((double) (-1.0F));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, (-2308), 3048, (-2308));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3048;
      intArray0[1] = (-2308);
      intArray0[2] = (-2308);
      int int0 = ArrayUtils.indexOf(intArray0, (-2308), 3048);
      assertArrayEquals(new int[] {3048, (-2308), (-2308)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertNotNull(floatArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (-1.0F), (-2308));
      assertNotSame(floatArray1, floatArray2);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(bitSet0);
      
      Short short0 = new Short((short) (-2308));
      assertEquals((short) (-2308), (short)short0);
      assertNotNull(short0);
      
      int int1 = ArrayUtils.indexOf((Object[]) floatArray0, (Object) null, 3048);
      assertTrue(int1 == int0);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 49;
      intArray0[3] = 49;
      ArrayUtils.swap(intArray0, 0, 49);
      assertArrayEquals(new int[] {0, 49, 0, 49}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      ArrayUtils.swap(charArray0, 521, (-3), 32);
      assertArrayEquals(new char[] {'r', 'r', 'r'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Float float0 = new Float((double) 49);
      assertEquals(49.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-446.4F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-446.4F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-1018.1760101525174));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1018.176F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((float) 49);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals(49.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Short short0 = new Short((short) (-1485));
      assertEquals((short) (-1485), (short)short0);
      assertNotNull(short0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'r', 'r', 'r'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, 1053, (-2432), 658);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-3);
      floatArray0[1] = (float) 'r';
      floatArray0[2] = (-1.0F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 114.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-3.0F), 114.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = 5176.038;
      doubleArray0[1] = 104.0;
      doubleArray0[2] = (double) 51;
      doubleArray0[3] = (-1503.0);
      doubleArray0[4] = (double) 4;
      ArrayUtils.shift(doubleArray0, 0, 51, Integer.MAX_VALUE);
      assertEquals(17, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (-1179.9081F));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1179.9081F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(2, floatArray2.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = " in an array of ";
      stringArray0[1] = "";
      stringArray0[2] = "2v$Q-3S+*";
      stringArray0[3] = "2JRi3";
      stringArray0[4] = "CRYB+Qa0S6w[qlO<";
      stringArray0[5] = "tbe *K?6k<%nK";
      stringArray0[6] = "";
      stringArray0[7] = "'";
      String[] stringArray1 = ArrayUtils.add(stringArray0, 8, "2v$Q-3S+*");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[8] = (long) 0;
      boolean boolean1 = ArrayUtils.isSorted(longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(9, longArray1.length);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) 0L;
      Class<Object[]> class0 = Object[].class;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0, class0);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(5, objectArray1.length);
      assertEquals(5, objectArray0.length);
      assertNotNull(objectArray1);
      
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)1;
      ArrayUtils.swap(byteArray0, (int) (byte)0, (int) (byte)0, (-1345));
      assertEquals(19, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)0, (byte) (-127));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(19, byteArray0.length);
      assertEquals(20, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char char0 = 'b';
      Character character1 = Character.valueOf('b');
      assertFalse(character1.equals((Object)character0));
      assertEquals('b', (char)character1);
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = new Character('w');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertEquals('w', (char)character2);
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      char char1 = 'Z';
      Character character3 = Character.valueOf('Z');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertEquals('Z', (char)character3);
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      characterArray0[5] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertArrayEquals(new char[] {'A', 'A', 'b', 'w', 'Z', 'A'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 347;
      intArray0[1] = (int) (char)character0;
      intArray0[2] = (int) 'A';
      intArray0[3] = (int) char0;
      intArray0[4] = (int) 'b';
      intArray0[5] = 41;
      intArray0[6] = (int) 'x';
      intArray0[7] = (int) char1;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {347, 65, 65, 98, 98, 41, 120, 90}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'x';
      floatArray0[1] = (float) 347;
      floatArray0[2] = (float) char1;
      floatArray0[3] = 347.0F;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {347.0F, 90.0F, 347.0F, 120.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Float float0 = new Float(100.0);
      assertEquals(100.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(100.0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(100.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 3761;
      ArrayUtils.shift(longArray0, 3761);
      assertArrayEquals(new long[] {3761L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.reverse((float[]) null);
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) 3761);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      int[] intArray0 = new int[1];
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char char0 = 'b';
      Character character1 = Character.valueOf('b');
      assertFalse(character1.equals((Object)character0));
      assertEquals('b', (char)character1);
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = new Character('w');
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('w', (char)character2);
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      char char1 = 'Z';
      Character character3 = Character.valueOf('Z');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('Z', (char)character3);
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      characterArray0[5] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertArrayEquals(new char[] {'A', 'A', 'b', 'w', 'Z', 'A'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 347;
      intArray0[1] = (int) (char)character0;
      intArray0[2] = (int) 'A';
      intArray0[3] = (int) char0;
      intArray0[4] = (int) 'b';
      intArray0[5] = 41;
      intArray0[6] = (int) 'x';
      intArray0[7] = (int) char1;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {347, 65, 65, 98, 98, 41, 120, 90}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'x';
      floatArray0[1] = (float) 347;
      floatArray0[2] = (float) char1;
      floatArray0[3] = 1118.8065F;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {1118.8065F, 90.0F, 347.0F, 120.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      int[] intArray0 = new int[9];
      intArray0[0] = (-2406);
      intArray0[1] = (-2406);
      intArray0[2] = (-2406);
      intArray0[3] = (-2406);
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-2406), (-2406), (-2406));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)99;
      shortArray0[1] = (short)2261;
      shortArray0[2] = (short)2576;
      shortArray0[3] = (short) (-5742);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1006);
      shortArray0[6] = (short) (-1645);
      shortArray0[7] = (short) (-1359);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)99, (short)2261, (short)2576, (short) (-5742), (short)0, (short) (-1006), (short) (-1645), (short) (-1359)}, shortArray1);
      assertArrayEquals(new short[] {(short)99, (short)2261, (short)2576, (short) (-5742), (short)0, (short) (-1006), (short) (-1645), (short) (-1359)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(shortArray1);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) (-2406);
      integerArray0[1] = (Integer) (-2406);
      integerArray0[2] = (Integer) (-2406);
      integerArray0[3] = (Integer) (-2406);
      integerArray0[4] = (Integer) (-2406);
      integerArray0[5] = (Integer) (-2406);
      integerArray0[6] = (Integer) (-2406);
      integerArray0[7] = (Integer) (-2406);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2406), (-2406), (-2406), (-2406), (-2406), (-2406), (-2406), (-2406)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (short)99);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {99L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)99, (short)2261, (short)2576, (short) (-5742), (short)0, (short) (-1006), (short) (-1645), (short) (-1359)}, shortArray1);
      assertArrayEquals(new short[] {(short)99, (short)2261, (short)2576, (short) (-5742), (short)0, (short) (-1006), (short) (-1645), (short) (-1359)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertEquals(16, shortArray2.length);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1048.0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1048.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {1048.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift((int[]) null, 856, 46, Integer.MAX_VALUE);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray2 = new boolean[5];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = false;
      booleanArray2[3] = true;
      booleanArray2[4] = false;
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurrences(booleanArray2, true);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(2, booleanArray3.length);
      assertEquals(5, booleanArray2.length);
      assertNotNull(booleanArray3);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = '\\';
      charArray0[2] = 'O';
      charArray0[3] = '|';
      charArray0[4] = '{';
      charArray0[5] = 'X';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'7', '\\', 'O', '|', '{', 'X'}, charArray0);
      assertArrayEquals(new char[] {'7', '\\', 'O', '|', '{', 'X'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[4] = 'y';
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-96), (int) (short)3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'G';
      floatArray0[1] = (float) 'y';
      floatArray0[2] = (float) 'y';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-96));
      assertArrayEquals(new float[] {71.0F, 121.0F, 121.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)67;
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)84;
      longArray0[1] = (long) (byte)67;
      longArray0[2] = (long) (byte)84;
      longArray0[3] = (long) (-606);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-99), (int) (byte)84);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {84L, 67L, 84L, (-606L)}, longArray0);
      assertArrayEquals(new long[] {84L, 67L, 84L, (-606L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (double) (byte)84;
      doubleArray0[1] = (double) (-606L);
      ArrayUtils.swap(doubleArray0, 104, (int) (byte)67);
      assertEquals(16, doubleArray0.length);
      
      short[] shortArray2 = ArrayUtils.insert((int) (byte)0, shortArray1, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray2);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 19.0F, (int) (byte)67);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((char[]) null, (-2113929215), 104);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)84, (byte)84, (byte)67, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)84, (byte)84, (byte)67, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = 1L;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 1L, (-1L), 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(1L);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, int1);
      
      ArrayUtils.shift(doubleArray1, 0, 214, 0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((double) (short) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(1845.841F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(1845.841F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(0.0F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[6] = float5;
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (Object) short0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((double) (short) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(1845.841F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals(1845.841F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(0.0F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[6] = float5;
      floatArray0[8] = floatArray0[7];
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (Object) short0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1638);
      assertEquals(1638.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) doubleArray0[0];
      objectArray0[1] = (Object) double0;
      objectArray0[3] = (Object) 1638;
      objectArray0[4] = (Object) doubleArray0[0];
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 1215;
      objectArray1[1] = (Object) 1638;
      objectArray1[2] = (Object) 1215;
      objectArray1[3] = (Object) 1638;
      objectArray1[4] = (Object) 1215;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(5, objectArray0.length);
      assertEquals(5, objectArray1.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift(objectArray0, 1);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(5, objectArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1968;
      shortArray0[1] = (short)1356;
      shortArray0[2] = (short) (-2761);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1968);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1968, (short)1356, (short) (-2761), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1356, (short) (-2761), (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1911.7383884133);
      doubleArray0[1] = (-2050.09573038531);
      doubleArray0[2] = (-5612.396077154137);
      doubleArray0[3] = (-335.045);
      doubleArray0[4] = 2617.099982964864;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 963.583089258056;
      MutableInt mutableInt0 = new MutableInt(3);
      assertEquals(3, mutableInt0.intValue());
      assertEquals((short)3, mutableInt0.shortValue());
      assertEquals(3L, mutableInt0.longValue());
      assertEquals(3, (int)mutableInt0.getValue());
      assertEquals((byte)3, mutableInt0.byteValue());
      assertEquals(3.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3, (int)mutableInt0.toInteger());
      assertEquals("3", mutableInt0.toString());
      assertEquals(3.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(3, mutableInt0.intValue());
      assertEquals((short)3, mutableInt0.shortValue());
      assertEquals(3L, mutableInt0.longValue());
      assertEquals(3, (int)mutableInt0.getValue());
      assertEquals((byte)3, mutableInt0.byteValue());
      assertEquals(3.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3, (int)mutableInt0.toInteger());
      assertEquals("3", mutableInt0.toString());
      assertEquals(3.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer1 = new Integer(3);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[0] = integer1;
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray0);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift((Object[]) integerArray0, 1);
      assertEquals(2, integerArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1356;
      shortArray0[1] = (short)1356;
      shortArray0[2] = (short)1356;
      shortArray0[3] = (short) (-2761);
      shortArray0[4] = (short) (-97);
      shortArray0[5] = (short)1968;
      shortArray0[6] = (short)1968;
      shortArray0[7] = (short)1356;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)97);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1356, (short)1356, (short)1356, (short) (-2761), (short) (-97), (short)1968, (short)1968, (short)1356}, shortArray0);
      assertArrayEquals(new short[] {(short)1356, (short)1356, (short)1356, (short) (-2761), (short) (-97), (short)1968, (short)1968, (short)1356}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 1638, 1215, 1215);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1215;
      longArray0[1] = (long) 1215;
      longArray0[2] = (long) 1215;
      longArray0[3] = (long) 1638;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {1215L, 1215L, 1215L, 1638L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      
      Double[] doubleArray1 = new Double[1];
      Double double0 = new Double(1638);
      assertEquals(1638.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1638.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {1215L, 1215L, 1215L, 1638L, 0L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) doubleArray1[0];
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) 1215L;
      objectArray0[3] = (Object) 1638L;
      objectArray0[4] = (Object) doubleArray1[0];
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 1215L;
      objectArray1[1] = (Object) 1215L;
      objectArray1[2] = (Object) 1215L;
      objectArray1[3] = (Object) 1215L;
      objectArray1[4] = (Object) 1638L;
      boolean boolean2 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(5, objectArray1.length);
      assertEquals(5, objectArray0.length);
      assertTrue(boolean2);
      
      ArrayUtils.shift(objectArray0, 1);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(5, objectArray0.length);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 1638L, 1215L, 1215L, 1215L}, longArray0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1679;
      shortArray0[1] = (short)1356;
      shortArray0[2] = (short) (-2761);
      shortArray0[3] = (short)18688;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1679);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)1356, (short) (-2761), (short)18688}, shortArray1);
      assertArrayEquals(new short[] {(short)1679, (short)1356, (short) (-2761), (short)18688}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((double) (short)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(1845.841F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(1845.841F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(0.0F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[6] = float5;
      floatArray0[8] = floatArray0[7];
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (Object) short0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (float)floatArray0[0];
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) short0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) floatArray0[3];
      Object[] objectArray1 = ArrayUtils.removeAllOccurrences(objectArray0, (Object) float3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float4, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float5, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      
      ArrayUtils.swap((Object[]) floatArray0, (-2502), (-29), (-2502));
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((double) (short) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(1845.841F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals(1845.841F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(0.0F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[6] = float5;
      floatArray0[8] = floatArray0[7];
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (Object) short0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (float)floatArray0[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-115.14));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-115.14), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) short0;
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) floatArray0[3];
      Object[] objectArray1 = ArrayUtils.removeAllOccurrences(objectArray0, (Object) float3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float4, 0.01F);
      assertNotEquals((float)float3, (float)float5, 0.01F);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(9, floatArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      
      ArrayUtils.swap((Object[]) floatArray0, (-2502), (-29), (-2502));
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(9, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, (-2502));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2502, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'm';
      charArray0[3] = 'Y';
      charArray0[4] = 'y';
      charArray0[5] = 'E';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'E');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'J', 'J', 'm', 'Y', 'y', 'E'}, charArray0);
      assertArrayEquals(new char[] {'J', 'J', 'm', 'Y', 'y'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), (int) (short)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte)50, (byte) (-1), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) 'm';
      intArray0[3] = (int) 'J';
      intArray0[4] = (int) (byte)2;
      intArray0[5] = (int) (byte)50;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {2, 109, 74, 2, 50, 2}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      int int0 = (-5);
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals(711, mutableInt0.intValue());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("711", mutableInt0.toString());
      assertEquals(711L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertFalse(integer0.equals((Object)int0));
      assertEquals(711, mutableInt0.intValue());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("711", mutableInt0.toString());
      assertEquals(711L, mutableInt0.longValue());
      assertEquals(711, (int)integer0);
      assertNotNull(integer0);
      
      int int1 = mutableInt0.getAndAdd(711);
      assertFalse(int1 == int0);
      assertEquals((short)1422, mutableInt0.shortValue());
      assertEquals(1422.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1422", mutableInt0.toString());
      assertEquals(1422L, mutableInt0.longValue());
      assertEquals(1422.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1422, mutableInt0.intValue());
      assertEquals(1422, (int)mutableInt0.getValue());
      assertEquals((byte) (-114), mutableInt0.byteValue());
      assertEquals(1422, (int)mutableInt0.toInteger());
      assertEquals(711, int1);
      
      Integer integer1 = new Integer((-5));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      assertEquals((-5), (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[5];
      mutableInt0.subtract((-5));
      assertEquals(1427, (int)mutableInt0.getValue());
      assertEquals(1427, (int)mutableInt0.toInteger());
      assertEquals((byte) (-109), mutableInt0.byteValue());
      assertEquals(1427, mutableInt0.intValue());
      assertEquals(1427.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1427, mutableInt0.shortValue());
      assertEquals(1427.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1427L, mutableInt0.longValue());
      assertEquals("1427", mutableInt0.toString());
      
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[2] = integer0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(5, integerArray0.length);
      assertFalse(boolean0);
      
      Double double0 = new Double(711);
      assertEquals(711.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-186);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)50;
      ArrayUtils.shift(shortArray0, 1, int0, 76);
      assertArrayEquals(new short[] {(short) (-186), (short)0, (short)50}, shortArray0);
      assertFalse(int0 == int1);
      assertEquals(3, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) double0, (Object) "Array element ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Character character0 = new Character('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('s');
      assertTrue(character1.equals((Object)character0));
      assertEquals('s', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[26];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (int) character0, (-1205));
      assertTrue(character0.equals((Object)character1));
      assertNull(byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-1294), (int) character0, 2144966186);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(character0.equals((Object)character1));
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)117;
      shortArray0[1] = (short)1120;
      shortArray0[2] = (short) (-516);
      shortArray0[3] = (short)17313;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-2114);
      shortArray0[6] = (short)87;
      shortArray0[7] = (short) (-3550);
      shortArray0[8] = (short)1930;
      ArrayUtils.shift(shortArray0, (int) (short)117, (int) (short) (-2114), (int) (short)117);
      assertArrayEquals(new short[] {(short)117, (short)1120, (short) (-516), (short)17313, (short) (-1), (short) (-2114), (short)87, (short) (-3550), (short)1930}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-304.589);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3066), (-5888));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(21, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (-5888));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = 'N';
      charArray0[2] = '&';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'}', 'N', '&'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)478;
      shortArray0[3] = (short) (-1275);
      shortArray0[4] = (short) (-2338);
      shortArray0[5] = (short)6;
      int int0 = ArrayUtils.indexOf(charArray0, '&');
      assertArrayEquals(new char[] {'}', 'N', '&'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(2, int0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'}', 'N', '&'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)0;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], (int) (short)0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(696);
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals(696.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(696, (int)mutableInt0.toInteger());
      assertEquals((short)696, mutableInt0.shortValue());
      assertEquals(696, (int)mutableInt0.getValue());
      assertEquals(696L, mutableInt0.longValue());
      assertEquals("696", mutableInt0.toString());
      assertEquals(696, mutableInt0.intValue());
      assertEquals(696.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals(696.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(696, (int)mutableInt0.toInteger());
      assertEquals((short)696, mutableInt0.shortValue());
      assertEquals(696, (int)mutableInt0.getValue());
      assertEquals(696L, mutableInt0.longValue());
      assertEquals("696", mutableInt0.toString());
      assertEquals(696, mutableInt0.intValue());
      assertEquals(696.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(696, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)48;
      shortArray0[1] = (short)160;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)1823;
      shortArray0[6] = (short)85;
      shortArray0[7] = (short)1185;
      shortArray0[8] = (short)425;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-25179));
      assertArrayEquals(new short[] {(short)48, (short)160, (short)2, (short) (-1), (short)2, (short)1823, (short)85, (short)1185, (short)425}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (-1327));
      assertArrayEquals(new short[] {(short)48, (short)160, (short)2, (short) (-1), (short)2, (short)1823, (short)85, (short)1185, (short)425}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1072;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)3448;
      shortArray0[4] = (short)772;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)1072, (short)0, (short)3448, (short)0, (short)772}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((short)3448);
      assertEquals(3448, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)772, (int) (short)1072);
      assertArrayEquals(new short[] {(short)1072, (short)0, (short)3448, (short)0, (short)772}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(4, int0);
      
      int int1 = (-901);
      try { 
        Integer.valueOf("&guj&~r>NA4aBq!", (-901));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -901 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = new boolean[5];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[3] = true;
      booleanArray1[4] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      ArrayUtils.shift(byteArray0, (int) (byte) (-18), (int) (byte) (-74), (int) (byte)0);
      assertArrayEquals(new byte[] {(byte) (-74), (byte) (-18), (byte)0, (byte)10}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711, mutableInt0.intValue());
      assertEquals(711L, mutableInt0.longValue());
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711, mutableInt0.intValue());
      assertEquals(711L, mutableInt0.longValue());
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals(711, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(3);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(3, (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      int int0 = mutableInt0.getAndAdd((int) integerArray0[1]);
      assertEquals(1422, (int)mutableInt0.toInteger());
      assertEquals(1422, (int)mutableInt0.getValue());
      assertEquals(1422, mutableInt0.intValue());
      assertEquals((byte) (-114), mutableInt0.byteValue());
      assertEquals("1422", mutableInt0.toString());
      assertEquals((short)1422, mutableInt0.shortValue());
      assertEquals(1422.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1422L, mutableInt0.longValue());
      assertEquals(1422.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(5, integerArray0.length);
      assertEquals(711, int0);
      
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, 1983);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)5;
      ArrayUtils.shift(byteArray0, 3, (int) (byte) (-28), (int) (byte)42);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-28), (byte)5}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)55;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)43, (byte)55}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-87);
      shortArray0[1] = (short) (byte) (-87);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-87), (short) (-87)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Character character0 = Character.valueOf('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character(')');
      assertFalse(character1.equals((Object)character0));
      assertEquals(')', (char)character1);
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('w');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('w', (char)character2);
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'b');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 1679, 451);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1L);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-3L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-3L), (long)long2);
      assertNotNull(long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {(-1L), 1L, (-3L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) 0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-1.0));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(1.0);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Boolean boolean1 = Boolean.valueOf("u(9Tv#+vU0!e`48v");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)24372;
      shortArray0[1] = (short)1016;
      shortArray0[2] = (short)1016;
      boolean boolean2 = ArrayUtils.contains(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short)24372, (short)1016, (short)1016}, shortArray0);
      assertFalse(boolean2 == boolean0);
      assertEquals(3, shortArray0.length);
      assertFalse(boolean2);
      
      boolean[] booleanArray2 = new boolean[4];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = false;
      booleanArray2[2] = (boolean) boolean1;
      booleanArray2[3] = (boolean) boolean1;
      boolean[] booleanArray3 = ArrayUtils.addAll((boolean[]) null, booleanArray2);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray3));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertEquals(4, booleanArray2.length);
      assertEquals(4, booleanArray3.length);
      assertNotNull(booleanArray3);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)43;
      shortArray0[1] = (short) (byte)43;
      shortArray0[2] = (short) (byte)43;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)43, (short)43, (short)43}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      ArrayUtils.shift(intArray0, (-1399), 15, (-116));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-213);
      doubleArray0[1] = (-62.4472268209);
      doubleArray0[2] = (double) (-116);
      doubleArray0[3] = (double) (short)43;
      doubleArray0[4] = (double) 0;
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (-1));
      assertArrayEquals(new double[] {(-213.0), (-62.4472268209), (-116.0), 43.0, 0.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int1);
      
      Short[] shortArray1 = new Short[6];
      shortArray1[0] = (Short) (short)43;
      shortArray1[1] = (Short) (short)43;
      shortArray1[2] = (Short) (short)43;
      shortArray1[3] = (Short) (short)43;
      shortArray1[4] = (Short) (short)43;
      shortArray1[5] = (Short) (short)43;
      Short[] shortArray2 = ArrayUtils.insert(128, shortArray1, (Short[]) null);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-1314);
      intArray0[1] = (-1314);
      short short0 = (short) (-29);
      Short short1 = new Short((short) (-29));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-29), (short)short1);
      assertNotNull(short1);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int)  (-29), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -29, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-87);
      shortArray0[1] = (short) (byte) (-87);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-87), (short) (-87)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-87);
      intArray0[2] = (int) (short) (-87);
      intArray0[3] = (int) (byte)43;
      intArray0[4] = (-213);
      intArray0[5] = (-1);
      intArray0[6] = (-213);
      ArrayUtils.shift(intArray0, (int) (byte)43, (-1399), (-116));
      assertArrayEquals(new int[] {(-87), 0, (-87), 43, (-213), (-1), (-213), 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-87);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-213));
      assertArrayEquals(new double[] {(-1.0), (-87.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      Short[] shortArray1 = ArrayUtils.insert(0, (Short[]) null, (Short[]) null);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)55;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)43, (byte)55}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-87);
      shortArray0[1] = (short) (byte) (-87);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-87), (short) (-87)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-87);
      intArray0[1] = (int) (short) (-87);
      intArray0[2] = (int) (byte) (-87);
      intArray0[3] = (int) (byte)43;
      intArray0[4] = (-221);
      intArray0[5] = (-1);
      intArray0[6] = 2;
      intArray0[7] = (int) (byte)43;
      ArrayUtils.shift(intArray0, 2145922749, (-1399), (-116));
      assertArrayEquals(new int[] {(-87), (-87), (-87), 43, (-221), (-1), 2, 43}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1399);
      doubleArray0[2] = (double) (-1);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0);
      assertArrayEquals(new double[] {(-1.0), (-1399.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      Short[] shortArray1 = ArrayUtils.insert(0, (Short[]) null, (Short[]) null);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      Double double0 = new Double(0.9799125963079268);
      assertEquals(0.9799125963079268, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, double0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift((Object[]) doubleArray0, 1);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) 1;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L, 1L, 1L}, longArray0);
      assertEquals(7, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2761);
      shortArray0[1] = (short)120;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-2761));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2761), (short)120}, shortArray0);
      assertArrayEquals(new short[] {(short)120}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short) (-2761);
      intArray1[1] = (int) (short) (-2761);
      intArray1[2] = (int) (short) (-2761);
      intArray1[3] = 1;
      intArray1[4] = (int) (short)120;
      intArray1[5] = (int) (short)120;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1, intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)98;
      byteArray0[0] = (byte)98;
      byte byte1 = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)12;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte)88, (byte)88);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 88, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = '*';
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)90;
      shortArray0[1] = (short) (-1474);
      shortArray0[2] = (short)16;
      shortArray0[3] = (short)90;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)90, (short) (-1474), (short)16, (short)90}, shortArray0);
      assertArrayEquals(new short[] {(short)90, (short) (-1474), (short)16, (short)90}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      int[] intArray0 = new int[9];
      intArray0[0] = (-2406);
      intArray0[1] = (-2406);
      intArray0[2] = (-2406);
      intArray0[3] = (-2406);
      intArray0[5] = (-2406);
      intArray0[6] = 886;
      intArray0[7] = (-2406);
      intArray0[8] = (-2406);
      ArrayUtils.shift(intArray0, 451, (-879), 856);
      assertArrayEquals(new int[] {(-2406), (-2406), (-2406), (-2406), 0, (-2406), 886, (-2406), (-2406)}, intArray0);
      assertEquals(9, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {(-2406), (-2406), (-2406), (-2406), 0, (-2406), 886, (-2406), (-2406)}, intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-115.14);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-115.14), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-115.14), 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = ArrayUtils.removeAllOccurrences((Object[]) null, (Object) null);
      assertNull(objectArray0);
      
      ArrayUtils.swap((Object[]) null, (-2502), 3240, 1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      Byte byte0 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)97, object0);
      assertNotNull(object0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)1;
      ArrayUtils.shift(booleanArray0, 76);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      ArrayUtils.swap((Object[]) null, 47, 2147127399);
      char[] charArray0 = new char[4];
      charArray0[2] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', '&', '&', '&'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.shift(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      ArrayUtils.swap(objectArray0, 54, 0);
      assertEquals(1, objectArray0.length);
      
      char[] charArray2 = new char[3];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 'E';
      charArray2[1] = '.';
      boolean boolean0 = ArrayUtils.isEmpty(charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'E', '.', '\u0000'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(3, charArray2.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[4] = 'y';
      charArray0[5] = 'E';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), (int) (short)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte)50, (byte) (-1), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte)50;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte)50;
      shortArray0[4] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte) (-96), (-1750));
      assertArrayEquals(new short[] {(short) (-1), (short)50, (short) (-1), (short)50, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[9];
      try { 
        Integer.valueOf(" is not in the range '0' - '9'", (int) (byte) (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[2] = 'm';
      charArray0[4] = 'y';
      charArray0[5] = 'E';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'E');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'm', '\u0000', 'y', 'E'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'm', '\u0000', 'y'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)50;
      byte byte0 = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), (int) (short)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte)50, (byte) (-1), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte)50;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte)50;
      shortArray0[4] = (short)0;
      int int0 = (-1750);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte) (-96), (-1750));
      assertArrayEquals(new short[] {(short) (-1), (short)50, (short) (-1), (short)50, (short)0}, shortArray0);
      assertFalse(int1 == int0);
      assertEquals(5, shortArray0.length);
      assertEquals((-1), int1);
      
      Integer[] integerArray0 = new Integer[9];
      try { 
        Integer.valueOf(" is not in the range '0' - '9'", (int) (byte) (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 583L;
      float[] floatArray2 = ArrayUtils.removeAll(floatArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {583.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {583.0F, 0.0F}, floatArray2, 0.01F);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(0, intArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertNotNull(floatArray2);
      
      Float[] floatArray3 = new Float[0];
      float[] floatArray4 = ArrayUtils.toPrimitive(floatArray3);
      assertNotSame(floatArray4, floatArray1);
      assertNotSame(floatArray4, floatArray2);
      assertSame(floatArray4, floatArray0);
      assertArrayEquals(new float[] {}, floatArray4, 0.01F);
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertEquals(0, floatArray3.length);
      assertEquals(0, floatArray4.length);
      assertNotNull(floatArray4);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-388);
      shortArray0[1] = (short)34;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1037;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-5458), (int) (short)1);
      assertArrayEquals(new short[] {(short) (-388), (short)34, (short)1, (short)1037}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '$';
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-727);
      intArray2[1] = (int) (short)1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -727, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = Character.valueOf('{');
      assertEquals('{', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('~');
      assertFalse(character1.equals((Object)character0));
      assertEquals('~', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('{');
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertEquals('{', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'{', '~', '{'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 33, (-1424), (-1678));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      Character character0 = Character.valueOf('n');
      assertEquals('n', (char)character0);
      assertNotNull(character0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) character0, 91);
      assertEquals(5, objectArray0.length);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1161L));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)94;
      Float float0 = new Float((double) (byte) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 1995, (int) (byte)94);
      assertNull(longArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)1;
      objectArray0[1] = (Object) floatArray0[0];
      objectArray0[2] = (Object) float0;
      objectArray0[3] = (Object) (byte)116;
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) true;
      MutableInt mutableInt0 = new MutableInt((Number) (byte)94);
      assertEquals("94", mutableInt0.toString());
      assertEquals(94.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(94.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(94, (int)mutableInt0.getValue());
      assertEquals((byte)94, mutableInt0.byteValue());
      assertEquals(94, (int)mutableInt0.toInteger());
      assertEquals(94, mutableInt0.intValue());
      assertEquals(94L, mutableInt0.longValue());
      assertEquals((short)94, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.add((Number) (byte)94);
      assertEquals(188, mutableInt0.intValue());
      assertEquals(188.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)188, mutableInt0.shortValue());
      assertEquals(188.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(188, (int)mutableInt0.getValue());
      assertEquals((byte) (-68), mutableInt0.byteValue());
      assertEquals(188, (int)mutableInt0.toInteger());
      assertEquals("188", mutableInt0.toString());
      assertEquals(188L, mutableInt0.longValue());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1995;
      doubleArray0[1] = (double) (float)floatArray0[2];
      doubleArray0[2] = (double) (byte)94;
      doubleArray0[3] = (double) (float)floatArray0[0];
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (float)floatArray0[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1912.24));
      assertArrayEquals(new double[] {1995.0, (-1.0), 94.0, (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 1638, 1215, 1215);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1215;
      longArray0[1] = (long) 1215;
      longArray0[2] = (long) 1215;
      longArray0[3] = (long) 1638;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {1215L, 1215L, 1215L, 1638L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      
      Double[] doubleArray1 = new Double[1];
      Double double0 = new Double(1638);
      assertEquals(1638.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1638.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {1215L, 1215L, 1215L, 1638L, 0L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1215L;
      floatArray0[1] = (float) 1215;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1215.0F, 1215.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 1638L);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1215.0F, 1215.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(9, floatArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, (float) 1638L);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1638.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {1215.0F, 1215.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 1215);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1215, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1591L;
      longArray0[1] = 1591L;
      longArray0[2] = 1591L;
      longArray0[3] = 1591L;
      longArray0[4] = 1591L;
      longArray0[5] = 1591L;
      longArray0[6] = 1591L;
      longArray0[7] = 1591L;
      int int0 = ArrayUtils.indexOf(longArray0, 1591L, (-2935));
      assertArrayEquals(new long[] {1591L, 1591L, 1591L, 1591L, 1591L, 1591L, 1591L, 1591L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {1}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-1567));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1567, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-53);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-53)}, intArray0);
      assertArrayEquals(new int[] {(-53)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-53);
      longArray0[1] = (long) (-53);
      longArray0[2] = (long) (-53);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5176.038;
      doubleArray0[1] = 104.0;
      doubleArray0[2] = (double) 44;
      doubleArray0[3] = (-1493.8663438634007);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 708;
      doubleArray0[6] = (double) 0;
      ArrayUtils.shift(doubleArray0, (-53), 44, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {0.0, 5176.038, 104.0, 44.0, (-1493.8663438634007), 0.0, 708.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((-3433));
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = Character.valueOf('b');
      assertFalse(character1.equals((Object)character0));
      assertEquals('b', (char)character1);
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = new Character('w');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('w', (char)character2);
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      Character character3 = Character.valueOf('Z');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertEquals('Z', (char)character3);
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      characterArray0[5] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertArrayEquals(new char[] {'A', 'A', 'b', 'w', 'Z', 'A'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = true;
      booleanArray1[3] = true;
      booleanArray1[6] = false;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true, true, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(7, booleanArray1.length);
      assertEquals(10, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertNotNull(booleanArray2);
      
      ArrayUtils.swap(booleanArray2, 1679, (int) character0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true, true, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character3));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertEquals(7, booleanArray1.length);
      assertEquals(10, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)67;
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (double) (byte)84;
      doubleArray0[1] = (double) (byte)0;
      ArrayUtils.swap(doubleArray0, 104, (int) (byte)67);
      assertEquals(16, doubleArray0.length);
      
      short[] shortArray2 = ArrayUtils.insert((int) (byte)0, shortArray1, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 19.0F, (int) (byte)67);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, Double.NaN);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(16, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int1 = ArrayUtils.indexOf((float[]) null, (-805.96F));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)84, (byte)0, (byte)67, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      long[] longArray3 = ArrayUtils.subarray(longArray2, 32, 1072);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertNotNull(longArray3);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0L;
      Object object0 = ArrayUtils.get(objectArray0, 1072);
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) 0L;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1072;
      floatArray0[1] = (float) 1072;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 1072;
      floatArray0[7] = (float) 0L;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1072.0F, 1072.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1072.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, 0.0F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1072.0F, 1072.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1072.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(0, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray0, 1072.0F);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertArrayEquals(new float[] {1072.0F, 1072.0F, 1072.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1072.0F, 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {1072.0F, 1072.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1072.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(9, floatArray2.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1356.9);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3764.0);
      assertArrayEquals(new double[] {(-1356.9)}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {')', ')', ')'}, charArray0);
      assertArrayEquals(new char[] {')', ')', ')'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(711L);
      assertEquals(711L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {711L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {711L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-1302));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = ':';
      ArrayUtils.reverse(shortArray0, (int) (byte)6, 2801);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) ':';
      longArray0[1] = (long) '^';
      longArray0[2] = (long) '^';
      longArray0[3] = (long) '^';
      longArray0[4] = 64L;
      longArray0[5] = (long) '^';
      longArray0[6] = 538L;
      longArray0[7] = (long) '^';
      longArray0[8] = (long) '^';
      long[] longArray1 = ArrayUtils.remove(longArray0, (int) (byte)6);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {58L, 94L, 94L, 94L, 64L, 94L, 94L, 94L}, longArray1);
      assertArrayEquals(new long[] {58L, 94L, 94L, 94L, 64L, 94L, 538L, 94L, 94L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(8, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotNull(longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray1, (Object) boolean1, 99);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertFalse(boolean1.equals((Object)boolean0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-903.8F);
      floatArray0[1] = (-1.0F);
      int int0 = (-1355);
      int int1 = ArrayUtils.indexOf(floatArray0, 2102.0754F, (-1355));
      assertArrayEquals(new float[] {(-903.8F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1355);
      longArray0[1] = 8L;
      longArray0[2] = (long) (-1);
      longArray0[3] = 2317L;
      longArray0[4] = (long) (-1355);
      longArray0[5] = (long) (-1355);
      longArray0[6] = (long) (-1);
      int int2 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-87);
      byteArray0[5] = (byte)15;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-96), (byte) (-93), (byte) (-87), (byte)0, (byte)15}, byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-96), (byte) (-93), (byte) (-87), (byte)0, (byte)15}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      
      Byte[] byteArray2 = new Byte[1];
      byteArray2[0] = (Byte) (byte) (-93);
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)46);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-93)}, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray3.length);
      assertNotNull(byteArray3);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-87);
      shortArray0[1] = (short) (byte)15;
      shortArray0[2] = (short) (byte) (-96);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1161L));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-82);
      Double double0 = new Double((byte)116);
      assertEquals(116.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((byte)116);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(116.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-1), (byte)94, (byte)116, (byte)94, (byte) (-1), (byte) (-82)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-1), (byte)94, (byte)116, (byte)94, (byte) (-1), (byte) (-82)}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = ':';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '\\');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {':'}, charArray1);
      assertArrayEquals(new char[] {'\\', ':'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3353.89412554);
      doubleArray0[2] = 1.0;
      doubleArray0[2] = 12.31;
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)722);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "S}4d";
      stringArray0[1] = "S}4d";
      stringArray0[2] = "N)xLpnJ]ZR";
      stringArray0[3] = "S}4d";
      stringArray0[4] = "^\"";
      stringArray0[5] = "S}4d";
      stringArray0[6] = "\"<";
      stringArray0[7] = "^\"";
      stringArray0[8] = "S}4d";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)722;
      longArray0[1] = (long) (short)722;
      longArray0[2] = (long) (short)722;
      longArray0[3] = (long) (short)722;
      longArray0[4] = (long) (short)722;
      longArray0[5] = (long) (short)722;
      longArray0[6] = (long) (short)722;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {722L, 722L, 722L, 722L, 722L, 722L, 722L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(7, longArray0.length);
      assertEquals(14, longArray1.length);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = '9';
      charArray0[2] = '|';
      charArray0[3] = 'U';
      charArray0[4] = 'p';
      charArray0[5] = '}';
      charArray0[6] = '?';
      ArrayUtils.reverse(charArray0, 1139, 4);
      assertArrayEquals(new char[] {'X', '9', '|', 'U', 'p', '}', '?'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      char char0 = 'Y';
      charArray0[3] = 'Y';
      char char1 = 'y';
      charArray0[4] = 'y';
      char char2 = 'E';
      charArray0[5] = 'E';
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-96);
      byteArray0[0] = (byte) (-96);
      byte byte1 = (byte)50;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)50, (int) (short)2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.reverse((char[]) null, (int) (byte)50, (int) (byte)0);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (byte)50;
      shortArray0[2] = (short)2;
      int[] intArray0 = new int[6];
      intArray0[0] = 519;
      intArray0[1] = (int) 'Y';
      intArray0[2] = (int) 'E';
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) 'Y';
      intArray0[5] = (int) 'J';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 519, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      long[] longArray0 = new long[9];
      longArray0[0] = 2147483647L;
      longArray0[1] = (long) 'J';
      longArray0[2] = (long) 'J';
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) 'J';
      longArray0[5] = (long) 'J';
      longArray0[6] = (long) 'J';
      longArray0[7] = (long) 'J';
      longArray0[8] = (long) 'J';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 76, (-2146685957));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2147483647L, 74L, 74L, 74L, 74L, 74L, 74L, 74L, 74L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'J';
      objectArray0[1] = (Object) 74L;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(2, objectArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift(objectArray0, 17);
      assertEquals(2, objectArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-682);
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short)1393;
      shortArray0[4] = (short)108;
      shortArray0[5] = (short)595;
      shortArray0[6] = (short)0;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)84);
      assertArrayEquals(new short[] {(short) (-682), (short)7, (short)8, (short)1393, (short)108, (short)595, (short)0}, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, shortArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-861.025);
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      
      Integer integer0 = new Integer(1136);
      assertEquals(1136, (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) null);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-861.025), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'm';
      intArray0[1] = 1072;
      intArray0[2] = 1072;
      intArray0[3] = (int) '\\';
      intArray0[4] = 2048;
      intArray0[5] = 2048;
      intArray0[6] = (int) 'm';
      intArray0[7] = (int) 'Y';
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {1072, 1072, 92, 2048, 2048, 109, 89, 109}, intArray0);
      assertEquals(8, intArray0.length);
      
      BitSet bitSet0 = new BitSet(2);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertArrayEquals(new int[] {1072, 1072, 92, 2048, 2048, 109, 89, 109}, intArray1);
      assertArrayEquals(new int[] {1072, 1072, 92, 2048, 2048, 109, 89, 109}, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer(2048);
      assertEquals(2048, (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 'Y';
      doubleArray0[2] = (double) 'Y';
      doubleArray0[3] = (double) '\\';
      doubleArray0[4] = (double) 1072;
      doubleArray0[5] = (double) 'm';
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) 1072;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 89.0, 89.0, 92.0, 1072.0, 109.0, (-1.0), 1072.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(16, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2048;
      intArray0[1] = 2048;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {2048, 2048}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-851.344238910652);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.1, 1995.0);
      assertArrayEquals(new double[] {1.5, (-851.344238910652)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2933);
      intArray0[1] = 59;
      intArray0[2] = 3227;
      intArray0[3] = (-1363);
      intArray0[4] = (-87);
      intArray0[5] = 171;
      intArray0[6] = 56;
      intArray0[7] = 99;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {(-2933), 59, 3227, (-1363), (-87), 171, 56, 99}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {1.5, (-851.344238910652)}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean2 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-5093);
      shortArray0[1] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-5093)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'e';
      longArray0[1] = (long) 'e';
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) 'v';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'v', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 118L);
      assertArrayEquals(new long[] {101L, 101L, 0L, 118L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(3, int0);
      
      short[] shortArray1 = new short[9];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)0;
      shortArray1[1] = (short) (-5093);
      shortArray1[2] = (short) (-5093);
      shortArray1[3] = (short) (-5093);
      shortArray1[4] = (short) (-5093);
      shortArray1[5] = (short)1285;
      shortArray1[6] = (short)0;
      shortArray1[7] = (short)0;
      shortArray1[8] = (short) (-5093);
      short[] shortArray2 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-5093)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-5093), (short) (-5093), (short) (-5093), (short) (-5093), (short)1285, (short)0, (short)0, (short) (-5093)}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(11, shortArray2.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray2);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)68;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)53);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)102, (byte) (-15), (byte)120, (byte)97, (byte)29, (byte)68}, byteArray1);
      assertArrayEquals(new byte[] {(byte)102, (byte)53, (byte) (-15), (byte)120, (byte)97, (byte)29, (byte)68}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(6, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 583L;
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2231.9467625707;
      doubleArray0[3] = (-3602.844);
      doubleArray0[6] = (double) (-1323);
      doubleArray0[7] = (double) (-1323);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 2231.9467625707, (-3602.844), 0.0, 0.0, (-1323.0), (-1323.0), 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      
      Float[] floatArray2 = new Float[0];
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertNotNull(floatArray3);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-3602.844));
      assertArrayEquals(new double[] {0.0, 0.0, 2231.9467625707, (-3602.844), 0.0, 0.0, (-1323.0), (-1323.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{3}", bitSet0.toString());
      assertEquals(9, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'e';
      doubleArray0[1] = (double) 'e';
      doubleArray0[2] = (double) 'e';
      doubleArray0[3] = 2446.8;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 3764);
      assertArrayEquals(new double[] {101.0, 101.0, 101.0, 2446.8}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, (-1), (float) 3764);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = ':';
      charArray0[2] = 'w';
      charArray0[3] = '@';
      charArray0[4] = 'q';
      charArray0[5] = ';';
      charArray0[6] = ',';
      charArray0[7] = ' ';
      charArray0[8] = '=';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'^', ':', 'w', '@', 'q', ';', ',', ' ', '='}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '=';
      longArray0[1] = (long) '^';
      longArray0[2] = (long) '@';
      longArray0[3] = (long) ':';
      longArray0[4] = (long) 'w';
      longArray0[5] = (long) ' ';
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)6);
      assertArrayEquals(new long[] {61L, 94L, 64L, 58L, 119L, 32L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)6;
      shortArray0[1] = (short) (byte)6;
      shortArray0[2] = (short) (byte)6;
      shortArray0[3] = (short) (byte)6;
      shortArray0[4] = (short)5;
      shortArray0[5] = (short) (byte)6;
      short[] shortArray1 = ArrayUtils.insert((int) (byte)6, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)6, (short)6, (short)6, (short)6, (short)5, (short)6}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-32), (-18));
      assertArrayEquals(new byte[] {(byte)2, (byte) (-32), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-32);
      ArrayUtils.swap(doubleArray0, 8, 100);
      assertArrayEquals(new double[] {(-32.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-32);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (-2313);
      shortArray0[6] = (short) (byte) (-32);
      shortArray0[7] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.insert((int) (byte)2, shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-32), (short)0, (short)0, (short)0, (short)0, (short) (-2313), (short) (-32), (short)2}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(16, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(shortArray1);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, 1743.1062F, (int) (short)0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-32.0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-32.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      int int2 = ArrayUtils.indexOf((float[]) null, (float) (short)0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, 1634);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-32), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-32), (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 18688;
      intArray0[1] = (-2390);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-2412);
      shortArray0[2] = (short)115;
      shortArray0[3] = (short)1677;
      shortArray0[4] = (short)18688;
      shortArray0[5] = (short)155;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short) (-1);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2412), (short)115, (short)1677, (short)18688, (short)155, (short)2, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2412), (short)115, (short)1677, (short)18688, (short)155, (short)2, (short) (-1)}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-2412);
      doubleArray0[1] = (double) (short)155;
      doubleArray0[2] = (double) 51;
      doubleArray0[3] = (double) 51;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-2412.0), 155.0, 51.0, 51.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)1677;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, 1);
      assertArrayEquals(new long[] {1677L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1L);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)52, 2144966225);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(doubleArray1, 214, 2, (int) (byte)127);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1161L));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)94;
      Float float0 = new Float((double) (byte)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[5] = (Object) bitSet0;
      objectArray0[5] = (Object) true;
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1161L));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-82);
      Double double0 = new Double((byte)116);
      assertEquals(116.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((byte)116);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(116.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[0];
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-787), (-787));
      assertNull(longArray0);
      
      Object object0 = ArrayUtils.get((Object[]) doubleArray0, (int) 116);
      assertEquals(0, doubleArray0.length);
      assertNull(object0);
      
      ArrayUtils.shift((Object[]) doubleArray0, 1001);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0, Integer.MAX_VALUE, (int) (byte)94);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1.0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((float) 0);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-1.0));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float(1.0);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray0);
      
      Double[] doubleArray2 = new Double[2];
      doubleArray2[0] = (Double) 1.0;
      doubleArray2[1] = (Double) 0.0;
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray3 = ArrayUtils.removeAllOccurences(doubleArray2, double0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(2, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711, mutableInt0.intValue());
      assertEquals(711L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "N)xLpnJ]ZR";
      stringArray0[1] = "^\"";
      stringArray0[2] = "N)xLpnJ]ZR";
      stringArray0[3] = "S}4d";
      stringArray0[4] = "^\"";
      stringArray0[5] = "S}4d";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) 2;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-416.63051), (double) (-574));
      assertArrayEquals(new double[] {(-1.0), 1.5, 2.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-574);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 69, 0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) 0;
      Object object0 = ArrayUtils.get(objectArray0, (-574));
      assertEquals(2, objectArray0.length);
      assertNull(object0);
      
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.reverse(booleanArray0, 727, 727);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = 'u';
      charArray0[2] = 'Q';
      charArray0[3] = 'B';
      charArray0[4] = '';
      charArray0[5] = 'C';
      charArray0[6] = '5';
      int int0 = ArrayUtils.indexOf(charArray0, 'w');
      assertArrayEquals(new char[] {'y', 'u', 'Q', 'B', '', 'C', '5'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-495.5258F);
      floatArray0[1] = (-2686.67F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = 595.1F;
      floatArray0[4] = 1466.8716F;
      floatArray0[5] = 2834.5854F;
      floatArray0[6] = (-2177.248F);
      floatArray0[7] = 104.0F;
      floatArray0[8] = (-249.9F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 595.1F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-495.5258F), (-2686.67F), 1.0F, 595.1F, 1466.8716F, 2834.5854F, (-2177.248F), 104.0F, (-249.9F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {595.1F, (-495.5258F), (-2686.67F), 1.0F, 595.1F, 1466.8716F, 2834.5854F, (-2177.248F), 104.0F, (-249.9F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'm';
      charArray0[3] = 'Y';
      charArray0[4] = '\u0086';
      charArray0[5] = 'L';
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.subarray(longArray2, 32, 1072);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertNotNull(longArray3);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1072;
      doubleArray0[1] = (double) 32;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1072.0, 32.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1072.0, 32.0, 1072.0, 32.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((double) 0L);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(41.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(41.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) 0L);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) 0L);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(32.0);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals(32.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {0.0F, 41.0F, 0.0F, 0.0F, 32.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 32;
      intArray0[1] = 1072;
      intArray0[2] = 32;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {32, 1072, 32}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1072);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {32, 1072, 32}, intArray0);
      assertArrayEquals(new int[] {32, 32}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)7);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1072.0, 32.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1072.0, 32.0, 1072.0, 32.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false, true}, booleanArray0));
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1911.7383884133);
      doubleArray0[1] = (-2050.09573038531);
      doubleArray0[2] = (-5612.396077154137);
      doubleArray0[3] = (-335.045);
      doubleArray0[4] = 2617.099982964864;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 963.583089258056;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-1);
      ArrayUtils.reverse(byteArray0, (-966), (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte)81, (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (-966);
      floatArray0[2] = (float) (byte) (-1);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (byte)81);
      assertArrayEquals(new float[] {(-1.0F), (-966.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift((int[]) null, Integer.MAX_VALUE);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)81;
      shortArray0[1] = (short) (byte)81;
      shortArray0[2] = (short) (byte)81;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte)81;
      shortArray0[5] = (short) (byte)81;
      shortArray0[6] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1375));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)81, (short)81, (short)81, (short) (-1), (short)81, (short)81, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)81, (short)81, (short)81, (short) (-1), (short)81, (short)81, (short) (-1)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)67;
      ArrayUtils.shift((boolean[]) null, (int) (byte)84, (-1682), 35);
      Character character0 = new Character('n');
      assertEquals('n', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      boolean[] booleanArray1 = ArrayUtils.addFirst((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-167));
      assertEquals((-167), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-167);
      intArray0[1] = 2146594715;
      intArray0[2] = (-167);
      ArrayUtils.swap(intArray0, (int) integerArray0[0], (-507));
      assertArrayEquals(new int[] {(-167), 2146594715, (-167)}, intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(3, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = ',';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {',', ','}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-167), 2146594715, (-167)}, intArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(3, intArray0.length);
      assertTrue(boolean2);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'N', 2);
      assertArrayEquals(new char[] {',', ','}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-167);
      floatArray0[1] = (-3235.046F);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 187, 2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-167.0F), (-3235.046F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotNull(integerArray1);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray1, (-403.51987F));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-167.0F), (-3235.046F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(6, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3602.844);
      doubleArray0[1] = (-3602.844);
      doubleArray0[2] = (-3602.844);
      doubleArray0[3] = (-3602.844);
      doubleArray0[4] = 577.6888255;
      doubleArray0[5] = (-3602.844);
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 1236, (-834));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1379.374347;
      doubleArray0[1] = 4162.892254432;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-3244.589448170729);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {1379.374347, 4162.892254432, 1.0, (-3244.589448170729)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)82;
      shortArray0[1] = (short) (-1084);
      shortArray0[2] = (short)313;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)116;
      shortArray0[5] = (short)6166;
      shortArray0[6] = (short) (-2884);
      shortArray0[7] = (short) (-3725);
      shortArray0[8] = (short) (-1);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2884));
      assertArrayEquals(new short[] {(short)82, (short) (-1084), (short)313, (short)1, (short)116, (short)6166, (short) (-2884), (short) (-3725), (short) (-1)}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 'G';
      doubleArray0[3] = (double) 'G';
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 71.0, 71.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 71.0, 71.0, (-1.0), (-1.0), 71.0, 71.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (-3254);
      shortArray0[2] = (short)3672;
      shortArray0[3] = (short) (-595);
      shortArray0[4] = (short)51;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)51;
      doubleArray0[1] = (double) (short)51;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {51.0, 51.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {51.0, 51.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {51.0, 51.0, 51.0, 51.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-3254);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-3254)}, intArray0);
      assertEquals(1, intArray0.length);
      
      BitSet bitSet0 = new BitSet((short)3672);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3712, bitSet0.size());
      assertNotNull(bitSet0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3254)}, intArray0);
      assertArrayEquals(new int[] {(-3254)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'e';
      charArray0[2] = 'm';
      charArray0[3] = 'Y';
      charArray0[4] = 'y';
      charArray0[5] = 'E';
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer(1692);
      assertEquals(1692, (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'J';
      doubleArray0[1] = (double) 'e';
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 'e';
      doubleArray0[4] = (double) 'y';
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) 'E';
      doubleArray0[7] = (double) (short)0;
      doubleArray0[8] = (double) 'E';
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {74.0, 101.0, Double.NaN, 101.0, 121.0, 0.0, 69.0, 0.0, 69.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(18, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer(2048);
      assertEquals(2048, (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 'Y';
      doubleArray0[2] = (double) 'Y';
      ArrayUtils.shift((char[]) null, (-1628), 20, 20);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Byte[] byteArray0 = new Byte[10];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray1);
      assertEquals(10, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)720);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)720}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Integer integer0 = new Integer(2294);
      assertEquals(2294, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2294);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2294, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-1965));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-1965), (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      assertNotNull(integer3);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer3;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-716.4F);
      floatArray0[1] = (-725.5F);
      floatArray0[2] = 94.0F;
      floatArray0[3] = 2686.03F;
      floatArray0[4] = (-628.0F);
      floatArray0[5] = 111.0F;
      floatArray0[6] = (-324.74F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 62.104855F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-716.4F), (-725.5F), 94.0F, 2686.03F, (-628.0F), 111.0F, (-324.74F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-716.4F), (-725.5F), 94.0F, 2686.03F, (-628.0F), 111.0F, (-324.74F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1084));
      assertEquals((-1084), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1084);
      intArray0[1] = 2146594715;
      intArray0[2] = (-1084);
      ArrayUtils.swap(intArray0, (int) integerArray0[0], (-507));
      assertArrayEquals(new int[] {(-1084), 2146594715, (-1084)}, intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(3, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = ',';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {',', ','}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1084), 2146594715, (-1084)}, intArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean2);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'N', 2);
      assertArrayEquals(new char[] {',', ','}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1084);
      floatArray0[1] = (-3235.046F);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 187, 2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1084.0F), (-3235.046F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotNull(integerArray1);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray1, (-403.51987F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-1084.0F), (-3235.046F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-2042L);
      longArray0[1] = 1L;
      longArray0[2] = (-1341L);
      longArray0[3] = 2666L;
      longArray0[4] = (-2186L);
      longArray0[5] = 0L;
      longArray0[7] = 1L;
      char[] charArray0 = new char[8];
      charArray0[1] = '-';
      charArray0[2] = 'f';
      charArray0[4] = '6';
      charArray0[5] = '^';
      charArray0[6] = 'R';
      charArray0[7] = 'g';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '8');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '-', 'f', '\u0000', '6', '^', 'R', 'g'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '-', 'f', '\u0000', '6', '^', 'R', 'g'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 53, 53);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '8';
      charArray0[2] = 'g';
      charArray0[3] = '8';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'g');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'/', '8', 'g', '8'}, charArray0);
      assertArrayEquals(new char[] {'/', '8', '8'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      
      char[] charArray2 = new char[8];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 'g';
      charArray0[1] = '/';
      charArray2[2] = 'g';
      charArray2[3] = '/';
      charArray2[4] = 'g';
      Long long0 = Long.getLong((String) null, 0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      Long[] longArray0 = ArrayUtils.subarray((Long[]) null, (-410), 66);
      assertNull(longArray0);
      
      Integer[] integerArray0 = ArrayUtils.toArray((Integer[]) null);
      assertNull(integerArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, (String) null);
      assertNull(stringArray0);
      
      int[] intArray0 = ArrayUtils.insert(1834, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-410), 322);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1797;
      shortArray0[1] = (short)64;
      shortArray0[2] = (short)4189;
      shortArray0[3] = (short)0;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1993);
      assertArrayEquals(new short[] {(short)1797, (short)64, (short)4189, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-416.63051);
      doubleArray0[1] = (-1199.4112548828125);
      doubleArray0[2] = (-416.63051);
      doubleArray0[3] = (-416.63051);
      doubleArray0[4] = (-416.63051);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0, (-908.26511));
      assertArrayEquals(new double[] {(-416.63051), (-1199.4112548828125), (-416.63051), (-416.63051), (-416.63051)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'U';
      charArray0[2] = '_';
      charArray0[3] = 'K';
      charArray0[4] = 'b';
      charArray0[5] = 'c';
      charArray0[6] = '8';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '_');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'Y', 'U', '_', 'K', 'b', 'c', '8'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'U', 'K', 'b', 'c', '8'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'U';
      intArray0[1] = (int) 'c';
      intArray0[2] = (int) 'K';
      intArray0[3] = (int) '_';
      intArray0[4] = (int) 'U';
      intArray0[5] = (int) 'b';
      intArray0[6] = (int) 'b';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 521, 75);
      assertArrayEquals(new int[] {85, 99, 75, 95, 85, 98, 98}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      long[] longArray0 = new long[24];
      longArray0[0] = (long) 'J';
      longArray0[23] = (long) 'J';
      longArray0[6] = (long) 'J';
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) 'J';
      longArray0[5] = (long) 'J';
      longArray0[6] = (long) 'J';
      longArray0[7] = (long) 'J';
      longArray0[8] = (long) 'J';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 2048);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(24, longArray0.length);
      assertEquals(24, longArray1.length);
      assertNotNull(longArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'J';
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-693);
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)41;
      ArrayUtils.reverse(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(24, longArray0.length);
      assertEquals(24, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 112;
      intArray0[1] = (-2934);
      intArray0[2] = 0;
      intArray0[3] = 2;
      ArrayUtils.shift(intArray0, 2, (-574), (-2934));
      assertArrayEquals(new int[] {112, (-2934), 0, 2}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.5;
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.subarray(longArray0, (-574), 102);
      assertNotSame(longArray0, longArray2);
      assertSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray2.length);
      assertNotNull(longArray2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 2;
      objectArray0[1] = (Object) (byte) (-1);
      objectArray0[2] = (Object) 2;
      objectArray0[3] = (Object) (byte) (-1);
      objectArray0[4] = (Object) 2;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, objectArray1.length);
      assertNotNull(objectArray1);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      
      long[] longArray3 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray2);
      assertSame(longArray0, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray3);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray3.length);
      assertNotNull(longArray3);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 112;
      intArray0[1] = (-2934);
      intArray0[2] = 0;
      intArray0[3] = 2;
      ArrayUtils.shift(intArray0, 2, (-574), (-2934));
      assertArrayEquals(new int[] {112, (-2934), 0, 2}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.5;
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.subarray(longArray0, (-574), 102);
      assertNotSame(longArray0, longArray2);
      assertSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray2.length);
      assertNotNull(longArray2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 2;
      objectArray0[1] = (Object) (byte) (-1);
      objectArray0[2] = (Object) 2;
      objectArray0[3] = (Object) (byte) (-1);
      objectArray0[4] = (Object) 2;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, objectArray1.length);
      assertNotNull(objectArray1);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte) (-1);
      ArrayUtils.reverse(shortArray0, 1, 50);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 112;
      intArray0[1] = (-2924);
      intArray0[2] = 0;
      intArray0[3] = 2;
      ArrayUtils.shift(intArray0, 2, (-574), (-2924));
      assertArrayEquals(new int[] {112, (-2924), 0, 2}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) 2;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-416.63051), (double) (-574));
      assertArrayEquals(new double[] {(-1.0), 1.5, 2.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-32);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-43), (byte) (-86), (byte)100, (byte)3, (byte) (-32)}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(6, byteArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) boolean0;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) true;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) "u", 1);
      assertEquals(5, objectArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (-1.0), 1904.4);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 603.5548702090445;
      doubleArray0[1] = 1421.9495;
      doubleArray0[2] = 1.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0);
      assertArrayEquals(new double[] {603.5548702090445, 1421.9495, 1.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-966.0F);
      floatArray0[1] = (-1.0F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-966.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2172.121105137, 1.0);
      assertArrayEquals(new double[] {603.5548702090445, 1421.9495, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 1421.9495;
      objectArray0[1] = (Object) (-1.0F);
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = (Object) 1.0;
      objectArray0[4] = (Object) bitSet0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '1421.9495', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'e';
      charArray0[2] = 'm';
      char char0 = 'Y';
      charArray0[3] = 'Y';
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1285;
      shortArray0[1] = (short) (-5093);
      shortArray0[2] = (short)1285;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-5093), (short)1285, (short)1285}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.indexOf(longArray1, (long) (short) (-5093));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      Character character1 = new Character('w');
      assertFalse(character1.equals((Object)character0));
      assertEquals('w', (char)character1);
      assertNotNull(character1);
      
      characterArray0[3] = character1;
      Character character2 = Character.valueOf('Z');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('Z', (char)character2);
      assertNotNull(character2);
      
      characterArray0[5] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertArrayEquals(new char[] {'A', 'A', 'A', 'w', 'x', 'A'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(charArray0, 1679, (int) character0, 1990);
      assertArrayEquals(new char[] {'A', 'A', 'A', 'w', 'x', 'A'}, charArray0);
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'A', 'A', 'A', 'w', 'x', 'A'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1679;
      longArray0[1] = (long) (char)character1;
      ArrayUtils.shift(longArray0, (-1602));
      assertArrayEquals(new long[] {1679L, 119L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('F');
      assertFalse(character1.equals((Object)character0));
      assertEquals('F', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      char char0 = 'T';
      Character character2 = Character.valueOf('T');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('T', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('w');
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertEquals('w', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('Z');
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertEquals('Z', (char)character4);
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character(char0);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)char0));
      assertEquals('T', (char)character5);
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertArrayEquals(new char[] {'A', 'F', 'T', 'w', 'Z', 'T'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[6] = false;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, false, true, true, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(7, booleanArray1.length);
      assertEquals(10, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertEquals('A', (char)character1);
      assertNotNull(character1);
      
      characterArray0[5] = character1;
      Character character2 = new Character('w');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('w', (char)character2);
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      Character character3 = Character.valueOf('Z');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertEquals('Z', (char)character3);
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      characterArray0[5] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertArrayEquals(new char[] {'A', 'A', 'x', 'w', 'Z', 'A'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[3] = true;
      booleanArray1[6] = false;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, true, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(7, booleanArray1.length);
      assertEquals(10, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertNotNull(booleanArray2);
      
      ArrayUtils.swap(booleanArray2, 1679, (int) character0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, true, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(7, booleanArray1.length);
      assertEquals(10, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-87);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)43, (byte) (-87)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-87);
      Character character0 = Character.valueOf('P');
      assertEquals('P', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character(')');
      assertFalse(character1.equals((Object)character0));
      assertEquals(')', (char)character1);
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('w');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('w', (char)character2);
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'P');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1L);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-3L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-3L), (long)long2);
      assertNotNull(long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {(-1L), 1L, (-3L)}, longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotNull(longArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray1);
      assertArrayEquals(new long[] {(-1L), 1L, (-3L)}, longArray1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertEquals('A', (char)character1);
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = new Character((char) character0);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertEquals('A', (char)character2);
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      Character character3 = Character.valueOf('Z');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals('Z', (char)character3);
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      characterArray0[5] = character0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[3] = true;
      booleanArray1[6] = false;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, true, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false}, booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(10, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray2);
      
      ArrayUtils.swap(booleanArray2, 1679, (int) character0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, true, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false}, booleanArray1));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character3));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertEquals(10, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("-`oe@pa(dwZMx2#", long0);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      
      longArray0[0] = long1;
      long long2 = 0L;
      Long long3 = new Long(0L);
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertEquals(0L, (long)long3);
      assertNotNull(long3);
      
      longArray0[1] = long3;
      Long long4 = Long.valueOf(long2);
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertEquals(0L, (long)long4);
      assertNotNull(long4);
      
      longArray0[2] = long4;
      Long long5 = new Long(0);
      assertTrue(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long3));
      assertEquals(0L, (long)long5);
      assertNotNull(long5);
      
      longArray0[3] = long5;
      Long long6 = Long.getLong("", long2);
      assertTrue(long6.equals((Object)long1));
      assertTrue(long6.equals((Object)long3));
      assertTrue(long6.equals((Object)long5));
      assertTrue(long6.equals((Object)long0));
      assertEquals(0L, (long)long6);
      assertNotNull(long6);
      
      longArray0[4] = long6;
      Long long7 = new Long(0);
      assertTrue(long7.equals((Object)long2));
      assertTrue(long7.equals((Object)long1));
      assertTrue(long7.equals((Object)long6));
      assertTrue(long7.equals((Object)long3));
      assertTrue(long7.equals((Object)long4));
      assertTrue(long7.equals((Object)long5));
      assertTrue(long7.equals((Object)long0));
      assertEquals(0L, (long)long7);
      assertNotNull(long7);
      
      longArray0[5] = long7;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray1);
      
      Integer[] integerArray0 = ArrayUtils.toArray((Integer[]) null);
      assertNull(integerArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "");
      assertNull(stringArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      int[] intArray2 = ArrayUtils.insert(0, intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(9, intArray2.length);
      assertEquals(1, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[4] = 'y';
      charArray0[5] = 'E';
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'G';
      intArray0[1] = (int) 'y';
      intArray0[2] = (int) 'G';
      intArray0[3] = (int) 'G';
      intArray0[4] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.insert(1, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {71, 121, 71, 71, 0}, intArray0);
      assertArrayEquals(new int[] {71, 71, 121, 71, 71, 0, 121, 71, 71, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (double) 'G';
      doubleArray0[1] = (double) 'E';
      doubleArray0[2] = (double) 0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(20, doubleArray0.length);
      assertFalse(boolean0);
      
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (int) 'G';
      intArray2[1] = (int) 'y';
      intArray2[2] = 857;
      intArray2[3] = (int) 'y';
      intArray2[4] = (int) 'G';
      intArray2[5] = (int) 'E';
      intArray2[6] = 67;
      intArray2[7] = 2093;
      intArray2[8] = (int) 'G';
      int[] intArray3 = ArrayUtils.clone(intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {71, 121, 857, 121, 71, 69, 67, 2093, 71}, intArray3);
      assertArrayEquals(new int[] {71, 121, 857, 121, 71, 69, 67, 2093, 71}, intArray2);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(9, intArray3.length);
      assertEquals(9, intArray2.length);
      assertNotNull(intArray3);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1161L));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)94;
      Float float0 = new Float((double) (byte) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 1995, (int) (byte)94);
      assertNull(longArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)1;
      objectArray0[1] = (Object) floatArray0[0];
      objectArray0[2] = (Object) float0;
      objectArray0[3] = (Object) (byte)116;
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) true;
      MutableInt mutableInt0 = new MutableInt((Number) (byte)94);
      assertEquals(94L, mutableInt0.longValue());
      assertEquals(94, mutableInt0.intValue());
      assertEquals(94.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("94", mutableInt0.toString());
      assertEquals(94, (int)mutableInt0.getValue());
      assertEquals((short)94, mutableInt0.shortValue());
      assertEquals(94, (int)mutableInt0.toInteger());
      assertEquals(94.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)94, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Float float0 = new Float((double) (byte)94);
      assertEquals(94.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertFalse(boolean0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals("94", mutableInt0.toString());
      assertEquals(94, mutableInt0.intValue());
      assertEquals((short)94, mutableInt0.shortValue());
      assertEquals(94, (int)mutableInt0.toInteger());
      assertEquals(94.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)94, mutableInt0.byteValue());
      assertEquals(94L, mutableInt0.longValue());
      assertEquals(94, (int)mutableInt0.getValue());
      assertEquals(94.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Float float1 = new Float((float) (byte)94);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(94.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)1934, 76);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) float1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1048.0);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1048.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {1048.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 5482L;
      longArray0[2] = 479L;
      longArray0[3] = 1L;
      longArray0[4] = 997L;
      longArray0[5] = 2115L;
      MockRandom mockRandom0 = new MockRandom(693L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {0L, 479L, 1L, 997L, 2115L, 5482L}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'n';
      charArray0[2] = '~';
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'n';
      objectArray0[1] = (Object) 2115L;
      objectArray0[2] = (Object) '\u0000';
      objectArray0[3] = (Object) 'n';
      objectArray0[4] = (Object) 'n';
      objectArray0[5] = (Object) 1L;
      objectArray0[6] = (Object) 479L;
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 997L;
      objectArray1[2] = (Object) 997L;
      objectArray1[3] = (Object) '~';
      objectArray1[4] = (Object) 479L;
      Object object0 = ArrayUtils.get(objectArray1, (-1217));
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(5, objectArray1.length);
      assertNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null, 2);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(7, objectArray0.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, true, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) true;
      ArrayUtils.shift(objectArray0, (-32));
      assertEquals(7, objectArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)1, 4);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-32);
      doubleArray0[1] = (-1751.7837728);
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = 2529.71015182;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-32);
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 4;
      doubleArray0[8] = (double) (byte)1;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-32.0), (-1751.7837728), 4.0, 2529.71015182, (-1.0), (-32.0), 4.0, 4.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals(711L, mutableInt0.longValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("711", mutableInt0.toString());
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals(711, mutableInt0.intValue());
      assertEquals((short)711, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = false;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1414.5095293760658);
      doubleArray0[1] = (double) 711;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (-1414.5095293760658);
      doubleArray0[4] = (double) 51;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (-1414.5095293760658);
      ArrayUtils.shift(doubleArray0, 51, 708, 708);
      assertArrayEquals(new double[] {(-1414.5095293760658), 711.0, 3.0, (-1414.5095293760658), 51.0, 3.0, (-1414.5095293760658)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)1, 2);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(doubleArray0, 3, Integer.MAX_VALUE, (-1));
      assertArrayEquals(new double[] {(-1414.5095293760658), 711.0, 3.0, 51.0, 3.0, (-1414.5095293760658), (-1414.5095293760658)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1161L));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-82);
      Double double0 = new Double((byte)116);
      assertEquals(116.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((byte)116);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(116.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-1), (byte)94, (byte)116, (byte) (-82), (byte) (-1), (byte) (-82)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-665.0997F);
      floatArray0[1] = 1777.62F;
      floatArray0[2] = 85.0F;
      floatArray0[3] = (-5853.0F);
      floatArray0[4] = 51.0F;
      floatArray0[5] = 111.0F;
      floatArray0[6] = (-733.9232F);
      floatArray0[7] = 38.65F;
      ArrayUtils.shift(floatArray0, 1378, 14, 1378);
      assertArrayEquals(new float[] {(-665.0997F), 1777.62F, 85.0F, (-5853.0F), 51.0F, 111.0F, (-733.9232F), 38.65F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      MockRandom mockRandom0 = new MockRandom(2514L);
      assertNotNull(mockRandom0);
      
      Float float0 = new Float((double) 2514L);
      assertEquals(2514.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(0.0);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(1.5);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float[] floatArray0 = new Float[8];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      floatArray0[2] = float3;
      floatArray0[3] = float2;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float3;
      Float float4 = new Float((double) floatArray0[4]);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(2514.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[7] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 1.5F, 0.0F, 2514.0F, 2514.0F, 1.5F, 2514.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, 3048, 12, 12);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 1.5F, 0.0F, 2514.0F, 2514.0F, 1.5F, 2514.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 5482L;
      longArray0[2] = 479L;
      longArray0[3] = 1L;
      longArray0[4] = 997L;
      longArray0[5] = 2115L;
      MockRandom mockRandom0 = new MockRandom(693L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {0L, 479L, 1L, 997L, 2115L, 5482L}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'n';
      charArray0[2] = '~';
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'n';
      objectArray0[1] = (Object) 2115L;
      objectArray0[2] = (Object) '\u0000';
      objectArray0[3] = (Object) 'n';
      objectArray0[4] = (Object) 'n';
      objectArray0[5] = (Object) 1L;
      objectArray0[6] = (Object) 479L;
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 997L;
      objectArray1[2] = (Object) 997L;
      objectArray1[3] = (Object) '~';
      objectArray1[4] = (Object) 479L;
      Object object0 = ArrayUtils.get(objectArray1, (-1217));
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(5, objectArray1.length);
      assertNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null, 2);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(7, objectArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-625);
      shortArray0[1] = (short)23;
      shortArray0[2] = (short) (-671);
      shortArray0[3] = (short)3;
      shortArray0[4] = (short)84;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'n';
      intArray0[1] = (-1217);
      intArray0[2] = (int) '~';
      intArray0[3] = 2;
      intArray0[4] = (int) (short) (-671);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 126, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = ',';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {',', ','}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-507);
      intArray0[1] = (-507);
      intArray0[2] = (int) ',';
      intArray0[3] = (int) ',';
      intArray0[4] = (int) ',';
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-507), (-507), 44, 44, 44}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'i', 44);
      assertArrayEquals(new char[] {',', ','}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-507);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-852), 313);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-507.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-507.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)56;
      shortArray0[1] = (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 44, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-602.8455775069622);
      doubleArray0[5] = 0.0;
      doubleArray0[5] = (-602.8455775069622);
      doubleArray0[6] = 0.0;
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.5);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(1048.0);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(1048.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {1048.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = new boolean[5];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      booleanArray1[4] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 512.1783619;
      doubleArray0[1] = 2188.0;
      doubleArray0[2] = 114.0;
      doubleArray0[3] = 2002.2293;
      doubleArray0[4] = (-503.12482);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-503.12482));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {512.1783619, 2188.0, 114.0, 2002.2293, (-503.12482)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {512.1783619, 2188.0, 114.0, 2002.2293}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shuffle(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(1, floatArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5);
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf((boolean) boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6);
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.FALSE;
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7);
      assertNotNull(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = Boolean.TRUE;
      assertFalse(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean5));
      assertFalse(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8);
      assertNotNull(boolean8);
      
      booleanArray0[8] = boolean8;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      Float float0 = Float.valueOf(788.2F);
      assertEquals(788.2F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 788.2F;
      doubleArray0[1] = (double) 788.2F;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {788.2000122070312, 788.2000122070312}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 788.2000122070312);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {788.2000122070312, 788.2000122070312}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1687;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-7181);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)1687, (short) (-1), (short) (-1), (short) (-7181)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 4802L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 4802L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 4802L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.shift((float[]) null, 3048, 0, Integer.MAX_VALUE);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-2.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)46;
      shortArray0[2] = (short) (-552);
      shortArray0[3] = (short) (-2030);
      shortArray0[4] = (short)765;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)765, (short) (-2030), (short) (-552), (short)46, (short)3}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2131;
      shortArray0[1] = (short)2131;
      shortArray0[2] = (short) (byte)43;
      shortArray0[3] = (short) (byte)43;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)10);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2131, (short)2131, (short)43, (short)43}, shortArray0);
      assertArrayEquals(new short[] {(short)2131, (short)2131, (short)43, (short)43}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)43;
      longArray0[1] = (long) (short)2131;
      longArray0[2] = (long) (short)43;
      longArray0[3] = (long) (short)43;
      longArray0[4] = (long) (short)10;
      longArray0[5] = (long) (short)43;
      longArray0[6] = (long) (short)43;
      longArray0[7] = (long) (byte)43;
      longArray0[8] = (long) (short)10;
      ArrayUtils.shift(longArray0, 3761);
      assertArrayEquals(new long[] {2131L, 43L, 43L, 10L, 43L, 43L, 43L, 10L, 43L}, longArray0);
      assertEquals(9, longArray0.length);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) 10L);
      assertArrayEquals(new double[] {10.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 929.18;
      doubleArray0[2] = (-2208.06449801);
      doubleArray0[3] = 3686.68935197;
      doubleArray0[4] = (-1146.0);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 929.18);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 929.18, (-2208.06449801), 3686.68935197, (-1146.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {929.18, 1.0, 929.18, (-2208.06449801), 3686.68935197, (-1146.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      longArray1[8] = (long) 0;
      boolean boolean1 = ArrayUtils.isSorted(longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(9, longArray1.length);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) 0L;
      Class<Object[]> class0 = Object[].class;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0, class0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, objectArray1.length);
      assertNotNull(objectArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)1;
      ArrayUtils.swap(byteArray0, (int) (byte)0, (int) (byte)0, (-1345));
      assertArrayEquals(new byte[] {(byte)0, (byte)39, (byte) (-63), (byte)0, (byte)0, (byte)0, (byte) (-63), (byte)1}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = (-1314);
      Short short0 = new Short((short) (-29));
      assertEquals((short) (-29), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)8);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)8, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short)653);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)653, (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-29));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short) (-29), (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short)2);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertEquals((short)2, (short)short4);
      assertNotNull(short4);
      
      Short short5 = new Short((short)653);
      assertTrue(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertEquals((short)653, (short)short5);
      assertNotNull(short5);
      
      Short short6 = new Short((short)1526);
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short2));
      assertEquals((short)1526, (short)short6);
      assertNotNull(short6);
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short5;
      shortArray0[1] = short6;
      shortArray0[2] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)653, (short)1526, (short)2}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-29);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)shortArray0[1];
      doubleArray0[1] = (double) (short)shortArray0[1];
      doubleArray0[2] = (double) (short) (-29);
      doubleArray0[3] = 555.51403631111;
      doubleArray0[4] = (double) (short)653;
      doubleArray0[5] = (double) (-1314);
      doubleArray0[6] = (double) (short)1526;
      doubleArray0[7] = (double) (short) (-29);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1314, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = (-1314);
      Short short0 = new Short((short) (-29));
      assertEquals((short) (-29), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)8);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)8, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short)653);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)653, (short)short2);
      assertNotNull(short2);
      
      ArrayUtils.swap((boolean[]) null, (int) (short)8, (int) (short)653, (int) (short)8);
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = '\\';
      charArray0[2] = 'V';
      charArray0[3] = '\"';
      charArray0[4] = 'V';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1314, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1084));
      assertEquals((-1084), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int0 = 100;
      Integer integer1 = new Integer(100);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(100, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(5, integerArray0.length);
      assertEquals((-1084), (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals(5, integerArray0.length);
      assertEquals((-1084), (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int0));
      assertEquals(100, (int)integer4);
      assertNotNull(integer4);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1084));
      assertArrayEquals(new int[] {(-1084), 100, (-1084), (-1084), (-1084)}, intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertEquals('A', (char)character1);
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = new Character('w');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('w', (char)character2);
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      Character character3 = Character.valueOf('Z');
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertEquals('Z', (char)character3);
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      characterArray0[5] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertArrayEquals(new char[] {'A', 'A', 'A', 'w', 'Z', 'A'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[3] = true;
      booleanArray1[6] = false;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, true, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(7, booleanArray1.length);
      assertEquals(10, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertNotNull(booleanArray2);
      
      ArrayUtils.swap(booleanArray2, 1679, (int) character0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, true, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(7, booleanArray1.length);
      assertEquals(10, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      
      ArrayUtils.shift(charArray0, 1679, (int) character0, 1990);
      assertArrayEquals(new char[] {'A', 'A', 'A', 'w', 'Z', 'A'}, charArray0);
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character2));
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'A', 'A', 'A', 'w', 'Z', 'A'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1679;
      longArray0[1] = (long) (char)character2;
      ArrayUtils.shift(longArray0, (-1602));
      assertArrayEquals(new long[] {1679L, 119L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer(2048);
      assertEquals(2048, (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 'Y';
      doubleArray0[2] = (double) 'Y';
      ArrayUtils.shift((char[]) null, (-1626), 20, 20);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)0, (double) 2048);
      assertArrayEquals(new double[] {0.0, 89.0, 89.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (-3254);
      shortArray0[2] = (short)3672;
      shortArray0[3] = (short) (-595);
      shortArray0[4] = (short)51;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)51;
      doubleArray0[1] = (double) (short)51;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {51.0, 51.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift((char[]) null, (int) (short)3672, (-990), (int) (short)51);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-1.0));
      assertArrayEquals(new double[] {51.0, 51.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Character character0 = new Character('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('s');
      assertTrue(character1.equals((Object)character0));
      assertEquals('s', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[26];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (int) character0, (int) character0, (int) character0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(character0.equals((Object)character1));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.shift((char[]) null, (int) character0, (int) character0, (-1));
      assertTrue(character0.equals((Object)character1));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (char)character0;
      doubleArray0[1] = (double) (char)character0;
      doubleArray0[2] = (double) (char)character0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (-990);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), (-1.0));
      assertArrayEquals(new double[] {115.0, 115.0, 115.0, (-1.0), (-990.0)}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, 1);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short) (-3254);
      shortArray0[2] = (short)3672;
      shortArray0[3] = (short) (-595);
      shortArray0[1] = (short) (-1);
      ArrayUtils.shift((char[]) null, (int) (short)3672, (-990), (int) (short)0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short) (-3254);
      shortArray0[2] = (short)3672;
      shortArray0[3] = (short) (-595);
      shortArray0[4] = (short)51;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1136, (short) (-3254), (short)3672, (short) (-595), (short)51}, shortArray0);
      assertArrayEquals(new short[] {(short)1136, (short) (-3254), (short)3672, (short) (-595), (short)51}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)51;
      doubleArray0[1] = (double) (short)51;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {51.0, 51.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, (int) (short)3672, 2, 1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      ArrayUtils.shift((char[]) null, (int) (short)3672, (-990), 98);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-1.0));
      assertArrayEquals(new double[] {51.0, 51.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, 2732);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 67.0;
      doubleArray0[1] = 711.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 696.7403459522;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1945.0);
      doubleArray0[6] = 3.0;
      doubleArray0[7] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 67.0, 2, 3.0);
      assertArrayEquals(new double[] {67.0, 711.0, (-1.0), 696.7403459522, (-1.0), (-1945.0), 3.0, 0.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      Object[] objectArray0 = new Object[7];
      objectArray0[4] = (Object) false;
      objectArray0[6] = (Object) false;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) false, 1);
      assertEquals(7, objectArray0.length);
      assertEquals(4, int0);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 4;
      longArray0[5] = (long) 4;
      longArray0[6] = (long) 1;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 1L, 0L, 1L, 4L, 4L, 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) byteArray1, objectArray0[4]);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(7, objectArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-39);
      long[] longArray0 = new long[3];
      longArray0[1] = (long) (-39);
      longArray0[2] = (long) (-39);
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, 44);
      assertEquals(0, objectArray0.length);
      assertNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1911.7383884133);
      doubleArray0[1] = (-2050.09573038531);
      doubleArray0[2] = (-5612.396077154137);
      doubleArray0[3] = (-335.045);
      doubleArray0[4] = 2617.099982964864;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 963.583089258056;
      doubleArray0[7] = 1.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-1911.7383884133), (-2050.09573038531), (-5612.396077154137), (-335.045), 2617.099982964864, 0.0, 963.583089258056, 1.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = 'g';
      charArray0[2] = '1';
      charArray0[3] = ']';
      charArray0[4] = ':';
      charArray0[5] = '<';
      charArray0[6] = 'g';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'g', '<', ':', ']', '1', 'g', 'w'}, charArray0);
      assertEquals(7, charArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '<';
      intArray0[1] = (int) ']';
      intArray0[2] = (int) '1';
      intArray0[3] = (int) 'w';
      intArray0[4] = (int) ']';
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {60, 93, 49, 119, 93}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 934.173;
      doubleArray0[1] = (double) (-1147);
      doubleArray0[2] = (double) (-316);
      doubleArray0[3] = 934.173;
      doubleArray0[4] = (double) (-1147);
      doubleArray0[5] = (double) (-1147);
      doubleArray0[6] = 934.173;
      doubleArray0[7] = (double) (-316);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1147), Integer.MAX_VALUE);
      assertArrayEquals(new double[] {934.173, (-1147.0), (-316.0), 934.173, (-1147.0), (-1147.0), 934.173, (-316.0)}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, (long) Integer.MAX_VALUE);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {2147483647L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)4659);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 1638, 1215, 1215);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1215;
      longArray0[1] = (long) 1215;
      longArray0[3] = (long) 1638;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {1215L, 1215L, 0L, 1638L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(1638);
      assertEquals(1638.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {1215L, 1215L, 0L, 1638L, 0L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) 1215L;
      objectArray0[3] = (Object) 1638L;
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 0L;
      objectArray1[1] = (Object) 0L;
      objectArray1[2] = (Object) 1215L;
      objectArray1[3] = (Object) 1215L;
      objectArray1[4] = (Object) 1638L;
      boolean boolean2 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(5, objectArray0.length);
      assertEquals(5, objectArray1.length);
      assertTrue(boolean2);
      
      ArrayUtils.shift(objectArray0, 1);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(5, objectArray0.length);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 1638L, 0L, 1215L, 1215L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Float float0 = new Float(100.0);
      assertEquals(100.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(100.0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(100.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 3761;
      ArrayUtils.shift(longArray0, 3761);
      assertArrayEquals(new long[] {3761L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 100.0);
      assertArrayEquals(new double[] {100.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 721;
      intArray0[1] = 3761;
      intArray0[2] = 3761;
      intArray0[3] = 3761;
      intArray0[4] = 3761;
      intArray0[5] = 3761;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {721, 3761, 3761, 3761, 3761, 3761}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      long[] longArray3 = ArrayUtils.subarray(longArray2, 32, 1072);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertNotNull(longArray3);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-1);
      objectArray0[1] = (Object) (byte) (-1);
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) (byte) (-1);
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(4, objectArray1.length);
      assertEquals(4, objectArray0.length);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)20;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float float0 = new Float((double) (byte)67);
      assertEquals(67.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (byte)84);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(84.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((float) (byte)20);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(20.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(41.0);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(41.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float(2578.5695);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals(2578.5696F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {84.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (float) (byte)20, (int) (byte)84);
      assertArrayEquals(new float[] {84.0F}, floatArray1, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)6;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = ':';
      charArray0[2] = 'w';
      charArray0[3] = '@';
      charArray0[4] = 'q';
      charArray0[5] = ';';
      byte[] byteArray2 = new byte[4];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)30;
      byteArray2[1] = (byte)6;
      byteArray2[2] = (byte)8;
      byteArray2[3] = (byte)6;
      byte[] byteArray3 = ArrayUtils.insert((int) (byte)6, byteArray0, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertArrayEquals(new byte[] {(byte)30, (byte)6, (byte)8, (byte)6}, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(20, byteArray3.length);
      assertEquals(16, byteArray0.length);
      assertEquals(4, byteArray2.length);
      assertNotNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 583L;
      floatArray1[1] = (float) '4';
      float[] floatArray2 = ArrayUtils.removeAll(floatArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {583.0F, 52.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {583.0F, 52.0F}, floatArray2, 0.01F);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(0, intArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertNotNull(floatArray2);
      
      ArrayUtils.swap(charArray0, 0, (-2049), (-1323));
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray0);
      assertEquals(3, charArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '4';
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2231.9467625707;
      doubleArray0[3] = (-3602.844);
      doubleArray0[4] = (double) '4';
      doubleArray0[5] = (double) '4';
      doubleArray0[6] = (double) (-1323);
      doubleArray0[7] = (double) (-1323);
      doubleArray0[8] = 0.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {52.0, 0.0, 2231.9467625707, (-3602.844), 52.0, 52.0, (-1323.0), (-1323.0), 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      
      Float[] floatArray3 = new Float[0];
      float[] floatArray4 = ArrayUtils.toPrimitive(floatArray3);
      assertSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray2);
      assertNotSame(floatArray4, floatArray1);
      assertArrayEquals(new float[] {}, floatArray4, 0.01F);
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertEquals(0, floatArray3.length);
      assertEquals(0, floatArray4.length);
      assertNotNull(floatArray4);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)6;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-35));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)88, (byte) (-35), (byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-35), (byte) (-60), (byte)88, (byte) (-35), (byte)6}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Character character0 = new Character('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('s');
      assertTrue(character1.equals((Object)character0));
      assertEquals('s', (char)character1);
      assertNotNull(character1);
      
      Long long0 = new Long((long) character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals(115L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((long) character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(long1.equals((Object)long0));
      assertEquals(115L, (long)long1);
      assertNotNull(long1);
      
      Long long2 = new Long((long) character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals(115L, (long)long2);
      assertNotNull(long2);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long2;
      longArray0[1] = long0;
      longArray0[2] = long1;
      longArray0[3] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) character1);
      assertArrayEquals(new long[] {115L, 115L, 115L, 115L}, longArray1);
      assertTrue(character1.equals((Object)character0));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)25;
      shortArray0[2] = (short)734;
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = ';';
      charArray0[2] = '@';
      charArray0[3] = ' ';
      charArray0[4] = 'w';
      charArray0[5] = 'h';
      charArray0[6] = 'r';
      charArray0[7] = '@';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'q', ';', '@', ' ', 'w', 'h', 'r', '@'}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      
      Long[] longArray0 = new Long[4];
      long long0 = 1L;
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      longArray0[0] = long1;
      Long long2 = new Long((short)25);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(25L, (long)long2);
      assertNotNull(long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(long0);
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertEquals(1L, (long)long3);
      assertNotNull(long3);
      
      longArray0[2] = long3;
      Long long4 = new Long((-1L));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertEquals((-1L), (long)long4);
      assertNotNull(long4);
      
      longArray0[3] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1166L);
      assertArrayEquals(new long[] {1L, 25L, 1L, (-1L)}, longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotNull(longArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)25;
      floatArray0[1] = (float) long0;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {25.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      longArray0[3] = 1L;
      longArray0[4] = 997L;
      longArray0[5] = 2115L;
      MockRandom mockRandom0 = new MockRandom(693L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'n';
      charArray0[2] = '~';
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) 997L;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 101, 101);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Long[] longArray1 = new Long[1];
      longArray0[5] = 1L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) 101);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {101L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1911.7383884133);
      doubleArray0[1] = (-2050.09573038531);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1989);
      shortArray0[1] = (short)594;
      shortArray0[2] = (short)895;
      shortArray0[3] = (short) (-807);
      shortArray0[4] = (short)871;
      shortArray0[5] = (short)1504;
      shortArray0[6] = (short)2325;
      shortArray0[7] = (short)12;
      ArrayUtils.reverse(shortArray0, (-579), (int) (short) (-807));
      assertArrayEquals(new short[] {(short) (-1989), (short)594, (short)895, (short) (-807), (short)871, (short)1504, (short)2325, (short)12}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)25;
      shortArray0[2] = (short)734;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-5612.396077154137);
      doubleArray0[1] = (-5612.396077154137);
      doubleArray0[2] = (double) (short)734;
      doubleArray0[3] = (double) (short)734;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-5612.396077154137), (-5612.396077154137), 734.0, 734.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      charArray0[1] = '1';
      charArray0[2] = '<';
      charArray0[3] = 'g';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'g', '<', '1', 'w'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[26];
      doubleArray0[0] = 5176.038;
      doubleArray0[1] = 104.0;
      doubleArray0[2] = (double) 44;
      doubleArray0[3] = (-1493.8663438634007);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 708;
      doubleArray0[6] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0, 44, Integer.MAX_VALUE);
      assertEquals(26, doubleArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-455);
      shortArray0[1] = (short)1098;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)1098, 1542);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-455), (short)1098}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)85;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)85);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)70, (byte)0, (byte)125, (byte) (-72), (byte)85}, byteArray0);
      assertArrayEquals(new byte[] {(byte)85, (byte)70, (byte)0, (byte)125, (byte) (-72), (byte)85}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)125, (byte) (-72), (byte)85, (byte)70}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[2] = '#';
      charArray0[3] = '(';
      charArray0[4] = 'r';
      ArrayUtils.swap(charArray0, (int) (short)0, (int) (short)0, 870);
      assertArrayEquals(new char[] {'e', '\u0000', '#', '(', 'r'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Float float0 = new Float((double) (short)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) 870);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(870.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((float) '#');
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(35.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((double) 870);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(870.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float((-1199.4113F));
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((-1199.4113F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'e', '\u0000', '#', '(', 'r'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 1136, 1136, 1136);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, 870, (-554));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 49;
      intArray0[3] = 49;
      ArrayUtils.swap(intArray0, 0, 49);
      assertArrayEquals(new int[] {0, 49, 0, 49}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      ArrayUtils.swap(charArray0, 521, 1, 32);
      assertArrayEquals(new char[] {'r', 'r', 'r'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Float float0 = new Float((double) 49);
      assertEquals(49.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-446.4F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-446.4F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((float) 49);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(49.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-1018.1760101525174));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-1018.176F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float((float) 49);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals(49.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      Short short0 = new Short((short) (-1500));
      assertEquals((short) (-1500), (short)short0);
      assertNotNull(short0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'r', 'r', 'r'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, 1053, (-2432), 658);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[2] = '#';
      charArray0[3] = '(';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'e', '\u0000', '#', '(', '\u0000'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '(';
      intArray0[1] = 2;
      intArray0[2] = (int) 'e';
      intArray0[3] = (int) 'e';
      intArray0[4] = (int) 'e';
      intArray0[5] = (int) '#';
      intArray0[6] = (int) 'e';
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {40, 2, 101, 101, 101, 35, 101}, intArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(7, intArray0.length);
      assertTrue(boolean2);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'd', 49);
      assertArrayEquals(new char[] {'e', '\u0000', '#', '(', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 'F';
      floatArray0[2] = (float) 'F';
      floatArray0[3] = (float) (char)character0;
      floatArray0[4] = (float) 'F';
      floatArray0[5] = (float) (-51);
      floatArray0[6] = (float) (char)character0;
      floatArray0[7] = (float) (-51);
      floatArray0[8] = (float) 'A';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 70.0F, 70.0F, 65.0F, 70.0F, (-51.0F), 65.0F, (-51.0F), 65.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray0, 65.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, 70.0F, 70.0F, 65.0F, 70.0F, (-51.0F), 65.0F, (-51.0F), 65.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {65.0F, 0.0F, 70.0F, 70.0F, 65.0F, 70.0F, (-51.0F), 65.0F, (-51.0F), 65.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray2.length);
      assertNotNull(floatArray2);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-2042L);
      longArray0[1] = 1L;
      longArray0[2] = (-1341L);
      longArray0[3] = 2666L;
      longArray0[4] = (-2186L);
      int int0 = 3;
      MutableInt mutableInt0 = new MutableInt(3);
      assertEquals(3L, mutableInt0.longValue());
      assertEquals(3.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("3", mutableInt0.toString());
      assertEquals(3, (int)mutableInt0.getValue());
      assertEquals((byte)3, mutableInt0.byteValue());
      assertEquals(3, (int)mutableInt0.toInteger());
      assertEquals(3.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3, mutableInt0.intValue());
      assertEquals((short)3, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(3L, mutableInt0.longValue());
      assertEquals(3.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("3", mutableInt0.toString());
      assertEquals(3, (int)mutableInt0.getValue());
      assertEquals((byte)3, mutableInt0.byteValue());
      assertEquals(3, (int)mutableInt0.toInteger());
      assertEquals(3.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3, mutableInt0.intValue());
      assertEquals((short)3, mutableInt0.shortValue());
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(3);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(3, (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(3, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[3] = integer2;
      integerArray0[4] = integer0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(5, integerArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 1638, 1215, 1215);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1215;
      longArray0[1] = (long) 1215;
      longArray0[2] = (long) 1215;
      longArray0[3] = (long) 1638;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {1215L, 1215L, 1215L, 1638L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      
      Double[] doubleArray1 = new Double[1];
      Double double0 = new Double(1638);
      assertEquals(1638.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1638.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {1215L, 1215L, 1215L, 1638L, 0L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1215L;
      floatArray0[1] = (float) 1215;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1215.0F, 1215.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, (-2146479984));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[4] = 'y';
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-96), (int) (short)3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'G');
      assertArrayEquals(new char[] {'G', 'G', 'G', '\u0000', 'y', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(2, int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'G';
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 'G';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2524, 89);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {71.0F, 0.0F, 71.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)3983;
      shortArray0[3] = (short)645;
      shortArray0[4] = (short) (-1377);
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1595));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)3, (short)3983, (short)645, (short) (-1377), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)3, (short)3983, (short)645, (short) (-1377), (short)0, (short) (-1595)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-8);
      intArray0[1] = (int) (short) (-1377);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-8), (-1377), 0}, intArray0);
      assertArrayEquals(new int[] {(-8), (-1377)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      Byte byte0 = new Byte((byte)16);
      assertEquals((byte)16, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.swap(intArray0, (-1), (-1), (-1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-8), (-1377), 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.5);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, (-2308), (-2308), (-2308));
      assertArrayEquals(new float[] {1.5F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2308);
      intArray0[1] = (-2308);
      intArray0[2] = (-2308);
      intArray0[3] = (-2308);
      intArray0[4] = (-2308);
      boolean boolean0 = ArrayUtils.contains(intArray0, 88);
      assertArrayEquals(new int[] {(-2308), (-2308), (-2308), (-2308), (-2308)}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-602.8455775069622);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-602.8455775069622);
      doubleArray0[6] = 0.0;
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.5);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(1048.0);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(1048.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {1048.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(floatArray1, (-2308), 3048, (-2308));
      assertArrayEquals(new float[] {1048.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-8);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-289.6720634329294);
      doubleArray0[1] = (double) (byte)41;
      doubleArray0[2] = (double) (byte) (-8);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-289.6720634329294), 41.0, (-8.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-289.6720634329294), 41.0, (-8.0), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte) (-8), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)41;
      shortArray0[1] = (short) (byte) (-8);
      shortArray0[2] = (short) (byte) (-8);
      shortArray0[3] = (short) (byte)41;
      shortArray0[4] = (short) (byte) (-8);
      shortArray0[5] = (short) (byte)41;
      shortArray0[6] = (short) (byte)41;
      shortArray0[7] = (short) (byte) (-8);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-8), (short)41, (short)41, (short) (-8), (short)41, (short) (-8), (short) (-8), (short)41}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte) (-8), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte) (-8), (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'F';
      charArray0[1] = '>';
      charArray0[2] = '$';
      charArray0[3] = '|';
      charArray0[4] = '[';
      charArray0[5] = 'v';
      charArray0[6] = '0';
      charArray0[7] = 'P';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'F', '>', '$', '|', '[', 'v', '0', 'P'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(16, charArray1.length);
      assertEquals(8, charArray0.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      Character character0 = new Character('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 567, 90);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)6;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)8;
      shortArray0[1] = (short) (byte) (-99);
      shortArray0[2] = (short) (byte)69;
      shortArray0[3] = (short) (byte)69;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)8;
      longArray0[2] = (long) (short) (-99);
      longArray0[3] = (long) (byte)69;
      longArray0[4] = (long) 567;
      longArray0[5] = (long) 90;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)6, (int) (byte)6);
      assertArrayEquals(new long[] {8L, 0L, (-99L), 69L, 567L, 90L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 5482L;
      longArray0[3] = 1L;
      longArray0[4] = 1L;
      longArray0[5] = 2115L;
      MockRandom mockRandom0 = new MockRandom(693L);
      assertNotNull(mockRandom0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 5482L);
      assertArrayEquals(new long[] {5482L, 0L, 0L, 1L, 1L, 2115L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (int) 'n';
      intArray0[2] = 0;
      intArray0[3] = (int) 'n';
      intArray0[4] = (int) 'n';
      intArray0[5] = (int) 'n';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 110, 0, 110, 110, 110}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5176.038;
      doubleArray0[1] = 104.0;
      doubleArray0[2] = (double) 44;
      Byte byte0 = new Byte((byte) (-2));
      assertEquals((byte) (-2), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-1);
      objectArray0[1] = (Object) (byte) (-1);
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) (byte) (-1);
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, objectArray1.length);
      assertNotNull(objectArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1402.47F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      
      Byte[] byteArray2 = new Byte[1];
      byteArray2[0] = (Byte) (byte) (-1);
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray3.length);
      assertNotNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 4802L;
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0.0);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double1;
      Double double4 = new Double(1.5);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals(1.5, (double)double4, 0.01);
      assertNotNull(double4);
      
      doubleArray0[1] = double4;
      doubleArray0[2] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 542.4103F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 542.4103F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 450L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 4802L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 4802L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte) (-96);
      Byte byte1 = new Byte((byte) (-96));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-96), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)43);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)43, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)9);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)9, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte) (-96), (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 0L;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-45);
      byteArray0[0] = (byte) (-45);
      byte byte1 = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)76;
      byte byte2 = (byte)67;
      byteArray0[3] = (byte)67;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(byteArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-564);
      shortArray0[1] = (short)187;
      shortArray0[2] = (short) (-62);
      shortArray0[3] = (short)3104;
      shortArray0[4] = (short) (-23372);
      shortArray0[5] = (short)4721;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)3;
      shortArray0[8] = (short) (-912);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)32);
      assertArrayEquals(new short[] {(short) (-564), (short)187, (short) (-62), (short)3104, (short) (-23372), (short)4721, (short) (-1), (short)3, (short) (-912)}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      long[] longArray0 = new long[10];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(10, longArray0.length);
      assertEquals(11, longArray1.length);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.swap(booleanArray0, 3323, 873, (-661));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)50, (int) (byte)2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (byte)2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-1);
      ArrayUtils.reverse(byteArray0, 472, 1881);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)91, (byte) (-1)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-966);
      floatArray0[2] = (float) 1881;
      floatArray0[3] = (float) (-966);
      floatArray0[4] = (float) (byte) (-1);
      byteArray0[0] = (byte) (-1);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) (byte)0);
      assertArrayEquals(new float[] {(-966.0F), 0.0F, 1881.0F, (-966.0F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils.shift(intArray0, 5);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-966.0F));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-966.0F), 0.0F, 1881.0F, (-966.0F), (-1.0F), 0.0F, (-966.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-966.0F), 0.0F, 1881.0F, (-966.0F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(7, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1130;
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = 'Y';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'y');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'y', 'Y'}, charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1319));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)1130, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1319), (short)0, (short) (-1), (short)1130, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'y';
      floatArray0[1] = (float) 'Y';
      floatArray0[2] = (float) (short)1130;
      floatArray0[3] = (float) 'y';
      floatArray0[4] = (float) (short) (-1319);
      floatArray0[5] = (float) 'Y';
      floatArray0[6] = (float) 'y';
      floatArray0[7] = (float) (short)1130;
      floatArray0[8] = (float) 'y';
      float[] floatArray1 = ArrayUtils.add(floatArray0, 121.0F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {121.0F, 89.0F, 1130.0F, 121.0F, (-1319.0F), 89.0F, 121.0F, 1130.0F, 121.0F, 121.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {121.0F, 89.0F, 1130.0F, 121.0F, (-1319.0F), 89.0F, 121.0F, 1130.0F, 121.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(10, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)127;
      byteArray0[8] = (byte)63;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 401, (int) (byte) (-106));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-69), (byte)51, (byte) (-106), (byte)6, (byte) (-62), (byte) (-30), (byte)10, (byte)127, (byte)63}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      Character character0 = new Character('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('s');
      assertTrue(character1.equals((Object)character0));
      assertEquals('s', (char)character1);
      assertNotNull(character1);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 567, 90);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)43;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte)6, (byte) (-99), (byte)117, (byte)43, (byte)69}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)8;
      longArray0[1] = (long) (byte)8;
      longArray0[2] = (long) (byte)117;
      longArray0[3] = (long) (byte)8;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)6;
      intArray0[1] = (int) (byte)6;
      intArray0[2] = (int) (byte)117;
      intArray0[3] = 90;
      intArray0[4] = 2432;
      intArray0[5] = (int) (byte)117;
      intArray0[6] = 90;
      ArrayUtils.shuffle(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 90, 2432);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-96), (int) (short)3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 9L;
      longArray0[1] = 818L;
      longArray0[2] = (long) (byte) (-96);
      ArrayUtils.reverse(longArray0, (int) (byte)0, 2146463017);
      assertArrayEquals(new long[] {(-96L), 818L, 9L}, longArray0);
      assertEquals(3, longArray0.length);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (-1850L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-96L), 818L, 9L}, longArray0);
      assertArrayEquals(new long[] {(-96L), 818L, 9L, (-1850L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3602.844);
      doubleArray0[1] = (-3602.844);
      doubleArray0[2] = (-3602.844);
      doubleArray0[3] = (-3602.844);
      doubleArray0[4] = 577.6888255;
      doubleArray0[5] = (-3602.844);
      doubleArray0[6] = (-1399.0);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3602.844), (-3602.844), (-3602.844), (-3602.844), 577.6888255, (-3602.844), (-1399.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      Float[] floatArray1 = new Float[1];
      Float float0 = new Float(2132.385218924532);
      assertEquals(2132.3853F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[0] = float0;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (-1618.0F));
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {2132.3853F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1314);
      intArray0[2] = 985;
      intArray0[3] = (-1241);
      intArray0[4] = 109;
      intArray0[5] = 49;
      intArray0[6] = (-2248);
      intArray0[7] = 1008;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-1314), 985, (-1241), 109, 49, (-2248), 1008}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      assertNotNull(intArray1);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((double) 1008);
      assertEquals(1008.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 49);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(49.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) 1008);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1008.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) 109);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(109.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) (-1));
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-849.8774F));
      assertArrayEquals(new float[] {1008.0F, 49.0F, 1008.0F, 109.0F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 1143.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'J';
      charArray0[2] = '@';
      charArray0[3] = 'D';
      charArray0[4] = 'C';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'k');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'@', 'J', '@', 'D', 'C'}, charArray0);
      assertArrayEquals(new char[] {'@', 'J', '@', 'D', 'C'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[1];
      int int0 = 4835;
      ArrayUtils.swap(byteArray0, (-1163), 4835);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 0.0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 'J';
      int[] intArray0 = new int[1];
      intArray0[0] = (-1163);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 1143.0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'J';
      charArray0[2] = '@';
      charArray0[3] = 'D';
      charArray0[4] = 'C';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'k');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'@', 'J', '@', 'D', 'C'}, charArray0);
      assertArrayEquals(new char[] {'@', 'J', '@', 'D', 'C'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[0];
      int int0 = (-1163);
      ArrayUtils.swap(byteArray0, (-1163), 4835);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 1.0;
      objectArray0[1] = (Object) 0.0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 'J';
      int[] intArray0 = new int[1];
      intArray0[0] = (-1163);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 1143.0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'J';
      charArray0[2] = '@';
      charArray0[3] = 'D';
      charArray0[4] = 'C';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'k');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'@', 'J', '@', 'D', 'C'}, charArray0);
      assertArrayEquals(new char[] {'@', 'J', '@', 'D', 'C'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (-1163), 4835);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 1.0;
      objectArray0[1] = (Object) 0.0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 'J';
      int[] intArray0 = new int[1];
      intArray0[0] = (-1163);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 49;
      intArray0[3] = 49;
      ArrayUtils.swap(intArray0, 0, 49);
      assertArrayEquals(new int[] {0, 49, 0, 49}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[1] = ',';
      charArray0[2] = '!';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', ',', '!'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 49, 0, 49}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '<', 49);
      assertArrayEquals(new char[] {'\u0000', ',', '!'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short)4530;
      shortArray0[2] = (short) (-448);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1539), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1539, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      longArray0[5] = 0L;
      Float float0 = new Float((-1199.4112548828125));
      assertEquals((-1199.4113F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1199.4113F), (-1199.4113F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (-3994.823F), (-1385));
      assertArrayEquals(new float[] {(-1199.4113F), (-1199.4113F)}, floatArray1, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)15;
      shortArray0[1] = (short)1013;
      shortArray0[2] = (short)2479;
      shortArray0[3] = (short) (-3576);
      shortArray0[4] = (short)2902;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2479);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)15, (short)1013, (short)2479, (short) (-3576), (short)2902}, shortArray0);
      assertArrayEquals(new short[] {(short)15, (short)1013, (short) (-3576), (short)2902}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      Short short0 = new Short((short)117);
      assertEquals((short)117, (short)short0);
      assertNotNull(short0);
      
      int int0 = ArrayUtils.indexOf((Object[]) floatArray0, (Object) floatArray0[0], 79);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)91, object0);
      assertNotNull(object0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-1);
      ArrayUtils.reverse(byteArray0, 472, 1881);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)91, (byte) (-1)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-966);
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) 1881;
      floatArray0[3] = (float) (-966);
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (byte) (-1);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) (byte) (-1));
      assertArrayEquals(new float[] {(-966.0F), (-1.0F), 1881.0F, (-966.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils.shift(intArray0, 5);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Float float0 = new Float(100.0);
      assertEquals(100.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(100.0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(100.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(100.0);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(100.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2317);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-10));
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2460), (-2460));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((float[]) null, (float) (byte) (-10));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Long long0 = new Long(747L);
      assertEquals(747L, (long)long0);
      assertNotNull(long0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 747L;
      floatArray0[1] = (float) 747L;
      floatArray0[2] = (float) 111;
      floatArray0[3] = (float) 747L;
      floatArray0[4] = (float) 111;
      floatArray0[5] = 1033.399F;
      floatArray0[6] = (float) 747L;
      floatArray0[7] = (float) 1412;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1860.6F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {747.0F, 747.0F, 111.0F, 747.0F, 111.0F, 1033.399F, 747.0F, 1412.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {747.0F, 747.0F, 111.0F, 747.0F, 111.0F, 1033.399F, 747.0F, 1412.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 747L, 16);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, longArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 1638, 1215, 1215);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1215;
      longArray0[1] = (long) 1215;
      longArray0[2] = (long) 1215;
      longArray0[3] = (long) 1638;
      longArray0[4] = (long) 1215;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {1215L, 1215L, 1215L, 1638L, 1215L}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      
      Double[] doubleArray1 = new Double[1];
      Double double0 = new Double(1638);
      assertEquals(1638.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1638.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)56;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)127, (byte) (-86), (byte)0, (byte)19, (byte)1, (byte)0, (byte)56}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) 1638, 1960.62);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'r';
      longArray0[1] = (long) 'r';
      longArray0[2] = (long) 818;
      longArray0[3] = 1235L;
      longArray0[4] = (long) 'r';
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {114L, 114L, 818L, 1235L, 114L}, longArray0);
      assertArrayEquals(new long[] {114L, 114L, 818L, 1235L, 114L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '6';
      ArrayUtils.shift(charArray1, 3060);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'6'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)89);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      assertArrayEquals(new byte[] {(byte)54}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      assertArrayEquals(new byte[] {(byte)54}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertNotNull(byteArray2);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1235L, (double) 818L);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 818;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {818.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[4] = 'y';
      charArray0[5] = 'E';
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-96), (int) (short)3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      Float float0 = new Float((-2217.448213547));
      assertEquals((-2217.4482F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-2915.839F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2915.839F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-2217.448213547));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-2217.4482F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-96), (int) (byte) (-96));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-96)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2131;
      shortArray0[1] = (short)2131;
      shortArray0[2] = (short) (byte)43;
      shortArray0[3] = (short)2131;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)10);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2131, (short)2131, (short)43, (short)2131}, shortArray0);
      assertArrayEquals(new short[] {(short)2131, (short)2131, (short)43, (short)2131}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (-232), 45);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)24336;
      shortArray0[1] = (short)24336;
      ArrayUtils.shift((Object[]) booleanArray1, (-231), 2618, 2618);
      assertEquals(1, booleanArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)24336;
      floatArray0[1] = (float) 2618;
      floatArray0[2] = (float) (short)24336;
      floatArray0[3] = (float) (short)24336;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)24336, 2636);
      assertArrayEquals(new float[] {24336.0F, 2618.0F, 24336.0F, 24336.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1161L));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-82);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)116;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {116.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {116.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      Boolean boolean0 = Boolean.valueOf("fi)NwvBC11ZJ8");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (byte) (-1));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1911.7383884133);
      doubleArray0[1] = (-2050.09573038531);
      doubleArray0[2] = (-5612.396077154137);
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[3] = 't';
      charArray0[4] = '$';
      charArray0[5] = 'w';
      charArray0[6] = 'w';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'^', '^', '\u0000', 't', '$', 'w', 'w'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 't';
      floatArray0[1] = (float) '$';
      floatArray0[2] = (float) '$';
      floatArray0[3] = (float) '^';
      floatArray0[4] = (float) 'w';
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {116.0F, 36.0F, 36.0F, 94.0F, 119.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {116.0F, 36.0F, 36.0F, 94.0F, 119.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.valueOf("fi)NwvBC11ZJ8");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)24336;
      shortArray0[1] = (short)24336;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)24336);
      assertArrayEquals(new short[] {(short)24336, (short)24336}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)24336;
      shortArray0[1] = (short)24336;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)24336);
      assertArrayEquals(new short[] {(short)24336, (short)24336}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift((Object[]) booleanArray1, (-231), 2618, 2618);
      assertEquals(1, booleanArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)24336;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (short)24336;
      floatArray0[3] = (float) (short)24336;
      floatArray0[4] = (float) (short)24336;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)24336, 2636);
      assertArrayEquals(new float[] {24336.0F, 0.0F, 24336.0F, 24336.0F, 24336.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1911.7383884133);
      doubleArray0[1] = (-2050.09573038531);
      doubleArray0[2] = (-5612.396077154137);
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = 'w';
      charArray0[4] = '$';
      charArray0[5] = 'w';
      charArray0[6] = '^';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'^', '/', '/', 'w', '$', 'w', '^'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '^';
      floatArray0[1] = (float) '$';
      floatArray0[2] = (float) '$';
      floatArray0[3] = (float) '/';
      floatArray0[4] = (float) 'w';
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {94.0F, 36.0F, 36.0F, 47.0F, 119.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {94.0F, 36.0F, 36.0F, 47.0F, 119.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.valueOf("fi)NwvBC11ZJ8");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)24372;
      shortArray0[1] = (short)1016;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)24372);
      assertArrayEquals(new short[] {(short)24372, (short)1016}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Double double0 = new Double(0.9799125963079268);
      assertEquals(0.9799125963079268, (double)double0, 0.01);
      assertNotNull(double0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'e';
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'v';
      floatArray0[1] = (float) 'v';
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {118.0F, 118.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {118.0F, 118.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 1638, 1215, 1215);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1215;
      longArray0[1] = (long) 1215;
      longArray0[2] = (long) 1215;
      longArray0[3] = (long) 1638;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {1215L, 1215L, 1215L, 1638L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      
      Double[] doubleArray1 = new Double[1];
      Double double0 = new Double(1638);
      assertEquals(1638.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1638.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)98;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)56;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-72), (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)98, (byte)0, (byte)0, (byte)19, (byte)1, (byte)0, (byte)56}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {1215L, 1215L, 1215L, 1638L, 0L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)25;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)25, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)25;
      longArray0[1] = (long) (short)25;
      longArray0[2] = (long) (short)25;
      longArray0[3] = (long) (short)25;
      longArray0[4] = (long) (short) (-5093);
      longArray0[5] = 3853L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {25L, 25L, 25L, 25L, (-5093L), 3853L}, longArray0);
      assertArrayEquals(new long[] {25L, 25L, 25L, 25L, (-5093L), 3853L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.indexOf(longArray1, 337L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {25L, 25L, 25L, 25L, (-5093L), 3853L}, longArray0);
      assertArrayEquals(new long[] {25L, 25L, 25L, 25L, (-5093L), 3853L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (short)25;
      floatArray0[3] = (float) 25L;
      floatArray0[4] = (float) 337L;
      floatArray0[5] = (float) 25L;
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F, 25.0F, 25.0F, 337.0F, 25.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 112;
      intArray0[1] = (-2924);
      Float float0 = new Float((double) (-2924));
      assertEquals((-2924.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[8];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[6] = float0;
      floatArray0[7] = float0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5176.038;
      doubleArray0[1] = 104.0;
      doubleArray0[2] = (double) 44;
      ArrayUtils.shift(intArray0, (-3195), 1760, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "P55$E");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-87);
      shortArray0[1] = (short) (-185);
      shortArray0[2] = (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-87), (short) (-185), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 104.0;
      doubleArray0[2] = (double) 51;
      doubleArray0[3] = (-1503.0);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 708;
      doubleArray0[6] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0, 51, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {0.0, 0.0, 104.0, 51.0, (-1503.0), 0.0, 708.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      ArrayUtils.swap((boolean[]) null, Integer.MAX_VALUE, 1499, 3);
      boolean[] booleanArray0 = ArrayUtils.insert(0, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = '<';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l', '<'}, charArray0);
      assertArrayEquals(new char[] {'l', '<'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-861.0486892660064);
      doubleArray1[1] = 1140.0;
      doubleArray1[2] = (double) 0;
      int int0 = ArrayUtils.indexOf(doubleArray1, (-9.0), (-1));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-861.0486892660064), 1140.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 18688;
      intArray0[1] = (-2390);
      intArray0[2] = 51;
      intArray0[3] = (-2133794028);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 97, (-682));
      assertArrayEquals(new int[] {18688, (-2390), 51, (-2133794028)}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(4, intArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-682);
      doubleArray0[1] = (double) (-682);
      doubleArray0[2] = (double) 18688;
      doubleArray0[3] = (double) 18688;
      doubleArray0[4] = (double) 18688;
      ArrayUtils.shift(doubleArray0, 126, 755, (-4790));
      assertArrayEquals(new double[] {(-682.0), (-682.0), 18688.0, 18688.0, 18688.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst((long[]) null, (long) (-682));
      assertArrayEquals(new long[] {(-682L)}, longArray1);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5176.038;
      doubleArray0[1] = 104.0;
      doubleArray0[2] = (double) 44;
      doubleArray0[3] = (-1493.8663438634007);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 708;
      doubleArray0[6] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0, 44, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {0.0, 5176.038, 104.0, 44.0, (-1493.8663438634007), 0.0, 708.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (-163));
      assertNull(shortArray0);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(10, doubleArray0.length);
      assertEquals(20, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1.0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-1.0));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(0.0);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{1, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(4, booleanArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = ArrayUtils.insert(0, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = 'p';
      charArray0[2] = '#';
      charArray0[3] = 'C';
      int int1 = ArrayUtils.indexOf(charArray0, 'h', (-1));
      assertArrayEquals(new char[] {'h', 'p', '#', 'C'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(4, charArray0.length);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'C';
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) '#';
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 'p';
      doubleArray0[6] = (double) '#';
      doubleArray0[7] = (double) 'h';
      doubleArray0[8] = 1.0;
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 104.0, 0, 0.0);
      assertArrayEquals(new double[] {67.0, 0.0, 0.0, 35.0, 0.0, 112.0, 35.0, 104.0, 1.0}, doubleArray0, 0.01);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1727);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false}, booleanArray0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(6, booleanArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-78.609060745);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 3.0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 1727, (-1037), 1.5);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new double[] {0.0, (-78.609060745), 0.0, 3.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 1638, 1215, 1215);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1215;
      longArray0[1] = (long) 1215;
      longArray0[2] = (long) 1215;
      longArray0[3] = (long) 1638;
      longArray0[4] = (long) 1215;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {1215L, 1215L, 1215L, 1638L, 1215L}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      
      Double[] doubleArray1 = new Double[1];
      Double double0 = new Double(1638);
      assertEquals(1638.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1638.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)56;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)127, (byte) (-86), (byte)0, (byte)19, (byte)1, (byte)0, (byte)56}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, Integer.MAX_VALUE, 'w');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'v');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'v', 'v'}, charArray0);
      assertArrayEquals(new char[] {'v'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'v';
      longArray0[1] = (long) 'v';
      longArray0[2] = (long) 'v';
      longArray0[3] = (long) 'v';
      longArray0[4] = (long) 'v';
      longArray0[5] = (long) 'v';
      longArray0[6] = 761L;
      longArray0[7] = (-995L);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {118L, 118L, 118L, 118L, 118L, 118L, 761L, (-995L)}, longArray0);
      assertArrayEquals(new long[] {118L, 118L, 118L, 118L, 118L, 118L, 761L, (-995L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotNull(longArray1);
      
      Object[] objectArray0 = new Object[1];
      MutableInt mutableInt0 = new MutableInt((-140));
      assertEquals((-140), mutableInt0.intValue());
      assertEquals("-140", mutableInt0.toString());
      assertEquals((byte)116, mutableInt0.byteValue());
      assertEquals((-140.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-140L), mutableInt0.longValue());
      assertEquals((-140), (int)mutableInt0.getValue());
      assertEquals((-140), (int)mutableInt0.toInteger());
      assertEquals((-140.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-140), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'v';
      Object object0 = ArrayUtils.toPrimitive((Object) 'v');
      assertEquals('v', object0);
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-140), object0);
      assertEquals(1, objectArray0.length);
      assertEquals('v', object1);
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 118, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      long[] longArray0 = new long[24];
      longArray0[0] = (long) 'J';
      longArray0[1] = (long) 'J';
      longArray0[4] = (long) 'J';
      longArray0[6] = (long) 'J';
      longArray0[8] = (long) 'J';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 76, (-2146685957));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(24, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) 0L;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(2, objectArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift(objectArray0, 17);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      long[] longArray3 = ArrayUtils.subarray(longArray2, 32, 1072);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertNotNull(longArray3);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0L;
      Object object0 = ArrayUtils.get(objectArray0, 1072);
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) 0L;
      objectArray0[6] = (Object) 0L;
      objectArray0[7] = (Object) 0L;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(8, objectArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift(objectArray0, 1072);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'y');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-8.0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-8.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(244.462F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(244.462F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1.0F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(1.0F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float((double) floatArray0[1]);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals((-8.0F), (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = new Float((double) (-1.0F));
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((-1.0F), (float)float6, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      Float float7 = new Float((double) (-1.0F));
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertEquals((-1.0F), (float)float7, 0.01F);
      assertNotNull(float7);
      
      floatArray0[7] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-8.0F), 244.462F, 1.0F, 1.0F, (-8.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'y';
      intArray0[1] = 1654;
      intArray0[2] = (int) 'y';
      intArray0[3] = (int) 'y';
      intArray0[4] = (int) 'y';
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0, 4819, 2123);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-2042L);
      longArray0[1] = 1L;
      longArray0[2] = (-1341L);
      longArray0[3] = 2666L;
      longArray0[4] = (-2187L);
      longArray0[5] = 0L;
      longArray0[7] = 1L;
      char[] charArray0 = new char[8];
      charArray0[1] = '-';
      charArray0[2] = 'f';
      charArray0[4] = '6';
      charArray0[5] = '^';
      charArray0[6] = 'R';
      charArray0[7] = 'g';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '8');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '-', 'f', '\u0000', '6', '^', 'R', 'g'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '-', 'f', '\u0000', '6', '^', 'R', 'g'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, 735);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '^';
      intArray0[1] = (int) '8';
      intArray0[2] = (int) '-';
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 2870);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {94, 56, 45}, intArray0);
      assertArrayEquals(new int[] {94, 56, 45}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      char[] charArray2 = ArrayUtils.removeElement(charArray1, '\'');
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertNotNull(charArray2);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertNotNull(longArray2);
      
      MutableInt mutableInt0 = new MutableInt((-183));
      assertEquals((-183.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)73, mutableInt0.byteValue());
      assertEquals((-183), (int)mutableInt0.toInteger());
      assertEquals((-183.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-183), mutableInt0.shortValue());
      assertEquals((-183), (int)mutableInt0.getValue());
      assertEquals((-183), mutableInt0.intValue());
      assertEquals((-183L), mutableInt0.longValue());
      assertEquals("-183", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1314);
      intArray0[2] = 985;
      intArray0[3] = (-1277);
      intArray0[5] = 49;
      intArray0[6] = 49;
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-3), 985, 91);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) 985);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(985.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((float) (-1277));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1277.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Short short0 = new Short((short) (-1485));
      assertEquals((short) (-1485), (short)short0);
      assertNotNull(short0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 109, (-1), (-1314));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 985, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'X';
      charArray0[2] = '@';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'F', 'X', '@', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertNotNull(characterArray0);
      
      ArrayUtils.swap(charArray0, 101, (-2440), 436);
      assertArrayEquals(new char[] {'F', 'X', '@', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[2] = '#';
      charArray0[3] = '(';
      charArray0[4] = 'r';
      ArrayUtils.swap(charArray0, (int) (short)0, (int) (short)0, 870);
      assertArrayEquals(new char[] {'e', '\u0000', '#', '(', 'r'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((double) (short)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(1845.841F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(1845.841F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float((float) 870);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals(870.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = new Float((float) '#');
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals(35.0F, (float)float6, 0.01F);
      assertNotNull(float6);
      
      Float float7 = new Float((double) 870);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertEquals(870.0F, (float)float7, 0.01F);
      assertNotNull(float7);
      
      floatArray0[7] = float7;
      Float float8 = new Float((-1199.4113F));
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertEquals((-1199.4113F), (float)float8, 0.01F);
      assertNotNull(float8);
      
      floatArray0[8] = float8;
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (Object) short0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'e', '\u0000', '#', '(', 'r'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      long[] longArray3 = ArrayUtils.subarray(longArray2, 32, 1072);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertNotNull(longArray3);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1072;
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.shift((float[]) null, 67, 3048, 1072);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'y');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-8.0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-8.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(244.462F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(244.462F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1.0F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(1.0F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float((double) floatArray0[1]);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals((-8.0F), (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = new Float((double) (-1.0F));
      assertEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals((-1.0F), (float)float6, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      Float float7 = new Float((double) (-1.0F));
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertEquals((float)float7, (float)float0, 0.01F);
      assertEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertEquals((-1.0F), (float)float7, 0.01F);
      assertNotNull(float7);
      
      floatArray0[7] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-8.0F), 244.462F, 1.0F, 1.0F, (-8.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 51;
      intArray0[1] = (int) 'y';
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) 'y';
      intArray1[1] = 1654;
      intArray1[2] = (int) 'y';
      intArray1[3] = (int) 'y';
      intArray1[4] = (int) 'y';
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {51, 121}, intArray0);
      assertArrayEquals(new int[] {121, 1654, 121, 121, 121}, intArray1);
      assertArrayEquals(new int[] {51, 121, 121, 1654, 121, 121, 121}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(2, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(7, intArray2.length);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte) (-5);
      byteArray0[8] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)84, (byte)0, (byte)53, (byte)1, (byte)1, (byte)20, (byte) (-5), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)84, (byte)0, (byte)53, (byte)1, (byte)1, (byte)20, (byte) (-5), (byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'Q');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {']', ']', 'Q', 'Q'}, charArray0);
      assertArrayEquals(new char[] {'Q', ']', ']', 'Q', 'Q'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[3] = class2;
      Class<String> class3 = String.class;
      classArray0[4] = class3;
      Class<String> class4 = String.class;
      classArray0[5] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(6, classArray0.length);
      assertEquals(6, classArray1.length);
      assertNotNull(classArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 18688;
      intArray0[1] = (-2390);
      intArray0[2] = 51;
      intArray0[3] = (-2133794028);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 97, (-682));
      assertArrayEquals(new int[] {18688, (-2390), 51, (-2133794028)}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(4, intArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      assertNotNull(classArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = '';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'J');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'J', 'W', ''}, charArray1);
      assertArrayEquals(new char[] {'W', ''}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray1.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = 5176.038;
      doubleArray0[1] = 104.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1503.0);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 708;
      doubleArray0[6] = (double) 0;
      ArrayUtils.reverse(longArray0, 0, Integer.MAX_VALUE);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 104.0, 0);
      assertEquals(17, doubleArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)67;
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (double) (byte)84;
      doubleArray0[1] = (double) (byte)0;
      ArrayUtils.swap(doubleArray0, 104, (int) (byte)67);
      assertEquals(16, doubleArray0.length);
      
      short[] shortArray2 = ArrayUtils.insert((int) (byte)0, shortArray1, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 19.0F, (int) (byte)67);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, Double.NaN);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(16, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int1 = ArrayUtils.indexOf((float[]) null, (-805.96F));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)84;
      doubleArray0[1] = (double) (byte)84;
      doubleArray0[2] = (double) (byte)84;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3764.0);
      assertArrayEquals(new double[] {84.0, 84.0, 84.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1147);
      doubleArray0[2] = (double) (-1147);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 'v', (-316));
      assertArrayEquals(new double[] {(-1147.0), 0.0, (-1147.0)}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5176.038;
      doubleArray0[1] = 104.0;
      doubleArray0[2] = (double) 51;
      doubleArray0[3] = (-1503.0);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 708;
      doubleArray0[6] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0, 51, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {0.0, 5176.038, 104.0, 51.0, (-1503.0), 0.0, 708.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      ArrayUtils.swap((boolean[]) null, Integer.MAX_VALUE, 1499, 3);
      boolean[] booleanArray0 = ArrayUtils.insert(0, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = '<';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'l', '<'}, charArray0);
      assertArrayEquals(new char[] {'l', '<'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-861.0486892660064);
      doubleArray1[1] = 1140.0;
      doubleArray1[2] = (double) 0;
      int int0 = ArrayUtils.indexOf(doubleArray1, (-9.0), 1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-861.0486892660064), 1140.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1084));
      assertEquals((-1084), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1084);
      intArray0[1] = (int) integerArray0[0];
      intArray0[2] = (-1084);
      ArrayUtils.swap(intArray0, (int) integerArray0[0], (-507));
      assertArrayEquals(new int[] {(-1084), (-1084), (-1084)}, intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(3, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = ',';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {',', ','}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1084), (-1084), (-1084)}, intArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean2);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'N', 2);
      assertArrayEquals(new char[] {',', ','}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1084);
      floatArray0[1] = (-3235.046F);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1084, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      Character character0 = new Character('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 567, 90);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)6;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)8;
      shortArray0[1] = (short) (byte) (-99);
      shortArray0[2] = (short) (byte)69;
      shortArray0[3] = (short) (byte)69;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)8, (short) (-99), (short)69, (short)69}, shortArray0);
      assertArrayEquals(new short[] {(short)8, (short) (-99), (short)69, (short)69}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte) (-63);
      longArray0[2] = (long) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      Character character0 = new Character('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('s');
      assertTrue(character1.equals((Object)character0));
      assertEquals('s', (char)character1);
      assertNotNull(character1);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 567, 90);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)43;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte)6, (byte) (-99), (byte)117, (byte)43, (byte)69}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)8;
      longArray0[1] = (long) (byte)8;
      longArray0[2] = (long) (byte)117;
      longArray0[3] = (long) (byte)8;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)6;
      intArray0[1] = (int) (byte)6;
      intArray0[2] = (int) (byte)117;
      intArray0[3] = 90;
      intArray0[4] = 2432;
      intArray0[5] = (int) (byte)117;
      intArray0[6] = 90;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2432, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '8';
      charArray0[2] = 'g';
      charArray0[3] = '8';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'g');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'/', '8', 'g', '8'}, charArray0);
      assertArrayEquals(new char[] {'/', '8', '8'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      
      char[] charArray2 = new char[8];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 'g';
      charArray2[1] = '/';
      charArray2[2] = 'g';
      charArray2[3] = '/';
      charArray2[4] = 'g';
      charArray2[5] = 'g';
      charArray2[6] = '/';
      charArray2[7] = '/';
      char[] charArray3 = ArrayUtils.addAll(charArray2, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertArrayEquals(new char[] {'g', '/', 'g', '/', 'g', 'g', '/', '/'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertEquals(8, charArray2.length);
      assertEquals(16, charArray3.length);
      assertNotNull(charArray3);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = 'k';
      charArray0[2] = 'u';
      charArray0[3] = '{';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-95));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -95, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'v');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'v', 'v'}, charArray0);
      assertArrayEquals(new char[] {'v'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'v';
      longArray0[1] = (long) 'v';
      longArray0[2] = (long) 'v';
      longArray0[3] = (long) 'v';
      longArray0[4] = (long) 'v';
      longArray0[5] = (long) 'v';
      longArray0[6] = 765L;
      longArray0[7] = (-995L);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {118L, 118L, 118L, 118L, 118L, 118L, 765L, (-995L)}, longArray0);
      assertArrayEquals(new long[] {118L, 118L, 118L, 118L, 118L, 118L, 765L, (-995L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotNull(longArray1);
      
      Object[] objectArray0 = new Object[1];
      int int0 = (-140);
      MutableInt mutableInt0 = new MutableInt((-140));
      assertEquals("-140", mutableInt0.toString());
      assertEquals((short) (-140), mutableInt0.shortValue());
      assertEquals((-140), (int)mutableInt0.getValue());
      assertEquals((byte)116, mutableInt0.byteValue());
      assertEquals((-140), (int)mutableInt0.toInteger());
      assertEquals((-140.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-140.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-140L), mutableInt0.longValue());
      assertEquals((-140), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'v';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Object[] objectArray0 = new Object[7];
      objectArray0[4] = (Object) true;
      objectArray0[6] = (Object) true;
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) boolean0, 16);
      assertEquals(7, objectArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 5482L;
      longArray0[2] = 479L;
      longArray0[3] = 1L;
      longArray0[4] = 997L;
      longArray0[5] = 2115L;
      MockRandom mockRandom0 = new MockRandom(693L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {0L, 479L, 1L, 997L, 2115L, 5482L}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'n';
      charArray0[2] = '~';
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'n';
      objectArray0[1] = (Object) 2115L;
      objectArray0[2] = (Object) '\u0000';
      objectArray0[3] = (Object) 'n';
      objectArray0[6] = (Object) 'n';
      objectArray0[5] = (Object) 1L;
      objectArray0[6] = (Object) 479L;
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 997L;
      objectArray1[1] = (Object) '~';
      objectArray1[2] = (Object) 997L;
      objectArray1[3] = (Object) '~';
      objectArray1[4] = (Object) 479L;
      Object object0 = ArrayUtils.get(objectArray1, (-1217));
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(5, objectArray1.length);
      assertNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null, 2);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(64, bitSet0.size());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals(7, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
      ArrayUtils.shift((int[]) null, (-1399), (-1399), (-973));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1399);
      doubleArray0[2] = (double) 15;
      doubleArray0[3] = (-62.4472268209);
      doubleArray0[4] = (double) (-1399);
      doubleArray0[5] = (-62.4472268209);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1161.2238);
      assertArrayEquals(new double[] {(-1.0), (-1399.0), 15.0, (-62.4472268209), (-1399.0), (-62.4472268209)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-87);
      shortArray0[1] = (short) (byte) (-87);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-87), (short) (-87)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-87);
      intArray0[2] = (int) (short) (-87);
      intArray0[3] = (int) (byte)43;
      intArray0[4] = (-221);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte)43, (int) (byte)43);
      assertArrayEquals(new short[] {(short) (-87), (short) (-87)}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-8);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-289.6720634329294);
      doubleArray0[1] = (double) (byte)41;
      doubleArray0[2] = (double) (byte) (-8);
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-289.6720634329294), 41.0, (-8.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-289.6720634329294), 41.0, (-8.0), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte) (-8), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)41;
      shortArray0[1] = (short) (byte) (-8);
      shortArray0[2] = (short) (byte) (-8);
      shortArray0[3] = (short) (byte)41;
      shortArray0[4] = (short) (byte) (-8);
      shortArray0[5] = (short) (byte)41;
      shortArray0[7] = (short) (byte) (-8);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-8), (short)0, (short)41, (short) (-8), (short)41, (short) (-8), (short) (-8), (short)41}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte) (-8), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte) (-8), (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-8);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-289.6720634329294);
      doubleArray0[1] = (double) (byte)41;
      doubleArray0[2] = (double) (byte) (-8);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-289.6720634329294), 41.0, (-8.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-289.6720634329294), 41.0, (-8.0), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte) (-8), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)41;
      shortArray0[1] = (short) (byte) (-8);
      shortArray0[2] = (short) (byte) (-8);
      shortArray0[3] = (short) (byte)41;
      shortArray0[4] = (short) (byte) (-8);
      shortArray0[5] = (short) (byte)41;
      shortArray0[6] = (short) (byte)41;
      shortArray0[7] = (short) (byte) (-8);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-8), (short)41, (short)41, (short) (-8), (short)41, (short) (-8), (short) (-8), (short)41}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray1, (double) (short) (-8), 1.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-289.6720634329294), 41.0, (-8.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-289.6720634329294), 41.0, (-8.0), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short)46;
      shortArray0[1] = (short) (-1);
      shortArray0[11] = (short)1130;
      shortArray0[3] = (short)2967;
      shortArray0[4] = (short)5028;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-5093);
      shortArray0[7] = (short)1285;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(13, shortArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[0] = 'b';
      int int0 = ArrayUtils.indexOf(charArray0, 'm');
      assertArrayEquals(new char[] {'b', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((int[]) null, 2003, (int) (short)1285, (int) (short)1285);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      ArrayUtils.swap((int[]) null, (-1030), (-1030));
      ArrayUtils.shift((int[]) null, (-713), 2129113429, 46);
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 2129113429, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1527.83F;
      floatArray0[2] = 572.2048F;
      floatArray0[3] = (-426.1F);
      floatArray0[4] = 3593.5625F;
      floatArray0[5] = 1302.4653F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-681.4197F), 118);
      assertArrayEquals(new float[] {0.0F, 1527.83F, 572.2048F, (-426.1F), 3593.5625F, 1302.4653F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(6, floatArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 118;
      longArray0[1] = (long) 118;
      longArray0[2] = (long) 118;
      longArray0[3] = (long) 118;
      longArray0[4] = 1L;
      longArray0[5] = (-1958L);
      longArray0[6] = (long) 118;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {118L, 118L, 118L, 118L, 1L, (-1958L), 118L}, longArray1);
      assertArrayEquals(new long[] {118L, 118L, 118L, 118L, 1L, (-1958L), 118L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.indexOf(longArray0, 118L);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {118L, 118L, 118L, 118L, 1L, (-1958L), 118L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(7, longArray0.length);
      assertEquals(0, int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F, 572.2048F, (-426.1F), 3593.5625F, 1302.4653F, 1527.83F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)4237;
      shortArray0[1] = (short)4;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)4237, (short)4}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)982;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)982;
      objectArray0[1] = (Object) (short)982;
      objectArray0[2] = (Object) (byte)0;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals(9, objectArray0.length);
      assertEquals((short)982, object0);
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) (byte)0;
      objectArray0[6] = (Object) (short)982;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[7] = object1;
      objectArray0[8] = (Object) (byte)0;
      Object object2 = ArrayUtils.get(objectArray0, 99);
      assertEquals(9, objectArray0.length);
      assertNull(object2);
      
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (byte)0;
      objectArray1[1] = (Object) (short)982;
      objectArray1[2] = object0;
      objectArray1[3] = object0;
      objectArray1[4] = (Object) (byte)0;
      Double double0 = new Double(1925.239);
      assertEquals(1925.239, (double)double0, 0.01);
      assertNotNull(double0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray1, (Object) double0, 2707);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(5, objectArray1.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      short short0 = (short) (-1309);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      Integer[] integerArray0 = new Integer[1];
      int int0 = (-2232);
      Integer integer0 = new Integer((-2232));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-2232), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(2411.6493);
      assertEquals(2411.6493, (double)double0, 0.01);
      assertNotNull(double0);
      
      Integer integer1 = new Integer((-2232));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2232), (int)integer1);
      assertNotNull(integer1);
      
      Short short1 = new Short((short) (-1309));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-1309), (short)short1);
      assertNotNull(short1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) integer1, (Object) short1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      char[] charArray0 = ArrayUtils.insert(102, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, (int) (short)3);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-2042L);
      longArray0[1] = 1L;
      longArray0[2] = (-1341L);
      longArray0[3] = 2666L;
      longArray0[4] = (-2187L);
      longArray0[5] = 0L;
      longArray0[7] = 1L;
      char[] charArray0 = new char[8];
      charArray0[1] = '-';
      charArray0[2] = 'f';
      charArray0[4] = '6';
      charArray0[5] = '^';
      charArray0[6] = 'b';
      charArray0[7] = 'g';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '8');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '-', 'f', '\u0000', '6', '^', 'b', 'g'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '-', 'f', '\u0000', '6', '^', 'b', 'g'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, 743);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)982;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (short)982;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (short)982;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 982.0, 0.0, 0.0, 0.0, 982.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 982.0, 0.0, 0.0, 0.0, 982.0, 2.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-475.2014F);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-475.2013854980469)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[4];
      ArrayUtils.shift(longArray0, 0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = ':';
      charArray0[2] = 'w';
      charArray0[3] = '@';
      charArray0[4] = 'q';
      charArray0[5] = ';';
      charArray0[6] = ',';
      charArray0[7] = ' ';
      charArray0[8] = '=';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'^', ':', 'w', '@', 'q', ';', ',', ' ', '='}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2248);
      intArray1[1] = 49;
      intArray1[2] = (-2248);
      intArray1[3] = 49;
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-2248), 49, (-2248), 49}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-2248), 49, (-2248), 49}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(8, intArray2.length);
      assertNotNull(intArray2);
      
      ArrayUtils.swap(intArray1, (-2248), 49);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {(-2248), 49, (-2248), 49}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertEquals(4, intArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = ',';
      charArray0[2] = '!';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'D', ',', '!'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1314);
      intArray0[2] = 985;
      intArray0[3] = (-1217);
      intArray0[4] = 109;
      intArray0[5] = 49;
      intArray0[6] = (-2248);
      intArray0[7] = 1020;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-1314), 985, (-1217), 109, 49, (-2248), 1020}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 1.0;
      doubleArray0[2] = 12.31;
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)722);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-116);
      intArray0[1] = (-116);
      ArrayUtils.shift(intArray0, 4615, (-116), (-2048));
      assertArrayEquals(new int[] {(-116), (-116)}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1527.83F;
      floatArray0[2] = 572.2048F;
      floatArray0[3] = (-426.1F);
      floatArray0[4] = 3593.5625F;
      floatArray0[5] = 1302.4653F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-681.4197F), 118);
      assertArrayEquals(new float[] {0.0F, 1527.83F, 572.2048F, (-426.1F), 3593.5625F, 1302.4653F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, floatArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'z';
      charArray0[1] = 'b';
      int int0 = ArrayUtils.indexOf(charArray0, 'm');
      assertArrayEquals(new char[] {'z', 'b'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 118;
      intArray0[1] = (int) 'b';
      intArray0[2] = (-1);
      intArray0[3] = (int) 'b';
      intArray0[4] = (int) 'b';
      intArray0[5] = 2896;
      intArray0[6] = (-2145601541);
      intArray0[7] = (int) 'b';
      ArrayUtils.shift(intArray0, 2896, 108, (-1675));
      assertArrayEquals(new int[] {118, 98, (-1), 98, 98, 2896, (-2145601541), 98}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = 5176.038;
      doubleArray0[1] = (double) 51;
      doubleArray0[2] = (double) 51;
      doubleArray0[3] = (-1503.0);
      doubleArray0[4] = (double) 51;
      ArrayUtils.shift(doubleArray0, 0, 51, Integer.MAX_VALUE);
      assertEquals(17, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = 5176.038;
      doubleArray0[1] = 104.0;
      doubleArray0[2] = (double) 51;
      doubleArray0[3] = (-1503.0);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 708;
      doubleArray0[6] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0, 51, Integer.MAX_VALUE);
      assertEquals(17, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-475.2014F);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-475.2013854980469)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(4, objectArray0.length);
      assertNull(object0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(objectArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, objectArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, intArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-475.2014F);
      floatArray0[2] = 2108.31F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 3045.7175F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-2694.7014F);
      floatArray0[8] = 3138.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-475.2014F), 2108.31F, (-1.0F), (-1.0F), 3045.7175F, 0.0F, (-2694.7014F), 3138.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-475.2014F);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-475.2013854980469)}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-2694.7014F);
      objectArray0[1] = (Object) (-1.0F);
      objectArray0[2] = (Object) 3045.7175F;
      Object object0 = ArrayUtils.get(objectArray0, 9);
      assertEquals(4, objectArray0.length);
      assertNull(object0);
      
      objectArray0[3] = null;
      boolean boolean2 = ArrayUtils.isNotEmpty(objectArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(4, objectArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isNotEmpty(intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(1, intArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      int int0 = (-5);
      int int1 = 711;
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals("711", mutableInt0.toString());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals(711L, mutableInt0.longValue());
      assertEquals(711, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      int int2 = mutableInt0.getAndAdd((Number) long0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals("712", mutableInt0.toString());
      assertEquals(712, (int)mutableInt0.getValue());
      assertEquals((byte) (-56), mutableInt0.byteValue());
      assertEquals(712.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(712, (int)mutableInt0.toInteger());
      assertEquals(712L, mutableInt0.longValue());
      assertEquals(712.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)712, mutableInt0.shortValue());
      assertEquals(712, mutableInt0.intValue());
      assertEquals(711, int2);
      
      Integer integer0 = mutableInt0.toInteger();
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals("712", mutableInt0.toString());
      assertEquals(712, (int)mutableInt0.getValue());
      assertEquals((byte) (-56), mutableInt0.byteValue());
      assertEquals(712.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(712, (int)mutableInt0.toInteger());
      assertEquals(712L, mutableInt0.longValue());
      assertEquals(712.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)712, mutableInt0.shortValue());
      assertEquals(712, mutableInt0.intValue());
      assertEquals(712, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-5));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int2));
      assertEquals((-5), (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer1;
      mutableInt0.add(int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(707, mutableInt0.intValue());
      assertEquals((short)707, mutableInt0.shortValue());
      assertEquals(707.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("707", mutableInt0.toString());
      assertEquals(707.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(707, (int)mutableInt0.toInteger());
      assertEquals((byte) (-61), mutableInt0.byteValue());
      assertEquals(707L, mutableInt0.longValue());
      assertEquals(707, (int)mutableInt0.getValue());
      
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[0] = integer1;
      integerArray0[2] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.shift(booleanArray0, (int) (short)25);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.shift(booleanArray0, (int) (short)25);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = (-2990L);
      longArray0[2] = 818L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {1L, (-2990L), 818L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2990L);
      doubleArray0[1] = (double) 818L;
      doubleArray0[2] = (double) (-2990L);
      doubleArray0[3] = (double) 818L;
      doubleArray0[4] = (double) 818L;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2968, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2968, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-39);
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 43, (-39), 34);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)91, object0);
      assertNotNull(object0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)91;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)91, (byte)91, (byte)91, (byte)91, (byte)91, (byte)91, (byte)91}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      MockRandom mockRandom0 = new MockRandom(2115L);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(mockRandom1, mockRandom0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(4, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = 'n';
      charArray0[3] = '~';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'~', '~', 'n', '~'}, charArray1);
      assertArrayEquals(new char[] {'~', '~', 'n', '~'}, charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertNotNull(charArray1);
      
      Object object0 = ArrayUtils.get((Object[]) null, (-1217));
      assertNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) mockRandom1, 2);
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte) (-28);
      byteArray0[8] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte) (-128), (byte)1, (byte) (-81), (byte)75, (byte) (-1), (byte)109, (byte) (-28), (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[3];
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[2] = (long) 0;
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)0;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
      
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)8;
      shortArray1[1] = (short)2813;
      shortArray1[2] = (short)1660;
      shortArray1[3] = (short)2496;
      shortArray1[4] = (short)102;
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)102);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)8, (short)2813, (short)1660, (short)2496, (short)102}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray1.length);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3353.89412554);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 12.31;
      doubleArray0[3] = (-1414.5095293760658);
      doubleArray0[4] = (-1503.0);
      doubleArray0[5] = 5176.038;
      ArrayUtils.shift(doubleArray0, 51, 0, 732);
      assertArrayEquals(new double[] {(-3353.89412554), 1.0, 12.31, (-1414.5095293760658), (-1503.0), 5176.038}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MutableInt mutableInt0 = new MutableInt(732);
      assertEquals(732, (int)mutableInt0.getValue());
      assertEquals((short)732, mutableInt0.shortValue());
      assertEquals(732, (int)mutableInt0.toInteger());
      assertEquals((byte) (-36), mutableInt0.byteValue());
      assertEquals("732", mutableInt0.toString());
      assertEquals(732, mutableInt0.intValue());
      assertEquals(732.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(732L, mutableInt0.longValue());
      assertEquals(732.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(732, (int)mutableInt0.getValue());
      assertEquals((short)732, mutableInt0.shortValue());
      assertEquals(732, (int)mutableInt0.toInteger());
      assertEquals((byte) (-36), mutableInt0.byteValue());
      assertEquals("732", mutableInt0.toString());
      assertEquals(732, mutableInt0.intValue());
      assertEquals(732.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(732L, mutableInt0.longValue());
      assertEquals(732.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(732, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(51);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(51, (int)integer1);
      assertNotNull(integer1);
      
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      int int1 = mutableInt0.getAndDecrement();
      assertTrue(int1 == int0);
      assertEquals((-2), (int)mutableInt0.getValue());
      assertEquals((short) (-2), mutableInt0.shortValue());
      assertEquals("-2", mutableInt0.toString());
      assertEquals((-2.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2), mutableInt0.intValue());
      assertEquals((-2L), mutableInt0.longValue());
      assertEquals((-2.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2), (int)mutableInt0.toInteger());
      assertEquals((byte) (-2), mutableInt0.byteValue());
      assertEquals((-1), int1);
      
      mutableInt0.increment();
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.toInteger());
      
      boolean boolean0 = ArrayUtils.isEquals(mutableInt0, mutableInt0);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1597.100366163039);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(1597.100366163039, (double)double2, 0.01);
      assertNotNull(double2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)89;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)2, (byte)89}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)2, (byte)89}, byteArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)2;
      longArray0[1] = (long) (byte)89;
      longArray0[2] = (long) (byte)2;
      int int2 = ArrayUtils.indexOf(longArray0, 1591L, (int) (byte)6);
      assertArrayEquals(new long[] {2L, 89L, 2L}, longArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(3, longArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      short short0 = (short) (-1658);
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-1658);
      shortArray0[1] = (short) (-1658);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1658)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1658)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((short) (-1658));
      assertEquals((-1658), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1072;
      short short0 = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)3448;
      shortArray0[3] = (short)1585;
      shortArray0[4] = (short)772;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)1072, (short)0, (short)3448, (short)1585, (short)772}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((short)3448);
      assertEquals(3448, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1115);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1115, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int int0 = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1911.7383884133);
      doubleArray0[1] = (-2050.09573038531);
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) boolean0, 1);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (-2050.09573038531), (-1), (-1575.32203776));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int1 == int0);
      assertEquals(0, doubleArray1.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      Short short0 = new Short((short) (-29));
      assertEquals((short) (-29), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)647);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)647, (short)short1);
      assertNotNull(short1);
      
      ArrayUtils.swap((boolean[]) null, (int) (short)8, (int) (short)647, (int) (short)8);
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = '\\';
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short1;
      shortArray0[3] = short0;
      shortArray0[4] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)2256);
      assertArrayEquals(new short[] {(short) (-29), (short) (-29), (short)647, (short) (-29), (short)647}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      int int0 = 0;
      ArrayUtils.reverse((byte[]) null, 0, 0);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 4802L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 4802L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 4802L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-1);
      ArrayUtils.swap(longArray0, (-505), 2, 1);
      assertArrayEquals(new long[] {0L, (-1L), 2L, 0L, (-1L)}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = 5482L;
      longArray0[1] = 0L;
      longArray0[2] = 479L;
      longArray0[3] = 3324L;
      longArray0[4] = 997L;
      longArray0[5] = 2115L;
      MockRandom mockRandom0 = new MockRandom(693L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {0L, 479L, 3324L, 997L, 2115L, 0L, 0L, 0L, 0L, 5482L}, longArray0);
      assertEquals(10, longArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = 'n';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {']', 'n', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {']', 'n', '\u0000'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'n';
      objectArray0[1] = (Object) 2115L;
      objectArray0[2] = (Object) ']';
      objectArray0[3] = (Object) 'n';
      objectArray0[4] = (Object) 'n';
      objectArray0[3] = (Object) 3324L;
      objectArray0[6] = (Object) 479L;
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 997L;
      objectArray1[1] = (Object) '\u0000';
      objectArray1[2] = (Object) 997L;
      objectArray1[3] = (Object) '\u0000';
      objectArray1[4] = (Object) 479L;
      Object object0 = ArrayUtils.get(objectArray1, (-1217));
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(5, objectArray1.length);
      assertNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null, 2);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals("{5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(7, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      ArrayUtils.swap((int[]) null, (-571), (-571));
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-571));
      assertEquals((-571), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-190));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-190), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (int) integerArray0[1]);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals("711", mutableInt0.toString());
      assertEquals(711, mutableInt0.intValue());
      assertEquals(711L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1393);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      
      MockRandom mockRandom0 = new MockRandom((short)1393);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 2115L;
      longArray0[1] = (long) (short)1393;
      longArray0[2] = 51L;
      longArray0[3] = 2115L;
      longArray0[4] = (long) (short)1393;
      longArray0[5] = (long) (short)1393;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {1393L, 51L, 2115L, 1393L, 1393L, 2115L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray1 = new Boolean[2];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = boolean0;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)24336;
      shortArray0[1] = (short)24336;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)24336);
      assertArrayEquals(new short[] {(short)24336, (short)24336}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils.shift((Object[]) booleanArray1, (-231), 2618, 2618);
      assertEquals(2, booleanArray1.length);
      
      MutableInt mutableInt0 = new MutableInt((int) (short)24336);
      assertEquals((byte)16, mutableInt0.byteValue());
      assertEquals("24336", mutableInt0.toString());
      assertEquals((short)24336, mutableInt0.shortValue());
      assertEquals(24336, (int)mutableInt0.getValue());
      assertEquals(24336, (int)mutableInt0.toInteger());
      assertEquals(24336.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(24336.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(24336, mutableInt0.intValue());
      assertEquals(24336L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((short)24337, mutableInt0.shortValue());
      assertEquals((byte)17, mutableInt0.byteValue());
      assertEquals(24337, (int)mutableInt0.toInteger());
      assertEquals(24337, (int)mutableInt0.getValue());
      assertEquals(24337.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(24337, mutableInt0.intValue());
      assertEquals(24337.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("24337", mutableInt0.toString());
      assertEquals(24337L, mutableInt0.longValue());
      assertEquals(24336, int0);
      
      double[] doubleArray0 = new double[3];
      int int1 = mutableInt0.getAndAdd(1052);
      assertFalse(int1 == int0);
      assertEquals(25389L, mutableInt0.longValue());
      assertEquals("25389", mutableInt0.toString());
      assertEquals(25389, mutableInt0.intValue());
      assertEquals(25389.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)25389, mutableInt0.shortValue());
      assertEquals(25389, (int)mutableInt0.toInteger());
      assertEquals(25389.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(25389, (int)mutableInt0.getValue());
      assertEquals((byte)45, mutableInt0.byteValue());
      assertEquals(24337, int1);
      
      doubleArray0[0] = (double) 24336;
      doubleArray0[1] = (double) 2618;
      doubleArray0[2] = (double) 24336;
      boolean boolean2 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {24336.0, 2618.0, 24336.0}, doubleArray0, 0.01);
      assertFalse(boolean2 == boolean1);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      boolean boolean3 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {2}, intArray0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(1, intArray0.length);
      assertTrue(boolean3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = ')';
      boolean boolean4 = ArrayUtils.contains(charArray0, '*');
      assertArrayEquals(new char[] {')', ')'}, charArray0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertEquals(2, charArray0.length);
      assertFalse(boolean4);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {')', ')'}, charArray0);
      assertArrayEquals(new char[] {')', ')'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      Character character0 = new Character('8');
      assertEquals('8', (char)character0);
      assertNotNull(character0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) character0, 4);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, objectArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 5482L;
      longArray0[1] = 0L;
      longArray0[2] = 479L;
      longArray0[3] = 1L;
      longArray0[4] = 997L;
      longArray0[5] = 2115L;
      MockRandom mockRandom0 = new MockRandom(693L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {0L, 479L, 1L, 997L, 2115L, 5482L}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = 'n';
      charArray0[2] = '~';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {']', 'n', '~'}, charArray0);
      assertArrayEquals(new char[] {']', 'n', '~'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'n';
      objectArray0[1] = (Object) 2115L;
      objectArray0[2] = (Object) ']';
      objectArray0[3] = (Object) 'n';
      objectArray0[4] = (Object) 'n';
      objectArray0[5] = (Object) 1L;
      objectArray0[6] = (Object) 479L;
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 997L;
      objectArray1[1] = (Object) '~';
      objectArray1[2] = (Object) 997L;
      objectArray1[3] = (Object) '~';
      objectArray1[4] = (Object) 479L;
      Object object0 = ArrayUtils.get(objectArray1, (-1217));
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(5, objectArray1.length);
      assertNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null, 2);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(7, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 0, 0);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3.0), 1143.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray2 = new char[7];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'J';
      charArray2[1] = 'C';
      charArray2[2] = 'C';
      charArray2[3] = 'C';
      charArray2[4] = '@';
      charArray2[5] = 'C';
      charArray2[6] = '=';
      char[] charArray3 = ArrayUtils.removeAllOccurrences(charArray2, '@');
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertArrayEquals(new char[] {'J', 'C', 'C', 'C', '@', 'C', '='}, charArray2);
      assertArrayEquals(new char[] {'J', 'C', 'C', 'C', 'C', '='}, charArray3);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertEquals(7, charArray2.length);
      assertEquals(6, charArray3.length);
      assertNotNull(charArray3);
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Double double0 = new Double(0.9799125963079268);
      assertEquals(0.9799125963079268, (double)double0, 0.01);
      assertNotNull(double0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'e';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '{';
      charArray0[6] = '(';
      charArray0[7] = 'v';
      ArrayUtils.swap(charArray0, (-2837), (-2837));
      assertArrayEquals(new char[] {'v', 'e', '\u0000', '=', '=', '{', '(', 'v'}, charArray0);
      assertEquals(8, charArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1136.0;
      doubleArray0[1] = 2679.8027;
      doubleArray0[2] = (double) '=';
      doubleArray0[4] = (double) '\u0000';
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 103, (-2460));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1136.0, 2679.8027, 61.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'v', 'e', '\u0000', '=', '=', '{', '(', 'v'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      assertEquals(8, charArray0.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Float float0 = new Float(100.0);
      assertEquals(100.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(100.0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(100.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(100.0);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(100.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-10));
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[2] = false;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2460), (-2460));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.shift((byte[]) null, 2146975772);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      Double double0 = new Double(0.9799125963079268);
      assertEquals(0.9799125963079268, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, double0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'e';
      charArray0[2] = '9';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = 's';
      charArray0[6] = '(';
      charArray0[7] = '_';
      ArrayUtils.swap(charArray0, (-2837), (-2837));
      assertArrayEquals(new char[] {'v', 'e', '9', '=', '=', 's', '(', '_'}, charArray0);
      assertEquals(8, charArray0.length);
      
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1136.0;
      doubleArray2[1] = 2679.8027;
      doubleArray2[2] = (double) '=';
      doubleArray2[3] = (double) '_';
      doubleArray2[4] = (double) '9';
      double[] doubleArray3 = ArrayUtils.subarray(doubleArray2, 103, (-2460));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1136.0, 2679.8027, 61.0, 95.0, 57.0}, doubleArray2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(0, doubleArray3.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray3);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-2099);
      shortArray0[2] = (short)4583;
      shortArray0[3] = (short)1578;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-2099), (short)4583, (short)1578}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-304.589);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3066), (-5888));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-304.589)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (-5888));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = 'N';
      charArray0[2] = '&';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'}', 'N', '&'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)478;
      shortArray0[3] = (short) (-1275);
      shortArray0[4] = (short) (-2338);
      shortArray0[5] = (short)6;
      ArrayUtils.shift(shortArray0, (int) (short)7, 1455, (-1));
      assertArrayEquals(new short[] {(short)2, (short)7, (short)478, (short) (-1275), (short) (-2338), (short)6}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3353.89412554);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 12.31;
      doubleArray0[3] = (-1414.5095293760658);
      doubleArray0[4] = (-1503.0);
      doubleArray0[5] = 5176.038;
      ArrayUtils.shift(doubleArray0, 51, 0, 732);
      assertArrayEquals(new double[] {(-3353.89412554), 1.0, 12.31, (-1414.5095293760658), (-1503.0), 5176.038}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-65);
      ArrayUtils.reverse(byteArray0, (int) (byte)115, (int) (byte) (-65));
      assertArrayEquals(new byte[] {(byte)46, (byte) (-76), (byte)81, (byte)0, (byte) (-77), (byte)115, (byte)97, (byte) (-65)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)30;
      ArrayUtils.reverse(byteArray0, (-2747), 2);
      assertArrayEquals(new byte[] {(byte) (-34), (byte) (-46), (byte)30, (byte)30}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4738.5186);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4738.5186), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-4738.5186), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1084));
      assertEquals((-1084), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(5, integerArray0.length);
      assertEquals((-1084), (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(int0);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[4] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1084));
      assertArrayEquals(new int[] {(-1084), 0, 0, (-1084), 0}, intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1084));
      assertEquals((-1084), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(5, integerArray0.length);
      assertEquals((-1084), (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertEquals(5, integerArray0.length);
      assertEquals((-1084), (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1084));
      assertArrayEquals(new int[] {(-1084), 0, (-1084), (-1084), 0}, intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte)1, (byte)20, (byte)20}, byteArray0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.reverse((Object[]) null, 18669, 2319);
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      Character character0 = new Character('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('s');
      assertTrue(character1.equals((Object)character0));
      assertEquals('s', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      Character character2 = ArrayUtils.get(characterArray0, (int) character0, character0);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character1));
      assertEquals(9, characterArray0.length);
      assertEquals('s', (char)character2);
      assertNotNull(character2);
      
      MutableInt mutableInt0 = new MutableInt((int) character0);
      assertTrue(character0.equals((Object)character1));
      assertEquals("115", mutableInt0.toString());
      assertEquals(115, (int)mutableInt0.toInteger());
      assertEquals((byte)115, mutableInt0.byteValue());
      assertEquals(115.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(115, (int)mutableInt0.getValue());
      assertEquals(115L, mutableInt0.longValue());
      assertEquals(115.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)115, mutableInt0.shortValue());
      assertEquals(115, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), (-56));
      assertArrayEquals(new byte[] {(byte)50, (byte) (-1)}, byteArray0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, byteArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      Float float0 = new Float(100.0);
      assertEquals(100.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(100.0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(100.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Character character0 = Character.valueOf('n');
      assertEquals('n', (char)character0);
      assertNotNull(character0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) float0;
      byte[] byteArray0 = new byte[0];
      byte byte0 = (byte)50;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)50);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, byteArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) float1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1375), 451);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Boolean[] booleanArray2 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray2[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray2[1] = boolean1;
      Boolean[] booleanArray3 = ArrayUtils.removeElements(booleanArray2, booleanArray2);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertEquals(2, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertNotNull(booleanArray3);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)108);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      Character character0 = new Character('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('s');
      assertTrue(character1.equals((Object)character0));
      assertEquals('s', (char)character1);
      assertNotNull(character1);
      
      char char0 = '.';
      Character character2 = Character.valueOf('.');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('.', (char)character2);
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character2;
      characterArray0[6] = character0;
      Character character3 = ArrayUtils.get(characterArray0, (int) character0, (Character) char0);
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)char0));
      assertTrue(character0.equals((Object)character1));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertEquals(7, characterArray0.length);
      assertEquals('.', (char)character3);
      assertNotNull(character3);
      
      MutableInt mutableInt0 = new MutableInt((-329));
      assertEquals((-329.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-329", mutableInt0.toString());
      assertEquals((-329), (int)mutableInt0.toInteger());
      assertEquals((byte) (-73), mutableInt0.byteValue());
      assertEquals((-329), mutableInt0.intValue());
      assertEquals((short) (-329), mutableInt0.shortValue());
      assertEquals((-329L), mutableInt0.longValue());
      assertEquals((-329), (int)mutableInt0.getValue());
      assertEquals((-329.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), (-56));
      assertArrayEquals(new byte[] {(byte)50, (byte) (-1)}, byteArray0);
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(2, byteArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      mutableInt0.increment();
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      
      boolean boolean0 = ArrayUtils.isEquals(mutableInt0, mutableInt0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1597.100366163039);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(1597.100366163039, (double)double2, 0.01);
      assertNotNull(double2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)89;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte)2, (byte)89}, byteArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte)2, (byte)89}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, byteArray1.length);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1591L;
      longArray0[3] = 0L;
      longArray0[4] = 1591L;
      longArray0[2] = 1591L;
      Byte byte0 = new Byte((byte) (-5));
      assertEquals((byte) (-5), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      Object[] objectArray0 = new Object[7];
      objectArray0[4] = (Object) false;
      objectArray0[6] = (Object) false;
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) boolean0, 1);
      assertEquals(7, objectArray0.length);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)19;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)19}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)65, (int) (short)19);
      assertArrayEquals(new short[] {(short)19}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(711);
      assertEquals(711, (int)mutableInt0.getValue());
      assertEquals(711.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(711.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(711, (int)mutableInt0.toInteger());
      assertEquals((byte) (-57), mutableInt0.byteValue());
      assertEquals(711, mutableInt0.intValue());
      assertEquals((short)711, mutableInt0.shortValue());
      assertEquals("711", mutableInt0.toString());
      assertEquals(711L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1393);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "N)xLpnJ]ZR";
      stringArray0[1] = "^\"";
      stringArray0[2] = "N)xLpnJ]ZR";
      stringArray0[3] = "S}4d";
      stringArray0[4] = "^\"";
      stringArray0[5] = "S}4d";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, 'J');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3353.89412554);
      doubleArray0[2] = 1.0;
      doubleArray0[2] = 12.31;
      doubleArray0[3] = (-1414.5095293760658);
      doubleArray0[4] = (-1503.0);
      doubleArray0[5] = (-1414.5095293760658);
      ArrayUtils.shift(doubleArray0, 51, 0, 708);
      assertArrayEquals(new double[] {(-3353.89412554), 0.0, 12.31, (-1414.5095293760658), (-1503.0), (-1414.5095293760658), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-2870);
      shortArray0[1] = (short) (-2406);
      shortArray0[2] = (short) (-2099);
      shortArray0[3] = (short)4;
      shortArray0[4] = (short)97;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short) (-2870), (short) (-2406), (short) (-2099), (short)4, (short)97, (short)0}, shortArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3353.89412554);
      doubleArray0[2] = 1.0;
      doubleArray0[2] = 12.31;
      doubleArray0[3] = (-1414.5095293760658);
      doubleArray0[4] = (-1503.0);
      doubleArray0[5] = (-1414.5095293760658);
      ArrayUtils.shift(doubleArray0, 51, 0, 708);
      assertArrayEquals(new double[] {(-3353.89412554), 0.0, 12.31, (-1414.5095293760658), (-1503.0), (-1414.5095293760658), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-2870);
      shortArray0[1] = (short) (-2406);
      shortArray0[2] = (short) (-2099);
      shortArray0[3] = (short)4;
      shortArray0[4] = (short)97;
      shortArray0[5] = (short)61;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short) (-2870), (short) (-2406), (short) (-2099), (short)4, (short)97, (short)61}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "S}4d";
      stringArray0[1] = "N)xLpnJ]ZR";
      stringArray0[2] = "^\"";
      stringArray0[3] = "Array element ";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      Byte byte0 = new Byte((byte)94);
      assertEquals((byte)94, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)94, object0);
      assertNotNull(object0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1595.0;
      doubleArray0[1] = (double) (byte)94;
      doubleArray0[2] = (double) (byte)94;
      doubleArray0[3] = (double) 48;
      ArrayUtils.swap(doubleArray0, 48, 48, 65536);
      assertArrayEquals(new double[] {1595.0, 94.0, 94.0, 48.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-602.8455775069622);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 3764);
      assertArrayEquals(new double[] {(-1.0), 1.0, 0.0, (-602.8455775069622), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, 6, (float) 3764);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)84;
      doubleArray0[2] = (double) (byte)84;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)84;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (int) (byte)84);
      assertArrayEquals(new double[] {0.0, 84.0, 84.0, 0.0, 84.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "tKh'$z}!#?5";
      stringArray0[1] = "Array and element cannot both be null";
      String[] stringArray1 = ArrayUtils.clone(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'tKh'$z}!#?5', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 112;
      intArray0[1] = (-2924);
      intArray0[2] = 0;
      intArray0[3] = 2;
      ArrayUtils.shift(intArray0, 2, (-574), (-2924));
      assertArrayEquals(new int[] {112, (-2924), 0, 2}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) 2;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-416.63051), (double) (-574));
      assertArrayEquals(new double[] {(-1.0), 1.5, 2.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-574);
      intArray1[2] = 0;
      ArrayUtils.shift(intArray1, (-2406), 0, 0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-574), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray1.length);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-1.0), (double) 2);
      assertArrayEquals(new double[] {(-1.0), 1.5, 2.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) 2;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = (-2166);
      char char0 = 'm';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-2166), 'm');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2166, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-602.8455775069622);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-602.8455775069622);
      doubleArray0[6] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 3764);
      assertArrayEquals(new double[] {(-1.0), 1.0, 0.0, (-602.8455775069622), 0.0, (-602.8455775069622), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, 6, (float) 3764);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      ArrayUtils.swap((int[]) null, (-1030), (-1030));
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.reverse(booleanArray0, 2129113429, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      int int0 = (-1323);
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-1323), intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[3];
      char char0 = '4';
      charArray0[0] = '4';
      charArray0[1] = 'W';
      charArray0[2] = '4';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.doubles((double) '4', (double) '4');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 583L;
      float[] floatArray2 = ArrayUtils.removeAll(floatArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {583.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {583.0F, 0.0F}, floatArray2, 0.01F);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(0, intArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertNotNull(floatArray2);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2231.9467625707;
      doubleArray0[3] = (-3602.844);
      float[] floatArray3 = ArrayUtils.removeElement((float[]) null, (float) 583L);
      assertNull(floatArray3);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((char[]) null, '&');
      assertEquals((-1), int0);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[4] = 'y';
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-96), (int) (short)3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      
      MutableInt mutableInt0 = new MutableInt((Number) (byte)0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndDecrement();
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals(0, int0);
      
      mutableInt0.setValue((int) (byte)0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      
      Object[] objectArray0 = ArrayUtils.removeAllOccurences((Object[]) null, (Object) mutableInt0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(4744.113);
      assertEquals(4744.113, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(4744.113);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(4744.113, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, double0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) double1, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-935));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-935)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)982;
      shortArray0[1] = (short) (-772);
      shortArray0[2] = (short) (-3209);
      shortArray0[3] = (short)1909;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-22);
      shortArray0[6] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)982, (short) (-772), (short) (-3209), (short)1909, (short)0, (short) (-22), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)982, (short) (-772), (short) (-3209), (short)1909, (short)0, (short) (-22), (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-475.2014F);
      floatArray0[2] = 2108.31F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 3045.7175F;
      floatArray0[7] = (-2694.7014F);
      floatArray0[8] = 2108.31F;
      int[] intArray0 = new int[1];
      int int0 = 9;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 9, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-475.2014F);
      floatArray0[2] = 2108.31F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 3045.7175F;
      floatArray0[7] = (-2694.7014F);
      floatArray0[8] = 3138.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-475.2014F), 2108.31F, (-1.0F), (-1.0F), 3045.7175F, 0.0F, (-2694.7014F), 3138.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      int int0 = 9;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 9, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-475.2014F);
      floatArray0[2] = 2108.31F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 3045.7175F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-2694.7014F);
      floatArray0[8] = 3138.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-475.2014F), 2108.31F, (-1.0F), (-1.0F), 3045.7175F, 0.0F, (-2694.7014F), 3138.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = 9;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 9, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 76);
      assertEquals(2, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.get(objectArray0, 2145645048);
      assertEquals(2, objectArray0.length);
      assertNull(object1);
      
      objectArray0[1] = null;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(2, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      MutableInt mutableInt0 = new MutableInt((Number) short0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.get(objectArray0, 60, (Object) mutableInt0);
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals("0", mutableInt1.toString());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0, mutableInt1.intValue());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(9, objectArray0.length);
      assertNotNull(mutableInt1);
      
      objectArray0[0] = (Object) mutableInt1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) short0;
      objectArray1[1] = (Object) mutableInt1;
      objectArray1[2] = object0;
      objectArray1[3] = object0;
      Object object1 = ArrayUtils.get(objectArray1, 60);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(4, objectArray1.length);
      assertNull(object1);
      
      objectArray0[2] = null;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 60;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = 60;
      intArray0[5] = 60;
      intArray0[6] = (int) (short)0;
      intArray0[7] = 60;
      intArray0[8] = 60;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object2, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2131;
      shortArray0[1] = (short)2131;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2131, (short)2131, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Class<Object[]> class0 = Object[].class;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0, class0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, objectArray1.length);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '', 1604);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      ArrayUtils.swap(byteArray0, 1, 1, (-1));
      assertArrayEquals(new byte[] {(byte) (-127)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      longArray1[8] = (long) 0;
      boolean boolean1 = ArrayUtils.isSorted(longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(9, longArray1.length);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) 0L;
      Class<Object[]> class0 = Object[].class;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0, class0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, objectArray1.length);
      assertNotNull(objectArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)1;
      ArrayUtils.swap(byteArray0, 12, 12, (-1345));
      assertArrayEquals(new byte[] {(byte)0, (byte)39, (byte) (-63), (byte)0, (byte)0, (byte)0, (byte) (-63), (byte)1}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (-1994.9));
      assertArrayEquals(new double[] {(-1994.9)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 0;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1156;
      shortArray0[1] = (short) (-1945);
      shortArray0[2] = (short)36;
      shortArray0[3] = (short)19;
      shortArray0[4] = (short)100;
      shortArray0[5] = (short) (-25230);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)1156, (short) (-1945), (short)36, (short)19, (short)100, (short) (-25230)}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-896);
      shortArray0[1] = (short) (-896);
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-896), (short) (-896)}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      int[] intArray0 = new int[18];
      long[] longArray0 = new long[20];
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(20, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)0;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(18, intArray0.length);
      assertEquals(17, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-119);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)0, (byte)71, (byte) (-1), (byte)51, (byte)0, (byte)0, (byte) (-119)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(9, byteArray0.length);
      assertEquals(18, byteArray1.length);
      assertNotNull(byteArray1);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.toArray(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte) (-119);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte)7;
      shortArray0[6] = (short) (byte)0;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-119), (short) (-1), (short)7, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      int int0 = (-1323);
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-1323), intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = 'M';
      charArray0[2] = '6';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = 1L;
      // Undeclared exception!
      try { 
        mockRandom0.doubles((double) 1L, (double) 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'X';
      charArray0[2] = '@';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'F', 'X', '@', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertNotNull(characterArray0);
      
      ArrayUtils.swap((short[]) null, 436, 436, 896);
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)3169);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 't';
      floatArray0[1] = (-961.8024F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {116.0F, (-961.8024F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {116.0F, (-961.8024F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'F', 'X', '@', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 446.096F;
      floatArray0[1] = (-1713.8F);
      floatArray0[2] = (-148.062F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {446.096F, (-1713.8F), (-148.062F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {446.096F, (-1713.8F), (-148.062F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, 3829L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 3829L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-1713.8F);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 446.096F;
      doubleArray0[4] = 478.146715355;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0L, 4583);
      assertArrayEquals(new double[] {(-1.0), (-1713.800048828125), 0.0, 446.09600830078125, 478.146715355, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 4583;
      intArray0[1] = 4583;
      intArray0[2] = 6;
      intArray0[3] = (-358);
      intArray0[4] = 6;
      intArray0[5] = 4583;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {4583, 4583, 6, (-358), 6, 4583}, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)2972;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-358), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -358, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      Float float0 = new Float((double) 818);
      assertEquals(818.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) 818);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(818.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte)54}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte)54, (byte) (-85), (byte)54, (byte)54}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(byteArray1, (byte) (-85));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte)54}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)54, (byte)54, (byte) (-85), (byte)54, (byte)54}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (-1867.8F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      byte byte0 = (byte)43;
      Byte byte1 = new Byte((byte)43);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)43, (byte)byte1);
      assertNotNull(byte1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (byte)43, (int) (byte)43);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double((-1L));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1L));
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1L);
      longArray1[1] = (-1L);
      longArray1[2] = (-1L);
      longArray1[3] = (-1L);
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotNull(longArray2);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1177.3881306672;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) (-1L);
      doubleArray0[7] = (double) (-1L);
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {1177.3881306672, (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = Character.valueOf('b');
      assertFalse(character1.equals((Object)character0));
      assertEquals('b', (char)character1);
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (char)character0;
      floatArray0[1] = (float) (char)character0;
      floatArray0[2] = (float) (char)character0;
      floatArray0[3] = (float) 'b';
      floatArray0[4] = (float) 'A';
      MockRandom mockRandom0 = new MockRandom((long) character0);
      assertFalse(character0.equals((Object)character1));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {65.0F, 65.0F, 98.0F, 65.0F, 65.0F}, floatArray0, 0.01F);
      assertFalse(character0.equals((Object)character1));
      assertEquals(5, floatArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = 'B';
      charArray0[2] = 'A';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'A', 'B', 'A'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[4];
      longArray0[2] = (long) (byte)84;
      longArray0[3] = (long) (-606);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-86), (int) (byte)0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 84L, (-606L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1130;
      shortArray0[4] = (short)5028;
      shortArray0[6] = (short) (-5093);
      shortArray0[7] = (short)1285;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)1130, (short)0, (short)5028, (short)0, (short) (-5093), (short)1285, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (short)1130;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {1130.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2147483648L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1097L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-2147483648L)}, longArray0);
      assertArrayEquals(new long[] {(-2147483648L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1130;
      shortArray0[4] = (short)5028;
      shortArray0[6] = (short) (-5093);
      shortArray0[7] = (short)1285;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (short)5028;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {5028.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1591L;
      longArray0[3] = 0L;
      longArray0[4] = 1591L;
      longArray0[2] = 1591L;
      longArray0[6] = 1591L;
      longArray0[7] = 1591L;
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 177.0F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)46;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1130;
      shortArray0[3] = (short)2967;
      shortArray0[4] = (short)5028;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-5093);
      shortArray0[7] = (short)1285;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)1130, (short)2967, (short)5028, (short)0, (short) (-5093), (short)1285, (short)46}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) (short)2967;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 2967L}, longArray0);
      assertArrayEquals(new long[] {0L, 2967L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.indexOf(longArray1, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 2967L}, longArray0);
      assertArrayEquals(new long[] {0L, 2967L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (short)1130;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {1130.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      ArrayUtils.shift((double[]) null, 939, 939, 939);
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      int[] intArray0 = new int[9];
      intArray0[0] = (-2406);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2406);
      ArrayUtils.shift(doubleArray0, (-2406), 678, 678);
      assertArrayEquals(new double[] {(-2406.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3353.89412554);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 12.31;
      doubleArray0[3] = (-1414.5095293760658);
      doubleArray0[4] = (-1503.0);
      doubleArray0[5] = 5176.038;
      ArrayUtils.shift(doubleArray0, 51, 0, 708);
      assertArrayEquals(new double[] {(-3353.89412554), 1.0, 12.31, (-1414.5095293760658), (-1503.0), 5176.038}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      int int0 = 1072;
      long[] longArray3 = ArrayUtils.subarray(longArray2, 32, 1072);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertNotNull(longArray3);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1072;
      doubleArray0[1] = (double) 32;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1072.0, 32.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1072.0, 32.0, 1072.0, 32.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((double) 0L);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      double double0 = 41.0;
      int int1 = 3764;
      int int2 = ArrayUtils.lastIndexOf(doubleArray1, 2446.8, 32);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1072.0, 32.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1072.0, 32.0, 1072.0, 32.0}, doubleArray1, 0.01);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, (-1), (float) 0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }
}
