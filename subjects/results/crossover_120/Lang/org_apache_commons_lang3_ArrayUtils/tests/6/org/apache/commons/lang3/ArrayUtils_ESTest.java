/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:22:53 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3487;
      intArray0[2] = 748;
      intArray0[3] = 32;
      intArray0[4] = 122;
      intArray0[5] = 46;
      intArray0[6] = 9;
      intArray0[7] = (-2505);
      Short short0 = new Short((short)15851);
      assertNotNull(short0);
      assertEquals((short)15851, (short)short0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      charArray0[4] = '&';
      charArray0[5] = 'w';
      int int0 = new Integer('&');
      assertEquals(38, int0);
      
      char[] charArray1 = ArrayUtils.insert(46, (char[]) null, (char[]) null);
      assertNull(charArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)5;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-85));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)18, (byte)8, (byte) (-43), (byte)100, (byte) (-98), (byte)5}, byteArray0);
      assertArrayEquals(new byte[] {(byte)18, (byte)8, (byte) (-43), (byte)100, (byte) (-98), (byte)5, (byte) (-85)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte) (-1);
      Byte byte0 = new Byte((byte) (-26));
      assertNotNull(byte0);
      assertEquals((byte) (-26), (byte)byte0);
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-26);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-26);
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = (int) (byte) (-26);
      intArray0[6] = (int) (byte)10;
      intArray0[7] = (int) (byte) (-59);
      intArray0[8] = (int) (byte) (-1);
      int int0 = ArrayUtils.indexOf(intArray0, 0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-26), (-1), (-26), (-1), (-26), 0, 10, (-59), (-1)}, intArray0);
      assertEquals(5, int0);
      
      ArrayUtils.shift(byteArray0, (-26), (int) (byte) (-1), (-26));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)10, (byte)0, (byte) (-1)}, byteArray0);
      
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = (Byte) (byte)10;
      byteArray1[1] = (Byte) (byte)0;
      ArrayUtils.shift((byte[]) null, (int) (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[1] = long0;
      Long[] longArray1 = ArrayUtils.add(longArray0, 2, long0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)48;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)48);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)104, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)104}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)104, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)104}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray2.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)104, (byte)48}, byteArray2);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)104, (byte)48}, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) longArray1);
      assertNotSame(longArray0, objectArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(longArray1, objectArray0);
      assertEquals(2, longArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(objectArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      ArrayUtils.swap(byteArray1, (-1073741824), 2, (-3529));
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)104, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)104}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-20), 2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 0, 0}, intArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 2, 2}, intArray0);
      
      ArrayUtils.shift(byteArray0, 49, 1, 0);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)104, (byte)48}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean1 = Boolean.valueOf(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf((String) null);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf("java.lang.Byte");
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray0[5] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1, 0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(bitSet0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = new Boolean("The Array must not be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("VNA(n>8zh`(6N");
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2113929216, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 666.33279867765, (-461), (double) 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2080);
      shortArray0[1] = (short)921;
      shortArray0[2] = (short) (-722);
      shortArray0[3] = (short)108;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2080), (short)921, (short) (-722), (short)108}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2080), (short)921, (short) (-722), (short)108}, shortArray1);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short) (-722);
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (short) (-722);
      floatArray0[3] = (float) (short)921;
      floatArray0[4] = 1540.0F;
      floatArray0[5] = (float) (short) (-2080);
      floatArray0[6] = (float) (-461);
      floatArray0[7] = (float) 0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 7, (-2296.991F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {(-722.0F), 1.0F, (-722.0F), 921.0F, 1540.0F, (-2080.0F), (-461.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-722.0F), 1.0F, (-722.0F), 921.0F, 1540.0F, (-2080.0F), (-461.0F), (-2296.991F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-678L);
      longArray0[1] = (-678L);
      longArray0[2] = 0L;
      float[] floatArray0 = new float[12];
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) (-678L);
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'0'}, charArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray1);
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray0);
      assertEquals(12, floatArray0.length);
      assertEquals(12, floatArray2.length);
      assertNotNull(floatArray2);
      
      Long long0 = new Long(2486L);
      assertNotNull(long0);
      assertEquals(2486L, (long)long0);
      
      Long long1 = new Long((-678L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-678L), (long)long1);
      
      Long[] longArray1 = new Long[6];
      longArray1[0] = (Long) 0L;
      Long long2 = new Long(2486L);
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(2486L, (long)long2);
      
      longArray1[1] = long2;
      longArray1[2] = (Long) (-678L);
      longArray1[3] = (Long) (-678L);
      longArray1[4] = long0;
      longArray1[5] = long0;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, 2659L);
      assertNotSame(longArray2, longArray0);
      assertEquals(6, longArray2.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {0L, 2486L, (-678L), (-678L), 2486L, 2486L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (long)longArray1[3];
      doubleArray0[1] = (double) (-678L);
      doubleArray0[2] = (double) (long)longArray1[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-678.0F), (double) (-678.0F));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-678.0), (-678.0), (-678.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      float[] floatArray0 = new float[12];
      floatArray0[1] = (float) Integer.MAX_VALUE;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 2990);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      Character character0 = new Character(']');
      assertNotNull(character0);
      assertEquals(']', (char)character0);
      
      String string0 = ArrayUtils.toString((Object) character0);
      assertNotNull(string0);
      assertEquals("]", string0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false, true}, booleanArray0));
      assertFalse(boolean0);
      
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 2.14748365E9F;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483648E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483648E9, 2.147483647E9, 2.147483648E9}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      Float float1 = new Float(964.8013914);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(964.8014F, (float)float1, 0.01F);
      
      Object[] objectArray1 = ArrayUtils.addFirst(objectArray0, (Object) float1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '$';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '2');
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'$'}, charArray0);
      assertNotNull(bitSet0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2301));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2301), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(2, integerArray1.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray1);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short) (-2083));
      assertNotNull(short0);
      assertEquals((short) (-2083), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-1));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-1), (short)short1);
      
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2083), (short) (-1)}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      ArrayUtils.swap((Object[]) null, 0, 2, 0);
      MutableInt mutableInt0 = new MutableInt(1927.9F);
      assertEquals(1927.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1927L, mutableInt0.longValue());
      assertEquals(1927.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1927, (int)mutableInt0.toInteger());
      assertEquals(1927, (int)mutableInt0.getValue());
      assertEquals((byte) (-121), mutableInt0.byteValue());
      assertEquals("1927", mutableInt0.toString());
      assertEquals((short)1927, mutableInt0.shortValue());
      assertEquals(1927, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1194);
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)0, (double) (short)0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      ArrayUtils.swap(shortArray0, 1175, (-3339), (-3339));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1194), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (short)0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      
      Long long0 = new Long(1175);
      assertNotNull(long0);
      assertEquals(1175L, (long)long0);
      
      Long long1 = Long.getLong("f}dcR%*gHS)ig\"~", (Long) null);
      assertNull(long1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "f}dcR%*gHS)ig\"~";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) (short) (-1194);
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short)0;
      objectArray0[5] = (Object) (short)0;
      objectArray0[6] = (Object) bitSet0;
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) "f}dcR%*gHS)ig\"~", (-1170));
      assertEquals(7, objectArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) 1175, (int) (short)0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, 4);
      Float float0 = new Float((double) (short) (-1232));
      assertNotNull(float0);
      assertEquals((-1232.0F), (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameType("+_=q", float0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1232);
      shortArray0[1] = (short) (-1232);
      shortArray0[2] = (short) (-1232);
      shortArray0[3] = (short) (-1232);
      shortArray0[4] = (short) (-1232);
      shortArray0[5] = (short) (-1232);
      shortArray0[6] = (short)102;
      ArrayUtils.reverse(shortArray0, 4, (-3010));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1232), (short) (-1232), (short) (-1232), (short) (-1232), (short) (-1232), (short) (-1232), (short)102}, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1232);
      doubleArray0[1] = (double) (short) (-1232);
      doubleArray0[2] = (double) (short) (-1232);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3010), (int) (short) (-1232));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1232.0), (-1232.0), (-1232.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 1533.0);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, 1, (-4555), 0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = Short.valueOf((short) (-1));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-1), (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-2144));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-2144), (short)short2);
      
      shortArray0[2] = short2;
      // Undeclared exception!
      try { 
        Short.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3482;
      intArray0[1] = (-537);
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      Long long1 = new Long(2900L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2900L, (long)long1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1380);
      shortArray0[1] = (short) (-4906);
      shortArray0[2] = (short) (-1404);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1380), (short) (-4906), (short) (-1404)}, shortArray0);
      assertNotNull(shortArray1);
      
      MockRandom mockRandom0 = new MockRandom((-537));
      assertNotNull(mockRandom0);
      
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyShort() , anyShort());
      boolean boolean0 = ArrayUtils.isSorted(shortArray1, comparator0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1380), (short) (-4906), (short) (-1404)}, shortArray0);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1404);
      doubleArray0[1] = (double) 3482;
      doubleArray0[2] = (double) (short) (-1404);
      doubleArray0[3] = (double) (short) (-4906);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1421.41));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1404.0), 3482.0, (-1404.0), (-4906.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf((Object[]) shortArray1, (Object) long0, (-537));
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1380), (short) (-4906), (short) (-1404)}, shortArray0);
      assertFalse(long0.equals((Object)long1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)0, (double) (short)0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      ArrayUtils.swap(shortArray0, 1175, (-3339), (-3339));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 1175;
      floatArray0[2] = (float) (short)0;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 1175;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 1175, 0, 0, 0, 0}, intArray0);
      assertNotNull(integerArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-25);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)50, (byte)52, (byte)105, (byte) (-1), (byte) (-25)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)52, (byte)105, (byte) (-1), (byte) (-25)}, byteArray1);
      assertNotNull(byteArray1);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('^');
      assertNotNull(character0);
      assertEquals('^', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('^');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('^', (char)character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.insert((int) 0, characterArray0, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3272.2698F;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short) (-7);
      shortArray0[2] = (short) (-19);
      Short short0 = new Short((short)5);
      assertNotNull(short0);
      assertEquals((short)5, (short)short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3272.2698F;
      ArrayUtils.shift(doubleArray0, (int) (short) (-19), 86, (int) (byte)57);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3272.269775390625}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 3272.2698F);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3272.269775390625}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)57, (int) (short)5);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 1927.9F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {1927.9F, 1927.9F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 3818L;
      longArray0[1] = 31L;
      longArray0[2] = 1L;
      longArray0[3] = 3818L;
      longArray0[4] = 1L;
      longArray0[5] = (-3633L);
      longArray0[6] = 1L;
      longArray0[7] = 1L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {3818L, 31L, 1L, 3818L, 1L, (-3633L), 1L, 1L}, longArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1441);
      shortArray0[1] = (short)1638;
      shortArray0[2] = (short)43;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1441), (short)1638, (short)43}, shortArray0);
      assertNotNull(shortArray1);
      
      MockRandom mockRandom0 = new MockRandom((short)1638);
      assertNotNull(mockRandom0);
      
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyShort() , anyShort());
      boolean boolean1 = ArrayUtils.isSorted(shortArray1, comparator0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1441), (short)1638, (short)43}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3209;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1927.9F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3209.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf((Object[]) byteArray0, (Object) bitSet0, (int) (short) (-1441));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, byteArray0.length);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3209.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[1] = 55.60661F;
      floatArray0[2] = 0.13478534F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-3987.04F);
      floatArray0[5] = 963.9813F;
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 1.0F);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(floatArray0, (-1), (-1), 2373);
      assertEquals(10, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 55.60661F, 0.13478534F, 1.0F, (-3987.04F), 963.9813F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2615;
      shortArray0[1] = (short)3499;
      shortArray0[2] = (short) (-829);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)1421;
      shortArray0[5] = (short)68;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1421);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)2615, (short)3499, (short) (-829), (short)2, (short)1421, (short)68}, shortArray0);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)99);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (short)1540;
      floatArray0[2] = (-1626.0F);
      floatArray0[3] = 124.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-512.3F), (-4471));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1540.0F, (-1626.0F), 124.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1424;
      shortArray0[1] = (short)1424;
      shortArray0[2] = (short)1424;
      shortArray0[3] = (short)99;
      shortArray0[4] = (short)99;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)2;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)1424, (short)1424, (short)1424, (short)99, (short)99, (short)0, (short)2}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)99;
      longArray0[2] = (long) (short)99;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 99L, 99L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (short)1424);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 99L, 99L, 1424L}, longArray1);
      assertArrayEquals(new long[] {0L, 99L, 99L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1694);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      float[] floatArray0 = new float[12];
      floatArray0[1] = (float) Integer.MAX_VALUE;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 2990);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      Character character0 = new Character(']');
      assertNotNull(character0);
      assertEquals(']', (char)character0);
      
      String string0 = ArrayUtils.toString((Object) character0);
      assertNotNull(string0);
      assertEquals("]", string0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-717.0F);
      floatArray0[1] = 4254.19F;
      floatArray0[2] = 87.0F;
      floatArray0[3] = 853.3F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 4254.19F, (-74));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-717.0F), 4254.19F, 87.0F, 853.3F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)34;
      shortArray0[1] = (short)1;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)34, (short)1}, shortArray0);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = Integer.valueOf(2);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1136));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-1136), (int)integer1);
      
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2, (-1136)}, intArray0);
      assertNotNull(intArray0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)34, (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short)34, (short)1}, shortArray0);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 2873);
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Short short0 = new Short((short)1533);
      assertNotNull(short0);
      assertEquals((short)1533, (short)short0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = Character.valueOf('n');
      assertNotNull(character0);
      assertEquals('n', (char)character0);
      
      characterArray0[1] = character0;
      Character character1 = Character.valueOf('P');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('P', (char)character1);
      
      characterArray0[2] = character1;
      Character character2 = new Character('a');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('a', (char)character2);
      
      characterArray0[3] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'I');
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'I', 'n', 'P', 'a'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1088L;
      longArray0[2] = 0L;
      longArray0[4] = 1088L;
      longArray0[5] = 3818L;
      longArray0[6] = 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 3818L);
      assertEquals("{5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1088L, 0L, 0L, 0L, 1088L, 3818L, 1L}, longArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 1L;
      doubleArray1[2] = (double) 1L;
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = (double) 3818L;
      doubleArray1[5] = (double) 1088L;
      doubleArray1[6] = (double) 0L;
      doubleArray1[7] = (double) 0L;
      doubleArray1[8] = (double) 1L;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, (double[]) null);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 3818.0, 1088.0, 0.0, 0.0, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 3818.0, 1088.0, 0.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '/');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '/';
      intArray0[1] = (int) '/';
      intArray0[2] = (int) '/';
      intArray0[3] = (int) '/';
      intArray0[4] = (int) '/';
      intArray0[5] = 108;
      intArray0[6] = (int) '/';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {47, 47, 47, 47, 47, 108, 47}, intArray0);
      assertArrayEquals(new int[] {47, 47, 47, 47, 47, 108, 47}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(byteArray2, (-1), (int) (byte)14, (-1));
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray3 = ArrayUtils.removeElement(byteArray2, (byte)0);
      assertNotSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray3.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray3);
      assertNotSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray3.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray4 = ArrayUtils.nullToEmpty(byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray4);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray4.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertNotNull(byteArray4);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotNull(objectArray1);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      
      ArrayUtils.swap(byteArray0, (-1073741824), (int) (byte) (-20), (int) (byte)14);
      assertNotSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1293);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-3529);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)14;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1293), 1);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1293), 0, (-3529), 0, 14}, intArray0);
      assertEquals(0, int0);
      
      ArrayUtils.reverse(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {14, 0, (-3529), 0, (-1293)}, intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)14;
      shortArray0[1] = (short) (byte)14;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)14;
      shortArray0[4] = (short) (byte) (-20);
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte) (-20);
      shortArray0[8] = (short) (byte)14;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)14, (short)14, (short)0, (short)14, (short) (-20), (short)0, (short)0, (short) (-20), (short)14}, shortArray1);
      assertArrayEquals(new short[] {(short)14, (short)14, (short)0, (short)14, (short) (-20), (short)0, (short)0, (short) (-20), (short)14}, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1194);
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)0, (double) (short)0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      ArrayUtils.swap(shortArray0, 1175, (-3339), (-3339));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1194), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (short)0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (short) (-1194);
      doubleArray2[1] = (double) (short)0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'T');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'T'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.shift((int[]) null, (int) (short)0, 4482, (int) (short)0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-1194);
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      ArrayUtils.swap(shortArray0, 1175, (-3339), (-3339));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1194), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (short) (-1194);
      doubleArray2[1] = (double) (short)0;
      char[] charArray0 = new char[0];
      ArrayUtils.shift((int[]) null, (int) (short)0, 4482, (int) (short)0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-1194);
      int int0 = ArrayUtils.indexOf(longArray0, (long) (-3339), 239);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1194L)}, longArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[7];
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      Character character0 = new Character('6');
      assertNotNull(character0);
      assertEquals('6', (char)character0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double double0 = new Double(1921);
      assertNotNull(double0);
      assertEquals(1921.0, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-240L);
      doubleArray0[1] = 2199.9215574;
      doubleArray0[2] = (double) 1921;
      doubleArray0[3] = (double) (-240L);
      doubleArray0[5] = (double) (-240L);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = 2199.9215574;
      Double double1 = new Double(4744.287658476557);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(4744.287658476557, (double)double1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameType(double0, double1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      
      byte byte0 = (byte) (-101);
      Byte byte1 = new Byte((byte) (-101));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-101), (byte)byte1);
      
      Boolean boolean1 = Boolean.valueOf("Okh|E");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(boolean1, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 1927.9F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)967;
      shortArray0[1] = (short) (-4376);
      shortArray0[2] = (short)5;
      shortArray0[3] = (short) (-1966);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)967, (short) (-4376), (short)5, (short) (-1966)}, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)967;
      short[] shortArray3 = ArrayUtils.subarray(shortArray2, (int) (short)967, (int) (short)967);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertEquals(1, shortArray2.length);
      assertEquals(0, shortArray3.length);
      assertArrayEquals(new short[] {(short)967}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray3);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertNotNull(shortArray3);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray1 = ArrayUtils.subarray((float[]) null, (-1150), (int) (short)967);
      assertNull(floatArray1);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (short)967, (int) (short)967);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)5;
      doubleArray0[1] = (double) 1927.9F;
      doubleArray0[2] = (double) (-1150);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 1039L;
      boolean boolean2 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {5.0, 1927.9000244140625, (-1150.0), 0.0, 1039.0}, doubleArray0, 0.01);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = ArrayUtils.indexOf((float[]) null, 59.0F);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 59.0F;
      intArray0[1] = 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray2, (double) 1.0F, 36);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray3.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1;
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) (short)1;
      doubleArray4[1] = (double) (short)1;
      doubleArray4[2] = (double) (-1);
      doubleArray4[3] = 2223.3029895;
      doubleArray4[4] = (double) 36;
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = (double) (short)1;
      ArrayUtils.shift(doubleArray4, (int) (short)1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertEquals(7, doubleArray4.length);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, (-1.0), 2223.3029895, 36.0, 0.0}, doubleArray4, 0.01);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 36;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {36L, 0L, 0L}, longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1116.872378251227));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (-1.0F));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      charArray0[5] = 'w';
      ArrayUtils.swap(charArray0, (-545), (-739), 196);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {' ', ' ', ' ', ' ', ' ', 'w'}, charArray0);
      
      ArrayUtils.reverse(doubleArray0, 3333, (-739));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1L));
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      MutableInt mutableInt0 = new MutableInt(14);
      assertEquals((byte)14, mutableInt0.byteValue());
      assertEquals(14, (int)mutableInt0.getValue());
      assertEquals(14, (int)mutableInt0.toInteger());
      assertEquals("14", mutableInt0.toString());
      assertEquals(14.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)14, mutableInt0.shortValue());
      assertEquals(14.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(14L, mutableInt0.longValue());
      assertEquals(14, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(0);
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      MutableInt mutableInt2 = new MutableInt(mutableInt0);
      assertEquals((byte)14, mutableInt0.byteValue());
      assertEquals(14, (int)mutableInt0.getValue());
      assertEquals(14, (int)mutableInt0.toInteger());
      assertEquals("14", mutableInt0.toString());
      assertEquals(14.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)14, mutableInt0.shortValue());
      assertEquals(14.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(14L, mutableInt0.longValue());
      assertEquals(14, mutableInt0.intValue());
      assertEquals("14", mutableInt2.toString());
      assertEquals(14, mutableInt2.intValue());
      assertEquals(14.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(14L, mutableInt2.longValue());
      assertEquals(14.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((short)14, mutableInt2.shortValue());
      assertEquals((byte)14, mutableInt2.byteValue());
      assertEquals(14, (int)mutableInt2.getValue());
      assertEquals(14, (int)mutableInt2.toInteger());
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertNotNull(mutableInt2);
      
      MutableInt[] mutableIntArray0 = new MutableInt[6];
      mutableIntArray0[0] = mutableInt2;
      mutableIntArray0[1] = mutableInt1;
      mutableIntArray0[2] = mutableInt1;
      MutableInt mutableInt3 = new MutableInt(mutableInt2);
      assertEquals((byte)14, mutableInt0.byteValue());
      assertEquals(14, (int)mutableInt0.getValue());
      assertEquals(14, (int)mutableInt0.toInteger());
      assertEquals("14", mutableInt0.toString());
      assertEquals(14.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)14, mutableInt0.shortValue());
      assertEquals(14.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(14L, mutableInt0.longValue());
      assertEquals(14, mutableInt0.intValue());
      assertEquals("14", mutableInt2.toString());
      assertEquals(14, mutableInt2.intValue());
      assertEquals(14.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(14L, mutableInt2.longValue());
      assertEquals(14.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((short)14, mutableInt2.shortValue());
      assertEquals((byte)14, mutableInt2.byteValue());
      assertEquals(14, (int)mutableInt2.getValue());
      assertEquals(14, (int)mutableInt2.toInteger());
      assertEquals(14, (int)mutableInt3.toInteger());
      assertEquals(14, (int)mutableInt3.getValue());
      assertEquals("14", mutableInt3.toString());
      assertEquals(14.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals((byte)14, mutableInt3.byteValue());
      assertEquals(14L, mutableInt3.longValue());
      assertEquals((short)14, mutableInt3.shortValue());
      assertEquals(14.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(14, mutableInt3.intValue());
      assertTrue(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertNotNull(mutableInt3);
      
      mutableIntArray0[3] = mutableInt3;
      mutableIntArray0[4] = mutableInt1;
      int int0 = mutableInt1.getAndAdd(0);
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertNotSame(mutableInt1, mutableInt3);
      assertNotSame(mutableInt1, mutableInt2);
      assertNotSame(mutableInt1, mutableInt0);
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(0, int0);
      
      int int1 = mutableInt0.getAndAdd((Number) mutableInt1);
      assertEquals((byte)14, mutableInt0.byteValue());
      assertEquals(14, (int)mutableInt0.getValue());
      assertEquals(14, (int)mutableInt0.toInteger());
      assertEquals("14", mutableInt0.toString());
      assertEquals(14.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)14, mutableInt0.shortValue());
      assertEquals(14.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(14L, mutableInt0.longValue());
      assertEquals(14, mutableInt0.intValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt3);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt1, mutableInt3);
      assertNotSame(mutableInt1, mutableInt2);
      assertNotSame(mutableInt1, mutableInt0);
      assertTrue(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt0.equals((Object)mutableInt3));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      mutableIntArray0[5] = mutableInt0;
      MutableInt[] mutableIntArray1 = ArrayUtils.addAll(mutableIntArray0, mutableIntArray0);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertEquals(12, mutableIntArray1.length);
      assertEquals(6, mutableIntArray0.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1360);
      intArray0[2] = 0;
      intArray0[3] = 196;
      intArray0[4] = 14;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {0, (-1360), 0, 196, 14}, intArray0);
      assertArrayEquals(new int[] {(-1360), 196, 14}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Float float0 = new Float(2910.665);
      assertNotNull(float0);
      assertEquals(2910.665F, (float)float0, 0.01F);
      
      Object[] objectArray0 = ArrayUtils.addFirst((Object[]) null, (Object) float0);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1927.9F;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 1927.9F;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, (int) (byte)0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1927.9000244140625, 0.0, 0.0, 1927.9000244140625}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1927.9000244140625}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) "java.lang.Long");
      assertNotNull(object0);
      assertEquals("java.lang.Long", object0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, false, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-32);
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      ArrayUtils.shift(byteArray1, (int) (byte) (-32));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Float float0 = new Float(2251.714777711293);
      assertNotNull(float0);
      assertEquals(2251.7148F, (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameType(float0, float0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-32);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte) (-32);
      shortArray0[4] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0, (int) (byte) (-32), (int) (short) (-32));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-32), (short)0, (short)0, (short) (-32), (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2968.3083145;
      doubleArray0[1] = (double) (short) (-32);
      doubleArray0[2] = 2251.714777711293;
      doubleArray0[3] = (double) (byte) (-32);
      doubleArray0[4] = 206.4025;
      doubleArray0[5] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, (int) (byte)0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {2968.3083145, (-32.0), 2251.714777711293, (-32.0), 206.4025, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = 'v';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Z');
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'!', 'v'}, charArray0);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "028;k[x|a>FhUi*=s$l";
      stringArray0[1] = "028;k[x|a>FhUi*=s$l";
      stringArray0[2] = "~a~vRmr9*";
      stringArray0[3] = "~a~vRmr9*";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (int) 4, (int) 4);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-998), (-335));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      ArrayUtils.swap((int[]) null, (-59), (-59), (-59));
      boolean[] booleanArray1 = ArrayUtils.subarray((boolean[]) null, 2683, (-2294));
      assertNull(booleanArray1);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)3;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)122, (byte)2, (byte)3}, byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte)122, (byte)2, (byte)3, (byte)101, (byte)122, (byte)2, (byte)3}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short) (byte)3;
      shortArray0[2] = (short) (byte)101;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)101;
      shortArray0[5] = (short) (byte)122;
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)8, (short)3, (short)101, (short)2, (short)101, (short)122}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean2);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((double) (byte)3);
      assertNotNull(float0);
      assertEquals(3.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (byte)3);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(3.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(2.0F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(2.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-2352.65716));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals((-2352.6572F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(593.96629371739);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      assertEquals(593.9663F, (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((double) (short)3);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotNull(float5);
      assertEquals(3.0F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((double) floatArray0[0]);
      assertEquals(9, floatArray0.length);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotNull(float6);
      assertEquals(3.0F, (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float((float) (short)8);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotNull(float7);
      assertEquals(8.0F, (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      Float float8 = new Float(2968.3083145);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotNull(float8);
      assertEquals(2968.3083F, (float)float8, 0.01F);
      
      floatArray0[8] = float8;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      ArrayUtils.swap((int[]) null, (-59), (-59), (-59));
      boolean[] booleanArray1 = ArrayUtils.subarray((boolean[]) null, (int) '(', (-2294));
      assertNull(booleanArray1);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)3;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)122, (byte)2, (byte)3}, byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte)122, (byte)2, (byte)3, (byte)101, (byte)122, (byte)2, (byte)3}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.swap((int[]) null, (int) (byte)2, (int) (byte)101);
      boolean boolean2 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Byte byte0 = new Byte((byte)43);
      assertNotNull(byte0);
      assertEquals((byte)43, (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)71, (-2294));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotSame(byteArray0, byteArray1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)122, (byte)2, (byte)3}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Character character0 = Character.valueOf('~');
      assertNotNull(character0);
      assertEquals('~', (char)character0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) character0, 1);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)13;
      shortArray0[1] = (short) (-2406);
      shortArray0[2] = (short)1967;
      shortArray0[3] = (short) (-558);
      shortArray0[4] = (short)1967;
      shortArray0[5] = (short) (-3354);
      shortArray0[6] = (short)1967;
      shortArray0[7] = (short)13;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-90), (int) (short) (-2406));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)13, (short) (-2406), (short)1967, (short) (-558), (short)1967, (short) (-3354), (short)1967, (short)13}, shortArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((Object[]) null, (int) (short)1967, 1);
      ArrayUtils.shift((int[]) null, (int) (short) (-2406));
      int int1 = ArrayUtils.indexOf((Object[]) null, (Object) null, 11);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)13, (short) (-2406), (short)1967, (short) (-558), (short)1967, (short) (-3354), (short)1967, (short)13}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = 'v';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Z');
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'!', 'v'}, charArray0);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)4, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'v';
      doubleArray0[1] = (double) 'v';
      doubleArray0[2] = (double) (byte)4;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (byte)0;
      long[] longArray0 = new long[17];
      longArray0[0] = (long) 'v';
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) 'v';
      longArray0[3] = (long) 'Z';
      longArray0[4] = (long) (byte)4;
      longArray0[5] = (long) (byte)0;
      ArrayUtils.shift(longArray0, 971);
      assertEquals(17, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)4);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)4, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, int0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(17, longArray0.length);
      assertEquals(17, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(17, longArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)4;
      shortArray0[3] = (short) (byte)4;
      ArrayUtils.swap(shortArray0, (int) (byte)4, (int) (byte)4);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)4, (short)4}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 495);
      Character character0 = new Character(';');
      assertNotNull(character0);
      assertEquals(';', (char)character0);
      
      Character character1 = new Character(';');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals(';', (char)character1);
      
      Character character2 = new Character(';');
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals(';', (char)character2);
      
      Character character3 = Character.valueOf(']');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals(']', (char)character3);
      
      Character character4 = Character.valueOf('i');
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('i', (char)character4);
      
      Character character5 = new Character(']');
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      assertEquals(']', (char)character5);
      
      Character character6 = new Character('V');
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character0));
      assertNotNull(character6);
      assertEquals('V', (char)character6);
      
      Character character7 = new Character('i');
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character2));
      assertTrue(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character5));
      assertNotNull(character7);
      assertEquals('i', (char)character7);
      
      Character character8 = new Character('2');
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character2));
      assertNotNull(character8);
      assertEquals('2', (char)character8);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertNotNull(characterArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1.0);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (-837.363036), 4099.27);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) characterArray1, (Object) character6);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertFalse(int1 == int0);
      assertFalse(character6.equals((Object)character8));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character7));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character0));
      assertEquals(1, int1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-768.9338772614772), (int) character0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertTrue(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character8));
      assertFalse(character0.equals((Object)character5));
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character4));
      assertFalse(character0.equals((Object)character7));
      assertFalse(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character6));
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "028;k[x|a>FhUi*=s$l";
      stringArray0[2] = "The type must not be null";
      stringArray0[3] = "~a~vRmr9*";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4714.444;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1.5;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {4714.444, (-1.0), 1.5}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      MockRandom mockRandom0 = new MockRandom(1510L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      doubleArray0[0] = (double) 'b';
      charArray0[1] = '`';
      charArray0[2] = ']';
      charArray0[3] = '`';
      charArray0[4] = '\\';
      charArray0[5] = 'b';
      charArray0[6] = '`';
      charArray0[7] = '`';
      MockRandom mockRandom1 = new MockRandom(1510L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom1);
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'`', ']', '`', '\\', 'b', '`', '`', '\u0000'}, charArray0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      Float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      Long[] longArray0 = new Long[15];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1370L);
      assertEquals(15, longArray0.length);
      assertEquals(15, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'U';
      charArray0[3] = '.';
      charArray0[4] = ',';
      charArray0[7] = '&';
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '&';
      intArray0[1] = (-1820);
      intArray0[2] = (int) '.';
      intArray0[3] = (int) ',';
      intArray0[4] = (int) '&';
      intArray0[5] = (int) ',';
      intArray0[6] = (int) (byte)45;
      intArray0[7] = (-856);
      intArray0[8] = (int) '.';
      ArrayUtils.swap(intArray0, 0, (-176), (-176));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {38, (-1820), 46, 44, 38, 44, 45, (-856), 46}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 38, (-176));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {38, (-1820), 46, 44, 38, 44, 45, (-856), 46}, intArray0);
      assertFalse(boolean0);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)79);
      assertNotNull(short0);
      assertEquals((short)79, (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)79}, shortArray1);
      assertNotNull(shortArray1);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = (Character) 'U';
      characterArray0[1] = (Character) ',';
      characterArray0[2] = (Character) ',';
      characterArray0[3] = (Character) 'U';
      characterArray0[4] = (Character) 'U';
      characterArray0[5] = (Character) 'U';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'U', ',', ',', 'U', 'U', 'U'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 1927.9F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      short short0 = (short)2;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[3] = (short) (-1404);
      shortArray0[4] = (short)2;
      shortArray0[6] = (short)2;
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short) (-1404);
      shortArray1[1] = (Short) (short)2;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertNotNull(shortArray2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)2;
      floatArray0[0] = 0.0F;
      doubleArray0[2] = (double) (short)2;
      doubleArray0[3] = (double) 1927.9F;
      floatArray0[2] = 0.0F;
      doubleArray0[5] = (double) short0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2.0, 1927.9000244140625, 0.0, 2.0, 2.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      LongStream longStream0 = mockRandom0.longs(1300L, (-116L), 2253L);
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) shortArray2);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 3487;
      intArray0[0] = 3487;
      intArray0[1] = (-537);
      int int1 = 748;
      intArray0[2] = 748;
      long[] longArray0 = new long[2];
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-403);
      shortArray0[2] = (short)19287;
      shortArray0[3] = (short)1305;
      int int2 = ArrayUtils.lastIndexOf(shortArray0, (short)1305, (int) (short)0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-403), (short)19287, (short)1305}, shortArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-403);
      doubleArray0[1] = (double) (-537);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-403.0), (-537.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-403.0), (-537.0), (-403.0), (-537.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (short) (-403));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-403L), 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)42);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int int3 = 68;
      ArrayUtils.shift(doubleArray1, (-1), 462, 68);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-403.0), (-537.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-403.0), (-537.0), (-403.0), (-537.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom(5798L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs(84L, (long) 748, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 53.0F;
      floatArray0[1] = 974.0F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {53.0F, 974.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {53.0F, 974.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {53.0F, 974.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean0);
      
      boolean[] booleanArray2 = new boolean[5];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = false;
      boolean[] booleanArray3 = ArrayUtils.subarray(booleanArray2, 1, 1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertEquals(5, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = (double) 53;
      ArrayUtils.shift(doubleArray0, (-3010), 53, 53);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 0.0, 53.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-1);
      ArrayUtils.swap(shortArray0, (int) (byte) (-17), 53, (-3010));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) 53;
      floatArray0[2] = (float) 53;
      floatArray0[3] = (float) 53;
      floatArray0[4] = (float) 53;
      floatArray0[5] = (float) (short) (-1);
      floatArray0[6] = (float) 53;
      floatArray0[7] = (float) (short) (-1);
      int int0 = ArrayUtils.indexOf(floatArray0, 2463.0F);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 53.0F, 53.0F, 53.0F, 53.0F, (-1.0F), 53.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {53.0, 0.0, 53.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {53.0, 0.0, 53.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1);
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      Long long0 = Long.valueOf((long) (short) (-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Object[] objectArray0 = new Object[0];
      Integer integer0 = new Integer(53);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(53, (int)integer0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, (-2199));
      assertEquals(0, objectArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-678L);
      longArray0[1] = (-678L);
      longArray0[0] = 0L;
      ArrayUtils.swap(longArray0, (-2795), (-2795), (-2795));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, (-678L), 0L}, longArray0);
      
      ArrayUtils.swap(longArray0, 3, (-2795), (-2795));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, (-678L), 0L}, longArray0);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      Long long0 = Long.valueOf((long) 3);
      assertNotNull(long0);
      assertEquals(3L, (long)long0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) long0, (-2795));
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[19];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 1, 45, 3727);
      assertEquals(19, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1995;
      shortArray0[1] = (short) (-1045);
      shortArray0[2] = (short)1995;
      shortArray0[3] = (short)1995;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)1995;
      doubleArray0[1] = (double) (short)1995;
      doubleArray0[2] = (double) 1;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 45);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1995.0, 1995.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1995.0, 1995.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.swap(booleanArray1, (-762), (int) (short)1995, (int) (short) (-1045));
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'A';
      charArray0[2] = '~';
      charArray0[3] = 'h';
      charArray0[4] = ':';
      boolean boolean2 = ArrayUtils.isEmpty(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'i', 'A', '~', 'h', ':'}, charArray0);
      assertFalse(boolean2);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[1];
      ArrayUtils.shift(charArray0, (-503));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int[] intArray0 = new int[10];
      intArray0[0] = (int) 'r';
      intArray0[0] = (int) '\u0000';
      intArray0[2] = (-503);
      intArray0[3] = (-503);
      intArray0[4] = (int) '\u0000';
      ArrayUtils.shift(intArray0, 15, (-503), 923);
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-503), (-503), 0, 0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[2];
      intArray0[4] = 15;
      doubleArray0[1] = (double) 923;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2, (double) 15);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 923.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 923.0, 15.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)128;
      shortArray0[2] = (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-939), 2);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)128, (short)1, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'r', (-1431));
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, (int) (short)3074);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, 14);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-95), (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '?';
      charArray0[2] = 'E';
      charArray0[3] = 's';
      charArray0[4] = 'w';
      charArray0[5] = 'n';
      charArray0[6] = 'b';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'7', '?', 'E', 's', 'w', 'n', 'b'}, charArray0);
      assertArrayEquals(new char[] {'7', '?', 'E', 's', 'w', 'n', 'b'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) '7';
      objectArray0[1] = (Object) (byte)0;
      ArrayUtils.swap(objectArray0, (int) (byte)0, 0, 91);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1927.9F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      ArrayUtils.swap((Object[]) floatArray1, 0, 4, (-3720));
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1927.9F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      MutableInt mutableInt0 = new MutableInt(1927.9F);
      assertEquals("1927", mutableInt0.toString());
      assertEquals(1927L, mutableInt0.longValue());
      assertEquals(1927, (int)mutableInt0.getValue());
      assertEquals(1927, (int)mutableInt0.toInteger());
      assertEquals(1927.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1927.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-121), mutableInt0.byteValue());
      assertEquals((short)1927, mutableInt0.shortValue());
      assertEquals(1927, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = (double) 53;
      ArrayUtils.shift(doubleArray0, (-3010), 53, 53);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 0.0, 53.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-1);
      ArrayUtils.swap(shortArray0, (int) (byte) (-17), 53, (-3010));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-3010);
      ArrayUtils.shift(intArray0, 1940);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-3010)}, intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-17);
      byteArray0[7] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (-3010));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)0, (byte)0, (byte) (-17), (byte) (-1), (byte) (-17), (byte)0}, byteArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'U';
      charArray0[3] = '.';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('G');
      assertNotNull(character0);
      assertEquals('G', (char)character0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'U';
      intArray0[1] = (int) 'U';
      intArray0[2] = (int) 'G';
      intArray0[3] = (int) 'U';
      intArray0[4] = (int) '.';
      intArray0[5] = (int) '*';
      intArray0[6] = (int) 'G';
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1293));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {85, 85, 71, 85, 46, 42, 71}, intArray0);
      assertArrayEquals(new int[] {85, 85, 71, 85, 46, 42, 71}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.subarray(intArray1, 7, 4);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertEquals(0, intArray2.length);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {85, 85, 71, 85, 46, 42, 71}, intArray0);
      assertArrayEquals(new int[] {85, 85, 71, 85, 46, 42, 71}, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      
      ArrayUtils.shift(intArray1, (-1515));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {85, 85, 71, 85, 46, 42, 71}, intArray0);
      assertArrayEquals(new int[] {85, 46, 42, 71, 85, 85, 71}, intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1, 0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(bitSet0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = new Boolean("The Array must not be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("VNA(n>8zh`(6N");
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 0;
      longArray0[6] = 0L;
      longArray0[7] = (long) 1;
      longArray0[8] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-2147483648L));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L, 1L, 0L, 0L, 1L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L, 1L, 0L, 0L, 1L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 2113929216);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.subarray(intArray1, 2113929216, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = ArrayUtils.indexOf((float[]) null, 59.0F);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 59.0F;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.subarray(intArray1, 0, 3123);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      
      ArrayUtils.shift(intArray0, 320);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      
      Float float0 = new Float((float) (short)24);
      assertNotNull(float0);
      assertEquals(24.0F, (float)float0, 0.01F);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)4;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-877), 2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-18), (byte)4, (byte)4, (byte) (-63), (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-18), (byte)4}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isSameType(float0, float0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)4;
      floatArray0[1] = (float) (byte)4;
      floatArray0[2] = (float) 2;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {4.0F, 2.0F, 4.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3482;
      intArray0[1] = (-537);
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {3482, (-537), 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)5260;
      shortArray0[1] = (short) (-694);
      shortArray0[2] = (short)5260;
      shortArray0[3] = (short) (-3990);
      shortArray0[4] = (short)5260;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)5260, 7);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)5260, (short) (-694), (short)5260, (short) (-3990), (short)5260}, shortArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = (-1797);
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-1797));
      assertNull(intArray0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.addAll(characterArray0, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, (-1797), Integer.MIN_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1797, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      String string0 = "F";
      Boolean boolean1 = Boolean.valueOf("F");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("F");
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      try { 
        Double.valueOf("F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 7.0F;
      floatArray0[1] = (-3313.0F);
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 61.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {7.0F, (-3313.0F), Float.NaN, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {7.0F, (-3313.0F), Float.NaN, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byte byte0 = (byte)27;
      byteArray0[1] = (byte)27;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[22];
      charArray0[0] = 'T';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'T';
      doubleArray0[1] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 100.0, 1279, (-1.0));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {84.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte) (-117);
      Byte byte1 = new Byte((byte) (-117));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-117), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-117));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-117), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte) (-117), (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      assertEquals((byte) (-117), (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      assertEquals((byte) (-117), (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte0);
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      assertEquals((byte) (-117), (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte(byte0);
      assertTrue(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte1));
      assertNotNull(byte7);
      assertEquals((byte) (-117), (byte)byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte(byte0);
      assertTrue(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte4));
      assertTrue(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte2));
      assertNotNull(byte8);
      assertEquals((byte) (-117), (byte)byte8);
      
      byteArray0[7] = byte8;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-117));
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-117), (byte) (-117), (byte) (-117), (byte) (-117), (byte) (-117), (byte) (-117), (byte) (-117)}, byteArray1);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2146659448, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146659448, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 'b';
      charArray0[4] = 'a';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'4', 'a', 'a', 'b', 'a'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'b';
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1L));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {98L}, longArray0);
      assertFalse(boolean0);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) 'a';
      intArray1[1] = 0;
      intArray1[2] = (int) 'a';
      intArray1[3] = (int) 'a';
      intArray1[4] = (int) 'b';
      intArray1[5] = (int) 'a';
      intArray1[6] = (int) 'a';
      intArray1[7] = 0;
      intArray1[8] = (int) '4';
      ArrayUtils.swap(intArray1, (-1), 0);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {97, 0, 97, 97, 98, 97, 97, 0, 52}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 52;
      objectArray0[1] = (Object) 97;
      objectArray0[2] = (Object) '4';
      objectArray0[3] = (Object) 'a';
      objectArray0[4] = (Object) 0;
      objectArray0[5] = (Object) 0;
      MutableInt[] mutableIntArray0 = new MutableInt[4];
      try { 
        Byte.valueOf(" in an array of ", 3604);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 3604 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte byte0 = (byte)28;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)41, (int) (byte)0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)28}, byteArray0);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)28);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('w');
      assertNotNull(character0);
      assertEquals('w', (char)character0);
      
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '.');
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'.', 'w', '.'}, charArray0);
      assertNotNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-1491);
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)2;
      intArray0[5] = (int) (short) (-1491);
      intArray0[6] = 1993;
      intArray0[7] = (int) (short) (-1491);
      ArrayUtils.swap(intArray0, (int) (short) (-1491), 2, (int) (short)0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, (-1491), 0, 0, 2, (-1491), 1993, (-1491)}, intArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)2;
      Object object0 = ArrayUtils.get(objectArray0, 6);
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '1');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertNotNull(charArray0);
      
      ArrayUtils.swap(objectArray0, 1971, (int) (short)0);
      assertEquals(3, objectArray0.length);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[10];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 3487);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(11, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      MutableInt mutableInt0 = new MutableInt((Number) (short)0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndDecrement();
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals(0, int0);
      
      MutableInt mutableInt1 = new MutableInt();
      assertEquals(0L, mutableInt1.longValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      int int1 = mutableInt0.getAndAdd((Number) mutableInt1);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameType(mutableInt0, boolean0);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertNotSame(mutableInt0, mutableInt1);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(boolean1);
      
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      ArrayUtils.reverse(longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-268L));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-268.0), (-268.0), 0.0, (-268.0), (-268.0), (-268.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-268.0), (-268.0), 0.0, (-268.0), (-268.0), (-268.0)}, doubleArray1, 0.01);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 321;
      intArray0[1] = (-563);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-39);
      ArrayUtils.shift(byteArray0, 321);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)65, (byte) (-123), (byte) (-123)}, byteArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte) (-123));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      ArrayUtils.shift((Object[]) doubleArray0, 321);
      assertEquals(6, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) (-268L), 2132.8671);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-268.0), (-268.0), 0.0, (-268.0), (-268.0), (-268.0)}, doubleArray1, 0.01);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3272.2698F;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short)27;
      shortArray0[2] = (short) (-19);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-67);
      ArrayUtils.shift(byteArray0, 0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9, (byte)8, (byte)27, (byte)8, (byte) (-92), (byte)18, (byte) (-67)}, byteArray0);
      
      ArrayUtils.shift(floatArray0, (-393), 1672, (int) (short) (-19));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1927.9F, 3272.2698F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'a';
      charArray0[2] = '*';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'b', 'a', '*'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) 'b';
      longArray0[3] = (long) '*';
      boolean boolean1 = ArrayUtils.contains(longArray0, 1L);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {2147483647L, 2147483647L, 98L, 42L, 0L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'a', (-1777));
      assertNotSame(charArray0, charArray1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'b', 'a', '*'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-588);
      shortArray0[1] = (short) (-436);
      shortArray0[2] = (short) (-937);
      shortArray0[3] = (short) (-1397);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-588), (short) (-436), (short) (-937), (short) (-1397)}, shortArray0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte)4, (byte)4, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-588), (short) (-436), (short) (-937), (short) (-1397)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-588), (short) (-436), (short) (-937), (short) (-1397), (short) (-588), (short) (-436), (short) (-937), (short) (-1397)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray1, (Object) null);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte)4, (byte)4, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (int) (short) (-1397));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1397, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'v';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Z');
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'v'}, charArray0);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)4, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'v';
      doubleArray0[1] = (double) 'v';
      doubleArray0[2] = (double) (byte)4;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (byte)0;
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)4, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-588);
      shortArray0[1] = (short) (-436);
      ArrayUtils.shift((long[]) null, 971);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)33;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)36, (int) (short) (-436));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)103, (byte)36, (byte)33}, byteArray0);
      assertEquals((-1), int0);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertEquals(2, int0);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(1185L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1185L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(2723L);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(2723L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(1);
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertNotNull(long4);
      assertEquals(1L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((long) longArray0[0]);
      assertEquals(7, longArray0.length);
      assertFalse(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long4));
      assertNotNull(long5);
      assertEquals(1L, (long)long5);
      
      longArray0[5] = long5;
      longArray0[6] = longArray0[5];
      Long[] longArray1 = ArrayUtils.insert(1, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(14, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertEquals(2, int0);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean2);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(1185L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1185L, (long)long2);
      
      longArray0[2] = long2;
      long[] longArray1 = new long[2];
      longArray1[0] = (long) longArray0[1];
      longArray1[1] = (long) longArray0[2];
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {1L, 1185L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      short short0 = (short)7;
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)7;
      doubleArray0[1] = (double) (short)7;
      doubleArray0[2] = (-405.8128482190596);
      doubleArray0[3] = (double) (-1186);
      doubleArray0[4] = (double) (-1186);
      doubleArray0[5] = (double) (-1186);
      doubleArray0[6] = (double) (-1186);
      doubleArray0[7] = (double) (-1186);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1186), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1186, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-44);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte)98;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte) (-1), (byte) (-8), (byte)65, (byte)9, (byte) (-85), (byte)98}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.swap(byteArray0, (int) (byte)0, (int) (byte) (-8), (-1));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte) (-1), (byte) (-8), (byte)65, (byte)9, (byte) (-85), (byte)98}, byteArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean2 = ArrayUtils.isSorted(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) (byte)91;
      doubleArray0[2] = (double) (byte)65;
      doubleArray0[3] = (double) (byte)65;
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (byte) (-85);
      boolean boolean3 = ArrayUtils.contains(doubleArray0, (-2819.241), 1452.0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 91.0, 65.0, 65.0, (-1.0), (-85.0)}, doubleArray0, 0.01);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3987.04F);
      floatArray0[1] = 53.96274F;
      floatArray0[2] = 0.13478534F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-3987.04F);
      floatArray0[5] = 963.9813F;
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 1.0F);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(floatArray0, (-1), (-1), 2373);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-3987.04F), 53.96274F, 0.13478534F, 1.0F, (-3987.04F), 963.9813F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Double[] doubleArray0 = new Double[12];
      Double double0 = new Double((-4521.304286724299));
      assertNotNull(double0);
      assertEquals((-4521.304286724299), (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      Double double1 = new Double((-4521.304286724299));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-4521.304286724299), (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(12, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-4521.304286724299), (double)double2, 0.01);
      
      doubleArray0[4] = double2;
      Double double3 = new Double(19.716295293968958);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals(19.716295293968958, (double)double3, 0.01);
      
      doubleArray0[5] = doubleArray0[2];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, 0);
      assertEquals(12, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '`';
      charArray0[2] = 'j';
      char[] charArray1 = ArrayUtils.add(charArray0, 'j');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '`', 'j'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '`', 'j', 'j'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) doubleArray0[1];
      doubleArray1[1] = 2719.0849;
      doubleArray1[2] = (double) 'j';
      doubleArray1[3] = (double) doubleArray0[2];
      doubleArray1[4] = (double) '`';
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (-746.2));
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-4521.304286724299), 2719.0849, 106.0, (-4521.304286724299), 96.0}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'j';
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-1);
      ArrayUtils.swap(floatArray0, 0, (-1), (-1));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {106.0F, (-1.0F), 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      Float[] floatArray1 = ArrayUtils.removeElements((Float[]) null, (Float[]) null);
      assertNull(floatArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {106.0F, (-1.0F), 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 2873);
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = 's';
      charArray0[4] = 'w';
      charArray0[5] = '_';
      charArray0[6] = 's';
      charArray0[7] = '_';
      charArray0[8] = 'w';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ',', 2873);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'_', '_', '_', 's', 'w', '_', 's', '_', 'w'}, charArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)489;
      shortArray0[2] = (short) (-189);
      shortArray0[3] = (short)20469;
      shortArray0[4] = (short)1;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)8, (short)489, (short) (-189), (short)20469, (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short)8, (short)489, (short) (-189), (short)20469, (short)1}, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1116.872378251227));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'a';
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-1));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {97L}, longArray0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("s.BIN75[:;nothstore ");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean("s.BIN75[:;nothstore ");
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (-1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {97L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      org.evosuite.runtime.Random.setNextRandom(0);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 0, (-2426.089878351));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1116.872378251227));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'a';
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-1));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {97L}, longArray0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("s.BIN75[:;nothstore ");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean("7LR+<Ecxb0qe4Venv");
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray1);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (-1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {97L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)91);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      org.evosuite.runtime.Random.setNextRandom(0);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 0, (-2426.089878351));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-678L);
      longArray0[1] = (-678L);
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, 42, 42, Integer.MAX_VALUE);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-678L), (-678L), 0L}, longArray0);
      
      ArrayUtils.swap(longArray0, (-9), Integer.MAX_VALUE, 42);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-678L), (-678L), 0L}, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) (-678L);
      Long long0 = Long.valueOf((long) (-9));
      assertNotNull(long0);
      assertEquals((-9L), (long)long0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) long0, 42);
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      float[] floatArray0 = new float[12];
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[4] = (float) 0L;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (-1512));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt mutableInt0 = new MutableInt(0L);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.subtract((Number) 0.0F);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(0L);
      assertEquals("0", mutableInt1.toString());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt1.byteValue());
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      mutableIntArray0[1] = mutableInt1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-127), mutableIntArray0, mutableIntArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -127, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Long long0 = new Long(96L);
      assertNotNull(long0);
      assertEquals(96L, (long)long0);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = new Long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = long0;
      longArray1[1] = long0;
      longArray1[2] = long0;
      longArray1[3] = long0;
      longArray1[4] = long0;
      longArray1[5] = long0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1407), longArray0, longArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1407, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1533);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1533)}, shortArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 0.0, 15);
      assertEquals((-1), int0);
      
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short) (-1533);
      shortArray1[1] = (Short) (short) (-1533);
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-1533), (short) (-1533)}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      short[] shortArray3 = ArrayUtils.subarray(shortArray2, (-2890), 120);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertEquals(2, shortArray3.length);
      assertArrayEquals(new short[] {(short) (-1533), (short) (-1533)}, shortArray2);
      assertArrayEquals(new short[] {(short) (-1533), (short) (-1533)}, shortArray3);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertNotNull(shortArray3);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2890);
      intArray0[1] = (int) (short)shortArray1[0];
      intArray0[2] = (int) (short)shortArray1[0];
      intArray0[3] = (int) (short) (-1533);
      intArray0[4] = (int) (short)shortArray1[0];
      intArray0[5] = 15;
      intArray0[6] = 15;
      intArray0[7] = 135;
      intArray0[8] = (-2890);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-118));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-2890), (-1533), (-1533), (-1533), (-1533), 15, 15, 135, (-2890)}, intArray0);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((double) shortArray1[1]);
      assertEquals(2, shortArray1.length);
      assertNotNull(float0);
      assertEquals((-1533.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-27.2813719961));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-27.281372F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(32.15487319252);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(32.154873F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(266.959343350101);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals(266.95935F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-1932.548F));
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals((-1932.548F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float(1957.030511);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotNull(float5);
      assertEquals(1957.0305F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(120, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 1927.9F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (-1392);
      shortArray0[2] = (short)20;
      shortArray0[3] = (short) (-1392);
      shortArray0[4] = (short)20;
      floatArray0[2] = (float) (short) (-1392);
      shortArray0[6] = (short)0;
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short) (-1392);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1392.0F);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) (-1392), (int) (short)0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, 0.0, (-1392.0)}, doubleArray0, 0.01);
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotNull(longArray1);
      
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 4);
      Class<Long> class0 = Long.class;
      classArray0[0] = class0;
      Class<Long> class1 = Long.class;
      classArray0[1] = class1;
      Class<Long> class2 = Long.class;
      classArray0[2] = class2;
      Class<Long> class3 = Long.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      assertNotNull(classArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte) (-113));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Long long0 = new Long(1061L);
      assertNotNull(long0);
      assertEquals(1061L, (long)long0);
      
      int int1 = (-40);
      int int2 = 4326;
      long long1 = 1179L;
      Long long2 = Long.valueOf(1179L);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(1179L, (long)long2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Long[]) null, (-3576), (Long) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 39;
      doubleArray0[1] = 2478.21;
      ArrayUtils.shift(doubleArray0, 190, 39, 2683);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {39.0, 2478.21, 0.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {39.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 39.0, 1.5);
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(1, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {39.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {39.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {39.0, 2478.21, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      ArrayUtils.swap((short[]) null, (int) (byte)90, (int) (byte) (-17), 2683);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte) (-17);
      floatArray0[1] = (float) 1175;
      floatArray0[2] = (float) (byte) (-17);
      floatArray0[3] = (float) 2683;
      floatArray0[4] = (float) (-3339);
      floatArray0[5] = (float) (byte) (-17);
      floatArray0[6] = (float) (byte)90;
      floatArray0[7] = (float) (byte)90;
      floatArray0[8] = (float) (byte)90;
      int int0 = ArrayUtils.indexOf(floatArray0, (-1101.319F));
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-17.0F), 1175.0F, (-17.0F), 2683.0F, (-3339.0F), (-17.0F), 90.0F, 90.0F, 90.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {39.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {39.0, 2478.21, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = ArrayUtils.addAll(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {39.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {39.0, 2478.21, 0.0, 39.0, 2478.21, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {39.0, 2478.21, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 3456.8, 23);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {39.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[23];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(23, booleanArray0.length);
      assertEquals(3, int0);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, 3, 1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) boolean1;
      objectArray0[2] = (Object) boolean1;
      boolean boolean4 = ArrayUtils.isSameLength(objectArray0, (Object[]) shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertEquals(3, objectArray0.length);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(boolean4);
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, (-1150), 3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1039L;
      longArray0[1] = (long) 1;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 15851L, 401);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1039L, 1L}, longArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1039L;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (-411.3);
      boolean boolean5 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0, 1039.0, 1.0, 1.0, 1.0, (-411.3)}, doubleArray0, 0.01);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1116.872378251227));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'a';
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-1));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {97L}, longArray0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("s.B|I75[:;rY");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean("7LR+<Ecxb0qe4Venv");
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), (-1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {97L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)91;
      shortArray0[1] = (short) (byte)91;
      shortArray0[2] = (short) (byte)91;
      shortArray0[3] = (short) (byte)91;
      shortArray0[4] = (short) (byte)91;
      shortArray0[5] = (short) (byte)91;
      shortArray0[6] = (short) (byte)91;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)91, (short)91, (short)91, (short)91, (short)91, (short)91, (short)91}, shortArray0);
      assertArrayEquals(new short[] {(short)91, (short)91, (short)91, (short)91, (short)91, (short)91, (short)91}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-678L);
      longArray0[1] = (-678L);
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, (-1), (-1), Integer.MAX_VALUE);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-678L), (-678L), 0L}, longArray0);
      
      float[] floatArray0 = new float[12];
      longArray0[1] = (long) (-1);
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) (-678L);
      floatArray0[4] = (float) (-1L);
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, 'S', (-1));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, (-1512));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, Integer.MAX_VALUE, (-1), Integer.MAX_VALUE);
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, Integer.MAX_VALUE);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      ArrayUtils.shift(floatArray0, Integer.MAX_VALUE, (-1), (-1));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      Long long0 = new Long(15851L);
      assertNotNull(long0);
      assertEquals(15851L, (long)long0);
      
      Long long1 = Long.getLong("", (Long) null);
      assertNull(long1);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, Integer.MAX_VALUE);
      assertEquals(6, objectArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      int int1 = ArrayUtils.indexOf(doubleArray0, 2245.6358586, 2145997830);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 2.147483647E9}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-2097L);
      longArray0[1] = 1058L;
      longArray0[2] = 83L;
      longArray0[3] = 3818L;
      longArray0[4] = 1452L;
      longArray0[5] = 545L;
      int int0 = 1122;
      ArrayUtils.shift(longArray0, 1122, 4457, (-616));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-2097L), 1058L, 83L, 3818L, 1452L, 545L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert(1114111, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-58.4);
      doubleArray0[1] = (double) 3818L;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 401.722252045548);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-58.4), 3818.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-58.4), 3818.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray1, (-1295), (-58.4));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1295, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 4;
      longArray0[1] = (-1380L);
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1380L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4L;
      doubleArray0[2] = (-828.6783718);
      doubleArray0[3] = (double) (-1380L);
      doubleArray0[4] = (double) 4L;
      doubleArray0[5] = (double) 893L;
      doubleArray0[6] = (double) (-1380L);
      doubleArray0[7] = (double) 4;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1380.0), 4, (-828.6783718));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {4.0, 4.0, (-828.6783718), (-1380.0), 4.0, 893.0, (-1380.0), 4.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(5, longArray1.length);
      assertEquals(4, longArray2.length);
      assertArrayEquals(new long[] {4L, (-1380L)}, longArray0);
      assertArrayEquals(new long[] {(-1380L), 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 32);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[22];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'T');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(22, charArray0.length);
      assertEquals(23, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = (long) 'T';
      charArray0[12] = 'T';
      longArray0[3] = (long) 'T';
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1L, 84L, 0L, 84L}, longArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 974;
      intArray0[1] = (int) 'T';
      ArrayUtils.swap(intArray0, 974, 5, 2683);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {974, 84}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-2294), 5);
      assertNull(booleanArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {974, 84}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 12);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1954);
      intArray0[2] = 0;
      intArray0[4] = (-1);
      intArray0[5] = 0;
      intArray0[6] = 12;
      intArray0[7] = 0;
      intArray0[8] = 12;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, (-1954), 0, 0, (-1), 0, 12, 0, 12}, intArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2263, 0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1491);
      shortArray0[3] = (short)97;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)97;
      longArray0[1] = (long) (short) (-1491);
      longArray0[2] = (long) (short)27;
      longArray0[3] = (long) (short)97;
      longArray0[5] = (long) (short)2;
      longArray0[5] = (long) (short)97;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 97L);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {97L, (-1491L), 27L, 97L, 0L, 97L}, longArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "028;k[x|a>FhUi*=s$l";
      stringArray0[2] = "The type must no be ull";
      stringArray0[3] = "";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (-253), 6);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 6, 6);
      assertNull(doubleArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      Character[] characterArray0 = new Character[9];
      Character character0 = Character.valueOf('+');
      assertNotNull(character0);
      assertEquals('+', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = ' ';
      Character character1 = Character.valueOf(' ');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals(' ', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('2');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('2', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(' ');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals(' ', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf(char0);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals(' ', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf(' ');
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertNotNull(character5);
      assertEquals(' ', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('V');
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character0));
      assertNotNull(character6);
      assertEquals('V', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character(':');
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character4));
      assertNotNull(character7);
      assertEquals(':', (char)character7);
      
      characterArray0[7] = character7;
      Character character8 = Character.valueOf('[');
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)char0));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character3));
      assertNotNull(character8);
      assertEquals('[', (char)character8);
      
      characterArray0[8] = character8;
      Character character9 = new Character(char0);
      assertFalse(character9.equals((Object)character2));
      assertTrue(character9.equals((Object)character1));
      assertFalse(character9.equals((Object)character7));
      assertTrue(character9.equals((Object)character5));
      assertTrue(character9.equals((Object)character3));
      assertFalse(character9.equals((Object)character0));
      assertFalse(character9.equals((Object)character8));
      assertTrue(character9.equals((Object)character4));
      assertFalse(character9.equals((Object)character6));
      assertTrue(character9.equals((Object)char0));
      assertNotNull(character9);
      assertEquals(' ', (char)character9);
      
      Character character10 = ArrayUtils.get(characterArray0, (int) char0, character9);
      assertEquals(9, characterArray0.length);
      assertFalse(character9.equals((Object)character2));
      assertTrue(character9.equals((Object)character1));
      assertFalse(character9.equals((Object)character7));
      assertTrue(character9.equals((Object)character5));
      assertTrue(character9.equals((Object)character3));
      assertFalse(character9.equals((Object)character0));
      assertFalse(character9.equals((Object)character8));
      assertTrue(character9.equals((Object)character4));
      assertFalse(character9.equals((Object)character6));
      assertTrue(character9.equals((Object)char0));
      assertFalse(character10.equals((Object)character8));
      assertTrue(character10.equals((Object)character4));
      assertTrue(character10.equals((Object)character5));
      assertTrue(character10.equals((Object)char0));
      assertTrue(character10.equals((Object)character3));
      assertFalse(character10.equals((Object)character2));
      assertFalse(character10.equals((Object)character6));
      assertFalse(character10.equals((Object)character7));
      assertFalse(character10.equals((Object)character0));
      assertTrue(character10.equals((Object)character1));
      assertNotNull(character10);
      assertEquals(' ', (char)character10);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) stringArray0, (Object) character10);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, objectArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, characterArray0.length);
      assertEquals(9, objectArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(character9.equals((Object)character2));
      assertTrue(character9.equals((Object)character1));
      assertFalse(character9.equals((Object)character7));
      assertTrue(character9.equals((Object)character5));
      assertTrue(character9.equals((Object)character3));
      assertFalse(character9.equals((Object)character0));
      assertFalse(character9.equals((Object)character8));
      assertTrue(character9.equals((Object)character4));
      assertFalse(character9.equals((Object)character6));
      assertTrue(character9.equals((Object)char0));
      assertFalse(character10.equals((Object)character8));
      assertTrue(character10.equals((Object)character4));
      assertTrue(character10.equals((Object)character5));
      assertTrue(character10.equals((Object)char0));
      assertTrue(character10.equals((Object)character3));
      assertFalse(character10.equals((Object)character2));
      assertFalse(character10.equals((Object)character6));
      assertFalse(character10.equals((Object)character7));
      assertFalse(character10.equals((Object)character0));
      assertTrue(character10.equals((Object)character1));
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      short[] shortArray0 = new short[3];
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)41, 56);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)28}, byteArray0);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)28);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (short)0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Character[] characterArray0 = new Character[3];
      char char0 = 'N';
      Character character0 = Character.valueOf('N');
      assertNotNull(character0);
      assertEquals('N', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('w');
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('w', (char)character1);
      
      characterArray0[1] = character1;
      char char1 = ';';
      Character character2 = Character.valueOf(';');
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals(';', (char)character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '.');
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'N', 'w', ';'}, charArray0);
      assertNotNull(charArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) character2;
      objectArray0[1] = (Object) char1;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)28;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) character1;
      objectArray0[6] = (Object) char0;
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) character2);
      assertEquals(7, objectArray0.length);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)41, (int) (byte)0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)28}, byteArray0);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)28);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('w');
      assertNotNull(character0);
      assertEquals('w', (char)character0);
      
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '.');
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'.', 'w', '.'}, charArray0);
      assertNotNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      short[] shortArray0 = new short[2];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      Character[] characterArray0 = new Character[2];
      char char0 = 'K';
      Character character0 = Character.valueOf('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = (Character) char0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '+');
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'K', 'K'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-594);
      shortArray0[2] = (short)0;
      shortArray0[0] = (short) (-1397);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1397), (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-594);
      intArray0[3] = (int) (short)0;
      shortArray0[2] = (short)0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-594);
      doubleArray0[1] = 0.1;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 994.2558045, (double) 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-594.0), 0.1}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short) (-436);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) (short) (-436);
      floatArray0[8] = (float) (short) (-1397);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 94, 644);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-436.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-436.0F), (-1397.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1397), (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-594);
      longArray0[1] = 2147483647L;
      longArray0[2] = 864L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-594);
      longArray0[5] = (long) (short) (-1397);
      longArray0[6] = (long) (short) (-1397);
      longArray0[7] = (long) (short) (-594);
      longArray0[8] = (long) (short) (-1397);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 2147483647L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {2147483647L, (-594L), 2147483647L, 864L, 0L, (-594L), (-1397L), (-1397L), (-594L), (-1397L)}, longArray1);
      assertArrayEquals(new long[] {(-594L), 2147483647L, 864L, 0L, (-594L), (-1397L), (-1397L), (-594L), (-1397L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-1241));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((long[]) null, 2791L);
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      bitSet1.clear();
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      bitSet1.andNot(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Short short0 = new Short((short)7);
      assertNotNull(short0);
      assertEquals((short)7, (short)short0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)7;
      floatArray0[1] = (float) 2791L;
      floatArray0[2] = (float) 2791L;
      int int1 = ArrayUtils.indexOf(floatArray0, (float) 2791L);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {7.0F, 2791.0F, 2791.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (-810.495), 64);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 2478.21;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)75;
      byteArray0[8] = (byte) (-120);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)83;
      longArray0[1] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {83L, 0L}, longArray0);
      assertNotNull(bitSet0);
      
      ArrayUtils.reverse(longArray0, (int) (byte)0, 860);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 83L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-561), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -561, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1116.872378251227));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-250);
      shortArray0[1] = (short)5540;
      shortArray0[2] = (short)101;
      shortArray0[3] = (short)54;
      shortArray0[4] = (short) (-4282);
      shortArray0[5] = (short)45;
      ArrayUtils.reverse(shortArray0, (int) (short)45, (int) (short)54);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-250), (short)5540, (short)101, (short)54, (short) (-4282), (short)45}, shortArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'l';
      charArray0[2] = '@';
      charArray0[3] = 'W';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      ArrayUtils.shift(charArray0, (int) (short) (-250), 54, 17);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'l', '@', 'W', 'l', 'l', '@'}, charArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-250);
      floatArray0[1] = (float) (short)45;
      floatArray0[2] = (float) '@';
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) '@';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-250.0F), 45.0F, 64.0F, (-1.0F), 64.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      
      Float float0 = new Float((float) (short)24);
      assertNotNull(float0);
      assertEquals(24.0F, (float)float0, 0.01F);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)4;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-877), 2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-18), (byte)4, (byte)4, (byte) (-63), (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-18), (byte)4}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shift(byteArray0, 64);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte) (-63), (byte)4, (byte) (-18)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      boolean boolean0 = ArrayUtils.isSameType(float0, float0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)4;
      doubleArray0[1] = (double) (-469);
      doubleArray0[2] = (double) (byte) (-63);
      doubleArray0[3] = (double) (byte) (-18);
      doubleArray0[4] = (double) (short)24;
      doubleArray0[5] = (double) (byte) (-18);
      doubleArray0[6] = (double) (byte) (-18);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) (-469);
      double[] doubleArray1 = ArrayUtils.insert((-469), doubleArray0, (double[]) null);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {4.0, (-469.0), (-63.0), (-18.0), 24.0, (-18.0), (-18.0), 0.0, (-469.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4.0, (-469.0), (-63.0), (-18.0), 24.0, (-18.0), (-18.0), 0.0, (-469.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "028;k[x|a>FhUi*=s$l";
      stringArray0[2] = "The type must not be null";
      stringArray0[3] = "~a~vRmr9*";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4714.444;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1.5;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {4714.444, (-1.0), 1.5}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      MockRandom mockRandom0 = new MockRandom(1481L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[8];
      doubleArray0[0] = (double) 'b';
      charArray0[1] = '`';
      charArray0[2] = ']';
      charArray0[3] = '`';
      charArray0[4] = 'h';
      charArray0[5] = 'b';
      charArray0[6] = '`';
      charArray0[7] = '`';
      MockRandom mockRandom1 = new MockRandom(1481L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom1);
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'`', ']', '`', 'h', 'b', '`', '`', '\u0000'}, charArray0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray1);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1370L);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Double[] doubleArray0 = new Double[12];
      Double double0 = new Double((-4521.304286724299));
      assertNotNull(double0);
      assertEquals((-4521.304286724299), (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      Double double1 = new Double((-4521.304286724299));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-4521.304286724299), (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(12, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-4521.304286724299), (double)double2, 0.01);
      
      doubleArray0[4] = double2;
      Double double3 = new Double(19.716295293968958);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(19.716295293968958, (double)double3, 0.01);
      
      doubleArray0[5] = doubleArray0[2];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, 0);
      assertEquals(12, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '`';
      charArray0[2] = 'j';
      char[] charArray1 = ArrayUtils.add(charArray0, 'j');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '`', 'j'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '`', 'j', 'j'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) doubleArray0[1];
      doubleArray1[1] = 2719.0849;
      doubleArray1[2] = (double) 'j';
      doubleArray1[3] = (double) doubleArray0[2];
      doubleArray1[4] = (double) '`';
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (-746.2));
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-4521.304286724299), 2719.0849, 106.0, (-4521.304286724299), 96.0}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'j';
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-1);
      ArrayUtils.swap(floatArray0, 0, (-1), (-1));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {106.0F, (-1.0F), 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) '`';
      longArray0[1] = (long) '`';
      longArray0[2] = (long) 'j';
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) '`';
      longArray0[5] = (-1759L);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) '`';
      longArray0[8] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {96L, 96L, 106L, (-1L), 96L, (-1759L), (-1L), 96L}, longArray1);
      assertArrayEquals(new long[] {96L, 96L, 106L, (-1L), 96L, (-1759L), (-1L), 96L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (-1396);
      intArray0[4] = (int) (short)0;
      ArrayUtils.swap(intArray0, 401, (-1027), 0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, (-1396), 0, 0, 0}, intArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) 0;
      objectArray0[3] = (Object) (-1396);
      Object object0 = ArrayUtils.get(objectArray0, 4);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      objectArray0[4] = null;
      objectArray0[5] = (Object) (short)0;
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = ']';
      charArray0[2] = '(';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '(');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'(', '%', ']', '('}, charArray1);
      assertArrayEquals(new char[] {'%', ']', '('}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.shift(intArray0, 7, (-1027), (-2351));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, (-1396), 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) ']';
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 0;
      ArrayUtils.shift(doubleArray0, (-1396), 0, (-1596));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {93.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '%';
      floatArray0[1] = (float) (-1396);
      floatArray0[2] = 2.0F;
      floatArray0[3] = (float) (-1396);
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) (short)0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {37.0F, (-1396.0F), 2.0F, (-1396.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-97);
      intArray0[1] = (int) (byte) (-97);
      intArray0[2] = (int) (byte) (-97);
      intArray0[3] = (int) (byte) (-97);
      intArray0[4] = (int) (byte) (-97);
      intArray0[5] = (int) (byte) (-97);
      intArray0[6] = (int) (byte) (-97);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {(-97), (-97), (-97), (-97), (-97), (-97), (-97)}, intArray0);
      assertArrayEquals(new int[] {(-97), (-97), (-97), (-97), (-97), (-97), (-97)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.subarray(intArray0, (-1966), 223);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray2.length);
      assertArrayEquals(new int[] {(-97), (-97), (-97), (-97), (-97), (-97), (-97)}, intArray0);
      assertArrayEquals(new int[] {(-97), (-97), (-97), (-97), (-97), (-97), (-97)}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 14;
      intArray0[1] = 0;
      intArray0[2] = (-1251);
      intArray0[3] = 2764;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {14, 0, (-1251), 2764}, intArray0);
      assertNotNull(integerArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1825);
      shortArray0[1] = (short) (-1307);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)1322;
      shortArray0[4] = (short)17;
      shortArray0[5] = (short)6215;
      shortArray0[6] = (short)19;
      shortArray0[7] = (short)10;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1825), (short) (-1307), (short)2, (short)1322, (short)17, (short)6215, (short)19, (short)10}, shortArray0);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(shortArray0, (int) (short)1322, 3142, (-2146883958));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1825), (short) (-1307), (short)2, (short)1322, (short)17, (short)6215, (short)19, (short)10}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayUtils.shift(longArray0, (-1954), (-1954), (-1954));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) (-1954);
      doubleArray0[2] = (double) 4;
      doubleArray0[4] = (double) 4;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1290.9201636), (-1517.091801939));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(22, doubleArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) 4.0;
      objectArray0[2] = (Object) 4.0;
      objectArray0[3] = (Object) 4.0;
      objectArray0[4] = (Object) 4.0;
      objectArray0[5] = (Object) bitSet0;
      objectArray0[6] = (Object) 4.0;
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      Character character0 = Character.valueOf('~');
      assertNotNull(character0);
      assertEquals('~', (char)character0);
      
      boolean[] booleanArray0 = ArrayUtils.insert(4, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)68;
      shortArray0[1] = (short)322;
      shortArray0[2] = (short)905;
      shortArray0[3] = (short)5;
      shortArray0[4] = (short) (-1251);
      shortArray0[5] = (short) (-3366);
      shortArray0[6] = (short) (-80);
      shortArray0[7] = (short) (-2745);
      ArrayUtils.shift(shortArray0, (int) (short) (-1251), (int) (short)68, (int) (short) (-80));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)68, (short)322, (short)905, (short)5, (short) (-1251), (short) (-3366), (short) (-80), (short) (-2745)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 495);
      Character character0 = new Character(';');
      assertNotNull(character0);
      assertEquals(';', (char)character0);
      
      Character character1 = new Character('g');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('g', (char)character1);
      
      Character character2 = new Character('g');
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('g', (char)character2);
      
      Character character3 = Character.valueOf(']');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals(']', (char)character3);
      
      Character character4 = Character.valueOf('i');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('i', (char)character4);
      
      Character character5 = new Character(']');
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertNotNull(character5);
      assertEquals(']', (char)character5);
      
      Character character6 = new Character('V');
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character0));
      assertNotNull(character6);
      assertEquals('V', (char)character6);
      
      Character character7 = new Character('i');
      assertFalse(character7.equals((Object)character1));
      assertTrue(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character0));
      assertNotNull(character7);
      assertEquals('i', (char)character7);
      
      Character character8 = new Character('2');
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character2));
      assertNotNull(character8);
      assertEquals('2', (char)character8);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertNotNull(characterArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1.0);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (-837.363036), 4099.27);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, false);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1533);
      Character[] characterArray0 = new Character[9];
      Character character0 = Character.valueOf(';');
      assertNotNull(character0);
      assertEquals(';', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = 'i';
      Character character1 = new Character('i');
      assertTrue(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('i', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character1);
      assertTrue(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertNotNull(character2);
      assertEquals('i', (char)character2);
      
      characterArray0[2] = character2;
      char char1 = '{';
      Character character3 = Character.valueOf('{');
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('{', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('i');
      assertFalse(character4.equals((Object)char1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character1));
      assertNotNull(character4);
      assertEquals('i', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('{');
      assertTrue(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)char1));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertNotNull(character5);
      assertEquals('{', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('=');
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)char1));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character3));
      assertNotNull(character6);
      assertEquals('=', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character('{');
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character0));
      assertTrue(character7.equals((Object)char1));
      assertTrue(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character1));
      assertTrue(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character4));
      assertNotNull(character7);
      assertEquals('{', (char)character7);
      
      characterArray0[7] = character7;
      Character character8 = new Character(char1);
      assertFalse(character8.equals((Object)char0));
      assertFalse(character8.equals((Object)character4));
      assertTrue(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character2));
      assertTrue(character8.equals((Object)char1));
      assertFalse(character8.equals((Object)character6));
      assertTrue(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character0));
      assertTrue(character8.equals((Object)character5));
      assertFalse(char1 == char0);
      assertNotNull(character8);
      assertEquals('{', (char)character8);
      
      characterArray0[8] = character8;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, characterArray1.length);
      assertNotNull(characterArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 3008.7);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) character2, (double) char0);
      assertFalse(char0 == char1);
      assertFalse(character1.equals((Object)character3));
      assertTrue(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character7));
      assertFalse(character1.equals((Object)char1));
      assertFalse(character1.equals((Object)character5));
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character4));
      assertFalse(character1.equals((Object)character8));
      assertFalse(character1.equals((Object)character6));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character2.equals((Object)character8));
      assertFalse(character2.equals((Object)character6));
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character4));
      assertFalse(character2.equals((Object)character7));
      assertFalse(character2.equals((Object)char1));
      assertFalse(character2.equals((Object)character5));
      assertFalse(character2.equals((Object)character3));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean2 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) char1;
      floatArray0[1] = (float) (short) (-1533);
      floatArray0[2] = (float) '=';
      floatArray0[3] = (float) (char)character1;
      floatArray0[4] = (float) (char)character6;
      floatArray0[5] = (float) (char)character5;
      floatArray0[6] = (float) ';';
      floatArray0[7] = (float) (char)character6;
      floatArray0[8] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) character8);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1533.0F), 61.0F, 105.0F, 61.0F, 59.0F, 61.0F, (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {123.0F, (-1533.0F), 61.0F, 105.0F, 61.0F, 123.0F, 59.0F, 61.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(character8.equals((Object)char0));
      assertFalse(character8.equals((Object)character4));
      assertTrue(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character2));
      assertTrue(character8.equals((Object)char1));
      assertFalse(character8.equals((Object)character6));
      assertTrue(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character0));
      assertTrue(character8.equals((Object)character5));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(char1 == char0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1969);
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)0, (double) (short)0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      ArrayUtils.swap(shortArray0, 1175, (-3339), (-3339));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1969), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 1175;
      floatArray0[2] = (float) (short)0;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (short)0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1175.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (short) (-1969);
      doubleArray2[1] = (double) (short)0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0.0F;
      doubleArray2[4] = (double) 1175.0F;
      double[] doubleArray3 = ArrayUtils.clone(doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray3.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {(-1969.0), 0.0, 0.0, 0.0, 1175.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-1969.0), 0.0, 0.0, 0.0, 1175.0}, doubleArray2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray4.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(doubleArray4);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'b');
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      ArrayUtils.swap(doubleArray3, 1175, (int) (short)0, (-1));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray3.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {(-1969.0), 0.0, 0.0, 0.0, 1175.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-1969.0), 0.0, 0.0, 0.0, 1175.0}, doubleArray2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1533);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1533)}, shortArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 0.0, 15);
      assertEquals((-1), int0);
      
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short) (-1533);
      shortArray1[1] = (Short) (short) (-1533);
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-1533), (short) (-1533)}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      short[] shortArray3 = ArrayUtils.subarray(shortArray2, (-2890), 120);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertEquals(2, shortArray3.length);
      assertArrayEquals(new short[] {(short) (-1533), (short) (-1533)}, shortArray2);
      assertArrayEquals(new short[] {(short) (-1533), (short) (-1533)}, shortArray3);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertNotNull(shortArray3);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2890);
      intArray0[1] = (int) (short)shortArray1[0];
      intArray0[2] = (int) (short)shortArray1[0];
      intArray0[3] = (int) (short) (-1533);
      intArray0[4] = (int) (short)shortArray1[0];
      intArray0[5] = 15;
      intArray0[6] = 15;
      intArray0[7] = 135;
      intArray0[8] = (-2890);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-118));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-2890), (-1533), (-1533), (-1533), (-1533), 15, 15, 135, (-2890)}, intArray0);
      assertNotNull(bitSet0);
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, (long) (-2890));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-440), 330);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-1241));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((long[]) null, 2791L);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1241);
      intArray0[1] = (-1241);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-327));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1241), (-1241)}, intArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1241);
      doubleArray0[1] = (double) 2791L;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1241.0), 2791.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1241.0), 2791.0, (-1241.0), 2791.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MockRandom mockRandom0 = new MockRandom((-1241));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1241), (-1241)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1194);
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)0, (double) (short)0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      ArrayUtils.swap(shortArray0, 1175, (-3339), (-3339));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1194), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 1175;
      floatArray0[2] = (float) (short)0;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (short)0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1175.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (short) (-1194);
      doubleArray2[1] = (double) (short)0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0.0F;
      doubleArray2[4] = (double) 1175.0F;
      double[] doubleArray3 = ArrayUtils.clone(doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray3.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {(-1194.0), 0.0, 0.0, 0.0, 1175.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-1194.0), 0.0, 0.0, 0.0, 1175.0}, doubleArray2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray4.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(doubleArray4);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)102;
      int int2 = ArrayUtils.indexOf(byteArray0, (byte)102);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)54, (byte)102}, byteArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayUtils.shift(longArray0, 4, 4, 4);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-274);
      doubleArray0[1] = (double) (-274);
      doubleArray0[2] = (double) 4;
      doubleArray0[4] = (double) (-274);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1290.9201636), (-1517.091801939));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-274.0), (-274.0), 4.0, 0.0, (-274.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[0];
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2, 83.0);
      assertNotSame(doubleArray3, doubleArray0);
      assertSame(doubleArray3, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-274);
      floatArray0[1] = (-1080.9426F);
      floatArray0[2] = (float) (-274);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-274.0F), 1822);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-274.0F), (-1080.9426F), (-274.0F)}, floatArray0, 0.01F);
      assertEquals(2, int0);
      
      int int1 = ArrayUtils.indexOf((short[]) null, (short)3593, 2378);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertEquals(3, int0);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, 3, 1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) boolean1;
      objectArray0[2] = (Object) boolean1;
      boolean boolean4 = ArrayUtils.isSameLength(objectArray0, (Object[]) shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertEquals(3, objectArray0.length);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(boolean4);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 3;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 3;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      boolean boolean5 = ArrayUtils.isSorted(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, (-1L), 3L, 1L, 3L, 1L, 1L}, longArray0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
      
      ArrayUtils.reverse(intArray0, 1, 3);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 3L;
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) 1L;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0, 3.0, (-1.0), 1.0, (-1.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 3.0, (-1.0), 1.0, (-1.0), 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 3;
      longArray0[1] = (-1377L);
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1377L);
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('P');
      assertNotNull(character0);
      assertEquals('P', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertNotNull(charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.shift(booleanArray0, 3);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3272.2698F;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short)27;
      shortArray0[2] = (short) (-19);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1178, 1073741824);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)5, (short)27, (short) (-19)}, shortArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)37;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-35));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-35), (byte)57, (byte)12, (byte) (-21), (byte)98, (byte)92, (byte)12, (byte)37}, byteArray1);
      assertArrayEquals(new byte[] {(byte)57, (byte)12, (byte) (-21), (byte)98, (byte)92, (byte)12, (byte)37}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('{');
      assertNotNull(character0);
      assertEquals('{', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'{'}, charArray0);
      assertNotNull(charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)92;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (short)5;
      longArray0[3] = (long) '{';
      longArray0[4] = (long) (byte)12;
      longArray0[5] = (long) (short)5;
      longArray0[6] = (long) (short)1178;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {92L, (-1L), 5L, 123L, 12L, 5L, 1178L}, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[11];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(11, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, 3178);
      assertEquals(11, booleanArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 'c';
      int int0 = ArrayUtils.indexOf(charArray0, 'T');
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'W', 'c'}, charArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'T';
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 'W';
      floatArray0[3] = (float) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-1));
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {84.0F, (-1.0F), 87.0F, (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3272.2698F;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short)27;
      shortArray0[2] = (short) (-19);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1178, 1073741824);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)5, (short)27, (short) (-19)}, shortArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)37;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-35));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-35), (byte)57, (byte)12, (byte) (-21), (byte)98, (byte)92, (byte)12, (byte)37}, byteArray1);
      assertArrayEquals(new byte[] {(byte)57, (byte)12, (byte) (-21), (byte)98, (byte)92, (byte)12, (byte)37}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3272.2698F;
      doubleArray0[1] = (double) (short) (-19);
      doubleArray0[2] = (double) 3272.2698F;
      doubleArray0[3] = (double) 3272.2698F;
      doubleArray0[4] = (double) (byte)12;
      doubleArray0[5] = (double) 1073741824;
      doubleArray0[6] = (double) (byte)37;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)12, (int) (byte)98, (-828.6783718));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {3272.269775390625, (-19.0), 3272.269775390625, 3272.269775390625, 12.0, 1.073741824E9, 37.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[1];
      ArrayUtils.shift(charArray0, (-503));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int[] intArray0 = new int[10];
      intArray0[0] = (int) 'r';
      intArray0[0] = (int) '\u0000';
      intArray0[3] = (-503);
      intArray0[4] = (int) '\u0000';
      ArrayUtils.shift(intArray0, 15, 0, (int) 'r');
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, (-503), 0, 0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[2];
      intArray0[4] = 15;
      doubleArray0[1] = (double) (-503);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)128;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)3074;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-939), 2);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)128, (short)1, (short)3074}, shortArray0);
      assertNotNull(bitSet0);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'r';
      int int0 = ArrayUtils.indexOf(charArray1, 'r', (-20));
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'r'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 12);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1954);
      intArray0[2] = 0;
      intArray0[3] = 12;
      intArray0[4] = (-1);
      intArray0[5] = 14;
      intArray0[6] = 14;
      intArray0[7] = 0;
      intArray0[8] = 12;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte) (-4);
      ArrayUtils.reverse(byteArray0, (-1496), 14);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-4), (byte) (-51), (byte)0, (byte) (-4), (byte) (-2)}, byteArray0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) (byte) (-51));
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (int) (byte) (-51));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -51, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[10];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 3487);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(11, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      MutableInt mutableInt0 = new MutableInt((Number) (short)0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndDecrement();
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals(0, int0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameType(mutableInt0, boolean0);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertFalse(boolean1);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-22));
      assertNotNull(byte0);
      assertEquals((byte) (-22), (byte)byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-22)}, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1099;
      intArray0[1] = (-2052);
      int int0 = ArrayUtils.indexOf(intArray0, 2418, 2418);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1099, (-2052)}, intArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-31149);
      shortArray0[2] = (short)0;
      Boolean boolean0 = Boolean.valueOf(";*%Xev'");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2418;
      doubleArray0[1] = (double) (short) (-1);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 2418.0}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = (int) (short) (-1);
      intArray1[2] = (int) (short) (-31149);
      intArray1[3] = (int) (short) (-1);
      intArray1[4] = (-2052);
      intArray1[5] = 2;
      intArray1[6] = (int) (short) (-1);
      intArray1[7] = 512;
      int[] intArray2 = ArrayUtils.addFirst(intArray1, (-1967));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertEquals(9, intArray2.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {(-1967), (-1), (-1), (-31149), (-1), (-2052), 2, (-1), 512}, intArray2);
      assertArrayEquals(new int[] {(-1), (-1), (-31149), (-1), (-2052), 2, (-1), 512}, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1185;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray1, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)1185}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) 2418;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (short)1185);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 2418L}, longArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertEquals(3, int0);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, 3, 1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) boolean1;
      objectArray0[2] = (Object) boolean1;
      boolean boolean4 = ArrayUtils.isSameLength(objectArray0, (Object[]) shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertEquals(3, objectArray0.length);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(boolean4);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, false, 1);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = "S81&i>pm&fD_ 1g";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "S81&i>pm&fD_ 1g");
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Short short0 = new Short((short)1533);
      assertNotNull(short0);
      assertEquals((short)1533, (short)short0);
      
      Short[] shortArray0 = new Short[4];
      shortArray0[1] = short0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)1533;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) (short)1533;
      doubleArray0[3] = (double) (short)1533;
      doubleArray0[4] = (double) (short)shortArray0[1];
      doubleArray0[5] = (double) (short)shortArray0[1];
      doubleArray0[6] = (double) (short)shortArray0[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1533.0, (-1447));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1533.0, (-1.0), 1533.0, 1533.0, 1533.0, 1533.0, 1533.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((int) shortArray0[1]);
      assertEquals(4, shortArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1533, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(6, integerArray0.length);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1533, (int)integer1);
      
      integerArray0[1] = integer1;
      try { 
        Integer.valueOf("\u0007Nb\u0001qt1 R,-H", 3265);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 3265 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3987.04F);
      floatArray0[1] = 53.96274F;
      floatArray0[2] = 0.13478534F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 963.9813F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertArrayEquals(new float[] {(-3987.04F), 53.96274F, 0.13478534F, 1.0F, 1.0F, 963.9813F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[10];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(10, charArray0.length);
      assertEquals(10, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[6] = true;
      ArrayUtils.shift(floatArray0, (-1), (int) (byte)91, 3081);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-3987.04F), 53.96274F, 0.13478534F, 1.0F, 1.0F, 963.9813F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = Long.getLong("", long0);
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      int int1 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) long1, (int) (byte)91);
      assertEquals(10, charArray0.length);
      assertEquals(10, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 53.96274F;
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) 53.96274F, (-1));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 53.96274185180664}, doubleArray0, 0.01);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 13;
      intArray0[3] = 2145813754;
      intArray0[4] = 34;
      ArrayUtils.shift(intArray0, 7);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2145813754, 34, Integer.MAX_VALUE, Integer.MAX_VALUE, 13}, intArray0);
      
      int[] intArray1 = new int[24];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = Integer.MAX_VALUE;
      intArray1[1] = 7;
      intArray1[2] = 13;
      intArray1[3] = 644;
      intArray1[4] = 0;
      int[] intArray2 = ArrayUtils.removeElement(intArray1, 34);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(24, intArray1.length);
      assertEquals(24, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {1, 0}, intArray0);
      assertNotNull(integerArray0);
      
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('z');
      assertNotNull(character0);
      assertEquals('z', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('z', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('z');
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('z', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('5');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('5', (char)character3);
      
      Character character4 = Character.valueOf((char) character0);
      assertFalse(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('z', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('G');
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      assertEquals('G', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf((char) character0);
      assertTrue(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)character2));
      assertFalse(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character4));
      assertFalse(character0.equals((Object)character5));
      assertTrue(character0.equals((Object)character2));
      assertNotNull(character6);
      assertEquals('z', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf('G');
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character1));
      assertNotNull(character7);
      assertEquals('G', (char)character7);
      
      Character character8 = Character.valueOf('2');
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character0));
      assertNotNull(character8);
      assertEquals('2', (char)character8);
      
      characterArray0[8] = character8;
      Character character9 = ArrayUtils.get(characterArray0, 3348);
      assertEquals(9, characterArray0.length);
      assertNull(character9);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) character2);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {1, 0}, intArray0);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character6));
      assertFalse(character2.equals((Object)character8));
      assertFalse(character2.equals((Object)character7));
      assertTrue(character2.equals((Object)character4));
      assertFalse(character2.equals((Object)character5));
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character3));
      assertNotNull(bitSet0);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.toArray(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("java.lang.Character");
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf("java.lang.Character");
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = new Boolean((boolean) boolean0);
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean0.equals((Object)boolean5));
      assertFalse(boolean0.equals((Object)boolean4));
      assertFalse(boolean0.equals((Object)boolean2));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray0[7] = boolean7;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true, false, false}, booleanArray1));
      assertFalse(boolean0.equals((Object)boolean5));
      assertTrue(boolean0.equals((Object)boolean7));
      assertFalse(boolean0.equals((Object)boolean4));
      assertFalse(boolean0.equals((Object)boolean2));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 545;
      intArray0[1] = 1452;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 0;
      intArray0[4] = 0;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 1452;
      longArray0[2] = 189L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) Integer.MAX_VALUE;
      longArray0[6] = (long) 0;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = '>';
      charArray0[2] = '|';
      charArray0[3] = '#';
      charArray0[4] = 'T';
      charArray0[5] = 'd';
      charArray0[6] = 'Z';
      charArray0[7] = 'W';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'W', '>', '|', '#', 'T', 'd', 'Z', 'W'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[14];
      charArray0[0] = 'b';
      charArray0[1] = 'a';
      charArray0[2] = '*';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(14, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) 'b';
      longArray0[3] = (long) '*';
      boolean boolean1 = ArrayUtils.contains(longArray0, 1L);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {2147483647L, 2147483647L, 98L, 42L, 0L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 14, 1936);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-53);
      shortArray0[1] = (short)2324;
      shortArray0[2] = (short) (-1857);
      shortArray0[3] = (short) (-1);
      Double[] doubleArray0 = ArrayUtils.insert(2341, (Double[]) null, (Double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1936;
      longArray0[1] = (long) 1936;
      ArrayUtils.shift(longArray0, (-2145325710), (int) (short)2324, 101);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1936L, 1936L}, longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)109;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)112);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)1, (byte)109}, byteArray1);
      assertArrayEquals(new byte[] {(byte)15, (byte)1, (byte)109}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Double[] doubleArray0 = new Double[12];
      Double double0 = new Double((-4521.304286724299));
      assertNotNull(double0);
      assertEquals((-4521.304286724299), (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      Double double1 = new Double((-4521.304286724299));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-4521.304286724299), (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(12, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-4521.304286724299), (double)double2, 0.01);
      
      doubleArray0[4] = double2;
      Double double3 = new Double(19.716295293968958);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(19.716295293968958, (double)double3, 0.01);
      
      doubleArray0[5] = doubleArray0[2];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, 0);
      assertEquals(12, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '`';
      charArray0[2] = 'j';
      char[] charArray1 = ArrayUtils.add(charArray0, 'j');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '`', 'j'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '`', 'j', 'j'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) doubleArray0[1];
      doubleArray1[1] = 2719.0849;
      doubleArray1[2] = (double) 'j';
      doubleArray1[3] = (double) doubleArray0[2];
      doubleArray1[4] = (double) '`';
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (-746.2));
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-4521.304286724299), 2719.0849, 106.0, (-4521.304286724299), 96.0}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'j';
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-1);
      ArrayUtils.swap(floatArray0, 0, (-1), (-1));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {106.0F, (-1.0F), 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1L));
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      ArrayUtils.shift(doubleArray0, 90, 90, 743);
      assertEquals(16, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, Integer.MAX_VALUE, (-1116.89173468728));
      assertEquals(16, doubleArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 743;
      floatArray0[2] = (float) (-1);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) Integer.MAX_VALUE);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 743.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-717L), 743);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(floatArray0, (-1342), 68);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 743.0F, (-1.0F)}, floatArray0, 0.01F);
      
      Float[] floatArray1 = new Float[9];
      floatArray1[0] = (Float) 0.0F;
      floatArray1[1] = (Float) 743.0F;
      floatArray1[2] = (Float) (-1.0F);
      floatArray1[3] = (Float) (-1.0F);
      floatArray1[4] = (Float) 0.0F;
      Float float0 = new Float((-3247.3463482));
      assertNotNull(float0);
      assertEquals((-3247.3464F), (float)float0, 0.01F);
      
      floatArray1[5] = float0;
      floatArray1[6] = (Float) 0.0F;
      floatArray1[7] = (Float) (-1.0F);
      floatArray1[8] = (Float) 0.0F;
      Float float1 = ArrayUtils.get(floatArray1, 90);
      assertEquals(9, floatArray1.length);
      assertNull(float1);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1342), 743);
      assertEquals(16, doubleArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1116.872378251227));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      int int1 = new Byte((byte)91);
      assertFalse(int1 == int0);
      assertEquals((byte)91, int1);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'a';
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-1));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {97L}, longArray0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("s.BIN75[:;r#");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean("");
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (byte)91, (-1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {97L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayUtils.shift(longArray0, (-1956), (-1956), (-1956));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (-1956);
      doubleArray0[2] = (double) 4;
      doubleArray0[4] = (double) 4;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1290.9201636), (-1517.091801939));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1956.0), 4.0, 0.0, 4.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) 4.0;
      objectArray0[2] = (Object) 4.0;
      objectArray0[3] = (Object) 4.0;
      objectArray0[4] = (Object) 4.0;
      objectArray0[6] = (Object) 4.0;
      objectArray0[7] = (Object) 0.0;
      objectArray0[8] = (Object) (-1956.0);
      ArrayUtils.swap(objectArray0, (-1956), (-4698), 26);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayUtils.shift(longArray0, (-1956), (-1956), (-1956));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) (-1956);
      doubleArray0[2] = (double) 4;
      doubleArray0[4] = (double) 4;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1290.9201636), (-1517.091801939));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {4.0, (-1956.0), 4.0, 0.0, 4.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) 4.0;
      objectArray0[2] = (Object) 4.0;
      objectArray0[3] = (Object) 4.0;
      objectArray0[4] = (Object) 4.0;
      objectArray0[5] = (Object) bitSet0;
      objectArray0[6] = (Object) 4.0;
      objectArray0[7] = (Object) 4.0;
      objectArray0[8] = (Object) (-1956.0);
      ArrayUtils.swap(objectArray0, (-1956), (-4698), 1);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1.0);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals((-1.0), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals((-1.0), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[1]);
      assertEquals(8, doubleArray0.length);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      assertEquals((-1.0), (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(1214.3606313044);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotNull(double6);
      assertEquals(1214.3606313044, (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(427.0);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotNull(double7);
      assertEquals(427.0, (double)double7, 0.01);
      
      doubleArray0[7] = double7;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2385.285259278797));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NaN, (-1.0), 1.0, (-1.0), (-1.0), (-1.0), 1214.3606313044, 427.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertArrayEquals(new double[] {Double.NaN, (-1.0), 1.0, (-1.0), (-1.0), (-1.0), 1214.3606313044, 427.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Es~:h?H8S@OAJV";
      String[] stringArray1 = ArrayUtils.addFirst(stringArray0, "Es~:h?H8S@OAJV");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, 124.0, (-2385.285259278797));
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NaN, (-1.0), 1.0, (-1.0), (-1.0), (-1.0), 1214.3606313044, 427.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (-1182);
      intArray0[2] = (-2145325710);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) doubleArray0[1], intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)112;
      ArrayUtils.reverse(byteArray0, 218, (-337));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)112}, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-31);
      doubleArray0[2] = (double) (short) (-12920);
      doubleArray0[3] = (double) (byte)112;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-12920.0));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-31.0), 0.0, (-12920.0), 112.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, 2146592945);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146592945, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Float float0 = new Float(2910.665);
      assertNotNull(float0);
      assertEquals(2910.665F, (float)float0, 0.01F);
      
      Object[] objectArray0 = ArrayUtils.addFirst((Object[]) null, (Object) float0);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)373;
      shortArray0[2] = (short)1950;
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short)373, (short)1950}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)373, (short)1950, (short) (-1), (short)373, (short)1950}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3487;
      intArray0[1] = (-537);
      intArray0[2] = 748;
      intArray0[3] = 1569;
      intArray0[4] = 122;
      intArray0[5] = 46;
      intArray0[6] = 9;
      intArray0[7] = (-2505);
      Short short0 = new Short((short)15851);
      assertNotNull(short0);
      assertEquals((short)15851, (short)short0);
      
      Short short1 = new Short((short)123);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)123, (short)short1);
      
      Short short2 = new Short((short)132);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short)132, (short)short2);
      
      Short short3 = new Short((short)0);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      assertEquals((short)0, (short)short3);
      
      Short short4 = new Short((short)2);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      assertEquals((short)2, (short)short4);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-543));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 9;
      floatArray0[1] = (float) 3487;
      floatArray0[2] = (float) 1569;
      floatArray0[3] = 885.0F;
      floatArray0[4] = 119.0F;
      floatArray0[5] = (float) 9;
      floatArray0[6] = (float) (short)2;
      floatArray0[7] = (float) 46;
      floatArray0[8] = (float) 748;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {9.0F, 3487.0F, 1569.0F, 885.0F, 119.0F, 9.0F, 2.0F, 46.0F, 748.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short)27;
      shortArray0[2] = (short) (-19);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1178, 1073741824);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)5, (short)27, (short) (-19)}, shortArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)37;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-35));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-35), (byte)57, (byte)12, (byte) (-21), (byte)98, (byte)92, (byte)12, (byte)37}, byteArray1);
      assertArrayEquals(new byte[] {(byte)57, (byte)12, (byte) (-21), (byte)98, (byte)92, (byte)12, (byte)37}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.insert(45, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      org.evosuite.runtime.Random.setNextRandom(7399);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      byte[] byteArray0 = new byte[5];
      intArray0[2] = (int) (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-57);
      byte[] byteArray1 = ArrayUtils.insert(1198, (byte[]) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte) (-78), (byte)111, (byte) (-57)}, byteArray0);
      assertNull(byteArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = 'A';
      charArray0[2] = 'w';
      charArray0[3] = '?';
      charArray0[4] = '6';
      charArray0[5] = 'C';
      charArray0[6] = 'A';
      charArray0[7] = 'M';
      charArray0[8] = 'C';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'t', 'A', 'w', '?', '6', 'C', 'A', 'M', 'C'}, charArray1);
      assertArrayEquals(new char[] {'t', 'A', 'w', '?', '6', 'C', 'A', 'M', 'C'}, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1198;
      doubleArray0[1] = (double) 'A';
      doubleArray0[2] = (double) (byte)111;
      doubleArray0[3] = (-868.2171199999998);
      doubleArray0[4] = (double) 'M';
      doubleArray0[5] = (double) 'A';
      doubleArray0[6] = (double) 'M';
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {1198.0, 65.0, 111.0, (-868.2171199999998), 77.0, 65.0, 77.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1198.0, 65.0, 111.0, (-868.2171199999998), 77.0, 65.0, 77.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((short)1001);
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((short)1001);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1001;
      shortArray0[1] = (short)1001;
      shortArray0[0] = (short)1001;
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)41, 56);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)28}, byteArray0);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)28);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (short)1001);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {1001}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3487;
      intArray0[1] = (-537);
      intArray0[2] = 3487;
      intArray0[4] = 122;
      intArray0[5] = 3487;
      intArray0[6] = 9;
      intArray0[7] = (-2505);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {3487, (-537), 3487, 0, 122, 3487, 9, (-2505)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short)19323;
      shortArray0[1] = (short)19323;
      shortArray0[18] = (short)5260;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3990), 9);
      assertEquals(19, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-1241));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((long[]) null, 2791L);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      bitSet1.clear();
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      bitSet1.andNot(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Short short0 = new Short((short)7);
      assertNotNull(short0);
      assertEquals((short)7, (short)short0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      
      ArrayUtils.shuffle(intArray0, (Random) null);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      Long[] longArray0 = new Long[7];
      long long0 = 1L;
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long(long0);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(1L);
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(1L, (long)long3);
      
      longArray0[2] = long3;
      try { 
        Long.valueOf("byte");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"byte\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(1);
      assertEquals(0, int0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'I';
      charArray0[1] = 'X';
      charArray0[2] = '';
      charArray0[3] = 's';
      charArray0[4] = '*';
      charArray0[5] = 'O';
      charArray0[6] = 'O';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'X', '', 's', '*', 'O', 'O', 'I'}, charArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)115;
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.reverse((double[]) null, (int) (byte)115, (int) (byte)115);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 2004);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 53;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-81), 3);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-17), (byte) (-1), (byte)112, (byte) (-17), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = 3487;
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 3487, (-3173.68));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 3487;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) bitSet0;
      ArrayUtils.swap(objectArray0, (-4698), 1, 3487);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1626);
      intArray0[1] = (-1396);
      intArray0[4] = (int) (short)0;
      ArrayUtils.swap(intArray0, 401, Integer.MAX_VALUE, 0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1626), (-1396), 0, 0, 0}, intArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) 0;
      objectArray0[3] = (Object) (-1396);
      Object object0 = ArrayUtils.get(objectArray0, 4);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      objectArray0[4] = null;
      objectArray0[5] = (Object) (short)0;
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = ']';
      charArray0[2] = '(';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '(');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'(', '%', ']', '('}, charArray1);
      assertArrayEquals(new char[] {'%', ']', '('}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(objectArray0, (-1626), (int) (short)0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1194);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1194);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1555.0), (double) (short)0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1194.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1194.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1194.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      ArrayUtils.swap(shortArray0, 1175, (-3339), (-3339));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1194), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 1175;
      floatArray0[2] = (float) (short)0;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (short)0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1175.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)99);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (short)1540;
      floatArray0[2] = (-1626.0F);
      floatArray0[3] = 124.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-512.3F), (-4471));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1540.0F, (-1626.0F), 124.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1424;
      shortArray0[1] = (short)1424;
      shortArray0[2] = (short)1424;
      shortArray0[3] = (short)99;
      shortArray0[4] = (short)99;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)2;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)1424, (short)1424, (short)1424, (short)99, (short)99, (short)0, (short)2}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)2;
      longArray0[1] = (-2087L);
      longArray0[2] = (long) (short)1540;
      longArray0[3] = (long) (short)99;
      longArray0[4] = (long) (short)1424;
      longArray0[5] = (long) (short)1424;
      longArray0[6] = (long) (-4471);
      longArray0[7] = (long) (short)1424;
      longArray0[8] = (long) (short)99;
      ArrayUtils.shuffle(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-2087L), 1540L, 99L, 1424L, 1424L, (-4471L), 1424L, 99L, 2L}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)7);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(shortArray0, shortArray1);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1424, (short)1424, (short)1424, (short)99, (short)99, (short)0, (short)2}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Long long0 = new Long((-240L));
      assertNotNull(long0);
      assertEquals((-240L), (long)long0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '|';
      charArray0[2] = '-';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '|';
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '-';
      floatArray0[1] = (float) '-';
      floatArray0[2] = (float) (-240L);
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)57);
      assertNotNull(short0);
      assertEquals((short)57, (short)short0);
      
      shortArray0[0] = short0;
      short short1 = (short)6;
      Short short2 = new Short((short)6);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)6, (short)short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short(short1);
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      assertEquals((short)6, (short)short3);
      
      shortArray0[2] = short3;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertNotNull(shortArray1);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-341), (int) (short)6);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'-', '|', '-'}, charArray0);
      assertArrayEquals(new char[] {'-', '|', '-'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.shift(charArray0, 433);
      assertNotSame(charArray0, charArray1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'-', '-', '|'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 12);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1954);
      intArray0[2] = 0;
      intArray0[3] = 12;
      intArray0[4] = (-1);
      intArray0[5] = 14;
      intArray0[6] = 14;
      intArray0[7] = 0;
      intArray0[8] = 12;
      ArrayUtils.swap(intArray0, (-856), (-1), (-1));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, (-1954), 0, 12, (-1), 14, 14, 0, 12}, intArray0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 12, (-1954));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (-1954));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(3, int0);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 1, 45, 3727);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)1995;
      doubleArray0[1] = (double) 3727;
      doubleArray0[2] = (double) (short)1995;
      doubleArray0[3] = 1869.43;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 45, (-1226));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1995.0, 3727.0, 1995.0, 1869.43, 9.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)1995;
      shortArray0[2] = (short)1995;
      shortArray0[3] = (short)7323;
      shortArray0[4] = (short)1995;
      shortArray0[5] = (short)1995;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, 4);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)1995, (short)1995, (short)7323, (short)1995}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)1995, (short)1995, (short)7323, (short)1995, (short)1995}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean boolean2 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1995;
      intArray0[1] = (int) (short)1995;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1995);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {1995, 1995}, intArray0);
      assertArrayEquals(new int[] {1995, 1995, 1995}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)1995, (short)1995, (short)7323, (short)1995}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)1995, (short)1995, (short)7323, (short)1995}, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)1995, (short)1995, (short)7323, (short)1995, (short)1995}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.add((float[]) null, (-1720.3457F));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1720.3457F)}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)42;
      ArrayUtils.shift(byteArray0, 127, (int) (byte)103, (-1336));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)122, (byte)103, (byte)8, (byte) (-47), (byte)81, (byte)110, (byte)42}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, Integer.MAX_VALUE, (-1), Integer.MAX_VALUE);
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      float[] floatArray0 = new float[1];
      ArrayUtils.shift(floatArray0, Integer.MAX_VALUE, (-1), Integer.MAX_VALUE);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Long long0 = new Long(15868L);
      assertNotNull(long0);
      assertEquals(15868L, (long)long0);
      
      Long long1 = Long.getLong("", (Long) null);
      assertNull(long1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2245.6358586, 2145997830);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 2.147483647E9}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1533);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1533)}, shortArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-1533);
      floatArray0[1] = (float) (short) (-1533);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-1533);
      longArray0[1] = (long) (short) (-1533);
      boolean boolean1 = ArrayUtils.contains((char[]) null, '`');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 449, (int) (byte)83);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray1 = ArrayUtils.removeElements((short[]) null, shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1533)}, shortArray0);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1088L;
      longArray0[1] = 0L;
      longArray0[4] = 1088L;
      longArray0[5] = 3818L;
      longArray0[6] = 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 3818L);
      assertEquals("{5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1088L, 0L, 0L, 0L, 1088L, 3818L, 1L}, longArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences((double[]) null, 142.964614);
      assertNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'Y');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte) (-1);
      ArrayUtils.swap(byteArray0, (int) (byte) (-1), 0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)32, (byte)83, (byte) (-119), (byte)110, (byte)52, (byte) (-14), (byte) (-1)}, byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)83;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)83}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1533);
      Character[] characterArray0 = new Character[9];
      char char0 = ';';
      Character character0 = Character.valueOf(';');
      assertNotNull(character0);
      assertEquals(';', (char)character0);
      
      characterArray0[0] = character0;
      char char1 = 'i';
      Character character1 = new Character('i');
      assertTrue(character1.equals((Object)char1));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals('i', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character1);
      assertTrue(character1.equals((Object)char1));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertFalse(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)char1));
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('i', (char)character2);
      
      characterArray0[2] = character2;
      char char2 = '{';
      Character character3 = Character.valueOf('{');
      assertFalse(character3.equals((Object)char1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('{', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('i');
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char0));
      assertNotNull(character4);
      assertEquals('i', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('{');
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)char2));
      assertFalse(character5.equals((Object)char0));
      assertTrue(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)char1));
      assertNotNull(character5);
      assertEquals('{', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('=');
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)char2));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)char1));
      assertNotNull(character6);
      assertEquals('=', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character('{');
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character1));
      assertTrue(character7.equals((Object)char2));
      assertFalse(character7.equals((Object)char0));
      assertTrue(character7.equals((Object)character3));
      assertTrue(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)char1));
      assertNotNull(character7);
      assertEquals('{', (char)character7);
      
      characterArray0[7] = character7;
      Character character8 = new Character(char2);
      assertTrue(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character0));
      assertTrue(character8.equals((Object)character5));
      assertTrue(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)char1));
      assertTrue(character8.equals((Object)char2));
      assertFalse(character8.equals((Object)char0));
      assertFalse(character8.equals((Object)character1));
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      assertNotNull(character8);
      assertEquals('{', (char)character8);
      
      characterArray0[8] = character8;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, characterArray1.length);
      assertNotNull(characterArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 3008.7);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) character2, (double) char1);
      assertFalse(char1 == char0);
      assertFalse(char1 == char2);
      assertTrue(character1.equals((Object)character4));
      assertTrue(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character5));
      assertFalse(character1.equals((Object)char2));
      assertFalse(character1.equals((Object)character3));
      assertTrue(character1.equals((Object)char1));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character7));
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character6));
      assertFalse(character1.equals((Object)character8));
      assertFalse(character2.equals((Object)char2));
      assertFalse(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)char1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character3));
      assertFalse(character2.equals((Object)character7));
      assertFalse(character2.equals((Object)character6));
      assertFalse(character2.equals((Object)character8));
      assertFalse(character2.equals((Object)character5));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character4));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean2 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 1.0, (int) char0, 2887.16825);
      assertFalse(char0 == char1);
      assertFalse(char0 == char2);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-10);
      Long long0 = new Long((short) (-10));
      assertNotNull(long0);
      assertEquals((-10L), (long)long0);
      
      Long long1 = new Long((short)2);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2L, (long)long1);
      
      int int0 = 171;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short) (-10);
      objectArray0[1] = (Object) long0;
      objectArray0[2] = (Object) long0;
      objectArray0[3] = (Object) (short)2;
      objectArray0[4] = (Object) (short) (-10);
      int int1 = (-1226);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3271.5480054811;
      doubleArray0[1] = (double) (-1226);
      doubleArray0[2] = (double) (short) (-10);
      doubleArray0[3] = (double) (short) (-10);
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-10), (int) (short)2);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3271.5480054811, (-1226.0), (-10.0), (-10.0)}, doubleArray0, 0.01);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, int2);
      
      int int3 = 4;
      int int4 = (-2048);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-2048));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2048, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = 3487;
      MutableInt mutableInt0 = new MutableInt(3487);
      assertEquals(3487.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)3487, mutableInt0.shortValue());
      assertEquals((byte) (-97), mutableInt0.byteValue());
      assertEquals(3487, (int)mutableInt0.toInteger());
      assertEquals(3487, (int)mutableInt0.getValue());
      assertEquals(3487.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3487, mutableInt0.intValue());
      assertEquals(3487L, mutableInt0.longValue());
      assertEquals("3487", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(3487);
      assertEquals("3487", mutableInt1.toString());
      assertEquals((byte) (-97), mutableInt1.byteValue());
      assertEquals(3487L, mutableInt1.longValue());
      assertEquals(3487, mutableInt1.intValue());
      assertEquals((short)3487, mutableInt1.shortValue());
      assertEquals(3487, (int)mutableInt1.getValue());
      assertEquals(3487.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(3487.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(3487, (int)mutableInt1.toInteger());
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      Class<MutableInt[]> class0 = MutableInt[].class;
      MutableInt[] mutableIntArray0 = ArrayUtils.nullToEmpty((MutableInt[]) null, class0);
      assertEquals(0, mutableIntArray0.length);
      assertNotNull(mutableIntArray0);
      
      Double[] doubleArray0 = ArrayUtils.insert(692, (Double[]) null, (Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1534.379283241611), 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      ArrayUtils.reverse(longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(4927.799129);
      assertNotNull(double0);
      assertEquals(4927.799129, (double)double0, 0.01);
      
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-268L));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-268.0), (-268.0), 4927.799129, (-268.0), (-268.0), (-268.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-268.0), (-268.0), 4927.799129, (-268.0), (-268.0), (-268.0)}, doubleArray1, 0.01);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 321;
      intArray0[1] = (-563);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-989));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {321, (-563)}, intArray0);
      assertArrayEquals(new int[] {321, (-563)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-39);
      ArrayUtils.shift(byteArray0, 321);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)65, (byte) (-123), (byte) (-71)}, byteArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte) (-123));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 49, 49);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 49;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 49;
      ArrayUtils.reverse(floatArray0, (-1), 2325);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {49.0F, (-1.0F), 49.0F, (-1.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'L';
      charArray0[1] = 'E';
      charArray0[2] = '2';
      charArray0[3] = '?';
      charArray0[4] = 'Y';
      charArray0[5] = 'I';
      charArray0[6] = 'j';
      charArray0[7] = '#';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'p');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'L', 'E', '2', '?', 'Y', 'I', 'j', '#'}, charArray1);
      assertArrayEquals(new char[] {'L', 'E', '2', '?', 'Y', 'I', 'j', '#'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'U';
      charArray0[3] = '.';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('G');
      assertNotNull(character0);
      assertEquals('G', (char)character0);
      
      Character character1 = new Character('*');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('*', (char)character1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(328, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 328, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertEquals(3, int0);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, 3, 1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) boolean1;
      objectArray0[2] = (Object) boolean1;
      boolean boolean4 = ArrayUtils.isSameLength(objectArray0, (Object[]) shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertEquals(3, objectArray0.length);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(boolean4);
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, (-1150), 3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-250);
      shortArray0[1] = (short)5540;
      shortArray0[2] = (short)101;
      float[] floatArray0 = new float[8];
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, (int) (short)5540, (-1028));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(8, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-250), (short)5540, (short)101, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1948L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {1948L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      ArrayUtils.shift((int[]) null, 3167, (-591), 1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1116.872378251227));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-250);
      shortArray0[1] = (short)5540;
      shortArray0[2] = (short)101;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short) (-250), (-1028));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-250), (short)5540, (short)101, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1948L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {1948L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-588);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1397);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-588), (short)0, (short)0, (short) (-1397)}, shortArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-588);
      intArray0[3] = (int) (short)0;
      shortArray0[2] = (short) (-1397);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-588);
      doubleArray0[1] = 0.1;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 994.2558045, (double) 0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-588.0), 0.1}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short) (-436);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (short) (-1397);
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) (short) (-436);
      floatArray0[8] = (float) (short) (-588);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 94, 644);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-436.0F), 0.0F, (-1397.0F), 0.0F, 0.0F, 0.0F, 0.0F, (-436.0F), (-588.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-588), (short)0, (short) (-1397), (short) (-1397)}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-588);
      longArray0[1] = 2147483647L;
      longArray0[2] = 864L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-588);
      longArray0[5] = (long) (short) (-1397);
      longArray0[6] = (long) (short) (-1397);
      longArray0[7] = (long) (short) (-588);
      longArray0[8] = (long) (short) (-588);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 2147483647L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {2147483647L, (-588L), 2147483647L, 864L, 0L, (-588L), (-1397L), (-1397L), (-588L), (-588L)}, longArray1);
      assertArrayEquals(new long[] {(-588L), 2147483647L, 864L, 0L, (-588L), (-1397L), (-1397L), (-588L), (-588L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-1380L);
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1380L);
      longArray1[2] = 890L;
      longArray1[4] = (-1380L);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-3460);
      shortArray0[2] = (short)102;
      shortArray0[3] = (short) (-846);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)3868;
      shortArray0[6] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)49);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-3460), (short)102, (short) (-846), (short)1, (short)3868, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-3460), (short)102, (short) (-846), (short)1, (short)3868, (short)0, (short)49}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3487;
      intArray0[1] = (-537);
      intArray0[2] = 748;
      long[] longArray0 = new long[2];
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-403);
      shortArray0[1] = (short) (-403);
      shortArray0[2] = (short)19287;
      shortArray0[3] = (short)1305;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1305, (int) (short) (-403));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-403), (short) (-403), (short)19287, (short)1305}, shortArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-403);
      doubleArray0[1] = (double) (-537);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-403.0), (-537.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-403.0), (-537.0), (-403.0), (-537.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (short) (-403));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-403L), 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)42);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shift(doubleArray1, (-1), 462, 68);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-403.0), (-537.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-403.0), (-537.0), (-403.0), (-537.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '\"');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int int1 = ArrayUtils.indexOf((float[]) null, 2432.35F, (-537));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      long[] longArray2 = ArrayUtils.add(longArray0, (long) 3487);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray2.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 3487L}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      char[] charArray2 = new char[4];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = '\"';
      charArray2[1] = '\"';
      charArray2[2] = '|';
      charArray2[3] = '\"';
      char[] charArray3 = ArrayUtils.removeElements(charArray2, charArray1);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(4, charArray2.length);
      assertEquals(4, charArray3.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'\"', '\"', '|', '\"'}, charArray2);
      assertArrayEquals(new char[] {'\"', '\"', '|', '\"'}, charArray3);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertNotNull(charArray3);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 53;
      intArray0[2] = 9;
      intArray0[3] = 2145813754;
      intArray0[4] = 34;
      ArrayUtils.shift(intArray0, 7);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2145813754, 34, Integer.MAX_VALUE, 53, 9}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2145813754;
      doubleArray0[1] = (double) 34;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) 2145813754;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      assertArrayEquals(new int[] {2145813754, 34, Integer.MAX_VALUE, 53, 9}, intArray0);
      assertNotNull(integerArray0);
      
      ArrayUtils.shift((boolean[]) null, 9);
      ArrayUtils.reverse((boolean[]) null);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2145813754;
      floatArray0[1] = (float) 9;
      floatArray0[2] = (float) 9;
      floatArray0[3] = (float) 7;
      floatArray0[4] = (float) 2145813754;
      floatArray0[5] = (float) 9;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {2.14581376E9F, 9.0F, 9.0F, 7.0F, 2.14581376E9F, 9.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.14581376E9F, 9.0F, 9.0F, 7.0F, 2.14581376E9F, 9.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 2.14581376E9F, 287);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {2.145813754E9, 34.0, 9.0, 9.0, 2.145813754E9, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int[] intArray0 = new int[6];
      int int0 = 3612;
      intArray0[1] = 3612;
      intArray0[3] = 55;
      intArray0[4] = 68;
      intArray0[5] = 68;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3612, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = 'v';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Z');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'!', 'v'}, charArray0);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)4, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'v';
      doubleArray0[1] = (double) 'v';
      doubleArray0[2] = (double) (byte)4;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (byte)0;
      long[] longArray0 = new long[17];
      longArray0[0] = (long) 'v';
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) 'v';
      longArray0[3] = (long) 'Z';
      longArray0[4] = (long) (byte)4;
      longArray0[5] = (long) (byte)0;
      ArrayUtils.shift(longArray0, 971);
      assertEquals(17, longArray0.length);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (int) (byte)0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 68;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object[]) classArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 68, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1212);
      shortArray0[1] = (short) (-1392);
      shortArray0[2] = (short) (-1212);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-1392);
      shortArray0[6] = (short) (-1212);
      ArrayUtils.shift(shortArray0, 3016);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1392), (short) (-1212), (short)0, (short)2, (short) (-1392), (short) (-1212), (short) (-1212)}, shortArray0);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (short)2;
      floatArray1[1] = (float) (short) (-1212);
      floatArray1[2] = (float) (short)2;
      floatArray1[3] = (float) (short) (-1392);
      floatArray1[4] = (float) (short) (-1212);
      floatArray1[5] = (float) (short) (-1212);
      floatArray1[6] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (float) (short) (-1392), 1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {2.0F, (-1212.0F), 2.0F, (-1392.0F), (-1212.0F), (-1212.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-1), int0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = Boolean.valueOf("long");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean("org.apache.commons.lang3.builder.ToStringStyle$NoFieldNameToStringStyle");
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf(false);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, (int) 2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1088L;
      longArray0[1] = 0L;
      longArray0[4] = 1088L;
      longArray0[5] = 3818L;
      longArray0[6] = 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 3818L);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1088L, 0L, 0L, 0L, 1088L, 3818L, 1L}, longArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences((double[]) null, 142.964614);
      assertNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'Y');
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-563), 88);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      
      ArrayUtils.shift(booleanArray0, (-755));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      ArrayUtils.reverse(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1956));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1956)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      char[] charArray1 = ArrayUtils.subarray((char[]) null, (-2791), (-1956));
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-53);
      shortArray0[1] = (short)2324;
      shortArray0[2] = (short) (-1857);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-299);
      shortArray0[5] = (short)2020;
      ArrayUtils.reverse(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2020, (short) (-299), (short) (-1), (short) (-1857), (short)2324, (short) (-53)}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2020, (short) (-299), (short) (-1), (short) (-1857), (short)2324, (short) (-53)}, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-63);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)4, (int) (short)0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-63), (byte) (-63), (byte)4, (byte)4, (byte) (-63), (byte) (-63)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Character character0 = new Character(';');
      assertNotNull(character0);
      assertEquals(';', (char)character0);
      
      Character character1 = new Character(';');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals(';', (char)character1);
      
      Character character2 = new Character(';');
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals(';', (char)character2);
      
      Character character3 = Character.valueOf(']');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals(']', (char)character3);
      
      Character character4 = Character.valueOf('i');
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      assertEquals('i', (char)character4);
      
      Character character5 = new Character(']');
      assertFalse(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertNotNull(character5);
      assertEquals(']', (char)character5);
      
      Character character6 = new Character('V');
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character1));
      assertNotNull(character6);
      assertEquals('V', (char)character6);
      
      Character character7 = new Character('i');
      assertTrue(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character0));
      assertNotNull(character7);
      assertEquals('i', (char)character7);
      
      Character character8 = new Character('2');
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character4));
      assertNotNull(character8);
      assertEquals('2', (char)character8);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertNotNull(characterArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1.0);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (-837.363036), 4099.27);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, false);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-1190));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((long[]) null, 2791L);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      bitSet1.clear();
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      bitSet1.andNot(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Short short0 = new Short((short)7);
      assertNotNull(short0);
      assertEquals((short)7, (short)short0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = new Integer((short)7);
      assertEquals(7, int0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-3237);
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'd';
      charArray0[2] = '_';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '>');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'u', 'd', '_'}, charArray0);
      assertArrayEquals(new char[] {'u', 'd', '_'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (int) '_');
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {95}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '_';
      floatArray0[1] = (float) 'u';
      charArray0[1] = 'u';
      floatArray0[3] = (float) '_';
      floatArray0[4] = (float) '>';
      floatArray0[5] = 692.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {95.0F, 117.0F, 0.0F, 95.0F, 62.0F, 692.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 117.0F;
      doubleArray0[1] = (double) 'u';
      doubleArray0[2] = (double) 95.0F;
      doubleArray0[3] = (double) 95.0F;
      doubleArray0[4] = (double) (-3237);
      doubleArray0[5] = (double) '_';
      doubleArray0[6] = 547.306803891;
      doubleArray0[7] = (double) 692.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 95.0, 0, 1.0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {117.0, 117.0, 95.0, 95.0, (-3237.0), 95.0, 547.306803891, 692.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '_';
      longArray0[1] = (long) 'u';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {95L, 117L}, longArray0);
      assertArrayEquals(new long[] {95L, 117L, 95L, 117L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      short[] shortArray0 = new short[2];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(14, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Character[] characterArray0 = new Character[2];
      char char0 = 'K';
      Character character0 = Character.valueOf('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = (Character) char0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '$');
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'K', 'K'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[1];
      ArrayUtils.shift(charArray0, (-503));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int[] intArray0 = new int[10];
      intArray0[0] = (int) 'r';
      intArray0[0] = (int) '\u0000';
      intArray0[2] = (-503);
      intArray0[3] = (-503);
      intArray0[4] = (int) '\u0000';
      ArrayUtils.shift(intArray0, 15, (-503), 923);
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-503), (-503), 0, 0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[2];
      intArray0[4] = 15;
      doubleArray0[1] = (double) 923;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2, (double) 15);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 923.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 923.0, 15.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)128;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)3074;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-939), 2);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)128, (short)1, (short)3074}, shortArray0);
      assertNotNull(bitSet0);
      
      ArrayUtils.shift(doubleArray0, 2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 923.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3487;
      intArray0[1] = (-537);
      intArray0[2] = 748;
      intArray0[3] = 1569;
      intArray0[4] = 122;
      intArray0[5] = 46;
      intArray0[6] = 9;
      intArray0[7] = (-2505);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {3487, (-537), 748, 1569, 122, 46, 9, (-2505)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short)19323;
      shortArray0[1] = (short)19323;
      shortArray0[2] = (short)1305;
      shortArray0[4] = (short)5260;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3974), (-1));
      assertEquals(19, shortArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 46;
      doubleArray0[2] = (double) (short)5260;
      doubleArray0[3] = (double) (short)1305;
      doubleArray0[4] = (double) 9;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 9.0);
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {9.0, 46.0, 5260.0, 1305.0, 9.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (-4471));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1424;
      shortArray0[3] = (short)2;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1424, (short)2}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)126;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte)2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)101, (byte) (-62), (byte)10, (byte)27, (byte)65, (byte)1, (byte)126}, byteArray1);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-62), (byte)10, (byte)27, (byte)65, (byte)1, (byte)126}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(2544.888F);
      assertNotNull(float0);
      assertEquals(2544.888F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[1]);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {2544.888F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift((Object[]) floatArray0, 0);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0, (float) 0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertArrayEquals(new float[] {2544.888F, 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      Boolean[] booleanArray0 = new Boolean[3];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf(boolean0);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(boolean0);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean0);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1285L);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      ArrayUtils.shift(longArray0, 0, 0, 0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1285L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1285L), (double) 0L);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      boolean boolean4 = ArrayUtils.isEmpty((byte[]) null);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      
      ArrayUtils.shift(longArray0, 0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1285L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, 0, 4255L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {(-1285L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {4255L, (-1285L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      ArrayUtils.reverse(doubleArray0, 0, 0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.swap(longArray1, 0, 0, Integer.MAX_VALUE);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {(-1285L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {4255L, (-1285L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 53;
      intArray0[2] = 9;
      intArray0[3] = 2145813754;
      intArray0[4] = 34;
      ArrayUtils.shift(intArray0, 7);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2145813754, 34, Integer.MAX_VALUE, 53, 9}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2145813754;
      doubleArray0[1] = (double) 34;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) 2145813754;
      doubleArray0[5] = (double) 9;
      doubleArray0[6] = (double) 9;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertArrayEquals(new double[] {2.145813754E9, 34.0, 9.0, 9.0, 2.145813754E9, 9.0, 9.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 91, (-1159));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[5];
      intArray0[4] = (-1626);
      intArray0[1] = (-1396);
      shortArray0[1] = (short)0;
      ArrayUtils.swap(intArray0, 401, Integer.MAX_VALUE, 0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, (-1396), 0, 0, (-1626)}, intArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) 0;
      objectArray0[3] = (Object) (-1396);
      Object object0 = ArrayUtils.get(objectArray0, 4);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      objectArray0[4] = null;
      objectArray0[5] = (Object) (short)0;
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      Character character0 = Character.valueOf('&');
      assertNotNull(character0);
      assertEquals('&', (char)character0);
      
      Character character1 = Character.valueOf('j');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('j', (char)character1);
      
      Character character2 = Character.valueOf('C');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('C', (char)character2);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1L));
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      ArrayUtils.shift(doubleArray0, 90, 90, 743);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      
      int int0 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, int0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      doubleArray0[0] = (double) 743;
      floatArray0[2] = (float) Integer.MAX_VALUE;
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) Integer.MAX_VALUE);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2.14748365E9F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-717L), 743);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(floatArray0, (-1342), 68);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2.14748365E9F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1116.872378251227));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (short)0;
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1L);
      doubleArray1[1] = (-1116.872378251227);
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (-746.2);
      doubleArray1[4] = (-746.2);
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (-1116.872378251227));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-1116.872378251227), 0.0, (-746.2), (-746.2)}, doubleArray1, 0.01);
      assertFalse(int1 == int0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, int1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (-1836.95F);
      floatArray0[4] = (float) (-1L);
      floatArray0[5] = (float) (-1L);
      ArrayUtils.swap(floatArray0, (-1), 55, 55);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, (-1836.95F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, false, false, false}, booleanArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(byteArray2, (-1), (int) (byte)14, (-1));
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      ArrayUtils.reverse(objectArray1, 108, (-1));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (byte) (-20);
      ArrayUtils.shift(shortArray0, (int) (byte) (-20), 1421, (-1));
      assertEquals(10, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short) (-20)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte) (-37);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-97), (byte)0, (byte)1, (byte) (-37), (byte)3, (byte)56, (byte)121, (byte) (-37)}, byteArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-353), 2970, 59);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-353);
      floatArray0[1] = (float) (byte) (-37);
      floatArray0[2] = (float) (byte)56;
      floatArray0[3] = (float) (byte) (-97);
      floatArray0[4] = (float) (byte)1;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-97);
      intArray0[1] = (int) (byte)121;
      intArray0[2] = (int) (byte)3;
      intArray0[3] = (int) (byte)3;
      intArray0[4] = (int) (byte)56;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 121, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 1, 45, 3727);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)1995;
      doubleArray0[1] = (double) 3727;
      doubleArray0[2] = (double) (short)1995;
      doubleArray0[3] = 1869.43;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 45, (-1226));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1995.0, 3727.0, 1995.0, 1869.43, 9.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)1995;
      shortArray0[2] = (short)1995;
      shortArray0[3] = (short)7323;
      shortArray0[4] = (short)1995;
      shortArray0[5] = (short)1995;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, 4);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)1995, (short)1995, (short)7323, (short)1995}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)1995, (short)1995, (short)7323, (short)1995, (short)1995}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean boolean2 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1995;
      intArray0[1] = (int) (short)1995;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1995);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {1995, 1995}, intArray0);
      assertArrayEquals(new int[] {1995, 1995, 1995}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      ArrayUtils.shuffle(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1995, (short)1995, (short)7323, (short)1995, (short)1995, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 1711);
      assertNull(intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1088L;
      longArray0[1] = 1088L;
      longArray0[2] = (-2147483648L);
      longArray0[3] = 0L;
      longArray0[4] = 1L;
      longArray0[5] = (long) 1711;
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {1088L, 1088L, (-2147483648L), 0L, 1L, 1711L}, longArray0);
      assertArrayEquals(new long[] {1088L, 1088L, (-2147483648L), 0L, 1L, 1711L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-59);
      byteArray0[0] = (byte) (-59);
      byte byte1 = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte) (-1);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)10, (byte)0, (byte) (-1)}, byteArray0);
      assertTrue(boolean0);
      
      Byte byte2 = new Byte((byte) (-26));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-26), (byte)byte2);
      
      boolean boolean1 = ArrayUtils.isSameType(byte2, byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-26);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-26);
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = (int) (byte) (-26);
      intArray0[7] = (int) (byte) (-59);
      intArray0[8] = (int) (byte) (-1);
      int int0 = ArrayUtils.indexOf(intArray0, 0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-26), (-1), (-26), (-1), (-26), 0, 0, (-59), (-1)}, intArray0);
      assertEquals(5, int0);
      
      ArrayUtils.swap(intArray0, (-1), (-1));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-26), (-1), (-26), (-1), (-26), 0, 0, (-59), (-1)}, intArray0);
      
      ArrayUtils.shift(byteArray0, (-26), (int) (byte) (-1), (-26));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)10, (byte)0, (byte) (-1)}, byteArray0);
      
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = (Byte) (byte)10;
      byteArray1[1] = (Byte) (byte)0;
      byteArray1[2] = (Byte) (byte)10;
      byteArray1[3] = (Byte) (byte)10;
      byteArray1[4] = (Byte) (byte) (-59);
      Byte byte3 = new Byte((byte)10);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte)10, (byte)byte3);
      
      byteArray1[5] = byte3;
      byteArray1[6] = (Byte) (byte)10;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray2.length);
      assertNotNull(byteArray2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)10;
      longArray0[1] = (long) (byte)byteArray1[1];
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (-1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {10L, 0L, (-1L)}, longArray1);
      assertArrayEquals(new long[] {10L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) byte1;
      doubleArray0[2] = (double) (-26);
      doubleArray0[3] = (-687.6560301907566);
      doubleArray0[4] = (double) (byte) (-26);
      doubleArray0[5] = (double) byte1;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (double) 0L);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-59.0), 10.0, (-26.0), (-687.6560301907566), (-26.0), 10.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 12, 12, 12);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2264.18);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {3.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) "+([hzQ8_h`j@X_!5'sc");
      assertNotNull(object0);
      assertEquals("+([hzQ8_h`j@X_!5'sc", object0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 12;
      intArray0[1] = 12;
      doubleArray0[0] = (double) 12;
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      ArrayUtils.shift(doubleArray2, 190, 12, 12);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      BitSet bitSet0 = new BitSet(88);
      assertEquals(128, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 12);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-17), (byte) (-17), (byte) (-1), (byte) (-1), (byte)90, (byte) (-1)}, byteArray0);
      assertEquals(7, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 12;
      longArray0[1] = (long) 190;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {12L, 190L}, longArray0);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(8, bitSet1.length());
      assertEquals(5, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0, 1, 2, 4, 7}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true, true, false, true}, booleanArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(byteArray0, (-205), (-114), 32);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      ArrayUtils.reverse(objectArray1, (-205), 76);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      ArrayUtils.shift(shortArray0, (-1247), 1939, (-966));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 108;
      floatArray0[1] = (float) (-966);
      floatArray0[2] = (float) (-3497);
      floatArray0[3] = (float) (-1247);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {108.0F, (-966.0F), (-3497.0F), (-1247.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-1247), 32);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 76;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (-205);
      doubleArray0[4] = (double) (-3497.0F);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-2872.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {76.0, 0.0, 0.0, (-205.0), (-3497.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {76.0, 0.0, 0.0, (-205.0), (-3497.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, (-1.0F));
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {108.0F, (-966.0F), (-3497.0F), (-1247.0F)}, floatArray0, 0.01F);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-114);
      doubleArray2[1] = (double) 76;
      doubleArray2[2] = (double) (-3497);
      doubleArray2[3] = (double) (-114);
      int int0 = ArrayUtils.lastIndexOf(doubleArray2, (double) 32, (double) (-205));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {(-114.0), 76.0, (-3497.0), (-114.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      int int0 = 2444;
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 2444);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((long[]) null, (-771L));
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      bitSet0.andNot(bitSet1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = 3487;
      intArray0[6] = (-537);
      long[] longArray0 = new long[2];
      longArray0[1] = (long) (-537);
      ArrayUtils.shift(longArray0, (-537), (-537), (-537));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-537L)}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3487;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 748;
      doubleArray0[5] = (double) (-537L);
      doubleArray0[6] = (double) 3487;
      doubleArray0[7] = (double) 3487;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-537), (double) 0);
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3487.0, (-1.0), 0.0, 0.0, 748.0, (-537.0), 3487.0, 3487.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {3487, 0, 0, 0, 0, 0, (-537), 0, 0, 0}, intArray0);
      assertEquals(9, int0);
      
      Long[] longArray1 = new Long[5];
      Long long0 = new Long(2048L);
      assertNotNull(long0);
      assertEquals(2048L, (long)long0);
      
      longArray1[0] = long0;
      longArray1[1] = (Long) 0L;
      longArray1[2] = (Long) (-537L);
      longArray1[3] = (Long) (-537L);
      longArray1[4] = (Long) (-537L);
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray2.length);
      assertNotNull(longArray2);
      
      Double[] doubleArray1 = new Double[0];
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-537L);
      ArrayUtils.shift(floatArray0, 3487);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-537.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-537.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-537.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((short)1001);
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((short)1001);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1001;
      shortArray0[1] = (short)1001;
      shortArray0[0] = (short)1001;
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1001, (short)0, (short)1001}, shortArray0);
      
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null, comparator0);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)1001, (short)0, (short)1001}, shortArray0);
      assertArrayEquals(new short[] {(short)1001, (short)0, (short)1001, (short)1001, (short)0, (short)1001}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) null, (Object) mockRandom0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)24;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)692);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)24}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)24}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Float float0 = new Float((float) (short)24);
      assertNotNull(float0);
      assertEquals(24.0F, (float)float0, 0.01F);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)692;
      floatArray0[1] = (float) (short)692;
      floatArray0[2] = 4812.2964F;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)4;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-877), 2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-18), (byte)4, (byte)4, (byte) (-63), (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-18), (byte)4}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shift(byteArray0, 64);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte) (-63), (byte)4, (byte) (-18)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-671.34F));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {692.0F, 692.0F, 4812.2964F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {692.0F, 692.0F, 4812.2964F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = '$';
      charArray0[2] = 'l';
      charArray0[3] = 'g';
      charArray0[4] = '|';
      charArray0[5] = 'n';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'B', '$', 'l', 'g', '|', 'n'}, charArray0);
      assertArrayEquals(new char[] {'B', '$', 'l', 'g', '|', 'n'}, charArray1);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[0];
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ArrayUtils.reverse((Object[]) stringArray0, (int) (short)0, (int) (short)0);
      assertEquals(7, stringArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)120;
      byteArray0[3] = (byte)65;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)65);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)120, (byte)0, (byte)65}, byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte)120, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 2835, (-1037));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 2478.21;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2478.21);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-9), 53);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2478.21, 0.0, 53.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray3 = new boolean[1];
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = true;
      boolean[] booleanArray4 = ArrayUtils.removeAllOccurences(booleanArray3, true);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray2);
      assertEquals(1, booleanArray3.length);
      assertEquals(0, booleanArray4.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray4));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertNotNull(booleanArray4);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)14);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray2, (byte)39, (int) (byte)14);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte)39;
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (byte)39;
      longArray0[5] = (long) (byte)39;
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (byte)14;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 39L, (-1L), (-1L), 39L, 39L, (-1L), 14L}, longArray0);
      assertNotNull(longArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 39L, (-1L), (-1L), 39L, 39L, (-1L), 14L}, longArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(8, stringArray0.length);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 39L, (-1L), (-1L), 39L, 39L, (-1L), 14L}, longArray0);
      assertNotNull(stringArray0);
      
      byte[] byteArray3 = ArrayUtils.clone(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (int) (byte) (-113));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)88}, byteArray0);
      assertEquals((-1), int0);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray2);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertEquals(0, stringArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(stringArray0);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)88}, byteArray0);
      assertArrayEquals(new byte[] {(byte)88}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1116.872378251227));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-43);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0, (-2145564352));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-43)}, byteArray0);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 2;
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1), 2}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-1);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 2;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0, 393);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, intArray2.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      
      String string0 = ArrayUtils.toString((Object) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertNotNull(string0);
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-240L), 1921);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(1921);
      assertNotNull(double0);
      assertEquals(1921.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-240L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-240.0), (double)double1, 0.01);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1921;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 1921.0F;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertArrayEquals(new float[] {1921.0F, Float.NaN, 1921.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1921.0F, 1921.0F, Float.NaN, 1921.0F, 1.0F, 1.0F, Float.NaN, 1921.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, false, true}, booleanArray0));
      assertEquals(6, int0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) bitSet0;
      objectArray0[2] = (Object) true;
      boolean boolean2 = ArrayUtils.isSameLength(objectArray0, (Object[]) doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, objectArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = new Boolean("Cannot store ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean4));
      assertNotNull(boolean7);
      assertTrue(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Object[] objectArray0 = ArrayUtils.removeAllOccurences((Object[]) booleanArray0, (Object) boolean4);
      assertNotSame(booleanArray0, objectArray0);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(4, objectArray0.length);
      assertFalse(boolean4.equals((Object)boolean5));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean7));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(objectArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3477.3418344755078;
      doubleArray0[2] = 0.0;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3477.3418344755078}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1116.89173468728));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3477.3418344755078}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 3477.3418344755078}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = '~';
      ArrayUtils.swap(charArray0, (-107), (-107), (-107));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {' ', '~'}, charArray0);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) '~';
      doubleArray2[1] = (double) ' ';
      doubleArray2[2] = (-218.3593445);
      doubleArray2[3] = (double) ' ';
      doubleArray2[4] = (double) ' ';
      doubleArray2[5] = (double) ' ';
      doubleArray2[6] = (double) ' ';
      doubleArray2[7] = (-1116.89173468728);
      doubleArray2[8] = (double) ' ';
      ArrayUtils.reverse(doubleArray2, (-107), (-107));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {126.0, 32.0, (-218.3593445), 32.0, 32.0, 32.0, 32.0, (-1116.89173468728), 32.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 12, 12, 12);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2264.18);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {3.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) "+([hzQ8_h`j@X_!5'sc");
      assertNotNull(object0);
      assertEquals("+([hzQ8_h`j@X_!5'sc", object0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 12;
      intArray0[1] = 12;
      intArray0[2] = 12;
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[5] = boolean0;
      Boolean boolean1 = Boolean.valueOf("nF-=/K pTS8+K1:o7Jk");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((String) null);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean2);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false}, booleanArray1));
      assertFalse(boolean2.equals((Object)boolean4));
      assertTrue(boolean2.equals((Object)boolean5));
      assertFalse(boolean2.equals((Object)boolean3));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(booleanArray1);
      
      ArrayUtils.shuffle(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {3.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray2 = new boolean[4];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = (boolean) boolean3;
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurences(booleanArray2, true);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertEquals(4, booleanArray2.length);
      assertEquals(2, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray3));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-75));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-75)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      String string0 = "java.lang.Byte";
      Byte byte0 = new Byte((byte)108);
      assertNotNull(byte0);
      assertEquals((byte)108, (byte)byte0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 34;
      intArray0[1] = (int) (byte)108;
      intArray0[2] = (int) (byte)108;
      intArray0[3] = (int) (byte)108;
      intArray0[4] = (int) (byte)108;
      intArray0[6] = (int) (byte)108;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      Object[] objectArray0 = new Object[9];
      int int0 = 2;
      Byte byte0 = new Byte((byte)36);
      assertNotNull(byte0);
      assertEquals((byte)36, (byte)byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 2, (Object) byte0);
      assertEquals(9, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.get(objectArray0, 2, object0);
      assertEquals(9, objectArray0.length);
      assertNull(object1);
      
      objectArray0[1] = null;
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)36);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = (long) (byte)36;
      BitSet bitSet1 = BitSet.valueOf(longArray0);
      assertEquals(130, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(192, bitSet1.size());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 133}", bitSet1.toString());
      assertEquals(134, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), 36L}, longArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      Object object2 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotSame(bitSet0, bitSet1);
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertNull(object2);
      
      objectArray0[2] = null;
      Object object3 = ArrayUtils.get(objectArray0, 2);
      assertEquals(9, objectArray0.length);
      assertNull(object3);
      
      objectArray0[3] = null;
      Object object4 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object4);
      
      objectArray0[4] = null;
      BitSet bitSet2 = (BitSet)ArrayUtils.toPrimitive((Object) bitSet0);
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertSame(bitSet0, bitSet2);
      assertNotSame(bitSet0, bitSet1);
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertNotNull(bitSet2);
      
      objectArray0[5] = (Object) bitSet2;
      Short short0 = new Short((short)7);
      assertNotNull(short0);
      assertEquals((short)7, (short)short0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = (int) (short)7;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) short0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Double double0 = new Double(1921);
      assertNotNull(double0);
      assertEquals(1921.0, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-240L);
      doubleArray0[1] = 2199.9215574;
      doubleArray0[2] = (double) 1921;
      doubleArray0[3] = (double) (-240L);
      doubleArray0[5] = (double) (-240L);
      doubleArray0[7] = (double) (-240L);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = 2199.9215574;
      ArrayUtils.swap((char[]) null, 702, 324);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, 897, 897);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1405;
      shortArray0[1] = (short) (-810);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-4503);
      shortArray0[4] = (short) (-2406);
      shortArray0[5] = (short) (-721);
      shortArray0[6] = (short) (-30);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1405);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1405, (short) (-810), (short)0, (short) (-4503), (short) (-2406), (short) (-721), (short) (-30), (short)1405}, shortArray1);
      assertArrayEquals(new short[] {(short)1405, (short) (-810), (short)0, (short) (-4503), (short) (-2406), (short) (-721), (short) (-30)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (long) (-537);
      ArrayUtils.shift(longArray0, (-537), (-537), (-537));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-537L)}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-1.0);
      doubleArray0[5] = (double) (-537L);
      doubleArray0[6] = (double) 3487;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[4] = (byte)7;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)0, (byte)0, (byte)7}, byteArray0);
      assertFalse(boolean0);
      
      ArrayUtils.shift(longArray0, (-628));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-537L)}, longArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)7;
      shortArray0[1] = (short) (byte)7;
      shortArray0[2] = (short) (byte)7;
      shortArray0[3] = (short) (byte)7;
      shortArray0[4] = (short) (byte)7;
      shortArray0[5] = (short) (byte)7;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-31698));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-31698), (short)7, (short)7, (short)7, (short)7, (short)7, (short)7}, shortArray1);
      assertArrayEquals(new short[] {(short)7, (short)7, (short)7, (short)7, (short)7, (short)7}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      org.evosuite.runtime.Random.setNextRandom(3980);
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = '\"';
      charArray0[3] = 'f';
      charArray0[4] = '@';
      charArray0[5] = '+';
      ArrayUtils.swap(charArray0, 401, (int) (byte)7);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'O', '\"', '\u0000', 'f', '@', '+'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = 3487;
      intArray0[1] = (-537);
      intArray0[2] = 748;
      long[] longArray0 = new long[2];
      longArray0[1] = (long) (-537);
      ArrayUtils.shift(longArray0, (-537), (-537), (-537));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-537L)}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3487;
      doubleArray0[1] = (-1.0);
      doubleArray0[3] = (double) 748;
      doubleArray0[4] = (double) 748;
      doubleArray0[5] = (double) (-537L);
      doubleArray0[6] = (double) 3487;
      doubleArray0[7] = (double) 3487;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-537), (double) 748);
      assertEquals(64, bitSet0.size());
      assertEquals(9, bitSet0.length());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2, 5, 8}", bitSet0.toString());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3487.0, (-1.0), 0.0, 748.0, 748.0, (-537.0), 3487.0, 3487.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[4] = (byte)7;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)0, (byte)0, (byte)7}, byteArray0);
      assertFalse(boolean0);
      
      ArrayUtils.shift(longArray0, (-628));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-537L)}, longArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)7;
      shortArray0[1] = (short) (byte)7;
      shortArray0[2] = (short) (byte)7;
      shortArray0[3] = (short) (byte)7;
      shortArray0[4] = (short) (byte)7;
      shortArray0[5] = (short) (byte)7;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-31698));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)7, (short)7, (short)7, (short)7, (short)7, (short)7}, shortArray0);
      assertArrayEquals(new short[] {(short) (-31698), (short)7, (short)7, (short)7, (short)7, (short)7, (short)7}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      org.evosuite.runtime.Random.setNextRandom(3980);
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = '\"';
      charArray0[2] = 'z';
      charArray0[3] = 'f';
      charArray0[4] = '@';
      charArray0[5] = '+';
      ArrayUtils.swap(charArray0, 401, (int) (byte)7);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'O', '\"', 'z', 'f', '@', '+'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1482.665519);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1185.4562414681);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[6] = 0.0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1760.8441F);
      floatArray0[1] = (-1760.8441F);
      floatArray0[2] = (-1760.8441F);
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Short short1 = new Short((short)15851);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)15851, (short)short1);
      
      Short short2 = new Short((short)0);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short)0, (short)short2);
      
      Short short3 = new Short((short) (-1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short) (-1), (short)short3);
      
      Short short4 = new Short((short) (-1266));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      assertEquals((short) (-1266), (short)short4);
      
      Short short5 = new Short((short) (-543));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short0));
      assertNotNull(short5);
      assertEquals((short) (-543), (short)short5);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)15851);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) shortArray0, (Random) mockRandom0);
      assertEquals(0, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 59.8F, (int) (short)15851);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1760.8441F), (-1760.8441F), (-1760.8441F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-32);
      float[] floatArray0 = new float[5];
      floatArray0[3] = (float) (byte) (-32);
      floatArray0[4] = (float) (byte) (-32);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-32.0F), (-32.0F), 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (-1034);
      shortArray0[2] = (short) (byte) (-32);
      floatArray0[4] = (float) (byte) (-32);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1034), (short) (-32), (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[3];
      longArray0[1] = (long) (byte)0;
      longArray0[2] = 1318L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 1318L}, longArray0);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, 1318L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 1318L, 1318L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 1318L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((short) (-32));
      assertNotNull(integer0);
      assertEquals((-32), (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short) (-1034));
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-32)}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short) (-10);
      longArray0[1] = (long) (short)2;
      longArray0[2] = (long) (short)2;
      longArray0[3] = (long) (short) (-10);
      longArray0[4] = (long) (short) (-10);
      longArray0[5] = (long) (short)2;
      longArray0[6] = (long) (short)2;
      longArray0[7] = (long) (short) (-10);
      longArray0[8] = (long) (short) (-10);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-10L), 2L, 2L, (-10L), (-10L), 2L, 2L, (-10L), (-10L)}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)88, (int) (byte)88);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)88}, byteArray0);
      assertEquals(0, int0);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)88}, byteArray0);
      assertArrayEquals(new byte[] {(byte)88}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = 'U';
      charArray0[3] = '.';
      charArray0[4] = ',';
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1366);
      shortArray0[1] = (short) (-1340);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-21));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1366), (short) (-1340)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1366), (short) (-1340)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (short) (-1366));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'U');
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {']', 'U', '\u0000', '.', ',', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, int0);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, '%');
      assertNull(charArray1);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short) (-21));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1366), (short) (-1340)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1366), (short) (-1340)}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (double) (-20));
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {']', 'U', '\u0000', '.', ',', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[0];
      int int2 = ArrayUtils.indexOf(longArray0, (long) (short) (-1366), 68);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean[] booleanArray2 = ArrayUtils.insert((-1758), booleanArray0, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1088L;
      longArray0[2] = 0L;
      longArray0[4] = 238L;
      longArray0[5] = 3818L;
      longArray0[6] = 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 3818L);
      assertEquals(6, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1088L, 0L, 0L, 0L, 238L, 3818L, 1L}, longArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences((double[]) null, 142.964614);
      assertNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.insert(907, booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      
      Short short0 = new Short((short)14);
      assertNotNull(short0);
      assertEquals((short)14, (short)short0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) short0, (int) (short)14);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)14;
      shortArray0[1] = (short)14;
      shortArray0[2] = (short)14;
      shortArray0[3] = (short)14;
      shortArray0[4] = (short)14;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-3516);
      shortArray0[7] = (short)14;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)14, (int) (short) (-1));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)14, (short)14, (short)14, (short)14, (short)14, (short) (-1), (short) (-3516), (short)14}, shortArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[6] = 'U';
      charArray0[3] = '!';
      charArray0[4] = ',';
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short) (-1366);
      shortArray0[1] = (short) (-1340);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)6);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (short) (-1366));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'U');
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {']', '\u0000', '\u0000', '!', ',', '\u0000', 'U', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, int0);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, '%');
      assertNull(charArray1);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short)6);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (double) (-20));
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {']', '\u0000', '\u0000', '!', ',', '\u0000', 'U', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[0];
      int int2 = ArrayUtils.indexOf(longArray0, (long) (short) (-1366), 68);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int int3 = ArrayUtils.indexOf(byteArray1, (byte)2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, (int) (short) (-1340));
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = 'M';
      charArray0[2] = '/';
      charArray0[3] = '|';
      charArray0[4] = '#';
      charArray0[5] = ' ';
      ArrayUtils.reverse(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {' ', '#', '|', '/', 'M', '|'}, charArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-537.0F);
      floatArray0[1] = (float) ' ';
      floatArray0[2] = (float) '#';
      ArrayUtils.swap(floatArray0, (-790), 357, 357);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-537.0F), 32.0F, 35.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = new Boolean("Cannot store ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean4));
      assertNotNull(boolean7);
      assertTrue(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Object[] objectArray0 = ArrayUtils.removeAllOccurences((Object[]) booleanArray0, (Object) boolean4);
      assertNotSame(booleanArray0, objectArray0);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(4, objectArray0.length);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean5));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean7));
      assertNotNull(objectArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3477.3418344755078;
      doubleArray0[2] = 0.0;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3477.3418344755078}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1116.89173468728));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3477.3418344755078}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 3477.3418344755078}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Boolean boolean8 = Boolean.TRUE;
      assertFalse(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean0));
      assertNotNull(boolean8);
      assertTrue(boolean8);
      
      ArrayUtils.hashCode((Object) boolean8);
      assertFalse(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-1380L);
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1380L);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-1380L);
      doubleArray0[3] = (double) (-1380L);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 893L;
      doubleArray0[6] = (double) (-1380L);
      Character character0 = new Character('n');
      assertNotNull(character0);
      assertEquals('n', (char)character0);
      
      ArrayUtils.hashCode((Object) character0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-97);
      intArray0[1] = (-4);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 693;
      intArray0[5] = (int) (byte) (-97);
      ArrayUtils.swap(intArray0, (-4), (-1070));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-97), (-4), Integer.MAX_VALUE, 693, 0, (-97)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = 'M';
      charArray0[2] = '/';
      charArray0[3] = 'b';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (int) '|';
      ArrayUtils.swap(intArray0, (-84), (-84));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 124}, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) 'b';
      floatArray0[3] = (float) '/';
      floatArray0[4] = (float) '/';
      floatArray0[5] = (float) 124;
      floatArray0[6] = (float) '|';
      floatArray0[7] = (float) 124;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 124.0F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 2.14748365E9F, 98.0F, 47.0F, 47.0F, 124.0F, 124.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 2.14748365E9F, 98.0F, 47.0F, 47.0F, 124.0F, 124.0F, 124.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 14, 1936);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-53);
      shortArray0[1] = (short)2324;
      shortArray0[2] = (short) (-1857);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-299);
      shortArray0[5] = (short)2020;
      shortArray0[7] = (short)2324;
      ArrayUtils.reverse(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2324, (short)0, (short)2020, (short) (-299), (short) (-1), (short) (-1857), (short)2324, (short) (-53)}, shortArray0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short) (-1));
      assertEquals((-1), int0);
      
      ArrayUtils.shift((char[]) null, 1072, (-1), (int) (short) (-53));
      boolean boolean2 = ArrayUtils.contains((double[]) null, (double) (short)2324, (double) (short)0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ArrayUtils.reverse((char[]) null);
      Boolean[] booleanArray1 = new Boolean[2];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      
      int int1 = ArrayUtils.indexOf((char[]) null, 'G', (int) (short)2020);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 2478.21;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2478.21);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-9), 53);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2478.21, 0.0, 53.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray3 = new boolean[1];
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = true;
      boolean[] booleanArray4 = ArrayUtils.removeAllOccurences(booleanArray3, true);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray4, booleanArray3);
      assertEquals(1, booleanArray3.length);
      assertEquals(0, booleanArray4.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray4));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertNotNull(booleanArray4);
      
      ArrayUtils.reverse((char[]) null);
      boolean boolean1 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)127;
      shortArray0[1] = (short) (-2832);
      shortArray0[2] = (short)791;
      shortArray0[3] = (short)1325;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)127, (short) (-2832), (short)791, (short)1325}, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3487;
      intArray0[1] = (-537);
      intArray0[2] = 748;
      long[] longArray0 = new long[2];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {3487, (-537), 748, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-403);
      shortArray0[1] = (short) (-403);
      shortArray0[2] = (short)19287;
      shortArray0[3] = (short)1305;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1305, (int) (short) (-403));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-403), (short) (-403), (short)19287, (short)1305}, shortArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-403);
      doubleArray0[1] = (double) (-537);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-403.0), (-537.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-403.0), (-537.0), (-403.0), (-537.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (short) (-403));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-403L), 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)42);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.shift(doubleArray1, (-1), 462, 68);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-403.0), (-537.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-403.0), (-537.0), (-403.0), (-537.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '\"');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int int1 = ArrayUtils.indexOf((float[]) null, 2432.35F, (-537));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-2875), 5);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-93), (-2066));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1L));
      assertNull(longArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1533);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1533)}, shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 9;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (byte)4, 15);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {9.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (byte)4);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1533)}, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 3320.0, 9);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1927.9F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1927.9F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 1927.9F;
      doubleArray0[5] = (double) 0.0F;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {1927.9000244140625, 0.0, 0.0, 0.0, 1927.9000244140625, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      float[] floatArray2 = ArrayUtils.add(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray2.length);
      assertArrayEquals(new float[] {1927.9F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1927.9F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-17.0F);
      floatArray0[1] = (-1467.7672F);
      floatArray0[2] = 103.0F;
      floatArray0[3] = 1000.0F;
      floatArray0[4] = 351.296F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-17.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-17.0F), (-1467.7672F), 103.0F, 1000.0F, 351.296F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-17.0F), (-1467.7672F), 103.0F, 1000.0F, 351.296F, (-17.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(byteArray0, (-205), (-114), 32);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      ArrayUtils.reverse(objectArray1, (-205), 76);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)0;
      shortArray1[1] = (short)0;
      shortArray1[2] = (short)0;
      shortArray1[3] = (short)0;
      shortArray1[4] = (short)0;
      ArrayUtils.shift(shortArray1, (int) (short)0);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 32;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 48);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {32.0F, 0.0F, (-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, int0);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(0.0F);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((short)0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(4.0);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(4.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1956.0));
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals((-1956.0), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(53.0);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals(53.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(814.3251212246042);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotNull(double5);
      assertEquals(814.3251212246042, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-114));
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotNull(double6);
      assertEquals((-114.0), (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)1, (int) (byte)1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-835.51025));
      assertNotNull(double0);
      assertEquals((-835.51025), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-835.51025), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-835.51025));
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-835.51025), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.5);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(1.5, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1787.249);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      assertEquals(1787.249, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      assertEquals(0.0, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-835.51025));
      assertEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertNotNull(double6);
      assertEquals((-835.51025), (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(3.0);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotNull(double7);
      assertEquals(3.0, (double)double7, 0.01);
      
      doubleArray0[7] = double7;
      Double double8 = new Double((double) doubleArray0[4]);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotNull(double8);
      assertEquals(1787.249, (double)double8, 0.01);
      
      doubleArray0[8] = double8;
      Double double9 = new Double((-1));
      assertNotEquals((double)double9, (double)double3, 0.01);
      assertNotEquals((double)double9, (double)double4, 0.01);
      assertNotEquals((double)double9, (double)double1, 0.01);
      assertNotEquals((double)double9, (double)double0, 0.01);
      assertNotEquals((double)double9, (double)double6, 0.01);
      assertNotEquals((double)double9, (double)double8, 0.01);
      assertNotEquals((double)double9, (double)double5, 0.01);
      assertNotEquals((double)double9, (double)double7, 0.01);
      assertNotEquals((double)double9, (double)double2, 0.01);
      assertNotNull(double9);
      assertEquals((-1.0), (double)double9, 0.01);
      
      Double double10 = ArrayUtils.get(doubleArray0, (-1), double9);
      assertEquals(9, doubleArray0.length);
      assertNotEquals((double)double9, (double)double3, 0.01);
      assertNotEquals((double)double9, (double)double4, 0.01);
      assertNotEquals((double)double9, (double)double1, 0.01);
      assertNotEquals((double)double9, (double)double0, 0.01);
      assertNotEquals((double)double9, (double)double6, 0.01);
      assertNotEquals((double)double9, (double)double8, 0.01);
      assertNotEquals((double)double9, (double)double5, 0.01);
      assertNotEquals((double)double9, (double)double7, 0.01);
      assertNotEquals((double)double9, (double)double2, 0.01);
      assertNotEquals((double)double10, (double)double5, 0.01);
      assertNotEquals((double)double10, (double)double4, 0.01);
      assertNotEquals((double)double10, (double)double7, 0.01);
      assertNotEquals((double)double10, (double)double8, 0.01);
      assertNotEquals((double)double10, (double)double2, 0.01);
      assertNotEquals((double)double10, (double)double6, 0.01);
      assertNotEquals((double)double10, (double)double1, 0.01);
      assertNotEquals((double)double10, (double)double0, 0.01);
      assertNotEquals((double)double10, (double)double3, 0.01);
      assertNotNull(double10);
      assertEquals((-1.0), (double)double10, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double10);
      assertEquals(9, doubleArray0.length);
      assertNotEquals((double)double9, (double)double3, 0.01);
      assertNotEquals((double)double9, (double)double4, 0.01);
      assertNotEquals((double)double9, (double)double1, 0.01);
      assertNotEquals((double)double9, (double)double0, 0.01);
      assertNotEquals((double)double9, (double)double6, 0.01);
      assertNotEquals((double)double9, (double)double8, 0.01);
      assertNotEquals((double)double9, (double)double5, 0.01);
      assertNotEquals((double)double9, (double)double7, 0.01);
      assertNotEquals((double)double9, (double)double2, 0.01);
      assertNotEquals((double)double10, (double)double5, 0.01);
      assertNotEquals((double)double10, (double)double4, 0.01);
      assertNotEquals((double)double10, (double)double7, 0.01);
      assertNotEquals((double)double10, (double)double8, 0.01);
      assertNotEquals((double)double10, (double)double2, 0.01);
      assertNotEquals((double)double10, (double)double6, 0.01);
      assertNotEquals((double)double10, (double)double1, 0.01);
      assertNotEquals((double)double10, (double)double0, 0.01);
      assertNotEquals((double)double10, (double)double3, 0.01);
      assertFalse(object0.equals((Object)double3));
      assertFalse(object0.equals((Object)double7));
      assertFalse(object0.equals((Object)double5));
      assertFalse(object0.equals((Object)double2));
      assertFalse(object0.equals((Object)double6));
      assertFalse(object0.equals((Object)double1));
      assertFalse(object0.equals((Object)double4));
      assertFalse(object0.equals((Object)double8));
      assertFalse(object0.equals((Object)double0));
      assertNotNull(object0);
      assertEquals((-1.0), object0);
      
      objectArray0[0] = object0;
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray1[0] = object1;
      objectArray1[1] = (Object) doubleArray0[0];
      objectArray1[2] = (Object) double9;
      objectArray1[3] = (Object) double5;
      objectArray1[4] = (Object) double8;
      Object object2 = ArrayUtils.get(objectArray1, (-1));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(5, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNull(object2);
      
      objectArray0[1] = null;
      ArrayUtils.shift(objectArray0, (-1), (-1), (-1));
      assertNotSame(objectArray0, objectArray1);
      assertEquals(2, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-240L);
      floatArray0[1] = (float) 1921;
      floatArray0[2] = (float) (-240L);
      floatArray0[3] = (float) 1921;
      floatArray0[4] = (float) (-240L);
      floatArray0[5] = (float) (-240L);
      floatArray0[6] = (float) (-240L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-240.0F);
      doubleArray0[1] = (double) (-240L);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (-240.0F);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-240.0), 1.0, (-240.0), 1.0, 1.0, (-240.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1317.65039793023;
      doubleArray1[1] = (double) (-240.0F);
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, (double) 19701.0F);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1317.65039793023, (-240.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1317.65039793023, (-240.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 19701.0F;
      floatArray1[1] = (float) (-240L);
      floatArray1[2] = (float) 1921;
      floatArray1[3] = (float) (-240L);
      floatArray1[4] = (float) 1921;
      floatArray1[5] = (-1.0F);
      floatArray1[6] = (float) 1921;
      floatArray1[7] = (float) (-240L);
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, (-240.0F));
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(8, floatArray1.length);
      assertEquals(9, floatArray2.length);
      assertArrayEquals(new float[] {19701.0F, (-240.0F), 1921.0F, (-240.0F), 1921.0F, (-1.0F), 1921.0F, (-240.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-240.0F), 19701.0F, (-240.0F), 1921.0F, (-240.0F), 1921.0F, (-1.0F), 1921.0F, (-240.0F)}, floatArray2, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 1.0;
      objectArray0[1] = (Object) (-240.0);
      objectArray0[2] = (Object) (-240.0F);
      ArrayUtils.shift(objectArray0, (-175), (-2695), (-2695));
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(2544.888F);
      assertNotNull(float0);
      assertEquals(2544.888F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[1]);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {2544.888F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift((Object[]) floatArray0, 0);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0, (float) 0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertArrayEquals(new float[] {2544.888F, 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      Boolean[] booleanArray0 = new Boolean[3];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf(boolean0);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(boolean0);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean0);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1285L);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      ArrayUtils.shift(longArray0, 0, 0, 0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1285L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1285L), (double) 0L);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      boolean boolean4 = ArrayUtils.isEmpty((byte[]) null);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      
      ArrayUtils.shift(longArray0, 0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1285L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)1);
      assertNull(byteArray0);
      
      float[] floatArray3 = ArrayUtils.removeAllOccurences(floatArray2, (float) 0);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertEquals(1, floatArray3.length);
      assertArrayEquals(new float[] {2544.888F, 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {2544.888F}, floatArray3, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertNotNull(floatArray3);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3482;
      intArray0[1] = (-537);
      Long long0 = new Long(468L);
      assertNotNull(long0);
      assertEquals(468L, (long)long0);
      
      ArrayUtils.shift((Object[]) null, 171, 49, (-69));
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = 'M';
      charArray0[2] = '/';
      charArray0[3] = 'b';
      charArray0[4] = '#';
      charArray0[5] = 'b';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)98;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-11), (byte) (-16), (byte) (-125), (byte)57, (byte)2, (byte)98}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-21);
      intArray0[1] = 90;
      intArray0[2] = (int) (byte) (-21);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-16), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -16, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)692);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Float float0 = new Float((float) (short)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)692;
      floatArray0[1] = (float) (short)692;
      floatArray0[2] = 4812.2964F;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)692;
      floatArray0[4] = (float) (short)0;
      floatArray0[7] = 0.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 692.0F);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {692.0F, 692.0F, 4812.2964F, 0.0F, 0.0F, 692.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int int0 = new Short((short)692);
      assertEquals((short)692, int0);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (-1396);
      intArray0[2] = (-1626);
      intArray0[3] = (short)692;
      ArrayUtils.swap(intArray0, 401, 2147483633, 692);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, (-1396), (-1626), 692, 0}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      assertArrayEquals(new char[] {'\"', '\"'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.shift(charArray1, 1448);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      assertArrayEquals(new char[] {'\"', '\"'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int1 = ArrayUtils.indexOf(floatArray0, 692.0F, 613);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {692.0F, 692.0F, 4812.2964F, 0.0F, 0.0F, 692.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 692, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      Boolean boolean4 = Boolean.valueOf("");
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean3;
      booleanArray0[1] = boolean3;
      booleanArray0[2] = boolean2;
      booleanArray0[3] = boolean3;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean3;
      Boolean boolean5 = Boolean.valueOf(true);
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      Boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, boolean5);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean boolean6 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean6);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1640);
      boolean boolean7 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1640)}, shortArray0);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1, 0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(bitSet0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = new Boolean("The Array must not be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("VNA(n>8zh`(6N");
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean("{}");
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      assertTrue(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.valueOf("{}");
      assertFalse(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean1));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, boolean2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean2.equals((Object)boolean4));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean5));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean6));
      assertNotNull(booleanArray1);
      
      boolean boolean8 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean8);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1640);
      shortArray0[1] = (short) (-133);
      shortArray0[2] = (short)49;
      shortArray0[3] = (short) (-1099);
      shortArray0[4] = (short) (-1460);
      shortArray0[5] = (short)127;
      shortArray0[6] = (short)1558;
      boolean boolean9 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1640), (short) (-133), (short)49, (short) (-1099), (short) (-1460), (short)127, (short)1558}, shortArray0);
      assertTrue(boolean9 == boolean8);
      assertTrue(boolean9);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1146;
      doubleArray0[2] = (double) 1146;
      doubleArray0[3] = 1003.65209624;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1146;
      doubleArray0[6] = (double) 1146;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1003.65209624, 1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1146.0, 1146.0, 1003.65209624, 1.0, 1146.0, 1146.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1146;
      doubleArray1[1] = 2509.285259278797;
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1146.0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {2509.285259278797}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1146.0, 2509.285259278797}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte) (-53);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)0;
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = 1L;
      longArray0[3] = (long) (byte) (-53);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-53), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -53, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-3237);
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'd';
      intArray0[0] = (int) '_';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '>');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'u', 'd', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'u', 'd', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Character character0 = Character.valueOf('>');
      assertNotNull(character0);
      assertEquals('>', (char)character0);
      
      Character character1 = new Character('O');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('O', (char)character1);
      
      Character character2 = Character.valueOf('\'');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('\'', (char)character2);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) 'd';
      characterArray0[1] = character2;
      characterArray0[2] = character1;
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, 'G');
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray2.length);
      assertArrayEquals(new char[] {'d', '\'', 'O'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      
      int int0 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) "VF5XPJN6RugRx");
      assertEquals(3, characterArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'O';
      longArray0[1] = (long) 'u';
      longArray0[2] = (long) '\'';
      longArray0[3] = (long) '\'';
      longArray0[4] = (long) '>';
      longArray0[5] = (long) 'O';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 53;
      intArray0[2] = 9;
      intArray0[3] = 2145813754;
      intArray0[4] = 34;
      ArrayUtils.shift(intArray0, 7);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2145813754, 34, Integer.MAX_VALUE, 53, 9}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2145813754;
      doubleArray0[1] = (double) 34;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) 2145813754;
      doubleArray0[5] = (double) 9;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertArrayEquals(new double[] {2.145813754E9, 34.0, 9.0, 9.0, 2.145813754E9, 9.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 53;
      intArray1[1] = 7;
      intArray1[2] = 9;
      intArray1[3] = 644;
      intArray1[4] = 0;
      int[] intArray2 = ArrayUtils.removeElement(intArray1, 34);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray2.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {53, 7, 9, 644, 0}, intArray2);
      assertArrayEquals(new int[] {53, 7, 9, 644, 0}, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3487;
      intArray0[1] = (-537);
      intArray0[2] = 748;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-537);
      longArray0[1] = (long) (-537);
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'g';
      charArray0[2] = 'j';
      ArrayUtils.swap(charArray0, (-165), (-2146595524), 0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'w', 'g', 'j'}, charArray0);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) 'w';
      intArray1[1] = (int) 'g';
      intArray1[2] = (int) 'w';
      intArray1[3] = 86;
      intArray1[4] = 748;
      int[] intArray2 = ArrayUtils.removeElement(intArray1, 86);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray2.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {119, 103, 119, 748}, intArray2);
      assertArrayEquals(new int[] {119, 103, 119, 86, 748}, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 3487;
      floatArray0[1] = (float) (-537);
      floatArray0[2] = (float) 119;
      floatArray0[3] = (float) (-537L);
      floatArray0[4] = (float) 'g';
      floatArray0[5] = (float) 119;
      floatArray0[6] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2595.204F);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {3487.0F, (-537.0F), 119.0F, (-537.0F), 103.0F, 119.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      Long long0 = new Long(15851L);
      assertNotNull(long0);
      assertEquals(15851L, (long)long0);
      
      Long long1 = Long.getLong("", (Long) null);
      assertNull(long1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '7');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayUtils.shift(longArray0, (-1956), (-1956), (-1956));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-274);
      doubleArray0[1] = (double) (-1956);
      doubleArray0[2] = (double) 4;
      doubleArray0[4] = (double) (-274);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1290.9201636), (-1517.091801939));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-274.0), (-1956.0), 4.0, 0.0, (-274.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[0];
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2, 83.0);
      assertNotSame(doubleArray3, doubleArray0);
      assertSame(doubleArray3, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1956);
      intArray0[1] = (-274);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 46, 4800);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1956), (-274)}, intArray0);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-1956);
      integerArray0[1] = (Integer) (-1956);
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = 3487;
      intArray0[1] = (-537);
      long[] longArray0 = new long[2];
      longArray0[1] = (long) (-537);
      ArrayUtils.shift(longArray0, (-537), (-537), (-537));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-537L)}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3487;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 748;
      doubleArray0[5] = (double) (-537L);
      doubleArray0[6] = (double) 3487;
      doubleArray0[7] = (double) 3487;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-537), (double) 0);
      assertEquals("{5}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3487.0, (-1.0), 0.0, 0.0, 748.0, (-537.0), 3487.0, 3487.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-537));
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {3487, (-537), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, int0);
      
      Long[] longArray1 = new Long[5];
      Long long0 = new Long(2048L);
      assertNotNull(long0);
      assertEquals(2048L, (long)long0);
      
      longArray1[0] = long0;
      longArray1[1] = (Long) 0L;
      longArray1[2] = (Long) (-537L);
      longArray1[3] = (Long) (-537L);
      longArray1[4] = (Long) (-537L);
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray2.length);
      assertNotNull(longArray2);
      
      Double[] doubleArray1 = new Double[0];
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-537L);
      ArrayUtils.shift(floatArray0, 3487);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-537.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Double double0 = new Double(1921);
      assertNotNull(double0);
      assertEquals(1921.0, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-240L);
      doubleArray0[1] = 2199.9215574;
      doubleArray0[2] = (double) 1921;
      doubleArray0[6] = (double) (-240L);
      doubleArray0[5] = (double) (-240L);
      doubleArray0[7] = (double) (-240L);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = 2199.9215574;
      doubleArray1[2] = 2199.9215574;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {(-240.0), 2199.9215574, 1921.0, 0.0, 0.0, (-240.0), (-240.0), (-240.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2199.9215574, 2199.9215574, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2199.9215574}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1921;
      intArray0[1] = 1921;
      intArray0[2] = 1921;
      intArray0[3] = 1921;
      intArray0[4] = 1921;
      intArray0[5] = 1921;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1921);
      assertEquals(6, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1921, 1921, 1921, 1921, 1921, 1921}, intArray0);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = '@';
      charArray0[2] = 'd';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '@', 2145914297);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'f', '@', 'd'}, charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[2] = 0;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(21, intArray0.length);
      assertEquals(21, intArray1.length);
      assertNotNull(intArray1);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(1452);
      assertNotNull(double0);
      assertEquals(1452.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-449.69444));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-449.69444), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1452.0, (-449.69444)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray1, (-748.0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1452.0, (-449.69444)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1452.0, (-449.69444)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[2] = 0;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(21, intArray0.length);
      assertEquals(21, intArray1.length);
      assertNotNull(intArray1);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'A');
      assertNull(charArray0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-449.69444));
      assertNotNull(double0);
      assertEquals((-449.69444), (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '<');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2351);
      ArrayUtils.shift(intArray0, 0, 4482, (-2351));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2351)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Float float0 = new Float((float) (short)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (-1626));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1626);
      intArray0[1] = (-1396);
      intArray0[2] = (-1626);
      intArray0[3] = (-1);
      intArray0[4] = (int) (short)0;
      ArrayUtils.swap(intArray0, 401, Integer.MAX_VALUE, (-1));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1626), (-1396), (-1626), (-1), 0}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-826), 0);
      assertNull(booleanArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (-1);
      objectArray0[2] = (Object) float0;
      objectArray0[3] = (Object) (-1396);
      Object object0 = ArrayUtils.get(objectArray0, 4);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      objectArray0[4] = null;
      objectArray0[5] = (Object) (short)0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, (String) null);
      assertEquals(6, stringArray0.length);
      assertEquals(6, objectArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = ']';
      charArray0[2] = '(';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '(');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'%', ']', '('}, charArray0);
      assertArrayEquals(new char[] {'(', '%', ']', '('}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 1927.9F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)317;
      shortArray0[1] = (short) (-1392);
      shortArray0[2] = (short)317;
      shortArray0[3] = (short) (-1392);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-1392);
      shortArray0[6] = (short)317;
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short) (-1392);
      shortArray1[1] = (Short) (short)317;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertNotNull(shortArray2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (short)317;
      doubleArray0[3] = (double) 1927.9F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (short) (-1392);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)90;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (int) (short)2, (int) (short) (-1392), (-1533));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, Integer.MAX_VALUE, (-1), Integer.MAX_VALUE);
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, Integer.MAX_VALUE);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      int int0 = (-1);
      intArray0[1] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1146;
      boolean boolean2 = ArrayUtils.contains(intArray0, 13);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1146}, intArray0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-35);
      boolean boolean3 = ArrayUtils.contains(byteArray0, (byte)2);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)2, (byte)93, (byte) (-35)}, byteArray0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte) (-1);
      Byte byte0 = new Byte((byte) (-26));
      assertNotNull(byte0);
      assertEquals((byte) (-26), (byte)byte0);
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-26);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-26);
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = (int) (byte) (-26);
      intArray0[6] = (int) (byte)10;
      intArray0[7] = (int) (byte) (-59);
      intArray0[8] = (int) (byte) (-1);
      int int0 = ArrayUtils.indexOf(intArray0, 0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-26), (-1), (-26), (-1), (-26), 0, 10, (-59), (-1)}, intArray0);
      assertEquals(5, int0);
      
      ArrayUtils.shift(byteArray0, (-26), (int) (byte) (-1), (-26));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)10, (byte)0, (byte) (-1)}, byteArray0);
      
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = (Byte) (byte)10;
      byteArray1[1] = (Byte) (byte)0;
      ArrayUtils.shift(byteArray0, 2270);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-59), (byte)10}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)75;
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)8;
      doubleArray0[1] = 1.0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)8;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {8.0, 1.0, 0.0, 0.0, 8.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'b';
      doubleArray0[4] = (double) '`';
      MockRandom mockRandom0 = new MockRandom((short)0);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-118);
      mockRandom0.nextBytes(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'b', 'M', '\u0000', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-717L);
      longArray0[1] = (long) (short)8;
      longArray0[2] = (long) '`';
      longArray0[3] = (long) (short)8;
      longArray0[4] = 1039L;
      longArray0[5] = (long) (short)8;
      longArray0[6] = (-452L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1039L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-717L), 8L, 96L, 8L, 8L, (-452L)}, longArray1);
      assertArrayEquals(new long[] {(-717L), 8L, 96L, 8L, 1039L, 8L, (-452L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(2544.888F);
      assertNotNull(float0);
      assertEquals(2544.888F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(117.3);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(117.3F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[1]);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {2544.888F, 117.3F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift((Object[]) floatArray0, 89);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0, (float) 89);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertArrayEquals(new float[] {117.3F, 2544.888F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      Boolean[] booleanArray0 = new Boolean[3];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf(boolean0);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(boolean0);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean0);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1285L);
      longArray0[1] = (long) 89;
      longArray0[2] = (long) 89;
      longArray0[3] = (long) 89;
      longArray0[4] = (long) 89;
      longArray0[5] = (long) 89;
      longArray0[6] = (long) 89;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 89L;
      doubleArray0[3] = (double) 89L;
      doubleArray0[4] = 117.3;
      doubleArray0[5] = (double) 89L;
      doubleArray0[6] = (double) (-1285L);
      doubleArray0[7] = (double) (-1285L);
      doubleArray0[8] = (double) 89L;
      ArrayUtils.reverse(doubleArray0, (-361), 89);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {89.0, (-1285.0), (-1285.0), 89.0, 117.3, 89.0, 0.0, 0.0, 89.0}, doubleArray0, 0.01);
      
      Boolean boolean4 = Boolean.valueOf("l*dZ.");
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      Boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray0, boolean4);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Float float0 = new Float((float) (short)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)13);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      Byte byte0 = new Byte((byte) (-53));
      assertNotNull(byte0);
      assertEquals((byte) (-53), (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0, (int) (short)0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, objectArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = 4812.2964F;
      floatArray0[2] = (float) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-53), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -53, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-400);
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 2143;
      intArray2[5] = 0;
      intArray2[6] = 0;
      intArray2[8] = 0;
      int[] intArray3 = ArrayUtils.insert(0, intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertEquals(1, intArray1.length);
      assertEquals(9, intArray2.length);
      assertEquals(10, intArray3.length);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {(-400), 0, 0, 0, 2143, 0, 0, 0, 0}, intArray2);
      assertArrayEquals(new int[] {(-400), 0, 0, 0, 2143, 0, 0, 0, 0, 0}, intArray3);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotNull(intArray3);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-400);
      longArray0[2] = (long) 0;
      longArray0[3] = 1L;
      longArray0[4] = (-1555L);
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) 0;
      ArrayUtils.shift(longArray0, 160);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 1L, (-1555L), 0L, 0L, 0L, 0L, 0L, (-400L)}, longArray0);
      
      int[] intArray4 = ArrayUtils.addAll(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray4);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(6, intArray4.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray4);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertNotNull(intArray4);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(2544.888F);
      assertNotNull(float0);
      assertEquals(2544.888F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(117.3);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(117.3F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[1]);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {2544.888F, 117.3F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift((Object[]) floatArray0, 89);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0, (float) 89);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertArrayEquals(new float[] {117.3F, 2544.888F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      Boolean[] booleanArray0 = new Boolean[3];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf(boolean0);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(boolean0);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean0);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1285L);
      longArray0[1] = (long) 89;
      longArray0[2] = (long) 89;
      longArray0[3] = (long) 89;
      longArray0[4] = (long) 89;
      longArray0[5] = (long) 89;
      ArrayUtils.shift(longArray0, 89, 89, 89);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1285L), 89L, 89L, 89L, 89L, 89L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1285L), (double) 89L);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      boolean boolean4 = ArrayUtils.isEmpty((byte[]) null);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      
      ArrayUtils.shift(longArray0, 89);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {89L, 89L, 89L, 89L, 0L, (-1285L), 89L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'v';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Z');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'v'}, charArray0);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte)0, (byte)76, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'v';
      doubleArray0[1] = (double) 'v';
      doubleArray0[2] = (double) (byte)76;
      doubleArray0[3] = 76.0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (-338.3);
      doubleArray0[6] = (double) 'v';
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) 'v';
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (double) 'Z');
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {90.0}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      ArrayUtils.shift(charArray0, (int) (byte)0, (int) (byte)0, (-98));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'v'}, charArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-255), (int) (byte)0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', 'v'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) 76.0;
      objectArray0[2] = (Object) 76.0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) 0.0;
      objectArray0[6] = (Object) (byte)76;
      objectArray0[7] = (Object) (byte)76;
      Object[] objectArray1 = ArrayUtils.toArray(objectArray0);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(8, objectArray1.length);
      assertEquals(8, objectArray0.length);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (-274);
      doubleArray0[2] = (double) 4;
      doubleArray0[4] = (double) (-274);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1290.9201636), (-1517.091801939));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-274.0), 4.0, 0.0, (-274.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[0];
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2, 83.0);
      assertNotSame(doubleArray3, doubleArray0);
      assertSame(doubleArray3, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = ArrayUtils.addFirst(doubleArray3, (-274.0));
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-274.0)}, doubleArray4, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotNull(doubleArray4);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-274));
      assertNotNull(long0);
      assertEquals((-274L), (long)long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      
      ArrayUtils.shift(booleanArray0, (-755));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      ArrayUtils.reverse(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      ArrayUtils.shift((Object[]) integerArray0, 105, 105, (-1));
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = 'U';
      charArray0[3] = '.';
      charArray0[4] = ',';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {']', 'U', '\u0000', '.', ',', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {']', 'U', '\u0000', '.', ',', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 33.0, (int) (short) (-1366), (-2539.5861660489));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3487;
      intArray0[1] = (-537);
      intArray0[2] = 748;
      intArray0[3] = 1569;
      intArray0[4] = 122;
      intArray0[5] = 46;
      intArray0[6] = 9;
      intArray0[7] = (-2505);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {3487, (-537), 748, 1569, 122, 46, 9, (-2505)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short)19323;
      shortArray0[1] = (short)19323;
      shortArray0[2] = (short)1305;
      shortArray0[3] = (short) (-3974);
      shortArray0[4] = (short)5260;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3974), (-1));
      assertEquals(19, shortArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (double) 9, (double) 9);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1284, 9, (-474));
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = 'M';
      charArray0[2] = '/';
      charArray0[3] = 'b';
      charArray0[4] = '#';
      charArray0[5] = ' ';
      ArrayUtils.reverse(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {' ', '#', 'b', '/', 'M', '|'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2683;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {2683, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2683;
      doubleArray0[1] = (double) 2683;
      doubleArray0[2] = 232.0841597730672;
      doubleArray0[3] = (double) 2683;
      doubleArray0[4] = (double) 2683;
      doubleArray0[5] = (double) 2683;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1116.89173468728);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {2683.0, 2683.0, 232.0841597730672, 2683.0, 2683.0, 2683.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1116.89173468728, 2683.0, 2683.0, 232.0841597730672, 2683.0, 2683.0, 2683.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = 'Y';
      charArray0[2] = '2';
      charArray0[3] = 'h';
      ArrayUtils.shift(charArray0, 2683, 2683, (-138));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'@', 'Y', '2', 'h'}, charArray0);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '2';
      charArray1[1] = '2';
      charArray1[2] = 'Y';
      charArray1[3] = '2';
      char[] charArray2 = ArrayUtils.insert(5, charArray1, (char[]) null);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray2.length);
      assertArrayEquals(new char[] {'2', '2', 'Y', '2'}, charArray1);
      assertArrayEquals(new char[] {'2', '2', 'Y', '2'}, charArray2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-12920);
      shortArray0[1] = (short) (-31);
      shortArray0[2] = (short) (-31);
      shortArray0[3] = (short) (-12920);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-12920), (short) (-31), (short) (-31), (short) (-12920)}, shortArray0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(shortArray0, (int) (short) (-31), 160);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-12920), (short) (-31), (short) (-31), (short) (-12920)}, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = '@';
      charArray0[2] = '%';
      charArray0[3] = '4';
      charArray0[4] = 'X';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'z', '@', '%', '4', 'X'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 2478.21;
      ArrayUtils.shift(doubleArray0, 190, 53, 2683);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Boolean boolean0 = new Boolean("y");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 5, 53);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      int int0 = ArrayUtils.indexOf(charArray0, 'S', (-2944));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'S', 'S'}, charArray0);
      assertEquals(0, int0);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'S', 'S'}, charArray0);
      assertTrue(boolean1);
      
      boolean[] booleanArray2 = new boolean[5];
      booleanArray2[0] = (boolean) boolean0;
      booleanArray2[1] = true;
      booleanArray2[2] = (boolean) boolean0;
      booleanArray2[3] = (boolean) boolean0;
      booleanArray2[4] = true;
      ArrayUtils.shift(booleanArray2, 190);
      assertEquals(5, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray2));
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'S', 'S', 'S', 'S'}, charArray1);
      assertArrayEquals(new char[] {'S', 'S'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-12920);
      shortArray0[1] = (short) (-31);
      shortArray0[2] = (short) (-31);
      shortArray0[3] = (short) (-12920);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-12920), (short) (-31), (short) (-31), (short) (-12920)}, shortArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) (short) (-31);
      longArray0[2] = (long) (short) (-31);
      longArray0[3] = (long) (short) (-31);
      longArray0[5] = (long) 13;
      longArray0[6] = (long) (short) (-31);
      ArrayUtils.swap(longArray0, 5, (int) (short) (-31), (int) (short) (-31));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {5L, (-31L), (-31L), (-31L), 0L, 13L, (-31L)}, longArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = 'g';
      charArray0[2] = '^';
      charArray0[3] = '^';
      charArray0[4] = '^';
      charArray0[5] = '^';
      charArray0[6] = '^';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'^', 'g', '^', '^', '^', '^', '^'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 2478.21;
      ArrayUtils.shift(doubleArray0, 190, 53, 2683);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Boolean boolean0 = new Boolean("y");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 5, 53);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2683;
      longArray0[1] = (long) 5;
      longArray0[2] = (long) 190;
      longArray0[3] = (long) 5;
      ArrayUtils.swap(longArray0, 70, (-3354), 5);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {2683L, 5L, 190L, 5L}, longArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      charArray0[1] = 'C';
      charArray0[2] = 'Z';
      charArray0[3] = '8';
      charArray0[4] = 'u';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'^', 'C', 'Z', '8', 'u'}, charArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-97);
      intArray0[1] = (-4);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 693;
      intArray0[5] = (int) (byte) (-97);
      ArrayUtils.swap(intArray0, (-4), (-1070));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-97), (-4), Integer.MAX_VALUE, 693, 0, (-97)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '(');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '(';
      intArray0[1] = (int) '(';
      intArray0[2] = (int) '(';
      intArray0[3] = (int) '(';
      ArrayUtils.swap(intArray0, 40, (-905), 53);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {40, 40, 40, 40}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2938.0812);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 40);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-2938.0812)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {40.0, (-2938.0812)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Long[] longArray0 = ArrayUtils.clone((Long[]) null);
      assertNull(longArray0);
      
      ArrayUtils.swap(intArray0, 3, (-97));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {40, 40, 40, 40}, intArray0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 495);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 495;
      longArray0[1] = (long) 495;
      longArray0[2] = (long) 495;
      longArray0[3] = (long) 495;
      longArray0[4] = (long) 495;
      ArrayUtils.reverse(longArray0, 2288, 495);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {495L, 495L, 495L, 495L, 495L}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, 0.0F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Short short1 = new Short((short)1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)1, (short)short1);
      
      Short short2 = new Short((short)0);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)0, (short)short2);
      
      Short short3 = new Short((short)1432);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short)1432, (short)short3);
      
      Short short4 = new Short((short) (-1266));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      assertEquals((short) (-1266), (short)short4);
      
      Short short5 = new Short((short)1432);
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short2));
      assertNotNull(short5);
      assertEquals((short)1432, (short)short5);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1266));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.clone(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte) (-87);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)86);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-81), (byte)46, (byte)47, (byte)86, (byte)1, (byte) (-56), (byte) (-87), (byte)86}, byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-81), (byte)46, (byte)47, (byte)86, (byte)1, (byte) (-56), (byte) (-87)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1343);
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {(-1343)}, intArray0);
      assertArrayEquals(new int[] {(-1343)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1343);
      objectArray0[1] = (Object) (-1343);
      objectArray0[2] = (Object) (-1343);
      objectArray0[3] = (Object) (-1343);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[2], (-2318));
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1967;
      shortArray0[1] = (short)13;
      shortArray0[2] = (short) (-558);
      shortArray0[3] = (short) (-2406);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-3354), (-1343));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1967, (short)13, (short) (-558), (short) (-2406)}, shortArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, (int) (short)13, (-2318));
      assertEquals(4, objectArray0.length);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      shortArray0[0] = (short)13;
      intArray2[1] = 2;
      intArray2[2] = (int) (short) (-558);
      intArray2[3] = (-2318);
      ArrayUtils.shift(intArray2, (int) (short) (-558));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(4, intArray2.length);
      assertArrayEquals(new int[] {(-558), (-2318), 0, 2}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)13, (short)13, (short) (-558), (short) (-2406)}, shortArray0);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(byteArray2, (-7), (int) (byte)14, (-1));
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      ArrayUtils.reverse(objectArray1, 108, (-1));
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-20);
      ArrayUtils.shift(shortArray0, (int) (byte)14, (-3497), (-7));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-20)}, shortArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-7);
      longArray0[1] = (long) (-3497);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte) (-20), (-3497));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-7L), (-3497L)}, longArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray2, (byte) (-20), 2893);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(bitSet0);
      
      Short[] shortArray1 = new Short[1];
      shortArray1[0] = (Short) (short) (-20);
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[19];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 1, 45, 3727);
      assertEquals(19, booleanArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = 'x';
      charArray0[4] = 'V';
      charArray0[5] = 'N';
      charArray0[6] = 'V';
      charArray0[7] = 'N';
      charArray0[8] = 'V';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, ' ');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'V', 'N', 'N', 'x', 'V', 'N', 'V', 'N', 'V'}, charArray1);
      assertArrayEquals(new char[] {'V', 'N', 'N', 'x', 'V', 'N', 'V', 'N', 'V'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte)28;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0, (int) (byte) (-1));
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-1), (byte)0, (byte)28}, byteArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1116.872378251227));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'a';
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-1));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {97L}, longArray0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("s.BIN75[:;r#");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean("7LR+<Ecxb0qe4Venv");
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)91;
      byteArray1[2] = (byte)91;
      byteArray1[3] = (byte)91;
      byteArray1[4] = (byte) (-87);
      int int2 = ArrayUtils.lastIndexOf(byteArray1, (byte) (-87));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)91, (byte) (-87)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, int2);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '\u0087';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'N');
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'!', '\u0087'}, charArray0);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 6);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      Long long0 = new Long((-1208L));
      assertNotNull(long0);
      assertEquals((-1208L), (long)long0);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      longArray0[1] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((double) longArray0[0]);
      assertEquals(2, longArray0.length);
      assertNotNull(double0);
      assertEquals((-1208.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2195L);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2195.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1.5);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(1.5, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (long)longArray0[0];
      ArrayUtils.shift(floatArray0, 97);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1208.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1343);
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {(-1343), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1343), 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1343);
      objectArray0[1] = (Object) (-1343);
      objectArray0[3] = (Object) (-1343);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[2], (-2318));
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1967;
      shortArray0[1] = (short)13;
      shortArray0[2] = (short) (-558);
      shortArray0[3] = (short) (-2406);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-3354), (-1343));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1967, (short)13, (short) (-558), (short) (-2406)}, shortArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, (int) (short)13, (-2318));
      assertEquals(4, objectArray0.length);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (int) (short)13;
      intArray2[1] = 2;
      intArray2[2] = (int) (short) (-558);
      intArray2[3] = (-2318);
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short)13;
      shortArray1[1] = (Short) (short)13;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {(short)13, (short)13}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short) (-2406), 0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2458.25F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2458.25F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)1;
      ArrayUtils.swap(shortArray0, 2873, 2873);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) (short)0;
      objectArray0[3] = (Object) true;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[2]);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      Float[] floatArray1 = new Float[14];
      floatArray1[0] = (Float) 2458.25F;
      floatArray1[1] = (Float) 2458.25F;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(14, floatArray1.length);
      assertEquals(14, floatArray2.length);
      assertNotNull(floatArray2);
      
      int int0 = 1073741824;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 1073741824, (-1.0F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1073741824, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1L));
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      ArrayUtils.shift(doubleArray0, 90, 90, 743);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2048, (-1518.4388577783782));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      MockRandom mockRandom0 = new MockRandom(2791L);
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-971);
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-971), (short)0}, shortArray0);
      
      Short[] shortArray1 = new Short[0];
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted(shortArray1, comparator0);
      assertEquals(0, shortArray1.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertEquals(8, shortArray2.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-971), (short)0, (short)0, (short)0, (short) (-971), (short)0}, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-971), (short)0}, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean2 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 2048, 1636.0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2048;
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'd';
      charArray0[2] = '_';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'u');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'u', 'd', '_'}, charArray0);
      assertArrayEquals(new char[] {'d', '_'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (int) '_');
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {95}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '_';
      charArray0[1] = 'u';
      floatArray0[3] = (float) '_';
      floatArray0[4] = (float) 'u';
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {95.0F, 0.0F, 0.0F, 95.0F, 117.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 'u';
      doubleArray0[2] = (double) 95.0F;
      doubleArray0[3] = (double) 95.0F;
      doubleArray0[4] = (double) (-3237);
      doubleArray0[6] = 547.306803891;
      doubleArray0[7] = (double) 692.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2048, 2048.0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 117.0, 95.0, 95.0, (-3237.0), 0.0, 547.306803891, 692.0}, doubleArray0, 0.01);
      assertEquals(7, int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-75);
      shortArray0[4] = (short)21;
      shortArray0[5] = (short) (-686);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2048, (int) (short)21);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short) (-75), (short)21, (short) (-686)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-338.3);
      doubleArray0[1] = (-2394.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1478.305757554, 2239);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-338.3), (-2394.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Integer[] integerArray0 = new Integer[2];
      MutableInt mutableInt0 = new MutableInt(2146922405);
      assertEquals(2146922405, (int)mutableInt0.toInteger());
      assertEquals(2146922405, (int)mutableInt0.getValue());
      assertEquals((byte) (-91), mutableInt0.byteValue());
      assertEquals("2146922405", mutableInt0.toString());
      assertEquals(2146922405, mutableInt0.intValue());
      assertEquals(2.146922405E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(2146922405L, mutableInt0.longValue());
      assertEquals(2.14692237E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)28581, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.addAndGet(2239);
      assertEquals(2146924644, (int)mutableInt0.toInteger());
      assertEquals("2146924644", mutableInt0.toString());
      assertEquals((byte)100, mutableInt0.byteValue());
      assertEquals(2146924644, mutableInt0.intValue());
      assertEquals(2.14692467E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.146924644E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(2146924644L, mutableInt0.longValue());
      assertEquals(2146924644, (int)mutableInt0.getValue());
      assertEquals((short)30820, mutableInt0.shortValue());
      assertEquals(2146924644, int0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(2146924644, (int)mutableInt0.toInteger());
      assertEquals("2146924644", mutableInt0.toString());
      assertEquals((byte)100, mutableInt0.byteValue());
      assertEquals(2146924644, mutableInt0.intValue());
      assertEquals(2.14692467E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.146924644E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(2146924644L, mutableInt0.longValue());
      assertEquals(2146924644, (int)mutableInt0.getValue());
      assertEquals((short)30820, mutableInt0.shortValue());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2146924644, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(274);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(274, (int)integer1);
      
      int int1 = mutableInt0.getAndAdd(2146922405);
      assertEquals((-1120247.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)9, mutableInt0.byteValue());
      assertEquals((short) (-6135), mutableInt0.shortValue());
      assertEquals((-1120247), mutableInt0.intValue());
      assertEquals((-1120247L), mutableInt0.longValue());
      assertEquals("-1120247", mutableInt0.toString());
      assertEquals((-1120247), (int)mutableInt0.toInteger());
      assertEquals((-1120247.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1120247), (int)mutableInt0.getValue());
      assertTrue(int1 == int0);
      assertEquals(2146924644, int1);
      
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-492));
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {2146924644, 274}, intArray0);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {2146924644, 274}, intArray0);
      assertArrayEquals(new int[] {2146924644, 274}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3987.04F);
      floatArray0[1] = 53.96274F;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-3987.04F);
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 547.306803891;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (byte)14;
      doubleArray0[5] = (double) 53.96274F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 547.306803891, (int) (byte)14, 0.0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {547.306803891, 1.5, 3.0, (-1.0), 14.0, 53.96274185180664}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-20);
      intArray0[1] = (int) (byte)14;
      intArray0[2] = (int) (byte)14;
      intArray0[3] = (-1);
      intArray0[4] = (-327);
      int int1 = ArrayUtils.indexOf(intArray0, (-20), (-2433));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-20), 14, 14, (-1), (-327)}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)1995;
      doubleArray0[1] = (double) 3727;
      doubleArray0[2] = (double) (short)1995;
      doubleArray0[3] = 1869.43;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 45, (-1226));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1995.0, 3727.0, 1995.0, 1869.43, 9.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)1995;
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 1, 45, 3727);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1995;
      shortArray0[1] = (short) (-1045);
      shortArray0[2] = (short)1995;
      shortArray0[3] = (short)1995;
      shortArray0[4] = (short)7323;
      shortArray0[5] = (short)1995;
      shortArray0[6] = (short)1995;
      shortArray0[6] = (short)1995;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1995, 9);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1995, (short) (-1045), (short)1995, (short)1995, (short)7323, (short)1995, (short)1995, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)1995;
      doubleArray0[1] = (double) 3727;
      doubleArray0[2] = (double) (short)7323;
      doubleArray0[3] = 1869.43;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 45, (-1226));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1995.0, 3727.0, 7323.0, 1869.43, 9.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray1 = new short[6];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1995;
      shortArray1[1] = (short)1995;
      shortArray1[2] = (short)1995;
      shortArray1[3] = (short)7323;
      shortArray1[4] = (short)1995;
      shortArray1[5] = (short)1995;
      short[] shortArray2 = ArrayUtils.remove(shortArray1, 4);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertArrayEquals(new short[] {(short)1995, (short)1995, (short)1995, (short)7323, (short)1995, (short)1995}, shortArray1);
      assertArrayEquals(new short[] {(short)1995, (short)1995, (short)1995, (short)7323, (short)1995}, shortArray2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-10);
      Long long0 = new Long((short) (-10));
      assertNotNull(long0);
      assertEquals((-10L), (long)long0);
      
      Long long1 = new Long((short)2);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2L, (long)long1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short) (-10);
      objectArray0[1] = (Object) long0;
      objectArray0[2] = (Object) long0;
      objectArray0[3] = (Object) (short)2;
      objectArray0[4] = (Object) (short) (-10);
      objectArray0[5] = (Object) long1;
      ArrayUtils.shift(objectArray0, 2, 171, (int) (short) (-10));
      assertEquals(6, objectArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)7;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1055), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1055, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 1927.9F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 1927.9F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(1434L);
      assertNotNull(long0);
      assertEquals(1434L, (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {1434L}, longArray1);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)41;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-56), (-308));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41}, byteArray0);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 3692);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[19];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 1, 45, 3727);
      assertEquals(19, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1995;
      shortArray0[1] = (short) (-1045);
      shortArray0[2] = (short)1995;
      shortArray0[3] = (short)1995;
      shortArray0[4] = (short)7323;
      shortArray0[5] = (short)1995;
      shortArray0[6] = (short)1995;
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = 'x';
      charArray0[4] = 'V';
      charArray0[5] = 'N';
      charArray0[6] = 'V';
      charArray0[7] = 'N';
      charArray0[8] = 'V';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, ' ');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'V', 'N', 'N', 'x', 'V', 'N', 'V', 'N', 'V'}, charArray1);
      assertArrayEquals(new char[] {'V', 'N', 'N', 'x', 'V', 'N', 'V', 'N', 'V'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)28;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0, (int) (byte) (-1));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-1), (byte) (-58), (byte)28}, byteArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      int[] intArray0 = new int[10];
      Object[] objectArray0 = new Object[4];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = null;
      objectArray1[1] = null;
      objectArray1[2] = null;
      Object object1 = ArrayUtils.get(objectArray1, 3487);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(3, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNull(object1);
      
      objectArray0[1] = null;
      Integer integer0 = new Integer((-18));
      assertNotNull(integer0);
      assertEquals((-18), (int)integer0);
      
      Object object2 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object2);
      assertEquals((-18), object2);
      
      objectArray0[2] = object2;
      Object object3 = ArrayUtils.get(objectArray0, 3259, (Object) null);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(4, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNull(object3);
      
      objectArray0[3] = null;
      Object object4 = ArrayUtils.get(objectArray0, 2392);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(4, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNull(object4);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, (String) null);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotNull(stringArray0);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, object0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 3487;
      floatArray0[1] = (float) 3487;
      floatArray0[2] = (float) 2392;
      floatArray0[3] = (float) 3487;
      floatArray0[4] = (float) (-18);
      floatArray0[5] = (float) 3487;
      floatArray0[6] = (float) (-18);
      floatArray0[7] = (float) 2392;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 2392);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {3487.0F, 3487.0F, 2392.0F, 3487.0F, (-18.0F), 3487.0F, (-18.0F), 2392.0F}, floatArray0, 0.01F);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 2873);
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Short short0 = new Short((short)1533);
      assertNotNull(short0);
      assertEquals((short)1533, (short)short0);
      
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null);
      assertTrue(boolean0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((short)1533);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1533L, (long)long1);
      
      Long long2 = new Long((-1L));
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      
      Long long3 = new Long((-1L));
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals((-1L), (long)long3);
      
      Long long4 = new Long((-1L));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      assertEquals((-1L), (long)long4);
      
      Long long5 = Long.getLong("", (-300L));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long4));
      assertNotNull(long5);
      assertEquals((-300L), (long)long5);
      
      Long long6 = new Long(1452L);
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long1));
      assertNotNull(long6);
      assertEquals(1452L, (long)long6);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = '5';
      char[] charArray1 = ArrayUtils.insert((-2), charArray0, (char[]) null);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(2, charArray1.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'Y', '5'}, charArray1);
      assertArrayEquals(new char[] {'Y', '5'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = 'm';
      charArray0[2] = '^';
      charArray0[3] = '>';
      charArray0[4] = 'r';
      charArray0[5] = '/';
      charArray0[6] = 't';
      charArray0[7] = '8';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(16, charArray1.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'r', 'm', '^', '>', 'r', '/', 't', '8'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[1]);
      assertEquals(5, longArray0.length);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-1374L));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-1374L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((-1374L));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals((-1374L), (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long(647L);
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      assertNotNull(long5);
      assertEquals(647L, (long)long5);
      
      Long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, long5);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotNull(longArray1);
      
      byte byte0 = (byte) (-113);
      byte[] byteArray0 = new byte[1];
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 4);
      Class<Long> class0 = Long.class;
      classArray0[0] = class0;
      Class<Long> class1 = Long.class;
      classArray0[1] = class1;
      Class<Long> class2 = Long.class;
      classArray0[2] = class2;
      Class<Long> class3 = Long.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      assertNotNull(classArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte) (-113));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 68;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object[]) classArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 68, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayUtils.shift(longArray0, (-1956), (-1956), (-1956));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) (-1956);
      doubleArray0[2] = (double) 4;
      MutableInt mutableInt0 = new MutableInt(4);
      assertEquals("4", mutableInt0.toString());
      assertEquals(4L, mutableInt0.longValue());
      assertEquals((byte)4, mutableInt0.byteValue());
      assertEquals(4, (int)mutableInt0.getValue());
      assertEquals(4, (int)mutableInt0.toInteger());
      assertEquals(4.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(4.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)4, mutableInt0.shortValue());
      assertEquals(4, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Class<MutableInt[]> class0 = MutableInt[].class;
      MutableInt[] mutableIntArray0 = ArrayUtils.nullToEmpty((MutableInt[]) null, class0);
      assertEquals(0, mutableIntArray0.length);
      assertNotNull(mutableIntArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, (-1956), 275, Integer.MAX_VALUE);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[19];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 1, 45, 3727);
      assertEquals(19, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1995;
      shortArray0[1] = (short) (-1045);
      shortArray0[2] = (short)1995;
      shortArray0[3] = (short)1995;
      shortArray0[4] = (short)7323;
      shortArray0[5] = (short)1995;
      shortArray0[6] = (short)1995;
      shortArray0[7] = (short)1995;
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        bitSet0.clear(4380, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex: 4380 > toIndex: 2
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1200;
      shortArray0[1] = (short)7;
      ArrayUtils.shift(shortArray0, 767);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)7, (short)1200}, shortArray0);
      
      Character[] characterArray0 = new Character[9];
      char char0 = 'U';
      Character character0 = Character.valueOf('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('U');
      assertNotNull(character1);
      assertEquals('U', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('U', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('m');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('m', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(char0);
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('U', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf(char0);
      assertTrue(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character2));
      assertNotNull(character5);
      assertEquals('U', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('S');
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character2));
      assertNotNull(character6);
      assertEquals('S', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf('S');
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character3));
      assertNotNull(character7);
      assertEquals('S', (char)character7);
      
      characterArray0[7] = character7;
      Character character8 = new Character((char) character4);
      assertTrue(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character6));
      assertTrue(character8.equals((Object)character1));
      assertTrue(character8.equals((Object)character5));
      assertTrue(character8.equals((Object)character4));
      assertTrue(character8.equals((Object)char0));
      assertFalse(character8.equals((Object)character7));
      assertTrue(character8.equals((Object)character2));
      assertFalse(character4.equals((Object)character6));
      assertFalse(character4.equals((Object)character7));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character5));
      assertTrue(character4.equals((Object)character2));
      assertNotNull(character8);
      assertEquals('U', (char)character8);
      
      characterArray0[8] = character8;
      Character character9 = Character.valueOf(char0);
      assertFalse(character9.equals((Object)character6));
      assertTrue(character9.equals((Object)character4));
      assertFalse(character9.equals((Object)character3));
      assertTrue(character9.equals((Object)character2));
      assertFalse(character9.equals((Object)character7));
      assertTrue(character9.equals((Object)character8));
      assertNotNull(character9);
      assertEquals('U', (char)character9);
      
      Character[] characterArray1 = ArrayUtils.removeAllOccurrences(characterArray0, character9);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertFalse(character9.equals((Object)character6));
      assertTrue(character9.equals((Object)character4));
      assertFalse(character9.equals((Object)character3));
      assertTrue(character9.equals((Object)character2));
      assertFalse(character9.equals((Object)character7));
      assertTrue(character9.equals((Object)character8));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1626);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (-966.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short)0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-1626.0F), 0.0F, 0.0F, (-966.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1626.0F), 0.0F, 0.0F, (-966.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1626.0F));
      assertNotSame(floatArray0, floatArray1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1626.0F), 0.0F, 0.0F, (-966.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(0, int0);
      
      ArrayUtils.shift(floatArray1, 0, 877, (-1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-1626.0F), 0.0F, 0.0F, (-966.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1626.0F), 0.0F, 0.0F, (-966.0F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 1, 45, 3727);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1995;
      shortArray0[1] = (short) (-1045);
      shortArray0[2] = (short)1995;
      shortArray0[3] = (short)1995;
      shortArray0[4] = (short)7323;
      shortArray0[5] = (short)1995;
      shortArray0[6] = (short)1995;
      shortArray0[7] = (short)1995;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1995, 9);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1995, (short) (-1045), (short)1995, (short)1995, (short)7323, (short)1995, (short)1995, (short)1995}, shortArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 495);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 495;
      longArray0[1] = (long) 495;
      longArray0[2] = (long) 495;
      longArray0[3] = (long) 495;
      longArray0[4] = (long) 495;
      ArrayUtils.reverse(longArray0, 2288, 495);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {495L, 495L, 495L, 495L, 495L}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, 0.0F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 2288;
      intArray0[4] = (-1);
      intArray0[5] = 2288;
      ArrayUtils.swap(intArray0, 2288, (-1954), 14);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, (-1), 2288, (-1), 2288}, intArray0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 14, 181);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, (-1), 2288, (-1), 2288}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)40);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)40}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 2873);
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Short short0 = new Short((short)1533);
      assertNotNull(short0);
      assertEquals((short)1533, (short)short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)103;
      ArrayUtils.swap(byteArray0, (int) (byte)0, (-1085), 10);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-128), (byte) (-86), (byte)55, (byte)22, (byte)103}, byteArray0);
      
      ArrayUtils.reverse(objectArray0, (int) (byte)0, (-2147483646));
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1099;
      intArray0[1] = (-2052);
      int int0 = ArrayUtils.indexOf(intArray0, 2418, 2418);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1099, (-2052)}, intArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      intArray0[1] = (int) (short) (-1);
      shortArray0[1] = (short) (-31149);
      shortArray0[2] = (short)0;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 2418);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false}, booleanArray0));
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      String[] stringArray0 = ArrayUtils.removeAllOccurrences((String[]) null, "java.lang.Byte");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(byteArray2, (-7), (int) (byte)14, (-1));
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      ArrayUtils.reverse(objectArray1, 108, (-1));
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-20);
      ArrayUtils.shift(shortArray0, (int) (byte)14, (-3497), (-7));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-20)}, shortArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-7);
      longArray0[1] = (long) (-3497);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte) (-20), (-3497));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-7L), (-3497L)}, longArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 118);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      String[] stringArray0 = ArrayUtils.removeAllOccurrences((String[]) null, "java.lang.Byte");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'v';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Z');
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'v'}, charArray0);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte)0, (byte)76, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'v';
      doubleArray0[1] = (double) 'v';
      doubleArray0[2] = (double) (byte)76;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (-338.3);
      doubleArray0[6] = (double) 'v';
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) 'v';
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {118.0, 118.0, 76.0, 0.0, 0.0, (-338.3), 118.0, 0.0, 118.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {118.0, 118.0, 76.0, 0.0, 0.0, (-338.3), 118.0, 0.0, 118.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 0.0);
      assertSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {118.0, 118.0, 76.0, 0.0, 0.0, (-338.3), 118.0, 0.0, 118.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 118.0, 118.0, 76.0, 0.0, 0.0, (-338.3), 118.0, 0.0, 118.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {118.0, 118.0, 76.0, 0.0, 0.0, (-338.3), 118.0, 0.0, 118.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      ArrayUtils.shift(charArray0, (int) (byte)0, (int) (byte)0, (-98));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'v'}, charArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-255), (int) (byte)0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', 'v'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) 76.0;
      objectArray0[2] = (Object) 76.0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) 0.0;
      objectArray0[6] = (Object) (byte)76;
      objectArray0[7] = (Object) (byte)76;
      Object[] objectArray1 = ArrayUtils.toArray(objectArray0);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(8, objectArray1.length);
      assertEquals(8, objectArray0.length);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = 'M';
      charArray0[2] = '/';
      charArray0[3] = 'b';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)45;
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)45, (byte)3, (byte)45}, byteArray0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Index: ";
      stringArray0[1] = "Y";
      stringArray0[2] = "8%J0:In";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'S';
      intArray0[1] = (int) 'S';
      intArray0[2] = (-2231);
      intArray0[3] = (int) 'S';
      intArray0[4] = (int) 'S';
      intArray0[5] = (int) 'S';
      intArray0[6] = (int) 'S';
      intArray0[7] = (int) 'S';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-202), 83);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {83, 83, (-2231), 83, 83, 83, 83, 83}, intArray0);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(83, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-35);
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-49);
      byteArray1[1] = (byte) (-69);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-49), (byte) (-69)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-49), (byte) (-42), (byte) (-74), (byte) (-69), (byte) (-35)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-37);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)121;
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.indexOf(charArray0, 'S', (int) (byte) (-97));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-588);
      shortArray0[1] = (short) (-436);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1397);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-588), (short) (-436), (short)0, (short) (-1397)}, shortArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-436);
      intArray0[1] = (int) (short) (-588);
      intArray0[3] = (int) (short)0;
      shortArray0[2] = (short) (-1397);
      intArray0[5] = (int) (short) (-1397);
      intArray0[6] = (int) (short) (-588);
      intArray0[7] = 2108438490;
      intArray0[8] = (int) (short) (-1397);
      byte[] byteArray0 = new byte[8];
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short) (-436);
      shortArray1[1] = (Short) (short) (-436);
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyShort() , anyShort());
      boolean boolean1 = ArrayUtils.isSorted(shortArray1, comparator0);
      assertEquals(2, shortArray1.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-588), (short) (-436), (short) (-1397), (short) (-1397)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-588), (short) (-436), (short) (-1397), (short) (-1397), (short) (-588), (short) (-436), (short) (-1397), (short) (-1397)}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short) (-1397);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (-1397);
      longArray0[3] = (long) (short)shortArray1[1];
      longArray0[4] = (long) (short)shortArray1[0];
      longArray0[5] = (long) 2108438490;
      longArray0[6] = (long) (short)shortArray1[0];
      longArray0[7] = (long) (-588);
      longArray0[8] = (long) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 3228);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3228, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1L));
      assertNull(longArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = (float) (-1L);
      floatArray0[5] = (float) (-1L);
      floatArray0[6] = (float) (-1L);
      floatArray0[7] = (float) (-1L);
      floatArray0[8] = (float) (-1L);
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-1L);
      floatArray1[1] = (float) (-1L);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 2478.21;
      ArrayUtils.shift(doubleArray0, 190, 53, 2683);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Byte byte0 = new Byte((byte) (-33));
      assertNotNull(byte0);
      assertEquals((byte) (-33), (byte)byte0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)90;
      floatArray0[1] = (float) (byte)90;
      floatArray0[2] = (float) 2683;
      floatArray0[3] = (float) 2683;
      floatArray0[4] = (float) (byte)90;
      floatArray0[5] = (float) 53;
      floatArray0[6] = (float) (byte) (-17);
      floatArray0[7] = (float) 53;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {90.0F, 90.0F, 2683.0F, 2683.0F, 90.0F, 53.0F, (-17.0F), 53.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(byteArray2, (-7), (int) (byte)14, (-1));
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      ArrayUtils.reverse(objectArray1, 108, (-1));
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-20);
      ArrayUtils.shift(shortArray0, (int) (byte)14, (-3497), (-7));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-20)}, shortArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-7);
      longArray0[1] = (long) (-3497);
      int int0 = new Byte((byte)14);
      assertEquals((byte)14, int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(byteArray2, (-7), (int) (byte)14, (-1));
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      ArrayUtils.reverse(objectArray1, 108, (-1));
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-20);
      ArrayUtils.shift(shortArray0, (int) (byte)14, (-3497), (-7));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-20)}, shortArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-7);
      longArray0[1] = (long) (-3497);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte) (-20), (-3497));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-7L), (-3497L)}, longArray0);
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (short) (-20));
      assertEquals((-20.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-20), mutableInt0.intValue());
      assertEquals((short) (-20), mutableInt0.shortValue());
      assertEquals("-20", mutableInt0.toString());
      assertEquals((-20L), mutableInt0.longValue());
      assertEquals((byte) (-20), mutableInt0.byteValue());
      assertEquals((-20), (int)mutableInt0.getValue());
      assertEquals((-20), (int)mutableInt0.toInteger());
      assertEquals((-20.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      int int1 = ArrayUtils.indexOf((Object[]) floatArray1, (Object) mutableInt0);
      assertEquals((-20.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-20), mutableInt0.intValue());
      assertEquals((short) (-20), mutableInt0.shortValue());
      assertEquals("-20", mutableInt0.toString());
      assertEquals((-20L), mutableInt0.longValue());
      assertEquals((byte) (-20), mutableInt0.byteValue());
      assertEquals((-20), (int)mutableInt0.getValue());
      assertEquals((-20), (int)mutableInt0.toInteger());
      assertEquals((-20.0), mutableInt0.doubleValue(), 0.01);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte) (-25);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)32);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)98, (byte) (-1), (byte) (-49), (byte) (-28), (byte)127, (byte) (-76), (byte) (-25)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)98, (byte) (-1), (byte) (-49), (byte) (-28), (byte)127, (byte) (-76), (byte) (-25)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("java.lang.Character");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("S(t{,)t#s[b*jA_.yh");
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean0);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean("java.lang.Character");
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int)  (-49), 807);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 15851L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1000L);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {15851L}, longArray0);
      assertEquals((-1), int0);
      
      Float float0 = new Float(334.7777F);
      assertNotNull(float0);
      assertEquals(334.7777F, (float)float0, 0.01F);
      
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertNotNull(object0);
      assertEquals(334.7777F, object0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 15851L;
      floatArray0[1] = (float) 15851L;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 1000L;
      floatArray0[4] = 334.7777F;
      floatArray0[5] = 334.7777F;
      floatArray0[6] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 334.7777F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {15851.0F, 15851.0F, (-1.0F), 1000.0F, 334.7777F, 334.7777F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {15851.0F, 15851.0F, (-1.0F), 1000.0F, (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      ArrayUtils.reverse(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {15851.0F, 15851.0F, (-1.0F), 1000.0F, 334.7777F, 334.7777F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 1000.0F, (-1.0F), 15851.0F, 15851.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)13);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-53), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-53), (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], (int) (byte)0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(2139453870, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Character character0 = Character.valueOf('#');
      assertNotNull(character0);
      assertEquals('#', (char)character0);
      
      boolean boolean1 = ArrayUtils.isSameType(objectArray0[2], character0);
      assertEquals(4, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)13;
      longArray0[1] = (long) (byte)13;
      longArray0[2] = (long) (byte) (-53);
      longArray0[3] = (long) (byte) (-53);
      longArray0[4] = (long) 2139453870;
      longArray0[5] = (long) (byte) (-53);
      boolean boolean2 = ArrayUtils.isEmpty(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {13L, 13L, (-53L), (-53L), 2139453870L, (-53L)}, longArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = '-';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'a', '-'}, charArray0);
      assertArrayEquals(new char[] {'a', '-'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'a';
      floatArray0[1] = (float) 'a';
      floatArray0[2] = (float) 'a';
      floatArray0[3] = (float) 'a';
      floatArray0[4] = (-1274.8282F);
      floatArray0[5] = (float) 'a';
      floatArray0[6] = (float) '-';
      floatArray0[7] = (float) '-';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 97.0F, (-2145564352));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {97.0F, 97.0F, 97.0F, 97.0F, (-1274.8282F), 97.0F, 45.0F, 45.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 53;
      floatArray0[1] = (float) 53;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {53.0F, 53.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)14;
      ArrayUtils.reverse(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14, (byte)5, (byte) (-1), (byte)7, (byte)0, (byte)7, (byte) (-11)}, byteArray0);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(2719.0849);
      assertNotNull(double0);
      assertEquals(2719.0849, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2719.0849);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2719.0849, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((byte) (-1));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-1.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((byte)7);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(7.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((byte)5);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      assertEquals(5.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)1;
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = 'a';
      ArrayUtils.swap(charArray0, 242, 1, 1151);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'$', 'a'}, charArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-31);
      shortArray0[1] = (short) (byte) (-107);
      shortArray0[2] = (short) (-12920);
      shortArray0[3] = (short) (byte)1;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (byte)43;
      shortArray0[6] = (short)76;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-31), (short) (-107), (short) (-12920), (short)1, (short) (-1), (short)43, (short)76}, shortArray0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(shortArray0, (-366), (-2451));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-31), (short) (-107), (short) (-12920), (short)1, (short) (-1), (short)43, (short)76}, shortArray0);
      
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 1927.9F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (-1392);
      shortArray0[2] = (short)20;
      shortArray0[3] = (short) (-1392);
      shortArray0[4] = (short)20;
      floatArray0[2] = (float) (short) (-1392);
      shortArray0[6] = (short)0;
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short) (-1392);
      shortArray1[1] = (Short) (short)0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)20;
      doubleArray0[1] = (double) (-1392.0F);
      shortArray0[3] = (short)0;
      floatArray0[3] = 1927.9F;
      doubleArray0[4] = (double) (-1392.0F);
      doubleArray0[5] = (double) (short) (-1392);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)90;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)20, (-2013265920));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1392), (short)20, (short)0, (short)20, (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 1927.9F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)317;
      shortArray0[1] = (short) (-1392);
      shortArray0[2] = (short)317;
      shortArray0[3] = (short) (-1392);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-1392);
      shortArray0[6] = (short)317;
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short) (-1392);
      shortArray1[1] = (Short) (short)317;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertNotNull(shortArray2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (short)317;
      doubleArray0[3] = (double) 1927.9F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (short) (-1392);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 317.0, 1927.9000244140625, 0.0, (-1392.0), 2.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      LongStream longStream0 = mockRandom0.longs(1300L, (-153L), 2253L);
      assertNotNull(longStream0);
      
      byteArray0[1] = (byte)90;
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)0}, byteArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)14);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(14, byteArray0.length);
      assertEquals(13, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(14, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      
      ArrayUtils.swap(byteArray2, (-7), (int) (byte)14, (-7));
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      ArrayUtils.reverse(objectArray1, 108, (int) (byte)14);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      
      objectArray0[0] = (Object) (byte)14;
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[11];
      longArray0[1] = (long) (-3497);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)14, (-3497));
      assertEquals(11, longArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[9];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (int) (byte)14, 98);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      Long long0 = new Long(15851L);
      assertNotNull(long0);
      assertEquals(15851L, (long)long0);
      
      Long long1 = Long.getLong("", (Long) null);
      assertNull(long1);
      
      MockRandom mockRandom0 = new MockRandom(15851L);
      assertNotNull(mockRandom0);
      
      Short[] shortArray0 = new Short[0];
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted(shortArray0, comparator0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 2700.38066656;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2700.38066656);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 2700.38066656, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      char[] charArray0 = new char[22];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = (long) 'T';
      charArray0[12] = 'T';
      longArray0[3] = (long) 'T';
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1L, 84L, 0L, 84L}, longArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) 'T';
      ArrayUtils.swap(intArray0, 974, 5, 2683);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 84}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-2294), 5);
      assertNull(booleanArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 84}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'T';
      floatArray0[1] = (float) 'T';
      floatArray0[2] = (float) 84L;
      floatArray0[3] = (float) 'T';
      floatArray0[4] = (float) 974;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1466.8344F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {84.0F, 84.0F, 84.0F, 84.0F, 974.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {84.0F, 84.0F, 84.0F, 84.0F, 974.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      char[] charArray0 = new char[22];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'T');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(22, charArray0.length);
      assertEquals(23, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = (long) 'T';
      charArray0[12] = 'T';
      longArray0[3] = (long) 'T';
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1L, 84L, 0L, 84L}, longArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) 'T';
      ArrayUtils.swap(intArray0, 974, 5, 2683);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 84}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-2294), 5);
      assertNull(booleanArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 84}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'T';
      floatArray0[1] = (float) 'T';
      floatArray0[2] = (float) 84L;
      floatArray0[3] = (float) 'T';
      floatArray0[4] = (float) 974;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1466.8344F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {84.0F, 84.0F, 84.0F, 84.0F, 974.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {84.0F, 84.0F, 84.0F, 84.0F, 974.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)164;
      shortArray0[2] = (short) (-1956);
      shortArray0[3] = (short)164;
      shortArray0[4] = (short)13;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)13);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)164, (short) (-1956), (short)164, (short)13}, shortArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-1956);
      longArray0[1] = (long) (short) (-1);
      ArrayUtils.swap((int[]) null, (int) (short)164, (int) (short) (-1), 1430);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1430, (-2704));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 495);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 495;
      longArray0[1] = (long) 495;
      longArray0[2] = (long) 495;
      longArray0[3] = (long) 495;
      longArray0[4] = (long) 495;
      ArrayUtils.reverse(longArray0, 2288, 495);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {495L, 495L, 495L, 495L, 495L}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, 0.0F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 2288);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 2288;
      intArray0[4] = (-1);
      intArray0[5] = 2288;
      ArrayUtils.swap(intArray0, 2288, (-1954), 14);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, (-1), 2288, (-1), 2288}, intArray0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 14, 181);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, (-1), 2288, (-1), 2288}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1088L;
      longArray0[2] = 0L;
      longArray0[4] = 1088L;
      longArray0[5] = 3818L;
      longArray0[6] = 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 3818L);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1088L, 0L, 0L, 0L, 1088L, 3818L, 1L}, longArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences((double[]) null, 142.964614);
      assertNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, 439, (byte)7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 439, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'S';
      intArray0[1] = (int) 'S';
      intArray0[2] = (-2231);
      intArray0[3] = (int) 'S';
      intArray0[4] = (int) 'S';
      intArray0[5] = (int) 'S';
      intArray0[6] = (int) 'S';
      intArray0[7] = (int) 'S';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-202), 83);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {83, 83, (-2231), 83, 83, 83, 83, 83}, intArray0);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(83, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'S', 692);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)49;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte) (-112), (byte) (-53));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -112, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-1392);
      shortArray0[6] = (short)0;
      ArrayUtils.shift(shortArray0, 3017);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)2, (short) (-1392), (short)0}, shortArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short) (-1212);
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)2;
      floatArray0[4] = (float) (short) (-1392);
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short) (-1392), 1);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1212.0F), 0.0F, 2.0F, (-1392.0F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1088L;
      longArray0[2] = 0L;
      longArray0[4] = 1088L;
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = 'o';
      charArray0[2] = 'R';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1192), (-1192));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'Z', 'o', 'R'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      ArrayUtils.shift(longArray0, 9, 2, 9);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1088L, 0L, 0L, 0L, 1088L, 0L, 0L}, longArray0);
      
      Boolean boolean0 = Boolean.valueOf("v4_fNLB ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 14, 1936);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-53);
      shortArray0[1] = (short)2324;
      shortArray0[2] = (short) (-1857);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-299);
      shortArray0[5] = (short)2020;
      shortArray0[7] = (short)2324;
      ArrayUtils.reverse(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2324, (short)0, (short)2020, (short) (-299), (short) (-1), (short) (-1857), (short)2324, (short) (-53)}, shortArray0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short) (-1));
      assertEquals((-1), int0);
      
      ArrayUtils.shift((char[]) null, 1072, (-1), (int) (short) (-53));
      boolean boolean2 = ArrayUtils.contains((double[]) null, (double) (short)2324, (double) (short)0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      boolean boolean4 = ArrayUtils.contains((char[]) null, '{');
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertArrayEquals(new short[] {(short)2324, (short)0, (short)2020, (short) (-299), (short) (-1), (short) (-1857), (short)2324, (short) (-53)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2324, (short)0, (short)2020, (short) (-299), (short) (-1), (short) (-1857), (short)2324, (short) (-53)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)2020;
      intArray0[1] = (-1343);
      intArray0[2] = (-1120);
      intArray0[3] = 3176;
      intArray0[4] = (int) (short) (-1857);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3176, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 2478.21;
      ArrayUtils.shift(doubleArray0, 190, 39, 2683);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2478.21, 0.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)90;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)90, 2683);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)90, (byte) (-17), (byte)90}, byteArray0);
      assertEquals(3, int0);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 39;
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (-329.12106F);
      floatArray0[4] = (float) (byte)90;
      floatArray0[5] = (float) 2683;
      floatArray0[6] = (float) (byte)0;
      boolean boolean1 = ArrayUtils.contains(floatArray0, 361.0F);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {39.0F, 3.0F, 0.0F, (-329.12106F), 90.0F, 2683.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)90);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)90}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      floatArray0[5] = (float) '`';
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 39);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {3.0F, 0.0F, (-329.12106F), 90.0F, 96.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {39.0F, 3.0F, 0.0F, (-329.12106F), 90.0F, 96.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      boolean boolean0 = ArrayUtils.contains((float[]) null, (-1.0F));
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2188;
      shortArray0[2] = (short)90;
      shortArray0[3] = (short) (-1561);
      shortArray0[4] = (short)3643;
      shortArray0[5] = (short)2;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2188);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)2188, (short)90, (short) (-1561), (short)3643, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2188, (short)0, (short)2188, (short)90, (short) (-1561), (short)3643, (short)2}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, 'V');
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (-20.0), (-1074));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)2188, (short)90, (short) (-1561), (short)3643, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2188, (short)0, (short)2188, (short)90, (short) (-1561), (short)3643, (short)2}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = ArrayUtils.indexOf((double[]) null, (-20.0), 1509.6744671644165);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 2478.21;
      ArrayUtils.shift(doubleArray0, 190, 53, 2683);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)90, 2683);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-17), (byte)90, (byte) (-17), (byte) (-1)}, byteArray0);
      assertEquals(1, int0);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 53;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (byte) (-17);
      floatArray0[3] = (-329.12106F);
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) 2683;
      floatArray0[6] = (float) (byte) (-17);
      boolean boolean1 = ArrayUtils.contains(floatArray0, 361.0F);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {53.0F, 1.0F, (-17.0F), (-329.12106F), (-1.0F), 2683.0F, (-17.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      charArray0[1] = 'U';
      charArray0[2] = 'V';
      charArray0[3] = 'X';
      charArray0[4] = '`';
      charArray0[5] = '?';
      charArray0[6] = '#';
      int int1 = ArrayUtils.indexOf(charArray0, 'X');
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'T', 'U', 'V', 'X', '`', '?', '#'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = ArrayUtils.indexOf((float[]) null, 59.0F);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 59.0F;
      intArray0[1] = 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray2, (double) 2463.0F, 36);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray2, (double) (-1), 0.7);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray3.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1;
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3487;
      intArray0[1] = 0;
      intArray0[2] = 748;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      ArrayUtils.shift(longArray0, 0, 0, 0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3487;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 748;
      doubleArray0[4] = (double) 748;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 3487;
      doubleArray0[7] = (double) 3487;
      doubleArray0[8] = (double) 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 0, (double) 748);
      assertEquals(6, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2, 3, 4, 5, 8}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(9, bitSet0.length());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3487.0, (-1.0), 0.0, 748.0, 748.0, 0.0, 3487.0, 3487.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3487.0, (-1.0), 0.0, 748.0, 748.0, 0.0, 3487.0, 3487.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3487.0, (-1.0), 0.0, 748.0, 748.0, 0.0, 3487.0, 3487.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[7];
      doubleArray2[0] = (Double) 0.0;
      doubleArray2[1] = (Double) 748.0;
      doubleArray2[2] = (Double) 3487.0;
      doubleArray2[3] = (Double) 3487.0;
      doubleArray2[4] = (Double) 0.0;
      doubleArray2[6] = (Double) 0.0;
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2, 3487.0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 748.0, 3487.0, 3487.0, 0.0, 3487.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-4009);
      shortArray0[1] = (short)15851;
      shortArray0[2] = (short) (-1223);
      shortArray0[3] = (short)57;
      shortArray0[4] = (short)5489;
      shortArray0[5] = (short)246;
      ArrayUtils.swap(shortArray0, 1495, 0, (-2787));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4009), (short)15851, (short) (-1223), (short)57, (short)5489, (short)246}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = 3487;
      intArray0[1] = 0;
      intArray0[2] = 748;
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 0;
      ArrayUtils.shift(longArray0, 0, 0, 0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3487;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 748;
      doubleArray0[4] = (double) 748;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 3487;
      doubleArray0[7] = (double) 3487;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 0, (double) 748);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, bitSet0.length());
      assertEquals("{1, 2, 3, 4, 5, 8}", bitSet0.toString());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3487.0, (-1.0), 0.0, 748.0, 748.0, 0.0, 3487.0, 3487.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {3487, 0, 748, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, int0);
      
      Long[] longArray1 = new Long[5];
      Long long0 = new Long(2195L);
      assertNotNull(long0);
      assertEquals(2195L, (long)long0);
      
      longArray1[0] = long0;
      longArray1[1] = (Long) 0L;
      longArray1[2] = (Long) 0L;
      longArray1[3] = (Long) 0L;
      longArray1[4] = (Long) 0L;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray2.length);
      assertNotNull(longArray2);
      
      Double[] doubleArray1 = new Double[0];
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      ArrayUtils.shift(floatArray0, 3487);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray3);
      assertSame(doubleArray3, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      assertArrayEquals(new double[] {3487.0, (-1.0), 0.0, 748.0, 748.0, 0.0, 3487.0, 3487.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3487.0, (-1.0), 0.0, 748.0, 748.0, 0.0, 3487.0, 3487.0, 0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)307;
      shortArray0[1] = (short)9;
      shortArray0[2] = (short) (-3545);
      shortArray0[3] = (short)324;
      shortArray0[4] = (short) (-1);
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-1), 8);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)307, (short)9, (short) (-3545), (short)324, (short) (-1)}, shortArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte)25;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-97), (byte)45, (byte)1, (byte) (-37), (byte)3, (byte)25, (byte)121, (byte)25}, byteArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)45;
      objectArray0[1] = (Object) (byte)25;
      Object[] objectArray1 = ArrayUtils.toArray(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-244), floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3487;
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = 'j';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'p';
      charArray0[5] = 'j';
      charArray0[6] = '`';
      ArrayUtils.swap(charArray0, 3487, (-2146595524), (-2145562602));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'w', 'j', 'w', 'w', 'p', 'j', '`'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[6] = 1452;
      intArray0[2] = 1452;
      intArray0[4] = 1452;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(21, intArray0.length);
      assertEquals(21, intArray1.length);
      assertNotNull(intArray1);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'A');
      assertNull(charArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) 0);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      char[] charArray1 = new char[6];
      charArray1[0] = 'j';
      charArray1[1] = 'g';
      charArray1[2] = 'j';
      charArray1[3] = 'A';
      charArray1[4] = 'j';
      charArray1[5] = 'w';
      ArrayUtils.swap(charArray1, 1452, (-1089), 1);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'j', 'g', 'j', 'A', 'j', 'w'}, charArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-31);
      shortArray0[1] = (short)76;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)1099;
      shortArray0[4] = (short) (-12920);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-31), (short)76, (short) (-1), (short)1099, (short) (-12920)}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 1366.39F;
      floatArray0[2] = (-3225.0F);
      floatArray0[3] = 268.92F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1808.3F;
      floatArray0[6] = 1335.58F;
      floatArray0[7] = (-2947.5623F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1921.0F);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {Float.NaN, 1366.39F, (-3225.0F), 268.92F, 1.0F, 1808.3F, 1335.58F, (-2947.5623F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null, comparator0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      ArrayUtils.reverse(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 4;
      longArray0[1] = (-1380L);
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1380L);
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) null, (Object) integer0);
      assertNull(objectArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      MockRandom mockRandom0 = new MockRandom(2351L);
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[1];
      LongStream longStream0 = mockRandom0.longs((long) (short)429, 2351L);
      assertNotNull(longStream0);
      
      shortArray0[0] = (short)429;
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)429}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.insert(Integer.MAX_VALUE, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) true;
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, (Object) longStream0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      
      ArrayUtils.reverse(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2351L;
      floatArray0[1] = (float) 2351L;
      floatArray0[2] = (float) 2351L;
      floatArray0[3] = (float) Integer.MAX_VALUE;
      floatArray0[4] = (float) 2351L;
      floatArray0[5] = (float) 2351L;
      floatArray0[6] = (float) 2351L;
      floatArray0[7] = (float) 2351L;
      floatArray0[8] = (float) 2351L;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2351.0F);
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, bitSet0.length());
      assertEquals("{0, 1, 2, 4, 5, 6, 7, 8}", bitSet0.toString());
      assertEquals(8, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {2351.0F, 2351.0F, 2351.0F, 2.14748365E9F, 2351.0F, 2351.0F, 2351.0F, 2351.0F, 2351.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1482.665519);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1185.4562414681);
      doubleArray0[3] = 30.499628872139724;
      doubleArray0[4] = 0.0;
      doubleArray0[6] = 0.0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1760.8441F);
      floatArray0[1] = (-1760.8441F);
      floatArray0[2] = 118.0F;
      floatArray0[3] = (-1760.8441F);
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Short short1 = new Short((short)15851);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)15851, (short)short1);
      
      Short short2 = new Short((short)0);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)0, (short)short2);
      
      Short short3 = new Short((short) (-1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short) (-1), (short)short3);
      
      Short short4 = new Short((short) (-1266));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      assertEquals((short) (-1266), (short)short4);
      
      Short short5 = new Short((short) (-543));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertNotNull(short5);
      assertEquals((short) (-543), (short)short5);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1760.8441F), (-1760.8441F), 118.0F, (-1760.8441F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, int0);
      
      int int1 = ArrayUtils.indexOf((short[]) null, (short)15851);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1209);
      shortArray0[2] = (short) (-711);
      shortArray0[3] = (short)1211;
      shortArray0[4] = (short)2100;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-711);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2578.5F);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-711.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 2375, 2375, 2130303789);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Character[] characterArray0 = new Character[0];
      Byte byte0 = new Byte((byte) (-18));
      assertNotNull(byte0);
      assertEquals((byte) (-18), (byte)byte0);
      
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) byte0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) 2375);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3177), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3177, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-27);
      byte byte0 = (byte) (-26);
      byteArray0[1] = (byte) (-26);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-158), 13);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-27), (byte) (-26)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-27), (byte) (-26)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1994);
      intArray0[1] = (int) (byte) (-26);
      intArray0[2] = (-158);
      intArray0[3] = (-158);
      intArray0[4] = 470;
      intArray0[5] = (-158);
      intArray0[6] = (-2574);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 470, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1343);
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {(-1343), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1343), 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1343);
      objectArray0[1] = (Object) (-1343);
      objectArray0[2] = (Object) (-1343);
      objectArray0[3] = (Object) (-1343);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[2], (-2318));
      assertEquals(4, bitSet0.length());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1967;
      shortArray0[1] = (short)13;
      shortArray0[2] = (short) (-558);
      shortArray0[3] = (short) (-2406);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-3354), (-1343));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1967, (short)13, (short) (-558), (short) (-2406)}, shortArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, (int) (short)13, (-2318));
      assertEquals(4, objectArray0.length);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (int) (short)13;
      intArray2[1] = 2;
      intArray2[2] = (int) (short) (-558);
      intArray2[3] = (-2318);
      ArrayUtils.shift(intArray2, (int) (short) (-558));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(4, intArray2.length);
      assertArrayEquals(new int[] {(-558), (-2318), 13, 2}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short)13;
      shortArray1[1] = (Short) (short)13;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {(short)13, (short)13}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short) (-2406), 0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(3479);
      assertEquals(3479, mutableInt0.intValue());
      assertEquals(3479, (int)mutableInt0.getValue());
      assertEquals(3479, (int)mutableInt0.toInteger());
      assertEquals("3479", mutableInt0.toString());
      assertEquals(3479.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-105), mutableInt0.byteValue());
      assertEquals((short)3479, mutableInt0.shortValue());
      assertEquals(3479.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3479L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      Class<MutableInt[]> class0 = MutableInt[].class;
      MutableInt[] mutableIntArray0 = ArrayUtils.nullToEmpty((MutableInt[]) null, class0);
      assertEquals(0, mutableIntArray0.length);
      assertNotNull(mutableIntArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 3479, (-295));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Character character0 = Character.valueOf(':');
      assertNotNull(character0);
      assertEquals(':', (char)character0);
      
      boolean boolean0 = ArrayUtils.isSameType(character0, class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Double double0 = new Double(3359.944589012565);
      assertNotNull(double0);
      assertEquals(3359.944589012565, (double)double0, 0.01);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)2484);
      assertNotNull(short0);
      assertEquals((short)2484, (short)short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray2.length);
      assertArrayEquals(new short[] {(short)2484}, shortArray2);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1482.665519);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1185.4562414681);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[6] = 0.0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1760.8441F);
      floatArray0[1] = (-1760.8441F);
      floatArray0[2] = 118.0F;
      floatArray0[3] = (-1760.8441F);
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Short short1 = new Short((short)15828);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)15828, (short)short1);
      
      Short short2 = new Short((short)0);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)0, (short)short2);
      
      Short short3 = new Short((short)1);
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short)1, (short)short3);
      
      Short short4 = new Short((short) (-1266));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      assertEquals((short) (-1266), (short)short4);
      
      Short short5 = new Short((short) (-543));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertNotNull(short5);
      assertEquals((short) (-543), (short)short5);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)15828);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)15828;
      intArray0[1] = (int) (short)0;
      int int0 = ArrayUtils.indexOf(intArray0, (-605));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {15828, 0}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1533);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1533)}, shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)4;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (-2195));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte)0, (byte)4, (byte)4, (byte)4, (byte) (-63), (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-678L);
      longArray0[1] = (-678L);
      longArray0[2] = 0L;
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'N', 42);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'N', 'N'}, charArray0);
      assertEquals(1, int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, true, 1);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1);
      longArray1[1] = (long) 42;
      longArray1[2] = (long) 1;
      longArray1[3] = (-678L);
      longArray1[4] = (long) (-1);
      longArray1[5] = (long) 'N';
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {(-1L), 42L, 1L, (-678L), (-1L), 78L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, 50L);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 50L;
      doubleArray0[2] = (double) 50L;
      doubleArray0[4] = (double) 50L;
      doubleArray0[5] = (double) 50L;
      ArrayUtils.shift(doubleArray0, 90, 90, 743);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {50.0, 0.0, 50.0, 0.0, 50.0, 50.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '0';
      charArray0[4] = 'g';
      charArray0[5] = ',';
      charArray0[6] = 'D';
      ArrayUtils.reverse(charArray0, (-1685), 6);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {',', 'g', '0', '\\', '\\', '>', 'D', '\u0000'}, charArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\\');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {',', 'g', '0', '\\', '>', 'D', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {',', 'g', '0', '\\', '\\', '>', 'D', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, ',', 743);
      assertNotSame(charArray0, charArray1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {',', 'g', '0', '\\', '\\', '>', 'D', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "#";
      int int0 = 0;
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      ArrayUtils.reverse(intArray0, (-2476), 3077);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-1)}, intArray0);
      
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-1173);
      intArray0[5] = 0;
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, (-2499));
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-1173), 0}, intArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      bitSet0.andNot(bitSet1);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, booleanArray0.length);
      assertEquals(6, intArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, (-1173), 0}, intArray0);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      BitSet bitSet2 = (BitSet)bitSet0.clone();
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet2.size());
      assertEquals(0, bitSet2.length());
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertTrue(bitSet2.isEmpty());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet0, bitSet2);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertNotNull(bitSet2);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-900);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-900));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-900), 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-900), 0, 0, 0, 0, 0, (-900), 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte)78;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-97), (byte)45, (byte)1, (byte) (-37), (byte)3, (byte)56, (byte)121, (byte)78}, byteArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2098);
      shortArray0[1] = (short) (byte)45;
      shortArray0[2] = (short) (byte)121;
      shortArray0[3] = (short) (byte)3;
      shortArray0[4] = (short) (byte)1;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)15, 268);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2098), (short)45, (short)121, (short)3, (short)1}, shortArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (byte)45;
      floatArray0[2] = (float) (byte) (-37);
      floatArray0[3] = (float) (byte) (-97);
      floatArray0[4] = (float) (byte)3;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) (byte)1;
      floatArray0[7] = (float) (short)45;
      floatArray0[8] = (float) (byte)78;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (int) (byte) (-97));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -97, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = 'v';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Z');
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'!', 'v'}, charArray0);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)4, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'v';
      doubleArray0[1] = (double) 'v';
      doubleArray0[2] = (double) (byte)4;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (byte)0;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'v';
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) 'v';
      longArray0[3] = (long) 'Z';
      longArray0[4] = (long) (byte)4;
      longArray0[5] = (long) (byte)0;
      ArrayUtils.shift(longArray0, 971);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 118L, 90L, 4L, 0L, 118L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 2049870754, 1936);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-53);
      shortArray0[1] = (short)2324;
      shortArray0[2] = (short) (-1857);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-299);
      shortArray0[5] = (short)2020;
      shortArray0[7] = (short) (-14613);
      ArrayUtils.reverse(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-14613), (short)0, (short)2020, (short) (-299), (short) (-1), (short) (-1857), (short)2324, (short) (-53)}, shortArray0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((short)2324);
      assertNotNull(double0);
      assertEquals(2324.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.add(doubleArray0, doubleArray0[0]);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2049870754;
      intArray0[1] = (int) (short) (-299);
      intArray0[2] = (int) (short)0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (short) (-1857), 2146697311);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2049870754, (-299), 0}, intArray0);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[0];
      Character character0 = new Character('6');
      assertNotNull(character0);
      assertEquals('6', (char)character0);
      
      Character[] characterArray1 = ArrayUtils.addFirst(characterArray0, character0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ArrayUtils.reverse((Object[]) stringArray0, (int) (short)0, (int) (short)0);
      assertEquals(7, stringArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)120;
      byteArray0[3] = (byte)65;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)61;
      objectArray0[1] = (Object) (byte)61;
      objectArray0[2] = (Object) (byte)65;
      Character character0 = Character.valueOf('z');
      assertNotNull(character0);
      assertEquals('z', (char)character0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) character0);
      assertEquals(3, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = 'U';
      charArray0[3] = '.';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('G');
      assertNotNull(character0);
      assertEquals('G', (char)character0);
      
      Character character1 = new Character('*');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('*', (char)character1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(328, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 328, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = 'U';
      charArray0[3] = '.';
      charArray0[4] = ',';
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1366);
      shortArray0[1] = (short) (-1340);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)9);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1366), (short) (-1340)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1366), (short) (-1340)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-48.4203));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'U');
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {']', 'U', '\u0000', '.', ',', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, int0);
      
      ArrayUtils.swap((double[]) null, (int) (short) (-1366), (-20), (-49));
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, '%');
      assertNull(charArray1);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short)9);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1366), (short) (-1340)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1366), (short) (-1340)}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (double) (-20));
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {']', 'U', '\u0000', '.', ',', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[0];
      int int2 = ArrayUtils.indexOf(longArray0, (long) (short) (-1366), 68);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 2478.21;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2478.21);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-9), 53);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2478.21, 0.0, 53.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray3 = new boolean[1];
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = true;
      boolean[] booleanArray4 = ArrayUtils.removeAllOccurences(booleanArray3, true);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray4, booleanArray3);
      assertEquals(1, booleanArray3.length);
      assertEquals(0, booleanArray4.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray4));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertNotNull(booleanArray4);
      
      Float float0 = new Float(2463.0F);
      assertNotNull(float0);
      assertEquals(2463.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(2463.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2463.0F, (float)float1, 0.01F);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-368), (-368), 2);
      Integer integer0 = new Integer((-368));
      assertNotNull(integer0);
      assertEquals((-368), (int)integer0);
      
      ArrayUtils.reverse((boolean[]) null, 0, 0);
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-14613);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-299);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1857);
      ArrayUtils.reverse(shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1857), (short) (-1), (short) (-299), (short) (-1), (short) (-1), (short) (-14613)}, shortArray0);
      
      Double double0 = new Double((short) (-53));
      assertNotNull(double0);
      assertEquals((-53.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      Double[] doubleArray1 = ArrayUtils.add(doubleArray0, doubleArray0[2]);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-678L);
      longArray0[1] = (-2768L);
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, (-1), (-1), Integer.MAX_VALUE);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-678L), (-2768L), 0L}, longArray0);
      
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-2768L);
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (long) Integer.MAX_VALUE;
      longArray1[4] = (-2768L);
      longArray1[5] = (long) Integer.MAX_VALUE;
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray2.length);
      assertArrayEquals(new long[] {(-2768L), 0L, 0L, 2147483647L, (-2768L), 2147483647L}, longArray1);
      assertArrayEquals(new long[] {(-2768L), 0L, 0L, 2147483647L, (-2768L), 2147483647L}, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      Long long0 = Long.getLong("DGdTXGHV)yC|j", 0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((-1));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      Long long2 = new Long(1088L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1088L, (long)long2);
      
      Long long3 = new Long(2147483647L);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(2147483647L, (long)long3);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = Character.valueOf('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = new Character('f');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('f', (char)character1);
      
      characterArray0[2] = character1;
      Character character2 = Character.valueOf('I');
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('I', (char)character2);
      
      characterArray0[3] = character2;
      Character character3 = new Character(')');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals(')', (char)character3);
      
      Character[] characterArray1 = ArrayUtils.addFirst(characterArray0, character3);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(5, characterArray1.length);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      
      Byte byte0 = Byte.valueOf((byte) (-47));
      assertNotNull(byte0);
      assertEquals((byte) (-47), (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertNotNull(string0);
      assertEquals("-47", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 81L;
      longArray0[1] = (-783L);
      longArray0[2] = 2351L;
      longArray0[3] = 1541L;
      ArrayUtils.swap(longArray0, (-2166), (-1956), 975);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {81L, (-783L), 2351L, 1541L}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-777L), 11);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {81L, (-783L), 2351L, 1541L}, longArray0);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 11;
      intArray0[1] = (-2166);
      intArray0[2] = (-2166);
      intArray0[3] = 975;
      intArray0[4] = (-1956);
      intArray0[5] = (-1956);
      int int0 = ArrayUtils.indexOf(intArray0, (-1956));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {11, (-2166), (-2166), 975, (-1956), (-1956)}, intArray0);
      assertEquals(4, int0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) (-2166);
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) (-2166);
      integerArray0[3] = (Integer) (-2166);
      integerArray0[4] = (Integer) (-1956);
      integerArray0[5] = (Integer) (-2166);
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[6] = integer1;
      integerArray0[7] = (Integer) 11;
      // Undeclared exception!
      try { 
        Integer.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-240L), 1921);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(1921);
      assertNotNull(double0);
      assertEquals(1921.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-240L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-240.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1.0);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.0);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(1.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[1]);
      assertEquals(5, doubleArray0.length);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      assertEquals((-240.0), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[2];
      doubleArray2[1] = (double) doubleArray0[1];
      doubleArray2[1] = (double) doubleArray0[3];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray2);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray2, 0.01);
      assertTrue(boolean0);
      
      ArrayUtils.swap((long[]) null, 1921, 1921);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 1921, 1921, (-2719));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      int int0 = ArrayUtils.indexOf(doubleArray3, (-2385.285259278797), (-2385.285259278797));
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)164;
      shortArray0[2] = (short) (-1956);
      shortArray0[3] = (short) (-1224);
      shortArray0[4] = (short)13;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)13);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)164, (short) (-1956), (short) (-1224), (short)13}, shortArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-1224);
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = (-268L);
      ArrayUtils.reverse(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-268L), (-1L), (-1224L)}, longArray0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(4927.799129);
      assertNotNull(double0);
      assertEquals(4927.799129, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 3.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {4927.799129}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(317);
      assertNotNull(integer0);
      assertEquals(317, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(317);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(317, (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = 1;
      Integer integer2 = new Integer(1);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(1, (int)integer3);
      
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short)164);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {317, 317, 1, 1}, intArray0);
      assertNotNull(intArray0);
      
      ArrayUtils.swap(longArray0, 0, 1143);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-268L), (-1L), (-1224L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-32);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte) (-32);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-32.0F), 0.0F, 0.0F, (-32.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-32.0F);
      doubleArray0[1] = (double) (-32.0F);
      Integer integer0 = new Integer((byte) (-32));
      assertNotNull(integer0);
      assertEquals((-32), (int)integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      int int0 = 1;
      Integer integer2 = new Integer((byte)0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer(1);
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(1, (int)integer3);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer3;
      integerArray0[2] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (byte)0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-32), 1, 1}, intArray0);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (int)integerArray0[0];
      longArray0[1] = (long) (int)integerArray0[0];
      longArray0[2] = (long) 1;
      longArray0[3] = 1L;
      longArray0[4] = (long) (byte) (-32);
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      longArray0[7] = (long) 1;
      ArrayUtils.swap(longArray0, (-1331), int0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-32L), (-32L), 1L, 1L, (-32L), 1L, 1L, 1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Float float0 = new Float((-454.0F));
      assertNotNull(float0);
      assertEquals((-454.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((-454.0F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-454.0F), (float)float1, 0.01F);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 12, (-855), (-855));
      assertEquals(0, objectArray0.length);
      
      Short short0 = new Short((short)1520);
      assertNotNull(short0);
      assertEquals((short)1520, (short)short0);
      
      Short short1 = new Short((short) (-963));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-963), (short)short1);
      
      Short short2 = new Short((short) (-963));
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-963), (short)short2);
      
      Short short3 = new Short((short) (-963));
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      assertEquals((short) (-963), (short)short3);
      
      Short short4 = new Short((short) (-963));
      assertTrue(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short2));
      assertNotNull(short4);
      assertEquals((short) (-963), (short)short4);
      
      Short[] shortArray0 = new Short[4];
      shortArray0[0] = short1;
      shortArray0[1] = short2;
      Short short5 = new Short((short)1520);
      assertFalse(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertNotNull(short5);
      assertEquals((short)1520, (short)short5);
      
      shortArray0[2] = short5;
      shortArray0[3] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)3382);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-963), (short) (-963), (short)1520, (short) (-963)}, shortArray1);
      assertNotNull(shortArray1);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("RYuyv");
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean("RYuyv");
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf(true);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean("I[K]N-\\}6|X|");
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      AbstractMap.SimpleEntry<Float, Long>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Float, Long>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 2);
      Long long0 = new Long(2147483647L);
      assertNotNull(long0);
      assertEquals(2147483647L, (long)long0);
      
      AbstractMap.SimpleEntry<Float, Long> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Float, Long>((Float) null, long0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Float, Long> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Float, Long>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry1;
      Long long1 = new Long(604L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(604L, (long)long1);
      
      AbstractMap.SimpleEntry<Float, Long>[] abstractMap_SimpleEntryArray1 = ArrayUtils.add(abstractMap_SimpleEntryArray0, 1, abstractMap_SimpleEntry1);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertEquals(2, abstractMap_SimpleEntryArray0.length);
      assertEquals(3, abstractMap_SimpleEntryArray1.length);
      assertFalse(long0.equals((Object)long1));
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertNotNull(abstractMap_SimpleEntryArray1);
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) 1);
      assertNull(doubleArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) abstractMap_SimpleEntry1);
      assertFalse(long0.equals((Object)long1));
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-240L);
      floatArray0[1] = (float) 1921;
      floatArray0[2] = (float) (-240L);
      floatArray0[3] = (float) 1921;
      floatArray0[4] = (float) (-240L);
      floatArray0[5] = (float) (-240L);
      floatArray0[6] = (float) (-240L);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 19701.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {(-240.0F), 1921.0F, (-240.0F), 1921.0F, (-240.0F), (-240.0F), (-240.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-240.0F), 1921.0F, (-240.0F), 1921.0F, (-240.0F), (-240.0F), (-240.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1940.3193205274724;
      doubleArray0[1] = (double) (-240.0F);
      doubleArray0[2] = (double) 1921;
      doubleArray0[3] = (double) (-240.0F);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-240.0), 1921.0, (-240.0), 1940.3193205274724}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-3653L), (-510));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 92, (-1));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[0] = 'T';
      charArray0[1] = 'G';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'T');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(13, charArray0.length);
      assertEquals(14, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = (long) 'G';
      longArray0[2] = (long) 'T';
      longArray0[3] = (long) 'G';
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1L, 71L, 84L, 71L}, longArray0);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {1L, 71L, 84L, 71L}, longArray0);
      assertArrayEquals(new long[] {71L, 84L, 71L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-10);
      shortArray0[2] = (short) (-1491);
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = '*';
      charArray0[2] = '^';
      charArray0[3] = 'z';
      charArray0[4] = 'k';
      charArray0[5] = '~';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-1491), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1491, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'H';
      charArray0[2] = '+';
      charArray0[3] = 'n';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-939), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -939, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1L));
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      ArrayUtils.shift(doubleArray0, 90, 90, 743);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, Integer.MAX_VALUE, (-1116.89173468728));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '`';
      charArray0[5] = '1';
      charArray0[6] = '`';
      charArray0[7] = '1';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1939, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1939, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 1927.9F;
      floatArray0[2] = 1927.9F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1927.9F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      short short0 = (short)2;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)317;
      shortArray0[1] = (short) (-1392);
      shortArray0[2] = (short)317;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-1392);
      shortArray0[6] = (short)317;
      ArrayUtils.shift(shortArray0, 3016);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1392), (short)317, (short)0, (short)2, (short) (-1392), (short)317, (short)317}, shortArray0);
      
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short)2;
      shortArray1[1] = (Short) (short)317;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) 1927.9F;
      doubleArray0[2] = (double) (short) (-1392);
      doubleArray0[3] = (double) (short) (-1392);
      doubleArray0[4] = (double) 1927.9F;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1927.9000244140625, (-1392.0), (-1392.0), 1927.9000244140625, 0.0, 2.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)90;
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-87)}, byteArray0);
      
      char[] charArray0 = new char[11];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '^');
      assertEquals(11, charArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, '^');
      assertEquals(11, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = ArrayUtils.indexOf((Object[]) shortArray1, (Object) short0);
      assertEquals(2, shortArray1.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte) (-1);
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((char[]) null, 'G');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(1921);
      assertNotNull(double0);
      assertEquals(1921.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2901), (-111));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2901), (-111));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3987.04F);
      floatArray0[1] = 53.96274F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 963.9813F;
      floatArray0[7] = 53.96274F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertArrayEquals(new float[] {(-3987.04F), 53.96274F, 0.0F, 1.0F, 1.0F, 963.9813F, 0.0F, 53.96274F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(characterArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      ArrayUtils.reverse((short[]) null);
      Double double0 = new Double(53.96274F);
      assertNotNull(double0);
      assertEquals(53.96274185180664, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      Double double1 = new Double((-2395.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2395.0), (double)double1, 0.01);
      
      doubleArray0[0] = double1;
      Double[] doubleArray1 = ArrayUtils.add(doubleArray0, double0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = new Boolean("Cannot store ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean0;
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[3] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[4] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray0[5] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[6] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      assertTrue(boolean6);
      
      booleanArray0[7] = boolean6;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      Object[] objectArray0 = ArrayUtils.removeAllOccurences((Object[]) booleanArray0, (Object) boolean3);
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, objectArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(4, objectArray0.length);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean6));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean4));
      assertNotNull(objectArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3477.3418344755078;
      doubleArray0[2] = 0.0;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3477.3418344755078}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1116.89173468728));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3477.3418344755078}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 3477.3418344755078}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray2 = new boolean[2];
      booleanArray2[0] = (boolean) boolean3;
      booleanArray2[1] = (boolean) boolean1;
      ArrayUtils.swap(booleanArray2, (-189), (-189), (-189));
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3487;
      intArray0[1] = (-537);
      intArray0[2] = 3487;
      intArray0[4] = 122;
      intArray0[5] = 46;
      intArray0[6] = 9;
      intArray0[7] = (-2505);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {3487, (-537), 3487, 0, 122, 46, 9, (-2505)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short)19323;
      shortArray0[1] = (short)19323;
      shortArray0[18] = (short)5260;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3990), 9);
      assertEquals(19, shortArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3987.04F);
      floatArray0[1] = (-3987.04F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-3987.04F);
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(byteArray2, (-1), (-1085), (-1));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      ArrayUtils.reverse(objectArray1, 108, (-1));
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-338.3);
      doubleArray0[1] = (-2394.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1478.305757554, 2239);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-338.3), (-2394.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Integer[] integerArray0 = new Integer[2];
      MutableInt mutableInt0 = new MutableInt(2146922405);
      assertEquals(2146922405L, mutableInt0.longValue());
      assertEquals("2146922405", mutableInt0.toString());
      assertEquals(2.14692237E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)28581, mutableInt0.shortValue());
      assertEquals(2146922405, (int)mutableInt0.toInteger());
      assertEquals(2146922405, (int)mutableInt0.getValue());
      assertEquals(2.146922405E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(2146922405, mutableInt0.intValue());
      assertEquals((byte) (-91), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(2146922405L, mutableInt0.longValue());
      assertEquals("2146922405", mutableInt0.toString());
      assertEquals(2.14692237E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)28581, mutableInt0.shortValue());
      assertEquals(2146922405, (int)mutableInt0.toInteger());
      assertEquals(2146922405, (int)mutableInt0.getValue());
      assertEquals(2.146922405E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(2146922405, mutableInt0.intValue());
      assertEquals((byte) (-91), mutableInt0.byteValue());
      assertNotNull(integer0);
      assertEquals(2146922405, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(274);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(274, (int)integer1);
      
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-492));
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {2146922405, 274}, intArray0);
      assertNotNull(intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-121));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)2}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[6] = 1452;
      intArray0[2] = 1452;
      intArray0[4] = 1452;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(21, intArray0.length);
      assertEquals(21, intArray1.length);
      assertNotNull(intArray1);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'A');
      assertNull(charArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) 0);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'A';
      doubleArray0[1] = (double) 1452;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-6573.33);
      doubleArray0[4] = (double) 1452;
      doubleArray0[5] = (double) 1452;
      doubleArray0[6] = (double) 1452;
      doubleArray0[7] = (double) 1452;
      doubleArray0[8] = (double) 1452;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {65.0, 1452.0, 0.0, (-6573.33), 1452.0, 1452.0, 1452.0, 1452.0, 1452.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-81);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)120, (byte) (-43), (byte) (-52), (byte) (-81)}, byteArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)9, (int) (byte) (-43));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-81);
      floatArray0[1] = (float) (byte)120;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (byte) (-81);
      floatArray0[4] = (float) (byte) (-52);
      floatArray0[5] = (float) (byte)120;
      floatArray0[6] = (float) (byte) (-52);
      floatArray0[7] = (float) (short)9;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), (-2137));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-81.0F), 120.0F, 0.0F, (-81.0F), (-52.0F), 120.0F, (-52.0F), 9.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) (byte)0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (short)1319;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, Integer.MIN_VALUE);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1319.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1212);
      shortArray0[1] = (short) (-1392);
      shortArray0[2] = (short) (-1212);
      shortArray0[3] = (short) (-1392);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-1392);
      shortArray0[6] = (short) (-1212);
      ArrayUtils.shift(shortArray0, 3016);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1392), (short) (-1212), (short) (-1392), (short)2, (short) (-1392), (short) (-1212), (short) (-1212)}, shortArray0);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (short)2;
      floatArray1[1] = (float) (short) (-1212);
      floatArray1[2] = (float) (short)2;
      floatArray1[3] = (float) (short) (-1392);
      floatArray1[4] = (float) (short) (-1212);
      floatArray1[5] = (float) (short) (-1212);
      floatArray1[6] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (float) (short) (-1392), 1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {2.0F, (-1212.0F), 2.0F, (-1392.0F), (-1212.0F), (-1212.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      int[] intArray0 = new int[10];
      Object[] objectArray0 = new Object[4];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = null;
      objectArray1[1] = null;
      objectArray1[2] = null;
      Object object1 = ArrayUtils.get(objectArray1, 3487);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(3, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNull(object1);
      
      objectArray0[1] = null;
      Integer integer0 = new Integer((-18));
      assertNotNull(integer0);
      assertEquals((-18), (int)integer0);
      
      Object object2 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object2);
      assertEquals((-18), object2);
      
      objectArray0[2] = object2;
      Object object3 = ArrayUtils.get(objectArray0, 3259, (Object) null);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(4, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNull(object3);
      
      objectArray0[3] = null;
      Object object4 = ArrayUtils.get(objectArray0, 2392);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(4, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNull(object4);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, (String) null);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotNull(stringArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      ArrayUtils.reverse(longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-268L));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-268.0), (-268.0), 0.0, (-268.0), (-268.0), (-268.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-268.0), (-268.0), 0.0, (-268.0), (-268.0), (-268.0)}, doubleArray1, 0.01);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 321;
      intArray0[1] = (-563);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-39);
      ArrayUtils.shift(byteArray0, 321);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)65, (byte) (-123), (byte) (-123)}, byteArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte) (-123));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      ArrayUtils.shift((Object[]) doubleArray0, 321);
      assertEquals(6, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) doubleArray0, (Object) double0, (-1641));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2151;
      shortArray0[2] = (short)2065;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2065, (-2147016319));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2151, (short)2065}, shortArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)0;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-1491);
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short) (-1491);
      intArray0[6] = 1993;
      intArray0[7] = (int) (short) (-1491);
      ArrayUtils.swap(intArray0, (int) (short) (-1491), 2, (int) (short)0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, (-1491), 0, 0, 0, (-1491), 1993, (-1491)}, intArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)0;
      Object object0 = ArrayUtils.get(objectArray0, 6);
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '1');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertNotNull(charArray0);
      
      ArrayUtils.swap(objectArray0, 1971, (int) (short)0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = 'v';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Z');
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'!', 'v'}, charArray0);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)4, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'v';
      doubleArray0[1] = (double) 'v';
      doubleArray0[2] = (double) (byte)4;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (-338.3);
      doubleArray0[6] = (double) 'v';
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) 'v';
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {118.0, 118.0, 4.0, 0.0, 0.0, (-338.3), 118.0, 0.0, 118.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {118.0, 118.0, 4.0, 0.0, 0.0, (-338.3), 118.0, 0.0, 118.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 0.0);
      assertNotSame(doubleArray1, doubleArray2);
      assertSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {118.0, 118.0, 4.0, 0.0, 0.0, (-338.3), 118.0, 0.0, 118.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 118.0, 118.0, 4.0, 0.0, 0.0, (-338.3), 118.0, 0.0, 118.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {118.0, 118.0, 4.0, 0.0, 0.0, (-338.3), 118.0, 0.0, 118.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      ArrayUtils.shift(charArray0, (int) (byte)0, (int) (byte)0, (-98));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'!', 'v'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '|';
      charArray0[2] = '-';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '|';
      doubleArray0[1] = (-240.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0L, (-341), (-240.0));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {124.0, (-240.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences((double[]) null, 100.0);
      assertNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 2049870754, 1936);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((short)2324);
      assertNotNull(double0);
      assertEquals(2324.0, (double)double0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.add(doubleArray0, doubleArray0[0]);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(doubleArray0, objectArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      long[] longArray0 = ArrayUtils.insert(0, (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3975.47312421;
      doubleArray0[2] = (-2167.99951568);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1299.7824, 0, (-2167.99951568));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3975.47312421, (-2167.99951568)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Short[] shortArray0 = ArrayUtils.removeAllOccurences((Short[]) null, short0);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)19701;
      floatArray0[3] = (float) (short)19701;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) (-1);
      ArrayUtils.reverse(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), 19701.0F, 19701.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (short)19701);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), 19701.0F, 0.0F, (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), 19701.0F, 19701.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Integer[] integerArray0 = ArrayUtils.toArray((Integer[]) null);
      assertNull(integerArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = '|';
      charArray0[2] = 'j';
      charArray0[3] = '0';
      charArray0[4] = 'K';
      charArray0[5] = 'V';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '|');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'!', '|', 'j', '0', 'K', 'V'}, charArray0);
      assertArrayEquals(new char[] {'!', 'j', '0', 'K', 'V'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      long[] longArray0 = ArrayUtils.insert(0, (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3975.47312421;
      doubleArray0[2] = (-2167.99951568);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1299.7824, 0, (-2167.99951568));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3975.47312421, (-2167.99951568)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Short[] shortArray0 = ArrayUtils.removeAllOccurences((Short[]) null, short0);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)19701;
      floatArray0[3] = (float) (short)19701;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) (-1);
      ArrayUtils.reverse(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), 19701.0F, 19701.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (short)19701);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), 19701.0F, 0.0F, (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), 19701.0F, 19701.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = 'M';
      charArray0[2] = '-';
      charArray0[3] = '{';
      charArray0[4] = 'F';
      charArray0[5] = '8';
      charArray0[6] = '@';
      charArray0[7] = ']';
      charArray0[8] = '-';
      ArrayUtils.shift(charArray0, 2, (-1), (int) (short)0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'4', 'M', '-', '{', 'F', '8', '@', ']', '-'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short)0;
      String[] stringArray0 = new String[7];
      ArrayUtils.reverse((Object[]) stringArray0, (int) (short)0, (int) (short)0);
      assertEquals(7, stringArray0.length);
      
      ArrayUtils.shift(shortArray0, (-2338), (int) (short)0, 2);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)120;
      byteArray0[3] = (byte)65;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)65);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)120, (byte)0, (byte)65}, byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte)120, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1626);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (-1626);
      longArray0[5] = (-1626L);
      longArray0[6] = (long) (-1626);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1626L), (-1626L), (-1626L)}, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1626L), (-1626L), (-1626L), 0L}, longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = '/';
      charArray0[2] = '\'';
      charArray0[3] = ')';
      ArrayUtils.shift(charArray0, (-1626));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\'', ')', 'm', '/'}, charArray0);
      
      long[] longArray2 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertEquals(7, longArray2.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1626L), (-1626L), (-1626L), 0L}, longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1626L), (-1626L), (-1626L), 0L}, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0L);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) double0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1088L;
      longArray0[1] = 2351L;
      longArray0[2] = 0L;
      longArray0[4] = 238L;
      longArray0[5] = 3818L;
      longArray0[6] = 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 3818L);
      assertEquals("{5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1088L, 2351L, 0L, 0L, 238L, 3818L, 1L}, longArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1088L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1088L;
      doubleArray0[7] = (double) 1088L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 560, 560);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1088.0, 1.0, 0.0, 0.0, 1.0, 1088.0, 1088.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, 692.0F);
      assertNull(floatArray0);
      
      ArrayUtils.swap(doubleArray1, 120, 560);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1088.0, 1.0, 0.0, 0.0, 1.0, 1088.0, 1088.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, 120);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",";
      stringArray0[1] = " is not a valid number.";
      stringArray0[2] = "";
      stringArray0[3] = "nfW|A3E;nFU";
      stringArray0[4] = "seNA@2m-SCK]";
      stringArray0[5] = "";
      stringArray0[6] = "L";
      stringArray0[7] = "$`b\"k+[o66%orq) 7";
      stringArray0[8] = "";
      String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) "seNA@2m-SCK]");
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(8, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byte byte0 = (byte) (-48);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-77);
      byte byte1 = (byte)50;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-75);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2523), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2523, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-678L);
      ArrayUtils.shift((Object[]) null, 0, 0, Integer.MAX_VALUE);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.insert(2109, byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-37), (byte)48, (byte)48, (byte)48, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-37), (byte)48, (byte)48, (byte)48, (byte)48}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Double double0 = new Double(1921);
      assertNotNull(double0);
      assertEquals(1921.0, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-240L);
      doubleArray0[1] = 2199.9215574;
      doubleArray0[2] = (double) 1921;
      doubleArray0[3] = (double) (-240L);
      doubleArray0[5] = (double) (-240L);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = 2199.9215574;
      doubleArray1[2] = 2199.9215574;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {(-240.0), 2199.9215574, 1921.0, (-240.0), 0.0, (-240.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2199.9215574, 2199.9215574, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2199.9215574}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1921, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1921, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 2873);
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Short short0 = new Short((short)1533);
      assertNotNull(short0);
      assertEquals((short)1533, (short)short0);
      
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null);
      assertTrue(boolean0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((short)1533);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1533L, (long)long1);
      
      Long long2 = new Long((-1L));
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      
      Long long3 = new Long((-1L));
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals((-1L), (long)long3);
      
      Long long4 = new Long((-1L));
      assertTrue(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals((-1L), (long)long4);
      
      Long long5 = Long.getLong("", (-300L));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertNotNull(long5);
      assertEquals((-300L), (long)long5);
      
      Long long6 = new Long(1452L);
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long1));
      assertNotNull(long6);
      assertEquals(1452L, (long)long6);
      
      Long long7 = new Long((-1L));
      assertTrue(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long5));
      assertTrue(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long1));
      assertTrue(long7.equals((Object)long3));
      assertTrue(long7.equals((Object)long0));
      assertNotNull(long7);
      assertEquals((-1L), (long)long7);
      
      Long long8 = new Long(1657L);
      assertFalse(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long6));
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long4));
      assertNotNull(long8);
      assertEquals(1657L, (long)long8);
      
      ArrayUtils.shift((Object[]) null, 3553, 171, 3553);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)7;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(32, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3482;
      intArray0[1] = (-537);
      Long long0 = new Long(468L);
      assertNotNull(long0);
      assertEquals(468L, (long)long0);
      
      ArrayUtils.shift((Object[]) null, 171, 49, 171);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Character character0 = new Character('!');
      assertNotNull(character0);
      assertEquals('!', (char)character0);
      
      Character character1 = new Character('M');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('M', (char)character1);
      
      Character character2 = new Character('M');
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('M', (char)character2);
      
      Character character3 = new Character('~');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('~', (char)character3);
      
      Character character4 = new Character('M');
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      assertEquals('M', (char)character4);
      
      Character character5 = Character.valueOf('M');
      assertTrue(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character2));
      assertNotNull(character5);
      assertEquals('M', (char)character5);
      
      Character character6 = new Character('|');
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character1));
      assertNotNull(character6);
      assertEquals('|', (char)character6);
      
      Character character7 = new Character('!');
      assertTrue(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character2));
      assertNotNull(character7);
      assertEquals('!', (char)character7);
      
      Character character8 = Character.valueOf('~');
      assertFalse(character8.equals((Object)character6));
      assertTrue(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character0));
      assertNotNull(character8);
      assertEquals('~', (char)character8);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = character8;
      characterArray0[1] = character3;
      characterArray0[2] = character6;
      characterArray0[3] = character1;
      Character character9 = new Character('j');
      assertFalse(character9.equals((Object)character8));
      assertFalse(character9.equals((Object)character4));
      assertFalse(character9.equals((Object)character7));
      assertFalse(character9.equals((Object)character1));
      assertFalse(character9.equals((Object)character2));
      assertFalse(character9.equals((Object)character5));
      assertFalse(character9.equals((Object)character6));
      assertFalse(character9.equals((Object)character0));
      assertFalse(character9.equals((Object)character3));
      assertNotNull(character9);
      assertEquals('j', (char)character9);
      
      characterArray0[4] = character9;
      characterArray0[5] = character6;
      characterArray0[6] = character4;
      Character character10 = Character.valueOf((char) character4);
      assertFalse(character10.equals((Object)character7));
      assertFalse(character10.equals((Object)character9));
      assertFalse(character10.equals((Object)character8));
      assertTrue(character10.equals((Object)character1));
      assertTrue(character10.equals((Object)character2));
      assertFalse(character10.equals((Object)character0));
      assertFalse(character10.equals((Object)character6));
      assertFalse(character10.equals((Object)character3));
      assertTrue(character10.equals((Object)character4));
      assertTrue(character4.equals((Object)character5));
      assertFalse(character4.equals((Object)character8));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character7));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character9));
      assertFalse(character4.equals((Object)character6));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character10);
      assertEquals('M', (char)character10);
      
      Character character11 = ArrayUtils.get(characterArray0, (-8), character10);
      assertEquals(7, characterArray0.length);
      assertFalse(character10.equals((Object)character7));
      assertFalse(character10.equals((Object)character9));
      assertFalse(character10.equals((Object)character8));
      assertTrue(character10.equals((Object)character1));
      assertTrue(character10.equals((Object)character2));
      assertFalse(character10.equals((Object)character0));
      assertFalse(character10.equals((Object)character6));
      assertFalse(character10.equals((Object)character3));
      assertTrue(character10.equals((Object)character4));
      assertFalse(character11.equals((Object)character8));
      assertTrue(character11.equals((Object)character1));
      assertTrue(character11.equals((Object)character2));
      assertFalse(character11.equals((Object)character6));
      assertFalse(character11.equals((Object)character0));
      assertFalse(character11.equals((Object)character3));
      assertTrue(character11.equals((Object)character4));
      assertFalse(character11.equals((Object)character7));
      assertFalse(character11.equals((Object)character9));
      assertTrue(character4.equals((Object)character5));
      assertFalse(character4.equals((Object)character8));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character7));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character10));
      assertTrue(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character9));
      assertFalse(character4.equals((Object)character6));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character11);
      assertEquals('M', (char)character11);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)32;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-76));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)103, (byte)9, (byte) (-51), (byte)32}, byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte)9, (byte) (-51), (byte)32}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte)103);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)103, (byte)9, (byte) (-51), (byte)32}, byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte)9, (byte) (-51), (byte)32}, byteArray1);
      assertArrayEquals(new byte[] {(byte)103, (byte)9, (byte) (-51), (byte)32, (byte)103}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-1);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)10, (byte) (-26), (byte) (-1)}, byteArray0);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte) (-26));
      assertNotNull(byte0);
      assertEquals((byte) (-26), (byte)byte0);
      
      boolean boolean1 = ArrayUtils.isSameType(byte0, byte0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-26);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-26);
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = (int) (byte) (-26);
      intArray0[5] = (int) (byte) (-59);
      intArray0[6] = (int) (byte)10;
      intArray0[7] = (int) (byte) (-59);
      intArray0[8] = (int) (byte) (-1);
      int int0 = ArrayUtils.indexOf(intArray0, 0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-26), (-1), (-26), (-1), (-26), (-59), 10, (-59), (-1)}, intArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(intArray0, (-1), (-1));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-26), (-1), (-26), (-1), (-26), (-59), 10, (-59), (-1)}, intArray0);
      
      ArrayUtils.shift(byteArray0, (-26), (int) (byte) (-1), (-26));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)10, (byte) (-26), (byte) (-1)}, byteArray0);
      
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = (Byte) (byte)10;
      byteArray1[1] = (Byte) (byte) (-26);
      byteArray1[2] = (Byte) (byte)10;
      byteArray1[3] = (Byte) (byte)10;
      byteArray1[4] = (Byte) (byte) (-59);
      Byte byte1 = new Byte((byte)10);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)10, (byte)byte1);
      
      byteArray1[5] = byte1;
      byteArray1[6] = (Byte) (byte)10;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray2.length);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-240L), 1921);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(1921);
      assertNotNull(double0);
      assertEquals(1921.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-240L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-240.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1.0);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.0);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(1.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      assertEquals(0.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = (double) doubleArray0[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-240.0)}, doubleArray1, 0.01);
      assertTrue(boolean0);
      
      ArrayUtils.shuffle((Object[]) doubleArray0);
      assertEquals(5, doubleArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray1, 1.0, (-240.0));
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-240.0)}, doubleArray1, 0.01);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 1921);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 1921, 1921);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      ArrayUtils.reverse(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1921;
      intArray0[1] = 1921;
      intArray0[2] = 1921;
      intArray0[3] = 1921;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {1921, 1921, 1921, 1921}, intArray0);
      assertArrayEquals(new int[] {1921, 1921, 1921, 1921}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)9);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)2);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = 'E';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertArrayEquals(new char[] {'?', 'E'}, charArray0);
      assertNotNull(characterArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'?', 'E'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, (long) (byte)2);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("s.BIN75[:;r#");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean("");
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean(false);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[9];
      booleanArray0[0] = boolean3;
      Boolean boolean5 = Boolean.valueOf("");
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[1] = boolean5;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean4;
      booleanArray0[4] = boolean1;
      booleanArray0[5] = boolean2;
      booleanArray0[6] = boolean3;
      booleanArray0[7] = boolean1;
      booleanArray0[8] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Double double0 = new Double(1921);
      assertNotNull(double0);
      assertEquals(1921.0, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-240L);
      doubleArray0[1] = 2199.9215574;
      doubleArray0[2] = (double) 1921;
      doubleArray0[3] = (double) (-240L);
      doubleArray0[5] = (double) (-240L);
      doubleArray0[6] = (double) (-240L);
      doubleArray0[7] = (double) (-240L);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1921;
      doubleArray1[1] = 2199.9215574;
      doubleArray1[2] = 2199.9215574;
      doubleArray1[3] = 2199.9215574;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {(-240.0), 2199.9215574, 1921.0, (-240.0), 0.0, (-240.0), (-240.0), (-240.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1921.0, 2199.9215574, 2199.9215574, 2199.9215574}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2199.9215574, 2199.9215574}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)1064, 52);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-338.3);
      doubleArray0[1] = (-2394.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1478.305757554, 2239);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-338.3), (-2394.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Integer[] integerArray0 = new Integer[2];
      MutableInt mutableInt0 = new MutableInt(2146922405);
      assertEquals((byte) (-91), mutableInt0.byteValue());
      assertEquals((short)28581, mutableInt0.shortValue());
      assertEquals(2146922405, mutableInt0.intValue());
      assertEquals(2146922405L, mutableInt0.longValue());
      assertEquals(2146922405, (int)mutableInt0.toInteger());
      assertEquals(2146922405, (int)mutableInt0.getValue());
      assertEquals(2.146922405E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(2.14692237E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals("2146922405", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals((byte) (-91), mutableInt0.byteValue());
      assertEquals((short)28581, mutableInt0.shortValue());
      assertEquals(2146922405, mutableInt0.intValue());
      assertEquals(2146922405L, mutableInt0.longValue());
      assertEquals(2146922405, (int)mutableInt0.toInteger());
      assertEquals(2146922405, (int)mutableInt0.getValue());
      assertEquals(2.146922405E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(2.14692237E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals("2146922405", mutableInt0.toString());
      assertNotNull(integer0);
      assertEquals(2146922405, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(274);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(274, (int)integer1);
      
      mutableInt0.add((Number) integer1);
      assertEquals(2.14692262E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.146922679E9, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-73), mutableInt0.byteValue());
      assertEquals(2146922679L, mutableInt0.longValue());
      assertEquals(2146922679, mutableInt0.intValue());
      assertEquals("2146922679", mutableInt0.toString());
      assertEquals(2146922679, (int)mutableInt0.getValue());
      assertEquals((short)28855, mutableInt0.shortValue());
      assertEquals(2146922679, (int)mutableInt0.toInteger());
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-492));
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {2146922405, 274}, intArray0);
      assertNotNull(intArray0);
      
      String[] stringArray0 = new String[0];
      String string0 = ArrayUtils.get(stringArray0, 2146534349, "/OU>*qO2N6qzEHQ");
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("/OU>*qO2N6qzEHQ", string0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(byteArray2, (-1), (int) (byte)14, (-1));
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      ArrayUtils.reverse(objectArray1, 108, (-1));
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-20);
      ArrayUtils.shift(shortArray0, (int) (byte)14, (-3497), (-1));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-20)}, shortArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 2049870754, 1936);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double((short)2324);
      assertNotNull(double0);
      assertEquals(2324.0, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1936;
      doubleArray0[1] = (double) (short)2324;
      doubleArray0[2] = (double) (short)2324;
      doubleArray0[3] = (double) (short) (-1857);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1936.0, 2324.0, 2324.0, (-1857.0)}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (short) (-1857));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 685.07F);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {685.07F}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, 0, 'x');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertNotNull(charArray0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-2864.238F));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {685.07F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {685.07F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 14, 1936);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-53);
      shortArray0[1] = (short)2324;
      shortArray0[2] = (short) (-1857);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-299);
      shortArray0[5] = (short)2020;
      shortArray0[7] = (short)2324;
      ArrayUtils.reverse(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2324, (short)0, (short)2020, (short) (-299), (short) (-1), (short) (-1857), (short)2324, (short) (-53)}, shortArray0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short) (-1));
      assertEquals((-1), int0);
      
      ArrayUtils.shift((char[]) null, 1072, (-1), (int) (short) (-53));
      boolean boolean2 = ArrayUtils.contains((double[]) null, (double) (short)2324, (double) (short)0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, (int) (short)0, 'K');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'K'}, charArray0);
      assertNotNull(charArray0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((short)2324);
      assertNotNull(double0);
      assertEquals(2324.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-696.34077954));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-696.34077954), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((short) (-1));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-1.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Class<Double[]> class0 = Double[].class;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0, class0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      int int0 = 0;
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = (BitSet)bitSet0.clone();
      assertEquals(0, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.size());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 53;
      intArray0[2] = 9;
      intArray0[3] = 2145813754;
      intArray0[4] = 34;
      ArrayUtils.shift(intArray0, 7);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2145813754, 34, Integer.MAX_VALUE, 53, 9}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2145813754;
      doubleArray0[1] = (double) 34;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) 2145813754;
      doubleArray0[5] = (double) 9;
      doubleArray0[6] = (double) 9;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertArrayEquals(new double[] {2.145813754E9, 34.0, 9.0, 9.0, 2.145813754E9, 9.0, 9.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)2;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-108), (byte)102, (byte)57, (byte)2}, byteArray0);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)57;
      floatArray0[1] = (float) (byte)57;
      floatArray0[2] = (float) (byte)102;
      floatArray0[3] = 90.17451F;
      floatArray0[4] = (float) (byte)2;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {57.0F, 57.0F, 102.0F, 90.17451F, 2.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1482.665519);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1185.4562414681);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[6] = 0.0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1760.8441F);
      floatArray0[1] = (-1760.8441F);
      floatArray0[2] = 118.0F;
      floatArray0[3] = (-1760.8441F);
      floatArray0[2] = 0.0F;
      floatArray0[5] = (-1760.8441F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-1760.8441F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1760.8441F), (-1760.8441F), (-1760.8441F), (-1760.8441F), (-1760.8441F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1760.8441F), (-1760.8441F), 0.0F, (-1760.8441F), 0.0F, (-1760.8441F), 0.0F, (-1760.8441F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-40);
      ArrayUtils.reverse(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-40), (byte)1}, byteArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, (-1185.4562414681), 0.0, (-1482.665519)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1482.665519);
      doubleArray0[2] = (-1183.8141748085022);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1760.8441F);
      floatArray0[1] = (-1760.8441F);
      floatArray0[2] = 118.0F;
      floatArray0[3] = (-1760.8441F);
      floatArray0[2] = 0.0F;
      floatArray0[5] = (-1760.8441F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-1760.8441F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-1760.8441F), (-1760.8441F), 0.0F, (-1760.8441F), 0.0F, (-1760.8441F), 0.0F, (-1760.8441F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1760.8441F), (-1760.8441F), (-1760.8441F), (-1760.8441F), (-1760.8441F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-3355L);
      longArray0[1] = 1785L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = (-1506L);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-3355L), 1785L, (-1L), 0L, (-1506L)}, longArray1);
      assertArrayEquals(new long[] {(-3355L), 1785L, (-1L), 0L, (-1506L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte)91;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-69));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)15, (byte) (-57), (byte)8, (byte) (-69), (byte)6, (byte) (-123), (byte) (-78), (byte)91}, byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte) (-57), (byte)8, (byte)6, (byte) (-123), (byte) (-78), (byte)91}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-266.44F);
      floatArray0[1] = (-1909.0F);
      floatArray0[2] = (-1960.487F);
      floatArray0[3] = 1613.14F;
      floatArray0[4] = (-1.0F);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 12, (-855), (-855));
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2264.18);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {3.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) "+([hzQ8_h`j@X_!5'sc");
      assertNotNull(object0);
      assertEquals("+([hzQ8_h`j@X_!5'sc", object0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 12;
      intArray0[1] = (-855);
      intArray0[2] = (-855);
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("nF-=/K pTS8+K1:o7Jk");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((String) null);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean2);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false}, booleanArray1));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean4));
      assertFalse(boolean2.equals((Object)boolean3));
      assertTrue(boolean2.equals((Object)boolean5));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(booleanArray1);
      
      ArrayUtils.shuffle(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {3.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      boolean[] booleanArray2 = new boolean[4];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = true;
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurences(booleanArray2, true);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertEquals(4, booleanArray2.length);
      assertEquals(2, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray3));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-75));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-75)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = 3487;
      MutableInt mutableInt0 = new MutableInt(3487);
      assertEquals(3487L, mutableInt0.longValue());
      assertEquals(3487.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3487.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3487, (int)mutableInt0.getValue());
      assertEquals(3487, (int)mutableInt0.toInteger());
      assertEquals((byte) (-97), mutableInt0.byteValue());
      assertEquals("3487", mutableInt0.toString());
      assertEquals(3487, mutableInt0.intValue());
      assertEquals((short)3487, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((Number) 3487);
      assertEquals(3487.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)3487, mutableInt1.shortValue());
      assertEquals("3487", mutableInt1.toString());
      assertEquals(3487L, mutableInt1.longValue());
      assertEquals(3487, mutableInt1.intValue());
      assertEquals((byte) (-97), mutableInt1.byteValue());
      assertEquals(3487.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(3487, (int)mutableInt1.getValue());
      assertEquals(3487, (int)mutableInt1.toInteger());
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      Class<MutableInt[]> class0 = MutableInt[].class;
      MutableInt[] mutableIntArray0 = ArrayUtils.nullToEmpty((MutableInt[]) null, class0);
      assertEquals(0, mutableIntArray0.length);
      assertNotNull(mutableIntArray0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1491);
      shortArray0[3] = (short)97;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-971);
      MutableInt mutableInt0 = new MutableInt((int) (short)2);
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      Class<MutableInt[]> class0 = MutableInt[].class;
      MutableInt[] mutableIntArray0 = new MutableInt[3];
      mutableIntArray0[0] = mutableInt0;
      mutableIntArray0[1] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((int) (short) (-1491));
      assertEquals((byte)45, mutableInt1.byteValue());
      assertEquals((-1491), (int)mutableInt1.toInteger());
      assertEquals((-1491L), mutableInt1.longValue());
      assertEquals((short) (-1491), mutableInt1.shortValue());
      assertEquals((-1491), (int)mutableInt1.getValue());
      assertEquals("-1491", mutableInt1.toString());
      assertEquals((-1491.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-1491), mutableInt1.intValue());
      assertEquals((-1491.0), mutableInt1.doubleValue(), 0.01);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      mutableIntArray0[2] = mutableInt1;
      MutableInt[] mutableIntArray1 = ArrayUtils.nullToEmpty(mutableIntArray0, class0);
      assertSame(mutableIntArray0, mutableIntArray1);
      assertSame(mutableIntArray1, mutableIntArray0);
      assertEquals(3, mutableIntArray0.length);
      assertEquals(3, mutableIntArray1.length);
      assertNotNull(mutableIntArray1);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3987.04F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-3987.04F);
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(byteArray2, (-1), (-1085), (-1));
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      ArrayUtils.reverse(objectArray1, 108, (-1));
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[7];
      MutableInt mutableInt0 = new MutableInt((-1));
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertEquals("-1", mutableInt1.toString());
      assertEquals((-1), mutableInt1.intValue());
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt1.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(mutableInt1);
      assertEquals("-1", mutableInt1.toString());
      assertEquals((-1), mutableInt1.intValue());
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt1.longValue());
      assertEquals((-1.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt2.longValue());
      assertEquals((-1.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt2.getValue());
      assertEquals((-1), (int)mutableInt2.toInteger());
      assertEquals((byte) (-1), mutableInt2.byteValue());
      assertEquals("-1", mutableInt2.toString());
      assertEquals((short) (-1), mutableInt2.shortValue());
      assertEquals((-1), mutableInt2.intValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertNotNull(mutableInt2);
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(mutableInt2);
      assertEquals("-1", mutableInt1.toString());
      assertEquals((-1), mutableInt1.intValue());
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt1.longValue());
      assertEquals((-1.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt2.longValue());
      assertEquals((-1.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt2.getValue());
      assertEquals((-1), (int)mutableInt2.toInteger());
      assertEquals((byte) (-1), mutableInt2.byteValue());
      assertEquals("-1", mutableInt2.toString());
      assertEquals((short) (-1), mutableInt2.shortValue());
      assertEquals((-1), mutableInt2.intValue());
      assertEquals("-1", mutableInt3.toString());
      assertEquals((-1), (int)mutableInt3.toInteger());
      assertEquals((-1), mutableInt3.intValue());
      assertEquals((-1), (int)mutableInt3.getValue());
      assertEquals((byte) (-1), mutableInt3.byteValue());
      assertEquals((-1.0F), mutableInt3.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt3.shortValue());
      assertEquals((-1.0), mutableInt3.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt3.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt1.equals((Object)mutableInt2));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertNotNull(mutableInt3);
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt(mutableInt3);
      assertEquals("-1", mutableInt1.toString());
      assertEquals((-1), mutableInt1.intValue());
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt1.longValue());
      assertEquals((-1.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt2.longValue());
      assertEquals((-1.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt2.getValue());
      assertEquals((-1), (int)mutableInt2.toInteger());
      assertEquals((byte) (-1), mutableInt2.byteValue());
      assertEquals("-1", mutableInt2.toString());
      assertEquals((short) (-1), mutableInt2.shortValue());
      assertEquals((-1), mutableInt2.intValue());
      assertEquals("-1", mutableInt3.toString());
      assertEquals((-1), (int)mutableInt3.toInteger());
      assertEquals((-1), mutableInt3.intValue());
      assertEquals((-1), (int)mutableInt3.getValue());
      assertEquals((byte) (-1), mutableInt3.byteValue());
      assertEquals((-1.0F), mutableInt3.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt3.shortValue());
      assertEquals((-1.0), mutableInt3.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt3.longValue());
      assertEquals((-1.0F), mutableInt4.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt4.shortValue());
      assertEquals((-1.0), mutableInt4.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt4.longValue());
      assertEquals("-1", mutableInt4.toString());
      assertEquals((-1), (int)mutableInt4.toInteger());
      assertEquals((-1), mutableInt4.intValue());
      assertEquals((-1), (int)mutableInt4.getValue());
      assertEquals((byte) (-1), mutableInt4.byteValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertTrue(mutableInt1.equals((Object)mutableInt3));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt1.equals((Object)mutableInt2));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt3));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      assertTrue(mutableInt4.equals((Object)mutableInt0));
      assertTrue(mutableInt4.equals((Object)mutableInt2));
      assertTrue(mutableInt4.equals((Object)mutableInt3));
      assertTrue(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt0.equals((Object)mutableInt3));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertNotNull(mutableInt4);
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt((Number) (byte)14);
      assertEquals((byte)14, mutableInt5.byteValue());
      assertEquals(14, (int)mutableInt5.getValue());
      assertEquals(14, (int)mutableInt5.toInteger());
      assertEquals(14L, mutableInt5.longValue());
      assertEquals(14, mutableInt5.intValue());
      assertEquals("14", mutableInt5.toString());
      assertEquals(14.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals((short)14, mutableInt5.shortValue());
      assertEquals(14.0, mutableInt5.doubleValue(), 0.01);
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertNotNull(mutableInt5);
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt mutableInt6 = new MutableInt((-982));
      assertEquals((short) (-982), mutableInt6.shortValue());
      assertEquals((-982.0), mutableInt6.doubleValue(), 0.01);
      assertEquals((-982L), mutableInt6.longValue());
      assertEquals((byte)42, mutableInt6.byteValue());
      assertEquals((-982), (int)mutableInt6.getValue());
      assertEquals((-982.0F), mutableInt6.floatValue(), 0.01F);
      assertEquals((-982), mutableInt6.intValue());
      assertEquals((-982), (int)mutableInt6.toInteger());
      assertEquals("-982", mutableInt6.toString());
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertNotNull(mutableInt6);
      
      mutableIntArray0[6] = mutableInt6;
      Class<MutableInt[]> class0 = MutableInt[].class;
      MutableInt[] mutableIntArray1 = ArrayUtils.nullToEmpty(mutableIntArray0, class0);
      assertSame(mutableIntArray1, mutableIntArray0);
      assertSame(mutableIntArray0, mutableIntArray1);
      assertEquals(7, mutableIntArray1.length);
      assertEquals(7, mutableIntArray0.length);
      assertNotNull(mutableIntArray1);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.swap(booleanArray0, (-1), 2143019025, 2);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 2143019025;
      intArray0[2] = 1205;
      intArray0[3] = 2143019025;
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = 2;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {2, 2143019025, 1205, 2143019025, 0, 2, 2}, intArray0);
      assertArrayEquals(new int[] {2, 2143019025, 1205, 2143019025, 0, 2, 2}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1L));
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      ArrayUtils.shift(doubleArray0, 90, 90, 743);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '0';
      charArray0[4] = 'g';
      charArray0[5] = ',';
      charArray0[1] = 'D';
      ArrayUtils.reverse(charArray0, (-1685), 6);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {',', 'g', '0', '\\', 'D', '>', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\\');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {',', 'g', '0', 'D', '>', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {',', 'g', '0', '\\', 'D', '>', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)24;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)692);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)24}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)24}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Float float0 = new Float((float) (short)24);
      assertNotNull(float0);
      assertEquals(24.0F, (float)float0, 0.01F);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)692;
      floatArray0[1] = (float) (short)692;
      floatArray0[3] = (float) (short)24;
      floatArray0[4] = (float) (short)24;
      floatArray0[5] = (float) (short)692;
      floatArray0[6] = (float) (short)24;
      floatArray0[7] = 0.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 692.0F);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {692.0F, 692.0F, 0.0F, 24.0F, 24.0F, 692.0F, 24.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (-1626));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (-1396);
      intArray0[2] = (-1626);
      intArray0[3] = (-1);
      ArrayUtils.swap(intArray0, 401, Integer.MAX_VALUE, (-1));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, (-1396), (-1626), (-1), 0}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      assertArrayEquals(new char[] {'\"', '\"'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.shift(charArray1, 1448);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      assertArrayEquals(new char[] {'\"', '\"'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)692;
      longArray0[1] = (long) (short)692;
      longArray0[2] = (long) (-1396);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (short)24;
      longArray0[5] = (long) (-1626);
      longArray0[6] = (-290L);
      longArray0[7] = (long) '\"';
      longArray0[8] = (long) (short)24;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {692L, 692L, (-1396L), (-1L), 24L, (-1626L), (-290L), 34L, 24L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      int int0 = 190;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 2478.21;
      ArrayUtils.shift(doubleArray0, 190, 53, 2683);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-36);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)88;
      intArray0[1] = (int) (byte) (-36);
      intArray0[2] = (int) (byte)52;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, 14);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-36), (byte)1, (byte)88, (byte)2, (byte) (-113), (byte)88, (byte) (-36)}, byteArray0);
      assertEquals(3, int0);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.insert(0, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.subarray((double[]) null, 0, (-1482));
      assertNull(doubleArray1);
      
      Float float0 = new Float(893.0);
      assertNotNull(float0);
      assertEquals(893.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = floatArray0[0];
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      Float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-99);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-32));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-99)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte) (-60), (byte) (-99)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      ArrayUtils.shift(charArray0, (-503));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'r'}, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'r';
      intArray0[1] = (int) 'r';
      intArray0[2] = (-503);
      intArray0[3] = (-503);
      intArray0[4] = (int) 'r';
      ArrayUtils.shift(intArray0, 70, 21, 923);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {114, 114, (-503), (-503), 114}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 70;
      doubleArray0[1] = (double) 923;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2, (double) 114);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {70.0, 923.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {70.0, 923.0, 114.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'S', 'S', 'S', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'S';
      longArray0[1] = (long) 'S';
      longArray0[2] = (long) 'S';
      longArray0[3] = (long) 'S';
      longArray0[4] = (long) 'S';
      longArray0[5] = (long) 'S';
      longArray0[6] = (long) 29;
      ArrayUtils.shift(longArray0, 29, 2147483639, 1211);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {83L, 83L, 83L, 83L, 83L, 83L, 29L}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-3035.3518713204), (-1101.0780814));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) 83L;
      longArray1[1] = (Long) 83L;
      Long long0 = new Long((long) longArray1[0]);
      assertEquals(2, longArray1.length);
      assertNotNull(long0);
      assertEquals(83L, (long)long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray1, 2147483639, long0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483639, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1050.6F;
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1050.6F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      ArrayUtils.shift((long[]) null, 2);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 3285.8694F, 9);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) bitSet0, 9);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-1);
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'o';
      charArray0[2] = '|';
      charArray0[3] = 'U';
      charArray0[4] = 'B';
      ArrayUtils.shuffle(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'o', '|', 'U', 'B', 'X'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[3] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 211.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 211.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[3];
      doubleArray0[3] = (double) (byte)111;
      byteArray0[1] = (byte) (-53);
      boolean boolean2 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-53), (byte)0}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte) (-53));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-53);
      intArray0[1] = (int) '(';
      intArray0[2] = (int) (byte)111;
      intArray0[3] = (int) (byte) (-53);
      intArray0[4] = (int) (byte) (-53);
      intArray0[5] = (int) (byte) (-53);
      intArray0[6] = (int) '(';
      intArray0[7] = (int) (byte)111;
      boolean boolean3 = ArrayUtils.contains(intArray0, (int) (byte) (-53));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-53), 40, 111, (-53), (-53), (-53), 40, 111}, intArray0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[6] = 1452;
      intArray0[2] = 1452;
      intArray0[4] = 1452;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(21, intArray0.length);
      assertEquals(21, intArray1.length);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertSame(intArray0, intArray1);
      assertEquals(21, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[3] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 211.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 211.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[3];
      doubleArray0[3] = (double) (byte)111;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)110;
      boolean boolean2 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-53), (byte)110}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte) (-53));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-53);
      intArray0[1] = (int) '(';
      intArray0[2] = (int) (byte)111;
      intArray0[3] = (int) (byte) (-53);
      intArray0[4] = (int) (byte) (-53);
      intArray0[5] = (int) (byte) (-53);
      intArray0[6] = (int) '(';
      intArray0[7] = (int) (byte)111;
      boolean boolean3 = ArrayUtils.contains(intArray0, 1146);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-53), 40, 111, (-53), (-53), (-53), 40, 111}, intArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayUtils.shift((long[]) null, 2145812454, 2145812454, (-274));
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (double) (-274));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[0];
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2, (-1145.6));
      assertNotSame(doubleArray3, doubleArray0);
      assertSame(doubleArray3, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayUtils.shift((long[]) null, 2145812454, 2145812454, (-274));
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (double) (-274));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[0];
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2, (-1145.6));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((-240L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-240L), (long)long1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '|';
      charArray0[2] = '-';
      BitSet bitSet0 = new BitSet(Integer.MAX_VALUE);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(Integer.MIN_VALUE, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '-';
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 0L, (-1.0));
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {45.0}, doubleArray0, 0.01);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3487;
      intArray0[1] = (-537);
      intArray0[2] = 748;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-537);
      longArray0[1] = (long) (-537);
      ArrayUtils.shift(longArray0, (-537), (-537), (-537));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-537L), (-537L)}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3487;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) (-537L);
      doubleArray0[3] = (double) 748;
      doubleArray0[4] = (double) 748;
      doubleArray0[5] = (double) (-537L);
      doubleArray0[6] = (double) 3487;
      doubleArray0[7] = (double) 3487;
      doubleArray0[8] = (double) (-537L);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-537), (double) 748);
      assertEquals("{1, 2, 5, 8}", bitSet0.toString());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3487.0, (-1.0), (-537.0), 748.0, 748.0, (-537.0), 3487.0, 3487.0, (-537.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3487.0, (-1.0), (-537.0), 748.0, 748.0, (-537.0), 3487.0, 3487.0, (-537.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3487.0, (-1.0), (-537.0), 748.0, 748.0, (-537.0), 3487.0, 3487.0, (-537.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[7];
      doubleArray2[0] = (Double) (-537.0);
      doubleArray2[1] = (Double) 748.0;
      doubleArray2[2] = (Double) 3487.0;
      doubleArray2[3] = (Double) 3487.0;
      doubleArray2[4] = (Double) (-537.0);
      doubleArray2[5] = (Double) 748.0;
      doubleArray2[6] = (Double) (-537.0);
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2, 3487.0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertArrayEquals(new double[] {(-537.0), 748.0, 3487.0, 3487.0, (-537.0), 748.0, (-537.0)}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-4009);
      shortArray0[1] = (short)15851;
      shortArray0[2] = (short) (-1223);
      shortArray0[3] = (short)57;
      shortArray0[4] = (short)5489;
      shortArray0[5] = (short)246;
      ArrayUtils.swap(shortArray0, 1495, (-537), (-2787));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4009), (short)15851, (short) (-1223), (short)57, (short)5489, (short)246}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      boolean[] booleanArray0 = new boolean[0];
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)7);
      assertNull(byteArray0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[4];
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((int) (byte)7);
      assertEquals((byte)7, mutableInt1.byteValue());
      assertEquals(7, (int)mutableInt1.getValue());
      assertEquals(7, (int)mutableInt1.toInteger());
      assertEquals(7.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)7, mutableInt1.shortValue());
      assertEquals(7L, mutableInt1.longValue());
      assertEquals("7", mutableInt1.toString());
      assertEquals(7, mutableInt1.intValue());
      assertEquals(7.0F, mutableInt1.floatValue(), 0.01F);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt((-2891));
      assertEquals((short) (-2891), mutableInt2.shortValue());
      assertEquals((-2891L), mutableInt2.longValue());
      assertEquals("-2891", mutableInt2.toString());
      assertEquals((-2891), (int)mutableInt2.toInteger());
      assertEquals((byte) (-75), mutableInt2.byteValue());
      assertEquals((-2891), (int)mutableInt2.getValue());
      assertEquals((-2891.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-2891.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-2891), mutableInt2.intValue());
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertNotNull(mutableInt2);
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(mutableInt1);
      assertEquals((byte)7, mutableInt1.byteValue());
      assertEquals(7, (int)mutableInt1.getValue());
      assertEquals(7, (int)mutableInt1.toInteger());
      assertEquals(7.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)7, mutableInt1.shortValue());
      assertEquals(7L, mutableInt1.longValue());
      assertEquals("7", mutableInt1.toString());
      assertEquals(7, mutableInt1.intValue());
      assertEquals(7.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(7, mutableInt3.intValue());
      assertEquals((short)7, mutableInt3.shortValue());
      assertEquals(7.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals((byte)7, mutableInt3.byteValue());
      assertEquals(7, (int)mutableInt3.getValue());
      assertEquals(7L, mutableInt3.longValue());
      assertEquals(7, (int)mutableInt3.toInteger());
      assertEquals("7", mutableInt3.toString());
      assertEquals(7.0, mutableInt3.doubleValue(), 0.01);
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertNotNull(mutableInt3);
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt[] mutableIntArray1 = ArrayUtils.addAll(mutableIntArray0, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertEquals(4, mutableIntArray0.length);
      assertEquals(8, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertEquals(2, int0);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(1185L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(1185L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(2723L);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(2723L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(1);
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertNotNull(long4);
      assertEquals(1L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((long) longArray0[0]);
      assertEquals(7, longArray0.length);
      assertTrue(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long4));
      assertNotNull(long5);
      assertEquals(1L, (long)long5);
      
      longArray0[5] = long5;
      Long long6 = new Long((-3134L));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long5));
      assertNotNull(long6);
      assertEquals((-3134L), (long)long6);
      
      longArray0[6] = long6;
      Long[] longArray1 = ArrayUtils.insert(1, longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(14, longArray1.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 2049870754, 1936);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((short)2324);
      assertNotNull(double0);
      assertEquals(2324.0, (double)double0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.add(doubleArray0, doubleArray0[0]);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2049870754;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (short) (-1857), 2146697311);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2049870754, 0, 0}, intArray0);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('6');
      assertNotNull(character0);
      assertEquals('6', (char)character0);
      
      Character[] characterArray1 = ArrayUtils.addFirst(characterArray0, character0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {2049870754, 0, 0}, intArray0);
      assertArrayEquals(new int[] {2049870754, 0, 0}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 2049870754, 1936);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((short)2324);
      assertNotNull(double0);
      assertEquals(2324.0, (double)double0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.add(doubleArray0, doubleArray0[0]);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2049870754;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (short) (-1857), 2146697311);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2049870754, 0, 0}, intArray0);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[0];
      Character character0 = new Character('6');
      assertNotNull(character0);
      assertEquals('6', (char)character0);
      
      Character[] characterArray1 = ArrayUtils.addFirst(characterArray0, character0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-678L);
      longArray0[1] = (-2768L);
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, (-1), (-1), Integer.MAX_VALUE);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-678L), (-2768L), 0L}, longArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) (-2768L);
      floatArray0[4] = (float) (-2768L);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 2.14748365E9F, 0.0F, (-2768.0F), (-2768.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 2.14748365E9F, 0.0F, (-2768.0F), (-2768.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-2768L);
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (long) Integer.MAX_VALUE;
      longArray1[4] = (-2768L);
      longArray1[5] = (long) Integer.MAX_VALUE;
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotSame(longArray2, longArray0);
      assertSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(longArray1, longArray2);
      assertEquals(6, longArray2.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {(-2768L), 0L, 0L, 2147483647L, (-2768L), 2147483647L}, longArray2);
      assertArrayEquals(new long[] {(-2768L), 0L, 0L, 2147483647L, (-2768L), 2147483647L}, longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      Long long0 = Long.getLong("DGdTXGHV)yC|j", 0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((-1));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      Long long2 = new Long(1088L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1088L, (long)long2);
      
      Long long3 = new Long(2147483647L);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(2147483647L, (long)long3);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = Character.valueOf('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(')');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals(')', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('f');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('f', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('I');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('I', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(')');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals(')', (char)character4);
      
      Character[] characterArray1 = ArrayUtils.addFirst(characterArray0, character4);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertEquals(5, characterArray1.length);
      assertEquals(4, characterArray0.length);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1482.665519);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1185.4562414681);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[6] = 0.0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1760.8441F);
      floatArray0[1] = (-1760.8441F);
      floatArray0[2] = 118.0F;
      floatArray0[3] = (-1760.8441F);
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Short short1 = new Short((short)15851);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)15851, (short)short1);
      
      Short short2 = new Short((short)0);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short)0, (short)short2);
      
      Short short3 = new Short((short) (-1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      assertEquals((short) (-1), (short)short3);
      
      Short short4 = new Short((short) (-1266));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short) (-1266), (short)short4);
      
      Short short5 = new Short((short) (-502));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertNotNull(short5);
      assertEquals((short) (-502), (short)short5);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)15851);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1088L;
      longArray0[1] = 2351L;
      longArray0[2] = 0L;
      longArray0[4] = 238L;
      longArray0[5] = 3818L;
      longArray0[6] = 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 3818L);
      assertEquals(64, bitSet0.size());
      assertEquals("{5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1088L, 2351L, 0L, 0L, 238L, 3818L, 1L}, longArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1088L;
      doubleArray0[7] = (double) 1088L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 560, 560);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 1.0, (-1.0), 0.0, 1.0, 1088.0, 1088.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, 692.0F);
      assertNull(floatArray0);
      
      ArrayUtils.swap(doubleArray1, 120, 560);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 1.0, (-1.0), 0.0, 1.0, 1088.0, 1088.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, 120);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1088L;
      longArray0[1] = 2351L;
      longArray0[2] = 0L;
      longArray0[4] = 238L;
      longArray0[5] = 3818L;
      longArray0[6] = 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 3818L);
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1088L, 2351L, 0L, 0L, 238L, 3818L, 1L}, longArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1088L;
      doubleArray0[7] = (double) 1088L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 560, 560);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 1.0, (-1.0), 0.0, 1.0, 1088.0, 1088.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, 692.0F);
      assertNull(floatArray0);
      
      ArrayUtils.swap(doubleArray1, 120, 560);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 1.0, (-1.0), 0.0, 1.0, 1088.0, 1088.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, 120);
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 211.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 211.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)110;
      boolean boolean2 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)111, (byte) (-53), (byte)110}, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte) (-53));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) 0.0F);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 211.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Short short0 = new Short((short)1001);
      assertNotNull(short0);
      assertEquals((short)1001, (short)short0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'p', (int) (short)1001);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'N'}, charArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, false, (-1956));
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-43);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0, (-2145564352));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-43)}, byteArray0);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 2;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0, 393);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray2.length);
      assertArrayEquals(new int[] {0}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      
      String string0 = ArrayUtils.toString((Object) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertNotNull(string0);
      assertEquals("0", string0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-338.3);
      doubleArray0[1] = (-2394.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1478.305757554, 2239);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-338.3), (-2394.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Integer[] integerArray0 = new Integer[2];
      MutableInt mutableInt0 = new MutableInt(2146922405);
      assertEquals(2146922405, mutableInt0.intValue());
      assertEquals("2146922405", mutableInt0.toString());
      assertEquals(2146922405L, mutableInt0.longValue());
      assertEquals((byte) (-91), mutableInt0.byteValue());
      assertEquals(2.146922405E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(2.14692237E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2146922405, (int)mutableInt0.toInteger());
      assertEquals(2146922405, (int)mutableInt0.getValue());
      assertEquals((short)28581, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(2146922405, mutableInt0.intValue());
      assertEquals("2146922405", mutableInt0.toString());
      assertEquals(2146922405L, mutableInt0.longValue());
      assertEquals((byte) (-91), mutableInt0.byteValue());
      assertEquals(2.146922405E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(2.14692237E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2146922405, (int)mutableInt0.toInteger());
      assertEquals(2146922405, (int)mutableInt0.getValue());
      assertEquals((short)28581, mutableInt0.shortValue());
      assertNotNull(integer0);
      assertEquals(2146922405, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(274);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(274, (int)integer1);
      
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-492));
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {2146922405, 274}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf("Arguments cannot both be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3477.3418344755078);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray2 = new boolean[9];
      booleanArray2[0] = (boolean) boolean1;
      booleanArray2[1] = true;
      booleanArray2[2] = (boolean) boolean0;
      booleanArray2[3] = (boolean) boolean1;
      booleanArray2[4] = (boolean) boolean1;
      booleanArray2[5] = (boolean) boolean0;
      booleanArray2[6] = (boolean) boolean0;
      booleanArray2[7] = (boolean) boolean0;
      booleanArray2[8] = (boolean) boolean1;
      ArrayUtils.swap(booleanArray2, (-189), (-189), (-189));
      assertEquals(9, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, false, false, true}, booleanArray2));
      
      ArrayUtils.shift((Object[]) booleanArray1, (-240));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = new Boolean("Cannot store ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean("`a,");
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean4));
      assertNotNull(boolean7);
      assertTrue(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Object[] objectArray0 = ArrayUtils.removeAllOccurences((Object[]) booleanArray0, (Object) boolean4);
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, objectArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(4, objectArray0.length);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean6));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean7));
      assertFalse(boolean4.equals((Object)boolean5));
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(objectArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3477.3418344755078;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 487.9861;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 487.9861, 3477.3418344755078}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1116.89173468728));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 487.9861, 3477.3418344755078}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 487.9861, 3477.3418344755078}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Double double0 = new Double(1921);
      assertNotNull(double0);
      assertEquals(1921.0, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-240L);
      doubleArray0[1] = (double) 1921;
      doubleArray0[2] = (double) 1921;
      doubleArray0[3] = (double) (-240L);
      doubleArray0[5] = (double) (-240L);
      doubleArray0[6] = (double) (-240L);
      doubleArray0[7] = (double) (-240L);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1921;
      doubleArray1[1] = (double) (-240L);
      doubleArray1[2] = (double) (-240L);
      doubleArray1[3] = (-240.0);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {(-240.0), 1921.0, 1921.0, (-240.0), 0.0, (-240.0), (-240.0), (-240.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1921.0, (-240.0), (-240.0), (-240.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-538);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2787);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-538)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-538)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-1.0F));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)57;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-26));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)112, (byte)1, (byte)4, (byte) (-1), (byte)84, (byte) (-1), (byte)57}, byteArray0);
      assertArrayEquals(new byte[] {(byte)112, (byte)1, (byte)4, (byte) (-1), (byte)84, (byte) (-1), (byte)57}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (-966.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-966.0F)}, floatArray0, 0.01F);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '<');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2351);
      ArrayUtils.shift(intArray0, 0, (-2351), (-2351));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2351)}, intArray0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-74);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-66);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)0);
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-74), (byte)0, (byte) (-66)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Double double0 = new Double(1921);
      assertNotNull(double0);
      assertEquals(1921.0, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-240L);
      doubleArray0[1] = (double) 1921;
      doubleArray0[2] = (double) 1921;
      doubleArray0[3] = (double) (-240L);
      doubleArray0[5] = (double) (-240L);
      doubleArray0[6] = (double) (-240L);
      doubleArray0[7] = (double) (-240L);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1921;
      doubleArray1[1] = (double) (-240L);
      doubleArray1[2] = (double) (-240L);
      doubleArray1[3] = (-240.0);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {(-240.0), 1921.0, 1921.0, (-240.0), 0.0, (-240.0), (-240.0), (-240.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1921.0, (-240.0), (-240.0), (-240.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-538);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2787);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-538)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-538)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-1.0F));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)57;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-26));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)112, (byte)1, (byte)4, (byte) (-1), (byte)84, (byte)0, (byte)57}, byteArray0);
      assertArrayEquals(new byte[] {(byte)112, (byte)1, (byte)4, (byte) (-1), (byte)84, (byte)0, (byte)57}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-10);
      Long long0 = new Long((short) (-10));
      assertNotNull(long0);
      assertEquals((-10L), (long)long0);
      
      Long long1 = new Long((short)2);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2L, (long)long1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short) (-10);
      objectArray0[1] = (Object) long0;
      objectArray0[2] = (Object) long0;
      objectArray0[3] = (Object) (short)2;
      objectArray0[4] = (Object) (short) (-10);
      objectArray0[5] = (Object) long1;
      ArrayUtils.shift(objectArray0, (-42), 171, (int) (short) (-10));
      assertEquals(6, objectArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)7;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1055), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1055, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float((-423.1F));
      assertNotNull(float0);
      assertEquals((-423.1F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) (-423.1F));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals((-423.1F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-2947.5623F));
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals((-2947.5623F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) floatArray0[0]);
      assertEquals(7, floatArray0.length);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      assertEquals((-423.1F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((float) floatArray0[2]);
      assertEquals(7, floatArray0.length);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotNull(float5);
      assertEquals((-423.1F), (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float(1518.4388577783782);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotNull(float6);
      assertEquals(1518.4388F, (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-287.5621F));
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {(-423.1F), 1.0F, (-423.1F), (-2947.5623F), (-423.1F), (-423.1F), 1518.4388F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Double double0 = new Double(1921);
      assertNotNull(double0);
      assertEquals(1921.0, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-240L);
      doubleArray0[1] = 2199.9215574;
      doubleArray0[2] = (double) 1921;
      doubleArray0[3] = (double) (-240L);
      ArrayUtils.reverse(doubleArray0, 1921, 1921);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-240.0), 2199.9215574, 1921.0, (-240.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(2544.888F);
      assertNotNull(float0);
      assertEquals(2544.888F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(117.3);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(117.3F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[1]);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {2544.888F, 117.3F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift((Object[]) floatArray0, 89);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0, (-1.0F));
      assertNotSame(floatArray2, floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertArrayEquals(new float[] {117.3F, 2544.888F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      Boolean[] booleanArray0 = new Boolean[3];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf(boolean0);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(boolean0);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean0);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1285L);
      longArray0[1] = (long) 89;
      longArray0[2] = (long) 89;
      longArray0[3] = (long) 89;
      longArray0[4] = (long) 89;
      longArray0[5] = (long) 89;
      longArray0[6] = (long) 89;
      ArrayUtils.reverse(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {89L, 89L, 89L, 89L, 89L, 89L, (-1285L)}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 89L;
      doubleArray0[1] = (double) (float)floatArray0[1];
      doubleArray0[2] = (double) 89;
      doubleArray0[3] = (double) 89L;
      doubleArray0[4] = 117.3;
      doubleArray0[5] = (double) 89L;
      doubleArray0[6] = (double) (-1285L);
      doubleArray0[7] = (double) (-1285L);
      doubleArray0[8] = (double) 89L;
      ArrayUtils.reverse(doubleArray0, (-361), 89);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {89.0, (-1285.0), (-1285.0), 89.0, 117.3, 89.0, 89.0, 2544.887939453125, 89.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3487;
      intArray0[1] = (-537);
      intArray0[2] = 748;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-537);
      longArray0[1] = (long) (-537);
      ArrayUtils.shift(longArray0, (-537), (-537), (-537));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-537L), (-537L)}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3487;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) (-537L);
      doubleArray0[3] = (double) 748;
      doubleArray0[4] = (double) 748;
      doubleArray0[5] = (double) (-537L);
      doubleArray0[6] = (double) 3487;
      doubleArray0[7] = (double) 3487;
      doubleArray0[8] = (double) (-537L);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-537), (double) 748);
      assertEquals("{1, 2, 5, 8}", bitSet0.toString());
      assertEquals(9, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3487.0, (-1.0), (-537.0), 748.0, 748.0, (-537.0), 3487.0, 3487.0, (-537.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-537));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {3487, (-537), 748, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, int0);
      
      Long[] longArray1 = new Long[5];
      Long long0 = new Long(2195L);
      assertNotNull(long0);
      assertEquals(2195L, (long)long0);
      
      longArray1[0] = long0;
      longArray1[1] = (Long) (-537L);
      longArray1[2] = (Long) (-537L);
      longArray1[3] = (Long) (-537L);
      longArray1[4] = (Long) (-537L);
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray2.length);
      assertNotNull(longArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {3487, (-537), 748, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-537.0), 198.7);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3487.0, (-1.0), (-537.0), 748.0, 748.0, (-537.0), 3487.0, 3487.0, (-537.0)}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(byteArray2, (-1), (int) (byte)14, (-1));
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      ArrayUtils.reverse(objectArray1, 108, (-1));
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-20);
      ArrayUtils.shift(shortArray0, (int) (byte)14, (-3497), (-1));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-20)}, shortArray0);
      
      Double double0 = new Double((short) (-20));
      assertNotNull(double0);
      assertEquals((-20.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = ArrayUtils.addFirst((Double[]) null, double0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-20));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-20)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1212);
      shortArray0[1] = (short) (-1392);
      shortArray0[2] = (short) (-1212);
      shortArray0[3] = (short) (-1392);
      ArrayUtils.shift(shortArray0, (-1247), (-3497), 1939);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1212), (short) (-1392), (short) (-1212), (short) (-1392), (short)0, (short)0, (short)0}, shortArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 49, (-1944));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 1927.9F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)317;
      shortArray0[1] = (short) (-1392);
      shortArray0[2] = (short)317;
      shortArray0[3] = (short) (-1392);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-1392);
      shortArray0[6] = (short)317;
      ArrayUtils.shift(shortArray0, 3016);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1392), (short)317, (short) (-1392), (short)2, (short) (-1392), (short)317, (short)317}, shortArray0);
      
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short)2;
      shortArray1[1] = (Short) (short)317;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray2, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertEquals(2, shortArray2.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (short) (-1392);
      doubleArray0[3] = (double) 1927.9F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (short) (-1392);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1392.0), 1927.9000244140625, 0.0, (-1392.0), 2.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)90;
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-87)}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '^');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 1927.9F;
      floatArray0[2] = 1927.9F;
      floatArray0[3] = 0.0F;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Float float0 = new Float(2910.665);
      assertNotNull(float0);
      assertEquals(2910.665F, (float)float0, 0.01F);
      
      Object[] objectArray0 = ArrayUtils.addFirst((Object[]) null, (Object) float0);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-124), 1387);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'C';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'f');
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'n', 'C'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[6] = 1452;
      intArray0[2] = 1452;
      intArray0[4] = 1452;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(21, intArray0.length);
      assertEquals(21, intArray1.length);
      assertNotNull(intArray1);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'A');
      assertNull(charArray0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(1452);
      assertNotNull(double0);
      assertEquals(1452.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-449.69444));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-449.69444), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1452.0, (-449.69444)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray1, (-748.0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1452.0, (-449.69444)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1452.0, (-449.69444)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1478.305757554, 2239);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[2]);
      assertEquals(4, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((short)1001);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) (short)1001);
      assertNotNull(longStream0);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1001;
      shortArray0[1] = (short)1001;
      shortArray0[2] = (short)1001;
      shortArray0[3] = (short)1001;
      shortArray0[4] = (short)1001;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertArrayEquals(new short[] {(short)1001, (short)1001, (short)1001, (short)1001, (short)1001}, shortArray0);
      assertArrayEquals(new short[] {(short)1001, (short)1001, (short)1001, (short)1001, (short)1001, (short)1001, (short)1001, (short)1001, (short)1001, (short)1001}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) byteArray1, (Object) longStream0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1001, (int) (short)1001);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      short short0 = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1491);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-971);
      MockRandom mockRandom0 = new MockRandom(1581L);
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((short) (-971));
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1491), (short)2, (short)0, (short) (-971), (short)2}, shortArray0);
      
      Short[] shortArray1 = new Short[7];
      shortArray1[0] = (Short) (short)0;
      shortArray1[1] = (Short) (short)2;
      shortArray1[2] = (Short) (short)0;
      shortArray1[3] = (Short) (short) (-971);
      shortArray1[4] = (Short) (short) (-1491);
      shortArray1[5] = (Short) (short)0;
      shortArray1[6] = (Short) (short) (-971);
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((int)(short) (-971), 326).when(comparator0).compare(anyShort() , anyShort());
      boolean boolean0 = ArrayUtils.isSorted(shortArray1, comparator0);
      assertEquals(7, shortArray1.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)44}, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1491), (short)2, (short)0, (short) (-971), (short)2}, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) shortArray1, (Object) mockRandom0);
      assertEquals(7, shortArray1.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[1] = long0;
      Long[] longArray1 = ArrayUtils.add(longArray0, 2, long0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)48;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)48);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)13, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)13}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)13, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)13}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) longArray1);
      assertNotSame(longArray0, objectArray0);
      assertNotSame(longArray0, longArray1);
      assertSame(longArray1, objectArray0);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(objectArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      ArrayUtils.swap(byteArray1, (-1073741824), 14, (-3529));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)13, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)13}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-20), 2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 0, 0}, intArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 2, 2}, intArray0);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)14, (-392));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 2, 2}, intArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      short short0 = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1491);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-971);
      MockRandom mockRandom0 = new MockRandom(1581L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1491), (short)2, (short)0, (short) (-971), (short)2}, shortArray0);
      
      Short[] shortArray1 = new Short[7];
      shortArray1[0] = (Short) (short)0;
      shortArray1[1] = (Short) (short)2;
      shortArray1[2] = (Short) (short)0;
      shortArray1[3] = (Short) (short) (-971);
      shortArray1[4] = (Short) (short) (-1491);
      shortArray1[5] = (Short) (short)0;
      shortArray1[6] = (Short) (short) (-971);
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((int)(short)0, (int)short0, (int)(short) (-1491), (int)(short)2).when(comparator0).compare(anyShort() , anyShort());
      boolean boolean0 = ArrayUtils.isSorted(shortArray1, comparator0);
      assertEquals(7, shortArray1.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)44}, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1491), (short)2, (short)0, (short) (-971), (short)2}, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-12920);
      shortArray0[1] = (short) (-31);
      shortArray0[2] = (short) (-31);
      shortArray0[3] = (short) (-12920);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-12920), (short) (-31), (short) (-31), (short) (-12920)}, shortArray0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(shortArray0, (int) (short) (-31), 160);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-12920), (short) (-31), (short) (-31), (short) (-12920)}, shortArray0);
      
      ArrayUtils.reverse((int[]) null);
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1380.52));
      assertNotNull(double0);
      assertEquals((-1380.52), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1380.52));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1380.52)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ',', (-233));
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {','}, charArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Long long0 = new Long(419L);
      assertNotNull(long0);
      assertEquals(419L, (long)long0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '|';
      charArray0[2] = '-';
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-240.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 419L, (int) '|', (-240.0));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-240.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null, 100.0);
      assertNull(doubleArray2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      ArrayUtils.shift(shortArray0, (int) (short)2, 1223, (int) (short)2);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayUtils.shift(longArray0, 4, 4, 4);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-274);
      doubleArray0[1] = (double) (-274);
      doubleArray0[2] = (double) 4;
      doubleArray0[4] = (double) (-274);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1290.9201636), (-1517.091801939));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-274.0), (-274.0), 4.0, 0.0, (-274.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[1];
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2, 83.0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {83.0}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)75;
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)8;
      doubleArray0[1] = 1.0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)8;
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (int) 75, (int) 8);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      double[] doubleArray1 = ArrayUtils.subarray((double[]) null, 10, (int) (short)75);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2458.25F;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-240L), 1921);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(1921);
      assertNotNull(double0);
      assertEquals(1921.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-240L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-240.0), (double)double1, 0.01);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      int int0 = new Integer((byte) (-110));
      assertEquals((-110), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)43;
      byteArray0[2] = (byte)68;
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)2;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)19, (int) (byte)68);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-107), (byte)68, (byte)0, (byte) (-36), (byte)2}, byteArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-107), (byte)68, (byte)0, (byte) (-36), (byte)2}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-3237);
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 45);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 12, (-855), (-855));
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2264.18);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {3.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) "+([hzQ8_h`j@X_!5'sc");
      assertNotNull(object0);
      assertEquals("+([hzQ8_h`j@X_!5'sc", object0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 12;
      intArray0[1] = (-855);
      intArray0[2] = (-855);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      ArrayUtils.swap((Object[]) floatArray1, 0, 4, (-3720));
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      MutableInt mutableInt0 = new MutableInt(1927.9F);
      assertEquals(1927.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1927, (int)mutableInt0.getValue());
      assertEquals(1927, (int)mutableInt0.toInteger());
      assertEquals((short)1927, mutableInt0.shortValue());
      assertEquals((byte) (-121), mutableInt0.byteValue());
      assertEquals("1927", mutableInt0.toString());
      assertEquals(1927.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1927, mutableInt0.intValue());
      assertEquals(1927L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1.0), (-1290.9201636));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      ArrayUtils.swap((Object[]) null, (-4698), (-4698), 428);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-678L);
      longArray0[1] = (-678L);
      longArray0[2] = 0L;
      float[] floatArray0 = new float[12];
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[4] = (float) (-678L);
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, (-1512));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)24;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)692);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)24}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)24}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Float float0 = new Float((float) (short)24);
      assertNotNull(float0);
      assertEquals(24.0F, (float)float0, 0.01F);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)692;
      floatArray0[1] = (float) (short)692;
      floatArray0[2] = 4812.2964F;
      floatArray0[3] = (float) (short)24;
      floatArray0[4] = (float) (short)24;
      floatArray0[5] = (float) (short)692;
      floatArray0[6] = (float) (short)24;
      floatArray0[7] = 0.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 692.0F);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {692.0F, 692.0F, 4812.2964F, 24.0F, 24.0F, 692.0F, 24.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (-1626));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (-1396);
      intArray0[2] = (-1626);
      intArray0[3] = (-1);
      ArrayUtils.swap(intArray0, 401, Integer.MAX_VALUE, (-1));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, (-1396), (-1626), (-1), 0}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      assertArrayEquals(new char[] {'\"', '\"'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.shift(charArray1, 1448);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      assertArrayEquals(new char[] {'\"', '\"'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      Double double0 = new Double((-1039.909613443724));
      assertNotNull(double0);
      assertEquals((-1039.909613443724), (double)double0, 0.01);
      
      Byte byte0 = new Byte((byte) (-86));
      assertNotNull(byte0);
      assertEquals((byte) (-86), (byte)byte0);
      
      AbstractMap.SimpleImmutableEntry<Double, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Byte>(double0, (Byte) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Double, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Double, Object>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Double, Object> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Double, Object>(double0, (Object) null);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      AbstractMap.SimpleImmutableEntry<Double, Object> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Double, Object>(abstractMap_SimpleImmutableEntry1);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      AbstractMap.SimpleImmutableEntry<Double, Object> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Double, Object>(abstractMap_SimpleImmutableEntry1);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      AbstractMap.SimpleImmutableEntry<Double, Object> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Double, Object>(abstractMap_SimpleImmutableEntry4);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      Double double1 = new Double((-1039.909613443724));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1039.909613443724), (double)double1, 0.01);
      
      Double double2 = new Double(1.0);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Object> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Double, Object>(double2, abstractMap_SimpleImmutableEntry5);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      
      AbstractMap.SimpleImmutableEntry<Double, Object> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Double, Object>(abstractMap_SimpleImmutableEntry2);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertNotNull(abstractMap_SimpleImmutableEntry7);
      
      AbstractMap.SimpleImmutableEntry<Double, Object>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Double, Object>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Double, Object>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (int) (byte) (-86), 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Short short0 = new Short((short)1001);
      assertNotNull(short0);
      assertEquals((short)1001, (short)short0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'p', (int) (short)1001);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'N'}, charArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      AbstractMap.SimpleImmutableEntry<Double, Object>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Double, Object>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 7);
      Double double0 = new Double((-1039.909613443724));
      assertNotNull(double0);
      assertEquals((-1039.909613443724), (double)double0, 0.01);
      
      Byte byte0 = new Byte((byte)89);
      assertNotNull(byte0);
      assertEquals((byte)89, (byte)byte0);
      
      AbstractMap.SimpleImmutableEntry<Double, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Byte>(double0, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Double, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Double, Object>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Double, Object> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Double, Object>(double0, byte0);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Double, Object> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Double, Object>(abstractMap_SimpleImmutableEntry2);
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Double, Object> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Double, Object>(abstractMap_SimpleImmutableEntry1);
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<Double, Object> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Double, Object>(abstractMap_SimpleImmutableEntry3);
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry5;
      Double double1 = new Double((-1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Object> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Double, Object>(double1, abstractMap_SimpleImmutableEntry1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry6;
      AbstractMap.SimpleImmutableEntry<Double, Object> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Double, Object>(abstractMap_SimpleImmutableEntry4);
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotNull(abstractMap_SimpleImmutableEntry7);
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry7;
      AbstractMap.SimpleImmutableEntry<Double, Object>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(7, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(14, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1001;
      intArray0[1] = (int) 'N';
      intArray0[2] = (-1);
      int int1 = ArrayUtils.indexOf(intArray0, (-1), 3143);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1001, 78, (-1)}, intArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      long[] longArray0 = ArrayUtils.insert((-1), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3975.47312421;
      doubleArray0[2] = (-2167.99951568);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1299.7824, (-1), (-2167.99951568));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3975.47312421, (-2167.99951568)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Short short0 = new Short((short)2395);
      assertNotNull(short0);
      assertEquals((short)2395, (short)short0);
      
      Short[] shortArray0 = ArrayUtils.removeAllOccurences((Short[]) null, short0);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (short)2395;
      floatArray0[2] = (float) (short)19701;
      floatArray0[3] = (float) (short)19701;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-1);
      ArrayUtils.reverse(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 19701.0F, 19701.0F, 2395.0F, (-1.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (short)19701);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 19701.0F, 2395.0F, (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 19701.0F, 19701.0F, 2395.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[1] = 1452;
      intArray0[2] = 1452;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(21, intArray0.length);
      assertEquals(21, intArray1.length);
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = 'a';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1452, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-678L);
      longArray0[1] = (-2768L);
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, (-1), (-1), Integer.MAX_VALUE);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-678L), (-2768L), 0L}, longArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-2768L);
      floatArray0[4] = (float) (-2768L);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 2.14748365E9F, (-1.0F), (-2768.0F), (-2768.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 2.14748365E9F, (-1.0F), (-2768.0F), (-2768.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-2768L);
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'Q';
      charArray0[4] = 'v';
      charArray0[5] = 'v';
      charArray0[6] = 'Q';
      charArray0[7] = 'v';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'v');
      assertEquals(6, bitSet0.cardinality());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 4, 5, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'v', 'v', 'v', 'Q', 'v', 'v', 'Q', 'v'}, charArray0);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-0.04178574F);
      floatArray0[1] = (-0.04178574F);
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-318.07376F);
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      floatArray0[7] = (-0.04178574F);
      floatArray0[8] = (float) (short)0;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-0.04178574F), (-0.04178574F), 0.0F, (-1.0F), (-318.07376F), 0.0F, 0.0F, (-0.04178574F), 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom((-1102L));
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      LongStream longStream0 = mockRandom0.longs((long) (short)0, (long) (short)102);
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.insert((-2328), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      Character character0 = Character.valueOf('m');
      assertNotNull(character0);
      assertEquals('m', (char)character0);
      
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, (Object) character0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[1] = long0;
      Long[] longArray1 = ArrayUtils.add(longArray0, 2, long0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)48;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)48);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)13, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)13}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)13, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)13}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertEquals(6, byteArray2.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)13, (byte)48}, byteArray2);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)13, (byte)48}, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, objectArray0);
      assertSame(longArray1, objectArray0);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(objectArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      ArrayUtils.swap(byteArray1, (-1073741824), 14, (-3529));
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)13, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)14, (byte) (-20), (byte)13}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-20), 2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 0, 0}, intArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 2, 2}, intArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)13;
      shortArray0[1] = (short) (byte) (-20);
      shortArray0[2] = (short) (byte)48;
      shortArray0[3] = (short) (byte) (-20);
      shortArray0[4] = (short) (byte)104;
      shortArray0[5] = (short) (byte)48;
      shortArray0[6] = (short) (byte) (-20);
      shortArray0[7] = (short) (byte)14;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)15);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)13, (short) (-20), (short)48, (short) (-20), (short)104, (short)48, (short) (-20), (short)14}, shortArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 2873);
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Short short0 = new Short((short)1533);
      assertNotNull(short0);
      assertEquals((short)1533, (short)short0);
      
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null);
      assertTrue(boolean0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((short)1533);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1533L, (long)long1);
      
      Long long2 = new Long((-1L));
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      
      Long long3 = new Long((-1L));
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals((-1L), (long)long3);
      
      Long long4 = new Long((-1L));
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      assertEquals((-1L), (long)long4);
      
      Long long5 = Long.getLong("", (-300L));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      assertNotNull(long5);
      assertEquals((-300L), (long)long5);
      
      Long long6 = new Long(1452L);
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long4));
      assertNotNull(long6);
      assertEquals(1452L, (long)long6);
      
      Long long7 = new Long((-1L));
      assertFalse(long7.equals((Object)long5));
      assertTrue(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long6));
      assertTrue(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long1));
      assertTrue(long7.equals((Object)long2));
      assertTrue(long7.equals((Object)long0));
      assertNotNull(long7);
      assertEquals((-1L), (long)long7);
      
      Long long8 = new Long(1657L);
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long6));
      assertFalse(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long4));
      assertNotNull(long8);
      assertEquals(1657L, (long)long8);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = '|';
      charArray0[2] = '';
      charArray0[3] = '-';
      charArray0[4] = 't';
      charArray0[5] = 'h';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 't', (int) (short)1533);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'_', '|', '', '-', 't', 'h'}, charArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1116.872378251227));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'a';
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-1));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {97L}, longArray0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("s.BIN75[:;r#");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean("7LR+<Ecxb0qe4Venv");
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (-1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {97L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2048);
      doubleArray0[1] = (double) (-2048);
      ArrayUtils.shift(doubleArray0, (-3010), (-2048), (-2048));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-2048.0), (-2048.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2048));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-2048.0), (-2048.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-1);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 2914.9);
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1), mutableInt1.intValue());
      assertEquals((-1L), mutableInt1.longValue());
      assertEquals("-1", mutableInt1.toString());
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals((-1), (int)mutableInt1.getValue());
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      assertNotNull(mutableInt1);
      
      mutableInt0.add((-2146435583));
      assertEquals((-2146435584L), mutableInt0.longValue());
      assertEquals("-2146435584", mutableInt0.toString());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((-2146435584), (int)mutableInt0.getValue());
      assertEquals((-2146435584), (int)mutableInt0.toInteger());
      assertEquals((-2.14643558E9F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-512), mutableInt0.shortValue());
      assertEquals((-2146435584), mutableInt0.intValue());
      assertEquals((-2.146435584E9), mutableInt0.doubleValue(), 0.01);
      assertSame(mutableInt0, mutableInt1);
      
      MutableInt mutableInt2 = new MutableInt(mutableInt0);
      assertEquals((-2146435584L), mutableInt0.longValue());
      assertEquals("-2146435584", mutableInt0.toString());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((-2146435584), (int)mutableInt0.getValue());
      assertEquals((-2146435584), (int)mutableInt0.toInteger());
      assertEquals((-2.14643558E9F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-512), mutableInt0.shortValue());
      assertEquals((-2146435584), mutableInt0.intValue());
      assertEquals((-2.146435584E9), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt2.byteValue());
      assertEquals("-2146435584", mutableInt2.toString());
      assertEquals((-2146435584), (int)mutableInt2.toInteger());
      assertEquals((-2146435584), (int)mutableInt2.getValue());
      assertEquals((-2.146435584E9), mutableInt2.doubleValue(), 0.01);
      assertEquals((-2146435584L), mutableInt2.longValue());
      assertEquals((short) (-512), mutableInt2.shortValue());
      assertEquals((-2146435584), mutableInt2.intValue());
      assertEquals((-2.14643558E9F), mutableInt2.floatValue(), 0.01F);
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertNotNull(mutableInt2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) mutableInt2, (Object) mutableInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = ArrayUtils.indexOf((float[]) null, 59.0F);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 59.0F;
      intArray0[1] = 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray2, (double) 2463.0F, 36);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray2, (double) (-1), 0.7);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 14, 1936);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-53);
      shortArray0[1] = (short)2324;
      shortArray0[2] = (short)2324;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-299);
      shortArray0[5] = (short)2020;
      shortArray0[7] = (short)2324;
      ArrayUtils.reverse(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2324, (short)0, (short)2020, (short) (-299), (short) (-1), (short)2324, (short)2324, (short) (-53)}, shortArray0);
      
      Character[] characterArray0 = new Character[0];
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short) (-1));
      assertEquals((-1), int0);
      
      ArrayUtils.shift((char[]) null, 1072, (-1), (int) (short) (-53));
      boolean boolean2 = ArrayUtils.contains((double[]) null, (double) (short)2324, (double) (short)0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 14, 1936);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-53);
      shortArray0[1] = (short)2324;
      shortArray0[2] = (short) (-1857);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-299);
      shortArray0[5] = (short)2020;
      shortArray0[6] = (short) (-4073);
      shortArray0[7] = (short)2324;
      ArrayUtils.reverse(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2324, (short) (-4073), (short)2020, (short) (-299), (short) (-1), (short) (-1857), (short)2324, (short) (-53)}, shortArray0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertEquals(0, characterArray1.length);
      assertEquals(0, characterArray0.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short) (-1));
      assertEquals((-1), int0);
      
      ArrayUtils.shift((char[]) null, 1072, (-1), (int) (short) (-53));
      boolean boolean2 = ArrayUtils.contains((double[]) null, (double) (short)2324, (double) (short) (-4073));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayUtils.shift((long[]) null, 2145812454, 2145812454, (-274));
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (double) (-274));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[0];
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2, (-1145.6));
      assertNotSame(doubleArray3, doubleArray0);
      assertSame(doubleArray3, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-0.04178574F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, (-0.04178574F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = true;
      MockRandom mockRandom0 = new MockRandom(2351L);
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[1];
      LongStream longStream0 = mockRandom0.longs((long) (short)429, 2351L);
      assertNotNull(longStream0);
      
      shortArray0[0] = (short)429;
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)429}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.insert(Integer.MAX_VALUE, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1927.9F;
      objectArray0[1] = (Object) false;
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, (Object) longStream0);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(2, objectArray1.length);
      assertEquals(2, objectArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = 2351L;
      longArray0[2] = (-166L);
      longArray0[3] = (long) (short)429;
      longArray0[4] = (-1L);
      longArray0[5] = (long) (short)429;
      longArray0[6] = (long) (short)429;
      longArray0[7] = (long) (short)429;
      longArray0[8] = (long) Integer.MAX_VALUE;
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {2147483647L, 2351L, (-166L), 429L, (-1L), 429L, 429L, 429L, 2147483647L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Short short0 = new Short((short)1001);
      assertNotNull(short0);
      assertEquals((short)1001, (short)short0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)19;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)19, 64);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)19}, byteArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)19}, byteArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 64);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)19;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)19, 64);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)19}, byteArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)19}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)2;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)19, (int) (byte)68);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)1, (byte)43, (byte)68, (byte) (-26), (byte)2}, byteArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)1, (byte)43, (byte)68, (byte) (-26), (byte)2}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-4525.675139581));
      assertNotNull(double0);
      assertEquals((-4525.675139581), (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      Double double1 = new Double((-4525.675139581));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-4525.675139581), (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-4525.675139581), (double)double2, 0.01);
      
      doubleArray0[4] = double2;
      doubleArray0[5] = doubleArray0[4];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = 'I';
      charArray0[7] = 'j';
      charArray0[3] = 'g';
      charArray0[4] = 'w';
      charArray0[5] = 'j';
      charArray0[6] = 'j';
      charArray0[7] = 'g';
      ArrayUtils.swap(charArray0, (-165), (-2146595524), 1000);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'w', 'I', '\u0000', 'g', 'w', 'j', 'j', 'g'}, charArray0);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 'g';
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) doubleArray0[1];
      doubleArray1[3] = (double) 'I';
      doubleArray1[4] = (double) doubleArray0[4];
      doubleArray1[5] = (double) 'I';
      ArrayUtils.swap(doubleArray1, 0, 0, 1639);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {103.0, 0.0, (-4525.675139581), 73.0, (-4525.675139581), 73.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[6] = 1452;
      intArray0[2] = 1452;
      intArray0[4] = 1452;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(21, intArray0.length);
      assertEquals(21, intArray1.length);
      assertNotNull(intArray1);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(1452);
      assertNotNull(double0);
      assertEquals(1452.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-449.69444));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-449.69444), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1452.0, (-449.69444)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      ArrayUtils.shift(intArray0, 2375);
      assertSame(intArray0, intArray1);
      assertEquals(21, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2969, doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2969, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      int int0 = 1413;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1413;
      doubleArray0[1] = (double) 1413;
      doubleArray0[2] = (double) 1413;
      doubleArray0[3] = (double) 1413;
      doubleArray0[4] = (double) 1413;
      doubleArray0[5] = (double) 1413;
      doubleArray0[6] = (double) 1413;
      doubleArray0[7] = (-1068.4447);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1413, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1413, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (-274);
      doubleArray0[2] = (double) 4;
      doubleArray0[4] = (double) (-274);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1290.9201636), (-1290.9201636));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-274.0), 4.0, 0.0, (-274.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[0];
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, (-274.0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, (-274.0), 4.0, 0.0, (-274.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-274.0), 0.0, (-274.0), 4.0, 0.0, (-274.0)}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      
      Long[] longArray0 = new Long[1];
      Long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = (double) 53;
      ArrayUtils.shift(doubleArray0, (-3010), 53, 53);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 0.0, 53.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-1);
      ArrayUtils.swap(shortArray0, (int) (byte) (-17), 53, (-3010));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) 53;
      floatArray0[2] = (float) 53;
      floatArray0[3] = (float) 53;
      floatArray0[4] = (float) 53;
      floatArray0[5] = (float) (short) (-1);
      floatArray0[6] = (float) 53;
      floatArray0[7] = (float) (short) (-1);
      int int0 = ArrayUtils.indexOf(floatArray0, 2463.0F);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 53.0F, 53.0F, 53.0F, 53.0F, (-1.0F), 53.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {53.0, 0.0, 53.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {53.0, 0.0, 53.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (-3010);
      double[] doubleArray3 = ArrayUtils.addAll(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertArrayEquals(new double[] {53.0, 0.0, 53.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {53.0, 0.0, 53.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-3010.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {53.0, 0.0, 53.0, (-1.0), (-3010.0)}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (-3010.0), (-3010));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {53.0, 0.0, 53.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {53.0, 0.0, 53.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, (double) (byte) (-17));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 0.0, 53.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      BitSet bitSet0 = new BitSet(2239);
      assertEquals("{}", bitSet0.toString());
      assertEquals(2240, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[2]);
      assertEquals(4, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1992.01);
      doubleArray0[2] = (-4704.0);
      doubleArray0[3] = 3477.3418344755078;
      doubleArray0[4] = (-1399.241);
      doubleArray0[5] = 2276.156301097;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 3477.3418344755078);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1992.01), (-4704.0), 3477.3418344755078, (-1399.241), 2276.156301097}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)3795, (-2423));
      assertEquals((-1), int0);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) (-1992.01);
      Double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (Double) 2276.156301097);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-36);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)88;
      intArray0[1] = (int) (byte) (-36);
      intArray0[2] = (int) (byte)52;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 88, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)7;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)55;
      intArray0[1] = (int) (byte)55;
      intArray0[2] = (int) (byte)7;
      intArray0[3] = (int) (byte)7;
      intArray0[4] = (int) (byte)55;
      intArray0[5] = (-3411);
      intArray0[6] = (int) (byte)55;
      intArray0[7] = (int) (byte)7;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-678L);
      longArray0[1] = (-678L);
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, (-1), (-1), Integer.MAX_VALUE);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-678L), (-678L), 0L}, longArray0);
      
      float[] floatArray0 = new float[5];
      longArray0[1] = (long) (-1);
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) (-678L);
      floatArray0[4] = (float) (-1L);
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, 'S', (-1));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 307;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {307.0F, 2.14748365E9F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {307.0F, 2.14748365E9F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[24];
      longArray0[0] = (-2768L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[4] = (-2768L);
      longArray0[5] = (long) Integer.MAX_VALUE;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(24, longArray0.length);
      assertEquals(24, longArray1.length);
      assertNotNull(longArray1);
      
      Long long0 = Long.getLong("DGdTXGHV)yC|j", 0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long(307);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(307L, (long)long1);
      
      Long long2 = new Long(1088L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1088L, (long)long2);
      
      Long long3 = new Long(2147483647L);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(2147483647L, (long)long3);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotNull(longArray1);
      
      byte byte0 = (byte) (-113);
      byte[] byteArray0 = new byte[1];
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 4);
      Class<Long> class0 = Long.class;
      classArray0[0] = class0;
      Class<Long> class1 = Long.class;
      classArray0[1] = class1;
      Class<Long> class2 = Long.class;
      classArray0[2] = class2;
      Class<Long> class3 = Long.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      assertNotNull(classArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 68;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object[]) classArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 68, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-678L);
      longArray0[1] = (-2768L);
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, (-1), (-1), Integer.MAX_VALUE);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-678L), (-2768L), 0L}, longArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-2768L);
      floatArray0[4] = (float) (-2768L);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 2.14748365E9F, (-1.0F), (-2768.0F), (-2768.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 2.14748365E9F, (-1.0F), (-2768.0F), (-2768.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-2768L);
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (long) Integer.MAX_VALUE;
      longArray1[4] = (-2768L);
      longArray1[5] = (long) Integer.MAX_VALUE;
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray2.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {(-2768L), 0L, 0L, 2147483647L, (-2768L), 2147483647L}, longArray2);
      assertArrayEquals(new long[] {(-2768L), 0L, 0L, 2147483647L, (-2768L), 2147483647L}, longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)1;
      int[] intArray0 = new int[0];
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)52, (byte) (-36), (byte) (-118), (byte)102, (byte)1}, byteArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)52, (byte) (-36), (byte) (-118), (byte)102, (byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 35;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 35}, intArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'a';
      charArray0[2] = '*';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', 'a', '*'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) 35;
      longArray0[3] = (long) '*';
      longArray0[4] = (long) 'a';
      boolean boolean1 = ArrayUtils.contains(longArray0, 1L);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 2147483647L, 35L, 42L, 97L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[4];
      Boolean boolean2 = new Boolean("l*|h=X:|P+K");
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray1[0] = boolean2;
      Boolean boolean3 = Boolean.valueOf((String) null);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray1[1] = boolean3;
      Boolean boolean4 = new Boolean("&6;!7%~j)s(f");
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray1[2] = boolean4;
      Boolean boolean5 = new Boolean(false);
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray1[3] = boolean5;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertEquals(4, booleanArray2.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = (-1482.665519);
      doubleArray0[1] = (-1482.665519);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1185.4562414681);
      doubleArray0[6] = (-42.57155811256);
      boolean boolean0 = ArrayUtils.contains((long[]) null, 0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-678L);
      longArray0[1] = (-678L);
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, 42, 42, 2147483642);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-678L), (-678L), 0L}, longArray0);
      
      ArrayUtils.swap(longArray0, (-9), 2147483641, 42);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-678L), (-678L), 0L}, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) (-678L);
      Long long0 = new Long((-678L));
      assertNotNull(long0);
      assertEquals((-678L), (long)long0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) long0, 42);
      assertEquals(2, objectArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-4525.675139581));
      assertNotNull(double0);
      assertEquals((-4525.675139581), (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      Double double1 = new Double((-4525.675139581));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-4525.675139581), (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-4525.675139581), (double)double2, 0.01);
      
      doubleArray0[4] = double2;
      doubleArray0[5] = doubleArray0[4];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)58;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-51), (byte)48, (byte) (-51), (byte)48, (byte)90, (byte)58}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-51), (byte)48, (byte) (-51), (byte)48, (byte)90, (byte)58}, byteArray0);
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) doubleArray0);
      assertSame(doubleArray0, objectArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, objectArray0.length);
      assertNotNull(objectArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-51), (int) (byte) (-51), (int) (byte) (-93));
      assertSame(byteArray0, byteArray1);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-51), (byte)48, (byte) (-51), (byte)48, (byte)90, (byte)58}, byteArray0);
      
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)90;
      byteArray2[1] = (byte) (-51);
      byteArray2[2] = (byte) (-93);
      byteArray2[3] = (byte)48;
      byteArray2[4] = (byte) (-51);
      byteArray2[5] = (byte) (-51);
      Byte[] byteArray3 = ArrayUtils.toObject(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(6, byteArray2.length);
      assertEquals(6, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-51), (byte) (-93), (byte)48, (byte) (-51), (byte) (-51)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) double0, 1413);
      assertSame(doubleArray0, objectArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (int) (byte) (-113));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)88}, byteArray0);
      assertEquals((-1), int0);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      
      ArrayUtils.shuffle(longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-113);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte)88;
      doubleArray0[3] = (double) (byte)88;
      int int1 = ArrayUtils.indexOf(doubleArray0, 1.0, Integer.MIN_VALUE, 2386.285259278797);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-113.0), (-1.0), 88.0, 88.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1L));
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      ArrayUtils.shift(doubleArray0, 90, 90, 743);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, Integer.MAX_VALUE, (-1116.89173468728));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      MockRandom mockRandom0 = new MockRandom(2791L);
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-971);
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-971), (short)0}, shortArray0);
      
      Short[] shortArray1 = new Short[0];
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted(shortArray1, comparator0);
      assertEquals(0, shortArray1.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertEquals(8, shortArray2.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-971), (short)0, (short)0, (short)0, (short) (-971), (short)0}, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-971), (short)0}, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-1279L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-1279L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-1279L));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-1279L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(310L);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      assertEquals(310L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = Long.valueOf((-1279L));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertNotNull(long5);
      assertEquals((-1279L), (long)long5);
      
      longArray0[5] = long5;
      Long long6 = new Long((long) longArray0[2]);
      assertEquals(9, longArray0.length);
      assertFalse(long6.equals((Object)long0));
      assertTrue(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long1));
      assertTrue(long6.equals((Object)long3));
      assertTrue(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long4));
      assertNotNull(long6);
      assertEquals((-1279L), (long)long6);
      
      longArray0[6] = long6;
      Long long7 = new Long(310L);
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long1));
      assertTrue(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long6));
      assertNotNull(long7);
      assertEquals(310L, (long)long7);
      
      longArray0[7] = long7;
      Long long8 = new Long(556L);
      assertFalse(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long6));
      assertFalse(long8.equals((Object)long4));
      assertNotNull(long8);
      assertEquals(556L, (long)long8);
      
      longArray0[8] = long8;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(longArray0, (Comparator<Long>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1491);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-971);
      MockRandom mockRandom0 = new MockRandom(1581L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1491), (short)2, (short)0, (short) (-971), (short)2}, shortArray0);
      
      Short[] shortArray1 = new Short[7];
      shortArray1[0] = (Short) (short)0;
      shortArray1[1] = (Short) (short)2;
      shortArray1[2] = (Short) (short)0;
      shortArray1[3] = (Short) (short) (-971);
      shortArray1[4] = (Short) (short) (-1491);
      shortArray1[5] = (Short) (short)0;
      shortArray1[6] = (Short) (short) (-971);
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyShort() , anyShort());
      boolean boolean0 = ArrayUtils.isSorted(shortArray1, comparator0);
      assertEquals(7, shortArray1.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)44}, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1491), (short)2, (short)0, (short) (-971), (short)2}, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1116.872378251227));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (short)0;
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparator0).compare(anyShort() , anyShort());
      boolean boolean0 = ArrayUtils.isSorted(shortArray1, comparator0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "028;k[x|a>FhUi*=s$l";
      stringArray0[2] = "The type must not be null";
      stringArray0[3] = "~a~vRmr9*";
      stringArray0[4] = "0h=qyLx=";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "Index: ";
      stringArray0[8] = "Bt,In";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (-253), 6);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)1001);
      assertNotNull(short0);
      assertEquals((short)1001, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)19701);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)19701, (short)short1);
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (Short) null);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)shortArray0[1];
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {19701.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-266.44F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {19701.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {19701.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.indexOf(floatArray1, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {19701.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {19701.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayUtils.shift(intArray0, 0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, 14);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-95), (byte)0}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 8L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {8L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 8L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[7];
      charArray0[1] = '9';
      charArray0[3] = ']';
      charArray0[5] = ']';
      charArray0[6] = '$';
      int int0 = ArrayUtils.indexOf(charArray0, '1', 408);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '9', '\u0000', ']', '\u0000', ']', '$'}, charArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 8L;
      floatArray0[1] = (-435.1F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-2347.7F);
      floatArray0[4] = (float) ']';
      floatArray0[5] = (-117.202F);
      floatArray0[6] = (float) ']';
      floatArray0[7] = (float) ']';
      int int1 = ArrayUtils.indexOf(floatArray0, 93.0F, (-384));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {8.0F, (-435.1F), 1.0F, (-2347.7F), 93.0F, (-117.202F), 93.0F, 93.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[23];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(23, booleanArray0.length);
      assertEquals(3, int0);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      ArrayUtils.swap(booleanArray0, (-1533), (int) (short) (-1392), (-1533));
      assertEquals(23, booleanArray0.length);
      
      char[] charArray0 = new char[14];
      charArray0[0] = 's';
      charArray0[1] = '_';
      charArray0[2] = 's';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '!', (int) (byte)90);
      assertEquals(14, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false, false, true, false}, booleanArray0));
      assertEquals(7, int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2683;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = 7;
      intArray0[5] = 7;
      intArray0[6] = 7;
      intArray0[7] = 7;
      intArray0[8] = 7;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {2683, 7, 7, 7, 7, 7, 7, 7, 7}, intArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = '4';
      charArray0[2] = 'c';
      charArray0[3] = '6';
      charArray0[4] = 'T';
      ArrayUtils.shift(charArray0, 2);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'6', 'T', 'w', '4', 'c'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 12, (-855), (-855));
      assertEquals(0, objectArray0.length);
      
      Short short0 = new Short((short) (-963));
      assertNotNull(short0);
      assertEquals((short) (-963), (short)short0);
      
      Short short1 = new Short((short) (-963));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-963), (short)short1);
      
      Short short2 = new Short((short) (-963));
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-963), (short)short2);
      
      Short short3 = new Short((short) (-963));
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short) (-963), (short)short3);
      
      Short[] shortArray0 = new Short[4];
      shortArray0[0] = short0;
      shortArray0[1] = short1;
      shortArray0[3] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)3382);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-963), (short) (-963), (short)3382, (short) (-963)}, shortArray1);
      assertNotNull(shortArray1);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("RYuyv");
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean("RYuyv");
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf(true);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean("I[K]N-\\}6|X|");
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = 3500;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2020;
      shortArray0[1] = (short)2020;
      ArrayUtils.reverse(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)2020, (short)2020}, shortArray0);
      
      Character[] characterArray0 = new Character[4];
      char char0 = 'a';
      Character character0 = Character.valueOf('a');
      assertNotNull(character0);
      assertEquals('a', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('s');
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals('s', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('0');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('0', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('0');
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('0', (char)character3);
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertEquals(4, characterArray1.length);
      assertEquals(4, characterArray0.length);
      assertNotNull(characterArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = (char) character1;
      charArray0[1] = 'F';
      charArray0[2] = char0;
      intArray0[7] = (int) 's';
      charArray0[4] = '0';
      charArray0[5] = (char) character1;
      boolean boolean0 = ArrayUtils.contains(charArray0, 's');
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'s', 'F', 'a', '\u0000', '0', 's'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 14, 1936);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-53);
      shortArray0[1] = (short)2324;
      shortArray0[2] = (short) (-1857);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-299);
      shortArray0[5] = (short)2020;
      shortArray0[6] = (short) (-4073);
      shortArray0[7] = (short)2324;
      ArrayUtils.reverse(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2324, (short) (-4073), (short)2020, (short) (-299), (short) (-1), (short) (-1857), (short)2324, (short) (-53)}, shortArray0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertEquals(0, characterArray1.length);
      assertEquals(0, characterArray0.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (long) (short)2324;
      longArray0[2] = (long) 14;
      longArray0[3] = (long) (short) (-4073);
      longArray0[4] = (long) (short) (-4073);
      longArray0[5] = (long) (short) (-1);
      longArray0[6] = (long) 14;
      longArray0[7] = (long) (short) (-1857);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 2324L, 14L, (-4073L), (-4073L), (-1L), 14L, (-1857L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (-274);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 4;
      longArray0[1] = (long) 4;
      longArray0[2] = (long) (-274);
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 4;
      longArray1[1] = (long) (-274);
      longArray1[2] = (long) (-274);
      longArray1[3] = (long) (-274);
      longArray1[4] = 75L;
      longArray1[5] = (long) 4;
      longArray1[6] = (long) (-274);
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(7, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {4L, 4L, (-274L)}, longArray0);
      assertArrayEquals(new long[] {4L, (-274L), (-274L), (-274L), 75L, 4L, (-274L)}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1L));
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      ArrayUtils.shift(doubleArray0, 90, 90, 743);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '\\';
      charArray0[2] = 'M';
      charArray0[3] = '0';
      charArray0[4] = 'g';
      charArray0[5] = ',';
      charArray0[6] = 'D';
      charArray0[7] = '0';
      ArrayUtils.reverse(charArray0, (-1685), 6);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {',', 'g', '0', 'M', '\\', '>', 'D', '0'}, charArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\\');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {',', 'g', '0', 'M', '>', 'D', '0'}, charArray1);
      assertArrayEquals(new char[] {',', 'g', '0', 'M', '\\', '>', 'D', '0'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-3237);
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'd';
      charArray0[2] = '_';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '>');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'u', 'd', '_'}, charArray0);
      assertArrayEquals(new char[] {'u', 'd', '_'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (int) '_');
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {95}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '_';
      floatArray0[1] = (float) 'u';
      charArray0[1] = 'u';
      floatArray0[3] = (float) '_';
      floatArray0[4] = (float) '>';
      floatArray0[5] = 692.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {95.0F, 117.0F, 0.0F, 95.0F, 62.0F, 692.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 117.0F;
      doubleArray0[1] = (double) 'u';
      doubleArray0[2] = (double) 95.0F;
      doubleArray0[3] = (double) 95.0F;
      doubleArray0[4] = (double) (-3237);
      doubleArray0[5] = (double) '_';
      doubleArray0[6] = 547.306803891;
      doubleArray0[7] = (double) 692.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 95.0, 0, 1.0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {117.0, 117.0, 95.0, 95.0, (-3237.0), 95.0, 547.306803891, 692.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)451;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-75);
      shortArray0[4] = (short)21;
      shortArray0[5] = (short) (-686);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (int) (short)21);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)451, (short)0, (short) (-75), (short)21, (short) (-686)}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)451, (short)0, (short) (-75), (short)21, (short) (-686)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2048);
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'd';
      charArray0[2] = '_';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'u');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'u', 'd', '_'}, charArray0);
      assertArrayEquals(new char[] {'d', '_'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (int) '_');
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {95}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '_';
      floatArray0[1] = (float) 'u';
      charArray0[1] = 'u';
      floatArray0[3] = (float) '_';
      floatArray0[4] = (float) 'u';
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {95.0F, 117.0F, 0.0F, 95.0F, 117.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 117.0F;
      doubleArray0[1] = (double) 'u';
      doubleArray0[2] = (double) 95.0F;
      doubleArray0[3] = (double) 95.0F;
      doubleArray0[4] = (double) (-3237);
      doubleArray0[5] = (double) '_';
      doubleArray0[6] = 547.306803891;
      doubleArray0[7] = (double) 692.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 95.0, (-2048), 1104.996711527162);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {117.0, 117.0, 95.0, 95.0, (-3237.0), 95.0, 547.306803891, 692.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-75);
      shortArray0[4] = (short)21;
      shortArray0[5] = (short) (-686);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2048), (int) (short)21);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short) (-75), (short)21, (short) (-686)}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short) (-75), (short)21, (short) (-686)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 211.0;
      doubleArray0[1] = 211.0;
      doubleArray0[5] = 211.0;
      doubleArray0[3] = 211.0;
      doubleArray0[4] = 211.0;
      doubleArray0[5] = 211.0;
      doubleArray0[6] = 211.0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-17.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {211.0, 211.0, 0.0, 211.0, 211.0, 211.0, 211.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {211.0, 211.0, 0.0, 211.0, 211.0, 211.0, 211.0, (-17.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = '(';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'(', '(', '(', '(', '('}, charArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (byte)110);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 211.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 211.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-53);
      boolean boolean2 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)111, (byte) (-53), (byte)0}, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte) (-53));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-588);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-588);
      floatArray0[1] = 1477.1118F;
      floatArray0[2] = (float) (short) (-588);
      floatArray0[3] = (float) (short) (-588);
      floatArray0[4] = (float) (short) (-588);
      floatArray0[5] = (float) (short) (-588);
      floatArray0[6] = Float.NaN;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-588.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-588.0F), 1477.1118F, (-588.0F), (-588.0F), (-588.0F), (-588.0F), Float.NaN}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1477.1118F, (-588.0F), (-588.0F), (-588.0F), (-588.0F), Float.NaN}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)104;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)13);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-53), (byte)104}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-53), (byte)104}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)104;
      objectArray0[3] = (Object) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], (int) (byte)104);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(2139453870, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 3285.8694F, 9);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)17;
      shortArray0[1] = (short) (-3870);
      shortArray0[2] = (short)35;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short) (-2116);
      shortArray0[5] = (short)1540;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)8);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)17, (short) (-3870), (short)35, (short)8, (short) (-2116), (short)1540}, shortArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)35;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = 2185.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (int) (short)35);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {35.0, 0.0, 2185.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      charArray0[1] = 'b';
      charArray0[2] = '@';
      charArray0[3] = 'P';
      charArray0[4] = '';
      ArrayUtils.shift(charArray0, 9);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'b', '@', 'P', '', 'q'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      String[] stringArray0 = new String[7];
      ArrayUtils.reverse((Object[]) stringArray0, (int) (short)0, (int) (short)0);
      assertEquals(7, stringArray0.length);
      
      ArrayUtils.shift(shortArray0, (-2338), (int) (short)0, 2);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 1749);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1749, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[1] = long0;
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-20);
      ArrayUtils.reverse((Object[]) longArray0, (int) (byte)104, (-5218));
      assertEquals(2, longArray0.length);
      
      ArrayUtils.shift((short[]) null, 1181, 1181, 2);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 2478.21;
      ArrayUtils.shift(doubleArray0, 190, 53, 2683);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-17), 2683);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-17), (byte) (-1)}, byteArray0);
      assertEquals(2, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-17);
      longArray0[1] = (long) (byte) (-1);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {(-17L), (-1L)}, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-266.44F);
      floatArray0[1] = (-1909.0F);
      floatArray0[2] = (-1960.487F);
      floatArray0[3] = 1613.14F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1335.58F;
      floatArray0[7] = (-2004.477F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-266.44F), (-1909.0F), (-1960.487F), 1613.14F, (-1.0F), 0.0F, 1335.58F, (-2004.477F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)317;
      shortArray0[2] = (short)1392;
      shortArray0[3] = (short) (-1392);
      shortArray0[4] = (short)365;
      ArrayUtils.shift(shortArray0, (int) (short) (-1392));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1392, (short) (-1392), (short)365, (short)2, (short)317}, shortArray0);
      
      Short[] shortArray1 = new Short[3];
      shortArray1[0] = (Short) (short) (-1392);
      shortArray1[1] = (Short) (short)317;
      shortArray1[2] = (Short) (short) (-1392);
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertNotNull(shortArray2);
      
      ArrayUtils.swap(shortArray0, (int) (short) (-1392), (int) (short)2);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)365, (short) (-1392), (short)1392, (short)2, (short)317}, shortArray0);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      int int0 = (-2267);
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, (-2267), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2267, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)23, (int) (byte)23);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-2394);
      shortArray0[1] = (short) (byte)23;
      shortArray0[2] = (short) (byte)23;
      shortArray0[3] = (short) (byte)23;
      shortArray0[4] = (short) (byte)23;
      shortArray0[5] = (short) (byte)23;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 2, (short) (-513));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2394), (short)23, (short)23, (short)23, (short)23, (short)23}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2394), (short)23, (short) (-513), (short)23, (short)23, (short)23, (short)23}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)23;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (short) (-2394));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {23.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {23.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[0] = 'U';
      charArray0[2] = '4';
      charArray0[3] = '.';
      charArray0[4] = ',';
      charArray0[5] = '%';
      charArray0[6] = '[';
      charArray0[7] = '&';
      charArray0[8] = 'U';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      assertArrayEquals(new char[] {'U', '\u0000', '4', '.', ',', '%', '[', '&', 'U'}, charArray0);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1760.8441F);
      floatArray0[1] = (float) 'U';
      floatArray0[2] = (float) '[';
      MockRandom mockRandom0 = new MockRandom(1097L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(0L, (-1), 2);
      assertNotNull(intStream0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.1, double0, 0.01);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(1097L);
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {85.0F, (-1760.8441F), 91.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short) (-7);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-7));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-7)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Float float0 = new Float((float) (short) (-7));
      assertNotNull(float0);
      assertEquals((-7.0F), (float)float0, 0.01F);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (-1626));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1626);
      intArray0[1] = (-1396);
      intArray0[2] = (-1626);
      intArray0[3] = (-1);
      intArray0[4] = (int) (short) (-7);
      ArrayUtils.swap(intArray0, 401, Integer.MAX_VALUE, (-1));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1626), (-1396), (-1626), (-1), (-7)}, intArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short) (-7);
      objectArray0[1] = (Object) (-1);
      objectArray0[2] = (Object) float0;
      objectArray0[3] = (Object) (-1396);
      Object object0 = ArrayUtils.get(objectArray0, 4);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      objectArray0[4] = null;
      intArray0[4] = (int) (short) (-7);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, (String) null);
      assertEquals(6, stringArray0.length);
      assertEquals(6, objectArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short) (-7);
      intArray1[1] = Integer.MAX_VALUE;
      intArray1[2] = (-1396);
      intArray1[3] = (-826);
      intArray1[4] = (int) (short) (-7);
      intArray1[5] = (-1396);
      intArray1[6] = (int) (short) (-7);
      boolean boolean0 = ArrayUtils.isEmpty(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {(-7), Integer.MAX_VALUE, (-1396), (-826), (-7), (-1396), (-7)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 4;
      longArray0[1] = (-1380L);
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1380L);
      longArray1[2] = 890L;
      longArray1[4] = (-1380L);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(4, longArray0, longArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      longArray0[1] = (-854L);
      longArray0[2] = 97L;
      longArray0[3] = (-200L);
      longArray0[4] = 0L;
      longArray0[5] = (-1320L);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 1549, (-1320L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1549, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      AbstractMap.SimpleEntry<Float, Long>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Float, Long>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 2);
      Long long0 = new Long(2147483647L);
      assertNotNull(long0);
      assertEquals(2147483647L, (long)long0);
      
      AbstractMap.SimpleEntry<Float, Long> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Float, Long>((Float) null, long0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Float, Long> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Float, Long>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry1;
      Float float0 = new Float((double) 2147483647L);
      assertNotNull(float0);
      assertEquals(2.14748365E9F, (float)float0, 0.01F);
      
      Long long1 = new Long(604L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(604L, (long)long1);
      
      AbstractMap.SimpleEntry<Float, Long> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Float, Long>(float0, long1);
      assertFalse(long1.equals((Object)long0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry2);
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<Float, Long>[] abstractMap_SimpleEntryArray1 = ArrayUtils.add(abstractMap_SimpleEntryArray0, 1, abstractMap_SimpleEntry1);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntry1, abstractMap_SimpleEntry2);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertEquals(2, abstractMap_SimpleEntryArray0.length);
      assertEquals(3, abstractMap_SimpleEntryArray1.length);
      assertFalse(long0.equals((Object)long1));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertNotNull(abstractMap_SimpleEntryArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = 2147483647L;
      longArray0[2] = 2147483647L;
      longArray0[3] = (long) (byte)1;
      longArray0[4] = 604L;
      longArray0[5] = (long) (byte)1;
      longArray0[6] = (long) (byte)1;
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (byte)1, (long) (byte)1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, 2147483647L, 2147483647L, 1L, 604L, 1L, 1L}, longArray1);
      assertArrayEquals(new long[] {1L, 2147483647L, 2147483647L, 1L, 604L, 1L, 1L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = (int) (byte)1;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = 1;
      intArray0[7] = (int) (byte)1;
      intArray0[8] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.add(intArray0, 1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(10, intArray1.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1, Integer.MAX_VALUE, 1}, intArray1);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1, Integer.MAX_VALUE}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)15;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)15);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)15}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Byte[] byteArray2 = new Byte[5];
      byteArray2[0] = (Byte) (byte)15;
      byteArray2[1] = (Byte) (byte)15;
      Byte byte0 = new Byte((byte) (-17));
      assertNotNull(byte0);
      assertEquals((byte) (-17), (byte)byte0);
      
      byteArray2[2] = byte0;
      byteArray2[3] = (Byte) (byte)15;
      byteArray2[4] = (Byte) (byte)15;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      assertEquals(5, byteArray2.length);
      assertEquals(5, byteArray3.length);
      assertNotNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Short short0 = new Short((short)1001);
      assertNotNull(short0);
      assertEquals((short)1001, (short)short0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'p', (int) (short)1001);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'N'}, charArray0);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'N');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'N'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      MutableInt mutableInt0 = new MutableInt((Number) short0);
      assertEquals("1001", mutableInt0.toString());
      assertEquals((short)1001, mutableInt0.shortValue());
      assertEquals(1001.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1001, mutableInt0.intValue());
      assertEquals(1001.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1001L, mutableInt0.longValue());
      assertEquals(1001, (int)mutableInt0.toInteger());
      assertEquals(1001, (int)mutableInt0.getValue());
      assertEquals((byte) (-23), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      int[] intArray0 = new int[5];
      mutableInt0.add((-1));
      assertEquals("1000", mutableInt0.toString());
      assertEquals(1000.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1000, mutableInt0.intValue());
      assertEquals(1000L, mutableInt0.longValue());
      assertEquals(1000, (int)mutableInt0.toInteger());
      assertEquals((byte) (-24), mutableInt0.byteValue());
      assertEquals(1000, (int)mutableInt0.getValue());
      assertEquals((short)1000, mutableInt0.shortValue());
      assertEquals(1000.0F, mutableInt0.floatValue(), 0.01F);
      
      intArray0[0] = (int) (short)1001;
      intArray0[1] = (int) 'N';
      intArray0[2] = 2468;
      intArray0[3] = 69;
      intArray0[4] = (int) (short)1001;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      int int0 = 291;
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 291, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 291, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 2873);
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Short short0 = new Short((short)1533);
      assertNotNull(short0);
      assertEquals((short)1533, (short)short0);
      
      Short[] shortArray0 = new Short[4];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 2873, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2873, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Boolean boolean0 = new Boolean("Cannot store ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      Boolean boolean5 = Boolean.TRUE;
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3477.3418344755078;
      doubleArray0[2] = 0.0;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3477.3418344755078}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1116.89173468728));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3477.3418344755078}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 3477.3418344755078}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.indexOf(doubleArray1, 3477.3418344755078, 3477.3418344755078);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3477.3418344755078}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 3477.3418344755078}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "028;k[x|a>FhUi*=s$l";
      stringArray0[2] = "The type must not be null";
      stringArray0[3] = "~a~vRmr9*";
      stringArray0[4] = "0h=qyLx=";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "14P{cq";
      stringArray0[8] = "Bt,In";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (-253), 6);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) (-253);
      doubleArray0[2] = (double) (-253);
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) (-253);
      doubleArray0[6] = (double) (-253);
      doubleArray0[7] = (double) (-253);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3950.324123766853);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {6.0, (-253.0), (-253.0), 6.0, 6.0, (-253.0), (-253.0), (-253.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.0, (-253.0), (-253.0), 6.0, 6.0, (-253.0), (-253.0), (-253.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[6] = 1452;
      intArray0[2] = 1452;
      intArray0[4] = 1452;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(21, intArray0.length);
      assertEquals(21, intArray1.length);
      assertNotNull(intArray1);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'A');
      assertNull(charArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) 0);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) mutableInt0, (Object) mutableInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[1] = "";
      stringArray0[2] = "hyHbg";
      stringArray0[3] = "";
      stringArray0[4] = "n)}";
      stringArray0[5] = "";
      stringArray0[6] = "L";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotNull(stringArray1);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray1, (short)0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) null, (Object) "hyHbg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1146;
      boolean boolean2 = ArrayUtils.contains(intArray0, 69);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1146}, intArray0);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1146;
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {1146.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1146.0, 1.0, 1146.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      MockRandom mockRandom0 = new MockRandom((-2570L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1146}, intArray0);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1967;
      intArray0[1] = 8;
      intArray0[2] = (-356);
      intArray0[3] = 1068;
      intArray0[4] = 576;
      intArray0[5] = 2873;
      intArray0[6] = (-962);
      intArray0[7] = 25;
      intArray0[8] = 3093;
      int int0 = ArrayUtils.indexOf(intArray0, 8, (-1857));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1967, 8, (-356), 1068, 576, 2873, (-962), 25, 3093}, intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      long[] longArray0 = ArrayUtils.insert((-1), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3975.47312421;
      doubleArray0[2] = (-2167.99951568);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1299.7824, (-1), (-2167.99951568));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3975.47312421, (-2167.99951568)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'N';
      int int1 = ArrayUtils.lastIndexOf(charArray0, ',', (-2139453869));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'r', 'r', 'N'}, charArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(12, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 43, 43);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, 117);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 256, 256);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)24;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)692);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)24}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)24}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Float float0 = new Float((float) (short)24);
      assertNotNull(float0);
      assertEquals(24.0F, (float)float0, 0.01F);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)692;
      floatArray0[1] = (float) (short)692;
      floatArray0[2] = 4812.2964F;
      floatArray0[3] = (float) (short)24;
      floatArray0[4] = (float) (short)24;
      floatArray0[5] = (float) (short)692;
      floatArray0[6] = (float) (short)24;
      floatArray0[7] = 0.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 692.0F);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {692.0F, 692.0F, 4812.2964F, 24.0F, 24.0F, 692.0F, 24.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (-1626));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1626);
      intArray0[1] = (-1396);
      intArray0[2] = (-1626);
      intArray0[3] = (-1);
      intArray0[4] = (int) (short)24;
      ArrayUtils.swap(intArray0, 401, Integer.MAX_VALUE, (-1));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1626), (-1396), (-1626), (-1), 24}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 3285.8694F, 9);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)17;
      shortArray0[2] = (short)35;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short) (-2116);
      shortArray0[5] = (short)1540;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)8);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)17, (short)0, (short)35, (short)8, (short) (-2116), (short)1540}, shortArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 2478.21;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2478.21);
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-9), 53);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2478.21, 0.0, 53.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray3 = new boolean[1];
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = true;
      boolean[] booleanArray4 = ArrayUtils.removeAllOccurences(booleanArray3, true);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray4, booleanArray3);
      assertEquals(1, booleanArray3.length);
      assertEquals(0, booleanArray4.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray4));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertNotNull(booleanArray4);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 43, 43);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 35;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 35}, intArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'a';
      charArray0[2] = '*';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'b', 'a', '*'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) 35;
      longArray0[3] = (long) '*';
      longArray0[4] = (long) 'a';
      boolean boolean1 = ArrayUtils.contains(longArray0, 1L);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1L, 2147483647L, 35L, 42L, 97L}, longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[4];
      Boolean boolean2 = new Boolean("l*|h=X:|P+K");
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray1[0] = boolean2;
      Boolean boolean3 = Boolean.valueOf((String) null);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray1[1] = boolean3;
      Boolean boolean4 = new Boolean("&6;!7%~j)s(f");
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray1[2] = boolean4;
      Boolean boolean5 = new Boolean(true);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray1[3] = boolean5;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray2));
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-3237);
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'd';
      charArray0[2] = '_';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '>');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'u', 'd', '_'}, charArray0);
      assertArrayEquals(new char[] {'u', 'd', '_'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (int) '_');
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {95}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '_';
      floatArray0[1] = (float) 'u';
      charArray0[1] = 'u';
      floatArray0[3] = (float) '_';
      floatArray0[4] = (float) '>';
      floatArray0[5] = 692.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {95.0F, 117.0F, 0.0F, 95.0F, 62.0F, 692.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 117.0F;
      doubleArray0[1] = (double) 'u';
      doubleArray0[2] = (double) 95.0F;
      doubleArray0[3] = (double) 95.0F;
      doubleArray0[4] = (double) (-3237);
      doubleArray0[5] = (double) '_';
      doubleArray0[6] = 547.306803891;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 95.0, 0, 1.0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {117.0, 117.0, 95.0, 95.0, (-3237.0), 95.0, 547.306803891, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-3237);
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'd';
      charArray0[2] = '_';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '>');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'u', 'd', '_'}, charArray0);
      assertArrayEquals(new char[] {'u', 'd', '_'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (int) '_');
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {95}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '_';
      floatArray0[1] = (float) 'u';
      charArray0[1] = 'u';
      floatArray0[3] = (float) '_';
      floatArray0[4] = (float) '>';
      floatArray0[5] = 692.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {95.0F, 117.0F, 0.0F, 95.0F, 62.0F, 692.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 117.0F;
      doubleArray0[1] = (double) 'u';
      doubleArray0[2] = (double) 95.0F;
      doubleArray0[3] = (double) 95.0F;
      doubleArray0[4] = (double) (-3237);
      doubleArray0[5] = (double) '_';
      doubleArray0[6] = 547.306803891;
      doubleArray0[7] = (double) 692.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 95.0, 0, 1.0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {117.0, 117.0, 95.0, 95.0, (-3237.0), 95.0, 547.306803891, 692.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((-240L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-240L), (long)long1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '|';
      charArray0[2] = '-';
      BitSet bitSet0 = new BitSet(Integer.MAX_VALUE);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(Integer.MIN_VALUE, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '|';
      doubleArray0[1] = (-240.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0L, (-341), (-240.0));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {124.0, (-240.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1088L;
      longArray0[1] = 0L;
      longArray0[4] = 1088L;
      longArray0[5] = 3818L;
      longArray0[6] = 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 3818L);
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1088L, 0L, 0L, 0L, 1088L, 3818L, 1L}, longArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences((double[]) null, 142.964614);
      assertNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'Y');
      assertFalse(boolean0);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null, (-935.09521793512));
      assertNull(doubleArray2);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)153);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1088L;
      longArray0[1] = 2351L;
      longArray0[2] = 0L;
      longArray0[4] = 238L;
      longArray0[5] = 3818L;
      longArray0[6] = 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 3818L);
      assertEquals("{5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1088L, 2351L, 0L, 0L, 238L, 3818L, 1L}, longArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1088L;
      doubleArray0[7] = (double) 1088L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 560, 560);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 1.0, (-1.0), 0.0, 1.0, 1088.0, 1088.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-92));
      assertNotNull(short0);
      assertEquals((short) (-92), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-1266));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-1266), (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1897));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-1897), (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)1);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short)1, (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-597));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      assertEquals((short) (-597), (short)short4);
      
      Short short5 = new Short((short) (-1266));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertNotNull(short5);
      assertEquals((short) (-1266), (short)short5);
      
      shortArray0[5] = short5;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[5]);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-92), (short) (-1266), (short) (-1897), (short)1, (short) (-1266), (short) (-1266)}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 12, (-855), (-855));
      assertEquals(0, objectArray0.length);
      
      Short short0 = new Short((short) (-963));
      assertNotNull(short0);
      assertEquals((short) (-963), (short)short0);
      
      Short short1 = new Short((short) (-963));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-963), (short)short1);
      
      Short short2 = new Short((short) (-963));
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-963), (short)short2);
      
      Short short3 = new Short((short) (-963));
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short) (-963), (short)short3);
      
      Short[] shortArray0 = new Short[4];
      shortArray0[0] = short0;
      shortArray0[1] = short1;
      shortArray0[2] = short2;
      shortArray0[3] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)3382);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-963), (short) (-963), (short) (-963), (short) (-963)}, shortArray1);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      short[] shortArray2 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1088L;
      longArray0[1] = 2351L;
      longArray0[2] = 0L;
      longArray0[4] = 238L;
      longArray0[5] = 3818L;
      longArray0[6] = 1L;
      ArrayUtils.reverse(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1L, 3818L, 238L, 0L, 0L, 2351L, 1088L}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2351L);
      assertEquals("{5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1L, 3818L, 238L, 0L, 0L, 2351L, 1088L}, longArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 238L;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 1088L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 1088L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 560, 560);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {238.0, (-1.0), 1.0, (-1.0), 0.0, 1088.0, 1.0, 1088.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-92));
      assertNotNull(short0);
      assertEquals((short) (-92), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-1266));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-1266), (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1897));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-1897), (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)1);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short)1, (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-597));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      assertEquals((short) (-597), (short)short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) (-1266));
      assertFalse(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertNotNull(short5);
      assertEquals((short) (-1266), (short)short5);
      
      shortArray0[5] = short5;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[5]);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-92), (short) (-1266), (short) (-1897), (short)1, (short) (-597), (short) (-1266)}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      int[] intArray0 = new int[10];
      Class<MutableInt[]> class0 = MutableInt[].class;
      MutableInt[] mutableIntArray0 = ArrayUtils.nullToEmpty((MutableInt[]) null, class0);
      assertEquals(0, mutableIntArray0.length);
      assertNotNull(mutableIntArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-4073);
      shortArray0[1] = (short) (-299);
      shortArray0[2] = (short)1223;
      ArrayUtils.reverse(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1223, (short) (-299), (short) (-4073)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 81, 6);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "028;k[x|a>FhUi*=s$l";
      stringArray0[2] = "";
      stringArray0[3] = "~a~vRmr9*";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (-253), 6);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 10, 10);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-12920);
      shortArray0[1] = (short)903;
      shortArray0[2] = (short)903;
      shortArray0[3] = (short) (-12920);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-12920), (short)903, (short)903, (short) (-12920)}, shortArray0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((short[]) null, (int) (short)903, (int) (short) (-12920));
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 14, 1936);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-53);
      shortArray0[1] = (short)2324;
      shortArray0[2] = (short) (-1857);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-299);
      shortArray0[5] = (short)2020;
      shortArray0[6] = (short) (-4073);
      shortArray0[7] = (short) (-14613);
      ArrayUtils.reverse(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-14613), (short) (-4073), (short)2020, (short) (-299), (short) (-1), (short) (-1857), (short)2324, (short) (-53)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      short[] shortArray0 = new short[1];
      ArrayUtils.reverse(shortArray0, (int) (short)108, 2147483639);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-537.0);
      doubleArray0[2] = (-3029.66);
      doubleArray0[3] = 0.7;
      doubleArray0[4] = 0.7;
      doubleArray0[5] = (-2624.555);
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'H';
      charArray0[1] = '9';
      charArray0[2] = 'I';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'H', '9', 'I'}, charArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)108;
      ArrayUtils.reverse(shortArray0, 160, 2376);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)108}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-4525.675139581));
      assertNotNull(double0);
      assertEquals((-4525.675139581), (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      Double double1 = new Double((-4525.675139581));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-4525.675139581), (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-4525.675139581), (double)double2, 0.01);
      
      doubleArray0[4] = double2;
      Double double3 = new Double(0.0);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[5] = double3;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '`';
      charArray0[2] = 'j';
      char[] charArray1 = ArrayUtils.add(charArray0, 'j');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '`', 'j'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '`', 'j', 'j'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) doubleArray0[1];
      doubleArray1[1] = 2719.0849;
      doubleArray1[2] = (double) 'j';
      doubleArray1[3] = (double) doubleArray0[2];
      doubleArray1[4] = (double) '`';
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-4525.675139581), 2719.0849, 106.0, (-4525.675139581), 96.0}, doubleArray1, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (-746.2));
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-4525.675139581), 2719.0849, 106.0, (-4525.675139581), 96.0}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'j';
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 'j';
      ArrayUtils.swap(floatArray0, 0, (-1), (-1));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {106.0F, (-1.0F), 0.0F, (-1.0F), 106.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse((Object[]) doubleArray0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-588);
      shortArray0[1] = (short) (-436);
      shortArray0[2] = (short) (-937);
      shortArray0[3] = (short) (-1397);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-588), (short) (-436), (short) (-937), (short) (-1397)}, shortArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-436);
      intArray0[1] = (int) (short) (-588);
      intArray0[2] = (int) (short) (-1397);
      intArray0[3] = (int) (short) (-937);
      intArray0[4] = (int) (short) (-1397);
      intArray0[5] = (int) (short) (-1397);
      intArray0[6] = (int) (short) (-588);
      intArray0[7] = 2108438490;
      intArray0[8] = (int) (short) (-1397);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)90, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)90, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)90, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false, (int) (short) (-436));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-3237);
      String[] stringArray0 = new String[1];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2914;
      shortArray0[2] = (short) (-166);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-849);
      shortArray0[5] = (short)441;
      shortArray0[6] = (short)2216;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short)2914, (short) (-166), (short) (-1), (short) (-849), (short)441, (short)2216}, shortArray0);
      assertArrayEquals(new short[] {(short)2914, (short) (-166), (short) (-849), (short)441, (short)2216}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1116.872378251227));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (int) (byte)91;
      intArray0[3] = (int) (byte)91;
      ArrayUtils.shuffle(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), 91, 91, (-1)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 144;
      doubleArray0[1] = 2478.21;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {144.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Boolean boolean0 = new Boolean("y");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 5, 144);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1706;
      longArray0[1] = (long) 5;
      longArray0[2] = (long) 159;
      longArray0[3] = (long) 5;
      ArrayUtils.swap(longArray0, 144, (-3354), 5);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1706L, 5L, 159L, 5L}, longArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      charArray0[1] = 'C';
      charArray0[2] = 'Z';
      charArray0[4] = 'u';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'^', 'C', 'Z', '\u0000', 'u'}, charArray0);
      assertFalse(boolean1);
      
      boolean[] booleanArray2 = new boolean[2];
      booleanArray2[0] = (boolean) boolean0;
      booleanArray2[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray2, true, (-3354));
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertEquals((-1), int0);
      
      Double[] doubleArray1 = ArrayUtils.addAll((Double[]) null, (Double[]) null);
      assertNull(doubleArray1);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'C');
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'^', 'C', 'Z', '\u0000', 'u'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 3285.8694F, 9);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) 1927.9F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 3285.8694F;
      doubleArray0[5] = (double) 1927.9F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 3285.8694F;
      doubleArray0[8] = (double) 9;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 9, 9);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.5, 1927.9000244140625, 0.0, 3285.869384765625, 1927.9000244140625, 0.0, 3285.869384765625, 9.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Float[] floatArray1 = new Float[9];
      floatArray1[0] = (Float) 0.0F;
      floatArray1[1] = (Float) 1927.9F;
      floatArray1[2] = (Float) 1927.9F;
      floatArray1[3] = (Float) 0.0F;
      floatArray1[4] = (Float) 1927.9F;
      floatArray1[5] = (Float) 0.0F;
      floatArray1[6] = (Float) 1927.9F;
      Float float0 = new Float((double) 0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray1[7] = float0;
      floatArray1[8] = (Float) 0.0F;
      Float[] floatArray2 = ArrayUtils.addAll(floatArray1, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertEquals(18, floatArray2.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1L));
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[6];
      mutableIntArray0[1] = mutableInt0;
      mutableIntArray0[4] = mutableInt0;
      mutableIntArray0[4] = mutableInt0;
      MutableInt[] mutableIntArray1 = ArrayUtils.addAll(mutableIntArray0, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertEquals(6, mutableIntArray0.length);
      assertEquals(12, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1180;
      ArrayUtils.reverse(shortArray0, (int) (short)1180, 120);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1180, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)1180, (-1746));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      int int0 = 0;
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-292), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -292, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1343);
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {(-1343)}, intArray0);
      assertArrayEquals(new int[] {(-1343)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1343);
      objectArray0[1] = (Object) (-1343);
      objectArray0[2] = (Object) (-1343);
      objectArray0[3] = (Object) (-1343);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[2], (-2318));
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1967;
      shortArray0[1] = (short)13;
      shortArray0[2] = (short) (-558);
      shortArray0[3] = (short) (-2406);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-3354), (-1343));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1967, (short)13, (short) (-558), (short) (-2406)}, shortArray0);
      assertEquals((-1), int0);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (int) (short)13;
      intArray2[1] = 2;
      intArray2[2] = (int) (short) (-558);
      ArrayUtils.shift(intArray2, (int) (short) (-558));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(4, intArray2.length);
      assertArrayEquals(new int[] {(-558), 0, 13, 2}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      char[] charArray0 = new char[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'x');
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-2406);
      floatArray0[1] = (float) (-2318);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-558);
      floatArray0[4] = 2656.343F;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-53), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -53, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = (double) 53;
      ArrayUtils.shift(doubleArray0, (-3010), 53, 53);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 0.0, 53.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) 53.0;
      objectArray0[2] = (Object) 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null, (int) (byte) (-17));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(3, objectArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 53;
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) (byte)13;
      floatArray0[3] = (float) (byte) (-17);
      floatArray0[4] = (float) (byte)13;
      floatArray0[5] = (float) (byte) (-1);
      floatArray0[6] = (float) (byte)13;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(9, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-588);
      shortArray0[1] = (short) (-436);
      shortArray0[2] = (short) (-937);
      shortArray0[3] = (short) (-1397);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-588), (short) (-436), (short) (-937), (short) (-1397)}, shortArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-436);
      intArray0[1] = (int) (short) (-588);
      intArray0[2] = (int) (short) (-1397);
      intArray0[3] = (int) (short) (-937);
      intArray0[4] = (int) (short) (-1397);
      intArray0[5] = (int) (short) (-1397);
      intArray0[6] = (int) (short) (-588);
      intArray0[7] = 2108438490;
      intArray0[8] = (int) (short) (-1397);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)90, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)90, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)90, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (-991.8F);
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) 2108438490;
      floatArray0[6] = 1335.58F;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(638, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 638, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)8;
      doubleArray0[1] = (double) (short)8;
      doubleArray0[2] = (double) (short)8;
      doubleArray0[3] = (double) (short)8;
      doubleArray0[4] = (double) (short)8;
      doubleArray0[5] = (double) (short)8;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {8.0, 8.0, 8.0, 8.0, 8.0, 8.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 3285.8694F, 9);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) bitSet0, 9);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0.0F;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'a';
      charArray0[2] = '*';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'b', 'a', '*'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) '*';
      boolean boolean1 = ArrayUtils.contains(longArray0, 1L);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {2147483647L, 2147483647L, 2147483647L, 42L, 0L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      short short0 = (short) (-1232);
      short short1 = (short) (-1367);
      // Undeclared exception!
      try { 
        ArrayUtils.getLength("$7`DyB?.2D@\",0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1927.9F;
      int int0 = 0;
      double[] doubleArray0 = ArrayUtils.insert(0, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1491);
      shortArray0[3] = (short)97;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-971);
      MockRandom mockRandom0 = new MockRandom(1581L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1491), (short)97, (short)0, (short) (-971), (short)2}, shortArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(9, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 9);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 0.0F;
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte)98;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)91, (byte) (-1), (byte) (-8), (byte)65, (byte)9, (byte) (-85), (byte)98}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-44), (int) (byte) (-8), (-1));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)91, (byte) (-1), (byte) (-8), (byte)65, (byte)9, (byte) (-85), (byte)98}, byteArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean2 = ArrayUtils.isSorted(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) (byte)91;
      doubleArray0[2] = (double) (byte)65;
      doubleArray0[3] = (double) (byte)65;
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (byte) (-85);
      boolean boolean3 = ArrayUtils.contains(doubleArray0, (-2819.241), 1452.0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 91.0, 65.0, 65.0, (-1.0), (-85.0)}, doubleArray0, 0.01);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1491);
      shortArray0[3] = (short)97;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-971);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)97;
      floatArray0[1] = (float) (short) (-1491);
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = 3910.3F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1760.8441F), (int) (short)2);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {97.0F, (-1491.0F), 0.0F, 3910.3F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-0.04178574F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, (-0.04178574F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      MockRandom mockRandom0 = new MockRandom(2351L);
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[1];
      LongStream longStream0 = mockRandom0.longs((long) (short)429, 2351L);
      assertNotNull(longStream0);
      
      shortArray0[0] = (short)429;
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)429}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.insert(Integer.MAX_VALUE, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1927.9F;
      objectArray0[1] = (Object) true;
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, (Object) longStream0);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(2, objectArray1.length);
      assertEquals(2, objectArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 545;
      intArray0[1] = 1452;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 0;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1452;
      longArray0[1] = (long) 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      IntStream intStream0 = mockRandom0.ints((long) 545, (-1396), 545);
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 1452L}, longArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      charArray0[2] = 'C';
      charArray0[5] = 'C';
      charArray0[6] = 'C';
      charArray0[7] = 'C';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'C');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(1, charArray1.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertArrayEquals(new char[] {'C', 'C', 'C', 'C', '\u0000', 'C', 'C', 'C'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'C';
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (-2835.4F);
      floatArray0[3] = (float) 1452L;
      floatArray0[4] = (float) 'C';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {67.0F, 2.14748365E9F, (-2835.4F), 1452.0F, 67.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[1] = long0;
      Long[] longArray1 = ArrayUtils.add(longArray0, 2, long0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)48;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)48);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)104, (byte) (-20), (byte)13, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)104, (byte) (-20), (byte)13}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)104, (byte) (-20), (byte)13, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)104, (byte) (-20), (byte)13}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertEquals(6, byteArray2.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)104, (byte) (-20), (byte)13, (byte)48}, byteArray2);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)104, (byte) (-20), (byte)13, (byte)48}, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) longArray1);
      assertNotSame(longArray0, objectArray0);
      assertNotSame(longArray0, longArray1);
      assertSame(longArray1, objectArray0);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(objectArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      ArrayUtils.swap(byteArray1, (-1073741824), 14, (-3529));
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)104, (byte) (-20), (byte)13, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)104, (byte) (-20), (byte)13}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-20), 2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 0, 0}, intArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 2, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[6] = 1452;
      intArray0[2] = 1452;
      intArray0[4] = 1452;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'A');
      assertNull(charArray0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(1452);
      assertNotNull(double0);
      assertEquals(1452.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-449.69444));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-449.69444), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1452.0, (-449.69444)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray1, (-748.0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1452.0, (-449.69444)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1452.0, (-449.69444)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      ArrayUtils.reverse(intArray0, 1452, (-47));
      assertNotSame(intArray0, intArray1);
      assertEquals(21, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      short[] shortArray0 = new short[2];
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = '^';
      charArray0[2] = '9';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'R', '^', '9'}, charArray0);
      assertArrayEquals(new char[] {'R', '^', '9'}, charArray1);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-41);
      ArrayUtils.swap(byteArray0, (int) (byte)60, (int) (byte) (-41), (-770));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)60, (byte) (-41)}, byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-770);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-65), (-65));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-770)}, intArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-770)}, intArray0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-3237);
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'd';
      charArray0[2] = '_';
      char[] charArray1 = ArrayUtils.removeElement((char[]) null, 'u');
      assertNull(charArray1);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (int) '_');
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {95}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '_';
      floatArray0[1] = (float) 'u';
      floatArray0[2] = (float) 'u';
      floatArray0[3] = (float) '_';
      floatArray0[4] = (float) '>';
      String[] stringArray0 = new String[7];
      stringArray0[0] = "L";
      stringArray0[1] = "L";
      stringArray0[2] = "L";
      stringArray0[3] = "L";
      stringArray0[4] = "E!Mv(Di";
      stringArray0[5] = "L";
      stringArray0[6] = "L";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray1);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)515);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 0L);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-95);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 1, (int) (byte) (-1), (int) (byte) (-20));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)1995, (-315));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 2;
      intArray0[0] = 2;
      intArray0[1] = 415;
      intArray0[2] = (-1470);
      intArray0[3] = (-2798);
      intArray0[4] = 91;
      intArray0[5] = 3938;
      intArray0[6] = 2687;
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1470), 241);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {2, 415, (-1470), (-2798), 91, 3938, 2687}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3272.2698F;
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0, 56);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 56;
      intArray0[1] = (int) (byte)41;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {56, 41}, intArray0);
      assertEquals((-1), int0);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1212);
      intArray1[1] = (int) (byte)41;
      intArray1[2] = 2;
      int[] intArray2 = ArrayUtils.addFirst(intArray1, 56);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(3, intArray1.length);
      assertEquals(4, intArray2.length);
      assertArrayEquals(new int[] {(-1212), 41, 2}, intArray1);
      assertArrayEquals(new int[] {56, (-1212), 41, 2}, intArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 2478.21;
      ArrayUtils.shift(doubleArray0, 190, 53, 2683);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-1);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)102;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-3077);
      shortArray0[4] = (short)2185;
      shortArray0[5] = (short) (-1909);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)102, (short)0, (short) (-3077), (short)2185, (short) (-1909)}, shortArray0);
      assertArrayEquals(new short[] {(short)102, (short) (-3077), (short)2185, (short) (-1909)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)2185;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2185.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = '+';
      charArray0[2] = ',';
      charArray0[3] = 'T';
      charArray0[4] = 'O';
      int int0 = ArrayUtils.indexOf(charArray0, '+');
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'a', '+', ',', 'T', 'O'}, charArray0);
      assertEquals(1, int0);
      
      ArrayUtils.swap(doubleArray0, (-1), (-92), (-1));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2185.0}, doubleArray0, 0.01);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, '+');
      assertNull(charArray1);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short)2185);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)102, (short)0, (short) (-3077), (short)2185, (short) (-1909)}, shortArray0);
      assertArrayEquals(new short[] {(short)102, (short) (-3077), (short)2185, (short) (-1909)}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(int1 == int0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, int1);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (short) (-3077));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2185.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2185.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)102;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-3077);
      shortArray0[4] = (short)2185;
      shortArray0[5] = (short) (-1909);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)102, (short)0, (short) (-3077), (short)2185, (short) (-1909)}, shortArray0);
      assertArrayEquals(new short[] {(short)102, (short) (-3077), (short)2185, (short) (-1909)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)2185;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2185.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = '+';
      charArray0[2] = ',';
      charArray0[3] = 'T';
      charArray0[4] = 'O';
      int int0 = ArrayUtils.indexOf(charArray0, '+');
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'a', '+', ',', 'T', 'O'}, charArray0);
      assertEquals(1, int0);
      
      ArrayUtils.swap(doubleArray0, (-1), (-92), (-1));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2185.0}, doubleArray0, 0.01);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, '+');
      assertNull(charArray1);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short)2185);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)102, (short)0, (short) (-3077), (short)2185, (short) (-1909)}, shortArray0);
      assertArrayEquals(new short[] {(short)102, (short) (-3077), (short)2185, (short) (-1909)}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(int1 == int0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, int1);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (short) (-3077));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2185.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2185.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-3077);
      longArray0[1] = (long) ',';
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 'T';
      longArray0[4] = (long) (-92);
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-3077L), 44L, 1L, 84L, (-92L)}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(1);
      assertEquals(0, int0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'I';
      int int1 = mockRandom0.nextInt();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      charArray0[1] = 'X';
      charArray0[2] = '';
      charArray0[3] = 's';
      charArray0[4] = '*';
      charArray0[5] = 'O';
      charArray0[6] = 'Z';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'I', '', 's', '*', 'O', 'Z', 'X'}, charArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)115;
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = 'U';
      charArray0[3] = '.';
      charArray0[4] = ',';
      charArray0[5] = '%';
      charArray0[6] = '[';
      charArray0[7] = '&';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      ArrayUtils.reverse(byteArray0, (int) (byte)45, (int) (byte)45);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)45}, byteArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (byte)45);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (int) (byte)45);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      ArrayUtils.swap((short[]) null, 0, 45, 45);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 45;
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {45.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      Short short0 = new Short((short)1001);
      assertNotNull(short0);
      assertEquals((short)1001, (short)short0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'p', (int) (short)1001);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'N'}, charArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, false, (-1956));
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'N';
      charArray1[1] = 'N';
      charArray1[2] = 'N';
      charArray1[3] = 'p';
      charArray1[4] = 'N';
      charArray1[5] = 'p';
      charArray1[6] = 'p';
      ArrayUtils.shift(charArray1, (-1956));
      assertNotSame(charArray1, charArray0);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'p', 'N', 'p', 'p', 'N', 'N', 'N'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.swap(charArray0, (-1), (int) (short)1001, (-2144936822));
      assertNotSame(charArray0, charArray1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'N'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 3818L;
      longArray0[1] = 31L;
      longArray0[2] = 1L;
      longArray0[3] = 3818L;
      longArray0[4] = (-3974L);
      longArray0[5] = (-3633L);
      longArray0[6] = 1L;
      longArray0[7] = 1L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {3818L, 31L, 1L, 3818L, (-3974L), (-3633L), 1L, 1L}, longArray0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(longArray0, (-1951), (-2015));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {3818L, 31L, 1L, 3818L, (-3974L), (-3633L), 1L, 1L}, longArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1441);
      shortArray0[1] = (short)1638;
      shortArray0[2] = (short)43;
      ArrayUtils.reverse(shortArray0, 1799, 3209);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1441), (short)1638, (short)43}, shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = '@';
      charArray0[2] = 'W';
      ArrayUtils.shift(charArray0, (int) (short) (-1441), 54, (int) (short) (-1441));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'@', 'W', 'l'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-240L);
      floatArray0[1] = (float) 1921;
      floatArray0[2] = (float) (-240L);
      floatArray0[3] = (float) 1921;
      floatArray0[4] = (float) (-240L);
      floatArray0[5] = (float) (-240L);
      floatArray0[6] = (float) (-240L);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 19701.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {(-240.0F), 1921.0F, (-240.0F), 1921.0F, (-240.0F), (-240.0F), (-240.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-240.0F), 1921.0F, (-240.0F), 1921.0F, (-240.0F), (-240.0F), (-240.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1017);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1017), 401);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1017), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1017), (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Float float0 = new Float((-240.0F));
      assertNotNull(float0);
      assertEquals((-240.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((-240.0F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-240.0F), (float)float1, 0.01F);
      
      Float[] floatArray2 = new Float[2];
      floatArray2[0] = float1;
      floatArray2[1] = float1;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      
      ArrayUtils.shift((char[]) null, 0);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = 'x';
      ArrayUtils.shift(charArray0, 0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'(', 'x'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'(', 'x'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean(false);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(object0.equals((Object)boolean2));
      assertFalse(object0.equals((Object)boolean1));
      assertFalse(object0.equals((Object)boolean0));
      assertNotNull(object0);
      assertEquals(false, object0);
      
      Long long0 = new Long(Integer.MAX_VALUE);
      assertNotNull(long0);
      assertEquals(2147483647L, (long)long0);
      
      boolean boolean4 = ArrayUtils.isSameType(object0, long0);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(object0.equals((Object)boolean2));
      assertFalse(object0.equals((Object)boolean1));
      assertFalse(object0.equals((Object)boolean0));
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = '(';
      charArray0[2] = 'E';
      ArrayUtils.shift(charArray0, (int) (byte)14);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'(', 'E', 'x'}, charArray0);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '(';
      charArray1[1] = 'x';
      charArray1[2] = '(';
      charArray1[3] = 'x';
      charArray1[4] = '(';
      charArray1[5] = '(';
      charArray1[6] = 'E';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'(', 'E', 'x'}, charArray0);
      assertArrayEquals(new char[] {'(', 'x', '(', 'x', '(', '(', 'E'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(object0.equals((Object)boolean2));
      assertFalse(object0.equals((Object)boolean1));
      assertTrue(object0.equals((Object)boolean0));
      assertNotNull(object0);
      assertEquals(true, object0);
      
      Long long0 = new Long((-5005L));
      assertNotNull(long0);
      assertEquals((-5005L), (long)long0);
      
      MutableInt mutableInt0 = new MutableInt((-1480));
      assertEquals((-1480), mutableInt0.intValue());
      assertEquals((-1480.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1480.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1480), (int)mutableInt0.getValue());
      assertEquals((-1480), (int)mutableInt0.toInteger());
      assertEquals((byte)56, mutableInt0.byteValue());
      assertEquals((short) (-1480), mutableInt0.shortValue());
      assertEquals("-1480", mutableInt0.toString());
      assertEquals((-1480L), mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals((-1480), mutableInt0.intValue());
      assertEquals((-1480.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1480.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1480), (int)mutableInt0.getValue());
      assertEquals((-1480), (int)mutableInt0.toInteger());
      assertEquals((byte)56, mutableInt0.byteValue());
      assertEquals((short) (-1480), mutableInt0.shortValue());
      assertEquals("-1480", mutableInt0.toString());
      assertEquals((-1480L), mutableInt0.longValue());
      assertEquals((-1480L), mutableInt1.longValue());
      assertEquals((-1480.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1480.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-1480), (int)mutableInt1.getValue());
      assertEquals((-1480), (int)mutableInt1.toInteger());
      assertEquals((byte)56, mutableInt1.byteValue());
      assertEquals("-1480", mutableInt1.toString());
      assertEquals((short) (-1480), mutableInt1.shortValue());
      assertEquals((-1480), mutableInt1.intValue());
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      assertNotNull(mutableInt1);
      
      boolean boolean4 = ArrayUtils.isSameType(mutableInt1, boolean3);
      assertEquals((-1480), mutableInt0.intValue());
      assertEquals((-1480.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1480.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1480), (int)mutableInt0.getValue());
      assertEquals((-1480), (int)mutableInt0.toInteger());
      assertEquals((byte)56, mutableInt0.byteValue());
      assertEquals((short) (-1480), mutableInt0.shortValue());
      assertEquals("-1480", mutableInt0.toString());
      assertEquals((-1480L), mutableInt0.longValue());
      assertEquals((-1480L), mutableInt1.longValue());
      assertEquals((-1480.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1480.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-1480), (int)mutableInt1.getValue());
      assertEquals((-1480), (int)mutableInt1.toInteger());
      assertEquals((byte)56, mutableInt1.byteValue());
      assertEquals("-1480", mutableInt1.toString());
      assertEquals((short) (-1480), mutableInt1.shortValue());
      assertEquals((-1480), mutableInt1.intValue());
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 4305, 9, (int) (short)7);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Object object1 = ArrayUtils.get((Object[]) null, (-1396));
      assertNull(object1);
      
      char[] charArray1 = ArrayUtils.addFirst((char[]) null, '(');
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'('}, charArray1);
      assertNotNull(charArray1);
      
      ArrayUtils.swap((Object[]) null, (-1116), (-1447));
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[13];
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(13, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      short short0 = (short)108;
      short[] shortArray0 = new short[1];
      int int0 = 2147483639;
      ArrayUtils.reverse(shortArray0, (int) (short)108, 2147483639);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2147483639;
      intArray0[1] = (int) 'S';
      int int1 = (-162);
      intArray0[2] = (-162);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483639, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = 'x';
      int int0 = 0;
      ArrayUtils.shift(charArray0, 0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'(', 'x'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'(', 'x'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.swap((int[]) null, 0, 0, Integer.MAX_VALUE);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'x';
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-2447);
      intArray0[3] = (int) 'x';
      intArray0[4] = 67;
      intArray0[5] = (int) '(';
      intArray0[6] = (int) 'x';
      intArray0[7] = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 2873);
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      charArray0[1] = 'K';
      int int0 = 102;
      char char0 = '#';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 102, '#');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 102, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1078.76;
      doubleArray0[1] = (-778.2948321);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 3975.47312421;
      doubleArray0[4] = (-1033.8555775770376);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 3975.47312421;
      doubleArray0[7] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-778.2948321), 14, (-889.73771));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1078.76, (-778.2948321), 1.0, 3975.47312421, (-1033.8555775770376), 0.0, 3975.47312421, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[2] = 'T';
      charArray0[3] = 'r';
      charArray0[4] = 'G';
      charArray0[5] = 'i';
      charArray0[6] = 'r';
      charArray0[7] = 'v';
      charArray0[8] = '-';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 't', Integer.MIN_VALUE);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'c', '\u0000', 'T', 'r', 'G', 'i', 'r', 'v', '-'}, charArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte)14);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      int[] intArray0 = new int[18];
      intArray0[0] = 1;
      intArray0[1] = (-3482);
      intArray0[2] = (-3482);
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (double) 1);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-3482);
      floatArray0[1] = (float) (byte)4;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 'v';
      floatArray0[5] = (float) (-3482);
      floatArray0[6] = (float) 'Q';
      floatArray0[8] = (float) (byte)4;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-3482.0F), 4.0F, 1.0F, 118.0F, 0.0F, (-3482.0F), 81.0F, 0.0F, 4.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)4;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) (-3482);
      ArrayUtils.swap(longArray0, 1381, (-3482), 5915);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {4L, 1L, 0L, 1L, (-3482L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-678L);
      longArray0[1] = (-678L);
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, 42, 42, 42);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-678L), (-678L), 0L}, longArray0);
      
      ArrayUtils.swap(longArray0, (-9), 42, 42);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-678L), (-678L), 0L}, longArray0);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) (-678L);
      Long long0 = Long.valueOf((long) (-9));
      assertNotNull(long0);
      assertEquals((-9L), (long)long0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) long0, 42);
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)41, 56);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)28}, byteArray0);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)28);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)41;
      doubleArray0[1] = 1.0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 56, (-2131.8671));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {41.0, 1.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)28;
      longArray0[1] = (long) 'N';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {28L, 78L, 28L, 78L}, longArray1);
      assertArrayEquals(new long[] {28L, 78L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1482.665519);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1185.4562414681);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[6] = 0.0;
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.add(intArray0, (-3374));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, (-3374)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (int) (byte)124;
      intArray2[1] = (int) (byte)124;
      intArray2[2] = (-3374);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)124, intArray2, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 124, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = (double) 53;
      ArrayUtils.shift(doubleArray0, (-3010), 53, 53);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 0.0, 53.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 53;
      floatArray0[1] = (float) 53;
      floatArray0[2] = (float) (-3010);
      floatArray0[3] = (float) (-3010);
      floatArray0[4] = (float) 53;
      floatArray0[5] = (float) 53;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {53.0F, 53.0F, (-3010.0F), (-3010.0F), 53.0F, 53.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-3237);
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'd';
      charArray0[2] = '_';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '>');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'u', 'd', '_'}, charArray0);
      assertArrayEquals(new char[] {'u', 'd', '_'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (int) '_');
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {95}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '_';
      floatArray0[1] = (float) 'u';
      floatArray0[2] = (float) 'u';
      floatArray0[3] = (float) '_';
      floatArray0[4] = (float) '>';
      floatArray0[5] = 692.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {95.0F, 117.0F, 117.0F, 95.0F, 62.0F, 692.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 35;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 35}, intArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)372;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)4;
      shortArray0[4] = (short)32736;
      shortArray0[5] = (short)190;
      shortArray0[6] = (short)67;
      shortArray0[7] = (short)2;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)372, (short) (-1), (short)1, (short)4, (short)32736, (short)190, (short)67, (short)2}, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MutableInt[] mutableIntArray0 = new MutableInt[6];
      MutableInt mutableInt0 = new MutableInt((int) (short)372);
      assertEquals(372, mutableInt0.intValue());
      assertEquals("372", mutableInt0.toString());
      assertEquals(372.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)372, mutableInt0.shortValue());
      assertEquals(372.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)116, mutableInt0.byteValue());
      assertEquals(372, (int)mutableInt0.toInteger());
      assertEquals(372, (int)mutableInt0.getValue());
      assertEquals(372L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt();
      assertEquals("0", mutableInt1.toString());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0L, mutableInt1.longValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0, mutableInt1.intValue());
      assertEquals((short)0, mutableInt1.shortValue());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt((-2146503956));
      assertEquals((byte) (-20), mutableInt2.byteValue());
      assertEquals("-2146503956", mutableInt2.toString());
      assertEquals((-2146503956L), mutableInt2.longValue());
      assertEquals((-2146503956), (int)mutableInt2.toInteger());
      assertEquals((-2146503956), (int)mutableInt2.getValue());
      assertEquals((short) (-3348), mutableInt2.shortValue());
      assertEquals((-2.14650394E9F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-2146503956), mutableInt2.intValue());
      assertEquals((-2.146503956E9), mutableInt2.doubleValue(), 0.01);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertNotNull(mutableInt2);
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(Integer.MAX_VALUE);
      assertEquals(2.147483647E9, mutableInt3.doubleValue(), 0.01);
      assertEquals(2.14748365E9F, mutableInt3.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, mutableInt3.intValue());
      assertEquals((short) (-1), mutableInt3.shortValue());
      assertEquals((byte) (-1), mutableInt3.byteValue());
      assertEquals("2147483647", mutableInt3.toString());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt3.getValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt3.toInteger());
      assertEquals(2147483647L, mutableInt3.longValue());
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertNotNull(mutableInt3);
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt(2146412838);
      assertEquals(2146412838L, mutableInt4.longValue());
      assertEquals("2146412838", mutableInt4.toString());
      assertEquals(2146412838, (int)mutableInt4.getValue());
      assertEquals(2146412838, (int)mutableInt4.toInteger());
      assertEquals(2.146412838E9, mutableInt4.doubleValue(), 0.01);
      assertEquals(2.1464128E9F, mutableInt4.floatValue(), 0.01F);
      assertEquals(2146412838, mutableInt4.intValue());
      assertEquals((byte)38, mutableInt4.byteValue());
      assertEquals((short) (-22234), mutableInt4.shortValue());
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertNotNull(mutableInt4);
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt(102);
      assertEquals("102", mutableInt5.toString());
      assertEquals(102, mutableInt5.intValue());
      assertEquals(102L, mutableInt5.longValue());
      assertEquals((short)102, mutableInt5.shortValue());
      assertEquals(102.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals(102.0, mutableInt5.doubleValue(), 0.01);
      assertEquals(102, (int)mutableInt5.toInteger());
      assertEquals((byte)102, mutableInt5.byteValue());
      assertEquals(102, (int)mutableInt5.getValue());
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertNotNull(mutableInt5);
      
      mutableIntArray0[5] = mutableInt5;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(mutableIntArray0, 2288);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2288, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)692);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Float float0 = new Float((float) (short)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)692;
      floatArray0[1] = (float) (short)692;
      floatArray0[2] = 4812.2964F;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)692;
      floatArray0[6] = (float) (short)0;
      floatArray0[7] = 0.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 692.0F);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {692.0F, 692.0F, 4812.2964F, 0.0F, 0.0F, 692.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (-1626));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1626);
      intArray0[1] = (-1396);
      intArray0[2] = (-1626);
      intArray0[3] = (-1);
      intArray0[4] = (int) (short)0;
      ArrayUtils.swap(intArray0, 401, Integer.MAX_VALUE, (-1));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1626), (-1396), (-1626), (-1), 0}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-826), 0);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 495);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 495;
      longArray0[1] = (long) 495;
      longArray0[2] = (long) 495;
      longArray0[3] = (long) 495;
      longArray0[4] = (long) 495;
      ArrayUtils.reverse(longArray0, 2288, 495);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {495L, 495L, 495L, 495L, 495L}, longArray0);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Byte[] byteArray2 = new Byte[7];
      Byte byte0 = new Byte((byte)9);
      assertNotNull(byte0);
      assertEquals((byte)9, (byte)byte0);
      
      byteArray2[0] = byte0;
      Byte byte1 = new Byte((byte)9);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)9, (byte)byte1);
      
      byteArray2[1] = byte1;
      try { 
        Byte.decode("org.apache.commons.lang3.CharUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.commons.lang3.CharUtils\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[13];
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(13, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 495);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 495;
      longArray0[1] = (long) 495;
      longArray0[2] = (long) 495;
      longArray0[3] = (long) 495;
      longArray0[4] = (long) 495;
      ArrayUtils.reverse(longArray0, 2288, 495);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {495L, 495L, 495L, 495L, 495L}, longArray0);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Byte[] byteArray2 = new Byte[7];
      byte byte0 = (byte)9;
      Byte byte1 = new Byte((byte)9);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)9, (byte)byte1);
      
      byteArray2[0] = byte1;
      Byte byte2 = new Byte((byte)9);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)9, (byte)byte2);
      
      byteArray2[1] = byte2;
      String string0 = "org.apache.commons.lang3.CharUtils";
      try { 
        Byte.decode("org.apache.commons.lang3.CharUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.commons.lang3.CharUtils\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 2049870754, 1936);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-53);
      shortArray0[1] = (short)2324;
      shortArray0[2] = (short) (-1857);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-299);
      shortArray0[5] = (short)2020;
      shortArray0[6] = (short) (-4073);
      shortArray0[7] = (short) (-14613);
      ArrayUtils.reverse(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-14613), (short) (-4073), (short)2020, (short) (-299), (short) (-1), (short) (-1857), (short)2324, (short) (-53)}, shortArray0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((short)2324);
      assertNotNull(double0);
      assertEquals(2324.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.add(doubleArray0, doubleArray0[0]);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (-4471));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1424;
      shortArray0[3] = (short)2;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1424, (short)2}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Byte byte0 = new Byte((byte) (-32));
      assertNotNull(byte0);
      assertEquals((byte) (-32), (byte)byte0);
      
      Object[] objectArray0 = ArrayUtils.addFirst((Object[]) null, (Object) byte0);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (-1482));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-266.44F);
      floatArray0[1] = (-1909.0F);
      floatArray0[2] = (-1960.487F);
      floatArray0[3] = 1613.14F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1335.58F;
      floatArray0[7] = (-2004.477F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-266.44F), (-1909.0F), (-1960.487F), 1613.14F, (-1.0F), 0.0F, 1335.58F, (-2004.477F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)317;
      shortArray0[2] = (short)1392;
      shortArray0[3] = (short) (-1392);
      shortArray0[4] = (short)365;
      ArrayUtils.shift(shortArray0, (int) (short) (-1392));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1392, (short) (-1392), (short)365, (short)2, (short)317}, shortArray0);
      
      Short[] shortArray1 = new Short[3];
      shortArray1[0] = (Short) (short) (-1392);
      shortArray1[1] = (Short) (short)317;
      shortArray1[2] = (Short) (short) (-1392);
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertNotNull(shortArray2);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)1392;
      longArray0[1] = (long) (short)shortArray1[0];
      longArray0[2] = (long) (short) (-1392);
      longArray0[3] = (long) (short)shortArray1[0];
      longArray0[4] = (long) (short) (-1392);
      longArray0[5] = (long) (short)1392;
      longArray0[6] = (long) (short)shortArray1[2];
      longArray0[7] = (long) (short)1392;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 0L, 11);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {1392L, (-1392L), (-1392L), (-1392L), (-1392L), 1392L, (-1392L), 1392L}, longArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-4525.675139581));
      assertNotNull(double0);
      assertEquals((-4525.675139581), (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      Double double1 = new Double((-4525.675139581));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-4525.675139581), (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-4525.675139581), (double)double2, 0.01);
      
      doubleArray0[4] = double2;
      Double double3 = new Double(0.0);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[5] = double3;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)58;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-51), (byte)48, (byte) (-51), (byte) (-85), (byte)90, (byte)58}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-51), (byte)48, (byte) (-51), (byte) (-85), (byte)90, (byte)58}, byteArray0);
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) doubleArray0);
      assertSame(doubleArray0, objectArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, objectArray0.length);
      assertNotNull(objectArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-51), (int) (byte) (-51), (int) (byte) (-93));
      assertSame(byteArray0, byteArray1);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-51), (byte)48, (byte) (-51), (byte) (-85), (byte)90, (byte)58}, byteArray0);
      
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)90;
      byteArray2[1] = (byte) (-51);
      byteArray2[2] = (byte) (-85);
      byteArray2[3] = (byte)48;
      byteArray2[4] = (byte) (-85);
      byteArray2[5] = (byte) (-51);
      Byte[] byteArray3 = ArrayUtils.toObject(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(6, byteArray2.length);
      assertEquals(6, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-51), (byte) (-85), (byte)48, (byte) (-85), (byte) (-51)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[7];
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.subarray(intArray0, (-1954), 223);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray2.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      
      ArrayUtils.shift(intArray0, (-1515));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ArrayUtils.swap((double[]) null, (-2527), 1348, 3535);
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '$');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 545;
      intArray0[1] = 1452;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 0;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1452;
      longArray0[1] = (long) 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      IntStream intStream0 = mockRandom0.ints((long) 545, (-1396), 545);
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 1452L}, longArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'C';
      charArray0[6] = 'C';
      charArray0[7] = 'C';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'C');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'C';
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (-2835.4F);
      floatArray0[3] = (float) 1452L;
      floatArray0[4] = (float) 'C';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {67.0F, 2.14748365E9F, (-2835.4F), 1452.0F, 67.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      ArrayUtils.shift(longArray0, (int) (byte)0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, 952);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, int0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 0);
      assertEquals(5, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2191);
      doubleArray0[0] = (double) (-2191);
      doubleArray0[2] = (double) (-2191);
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 1.5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2191.0), (-2191.0));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-2191.0), 0.0, (-2191.0), 1.5, 1.5}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        bitSet0.flip((-2191));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -2191
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[19];
      int int0 = 2143;
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 2143;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(55, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, (-1600), (Object) null);
      assertEquals(2, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1600);
      intArray0[2] = (-1600);
      intArray0[3] = (-1600);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-1600), (-1600), (-1600)}, intArray0);
      assertNotNull(bitSet0);
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-1600), (-1600), (-1600)}, intArray0);
      assertNull(object1);
      
      objectArray0[1] = null;
      ArrayUtils.reverse(objectArray0, 0, 0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      long long0 = 1L;
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long(1L);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      longArray0[1] = long2;
      longArray0[2] = (Long) long0;
      longArray0[3] = (Long) long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(longArray0, (-2465));
      assertSame(longArray0, longArray1);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '&';
      intArray0[2] = (int) 'E';
      intArray0[4] = (int) '!';
      intArray0[5] = (int) '&';
      intArray0[6] = (int) '!';
      intArray0[7] = (-2465);
      intArray0[8] = (int) '&';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2465), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2465, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      char char0 = 'S';
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'S', 'S', 'S', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      int int0 = 8;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)108;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(8, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '&';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      char[] charArray1 = ArrayUtils.add(charArray0, '!');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'!', '&', 'E', 'E'}, charArray0);
      assertArrayEquals(new char[] {'!', '&', 'E', 'E', '!'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      Long[] longArray0 = new Long[4];
      long long0 = 1L;
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long(1L);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(0L);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      longArray0[2] = long3;
      longArray0[3] = (Long) long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(longArray0, (-2465));
      assertSame(longArray0, longArray1);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '&';
      intArray0[1] = (int) '&';
      intArray0[2] = (int) 'E';
      intArray0[3] = (int) 'E';
      intArray0[4] = (int) '!';
      intArray0[5] = (int) '&';
      intArray0[6] = (int) '!';
      intArray0[7] = (-2465);
      intArray0[8] = (int) '&';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2465), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2465, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2458.25F;
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)1;
      ArrayUtils.swap(shortArray0, 2873, 2873);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray0);
      
      Long long0 = new Long(15851L);
      assertNotNull(long0);
      assertEquals(15851L, (long)long0);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, long0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)1, (double) 2873);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-32);
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-32), (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      ArrayUtils.swap(byteArray0, (-444), (-4878), (int) (byte) (-8));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-32), (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-4878);
      doubleArray0[1] = (double) (byte)9;
      boolean boolean2 = ArrayUtils.contains(doubleArray0, 1.0, (double) (byte) (-8));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-4878.0), 9.0}, doubleArray0, 0.01);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 65.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-810.495));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {65.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray1 = new Boolean[7];
      booleanArray1[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray1[1] = boolean1;
      booleanArray1[2] = boolean0;
      booleanArray1[3] = boolean0;
      booleanArray1[4] = boolean0;
      booleanArray1[5] = boolean0;
      booleanArray1[6] = boolean0;
      Boolean[] booleanArray2 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray2);
      
      ArrayUtils.swap((long[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE, 5);
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      boolean boolean2 = ArrayUtils.isSorted(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      long[] longArray0 = ArrayUtils.insert((-1), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)104;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)13);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-32);
      objectArray0[1] = (Object) (byte)104;
      objectArray0[2] = (Object) (byte)104;
      objectArray0[3] = (Object) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], (int) (byte)104);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      byte[] byteArray2 = ArrayUtils.removeElements((byte[]) null, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNull(byteArray2);
      
      ArrayUtils.shift((boolean[]) null, (int) (byte) (-32), 0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)13;
      doubleArray0[1] = (double) (byte) (-53);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (byte) (-53));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {13.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {13.0, (-53.0), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      ArrayUtils.swap((long[]) null, 779, (int) (byte)104, (int) (byte)13);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 43, 43);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3987.04F);
      floatArray0[1] = 53.96274F;
      floatArray0[2] = 0.13478534F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 963.9813F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertArrayEquals(new float[] {(-3987.04F), 53.96274F, 0.13478534F, 1.0F, 1.0F, 963.9813F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(characterArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(10, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertEquals(0, intArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, true, false, false, false}, booleanArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      ArrayUtils.shift(floatArray0, (-1), (int) (byte)91, (int) (byte)91);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {963.9813F, 0.0F, 0.0F, (-3987.04F), 53.96274F, 0.13478534F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = 3487;
      intArray0[1] = (-537);
      intArray0[2] = 748;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-537);
      longArray0[1] = (long) (-537);
      ArrayUtils.shift(longArray0, (-537), (-537), (-537));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-537L), (-537L)}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3487;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) (-537L);
      doubleArray0[3] = (double) 748;
      doubleArray0[4] = (double) 748;
      doubleArray0[5] = (double) (-537L);
      doubleArray0[6] = (double) 3487;
      doubleArray0[7] = (double) 3487;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-537), (double) 748);
      assertEquals(64, bitSet0.size());
      assertEquals(9, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2, 5, 8}", bitSet0.toString());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3487.0, (-1.0), (-537.0), 748.0, 748.0, (-537.0), 3487.0, 3487.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-537));
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {3487, (-537), 748, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, int0);
      
      Long[] longArray1 = new Long[5];
      Long long0 = new Long(2195L);
      assertNotNull(long0);
      assertEquals(2195L, (long)long0);
      
      longArray1[0] = long0;
      longArray1[1] = (Long) (-537L);
      longArray1[2] = (Long) (-537L);
      longArray1[3] = (Long) (-537L);
      longArray1[4] = (Long) (-537L);
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray2.length);
      assertNotNull(longArray2);
      
      Double[] doubleArray1 = new Double[0];
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-537L);
      floatArray0[1] = (float) (long)longArray1[2];
      ArrayUtils.shift(floatArray0, 3487);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-537.0F), (-537.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3987.04F);
      floatArray0[1] = 53.96274F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 963.9813F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertArrayEquals(new float[] {(-3987.04F), 53.96274F, 0.0F, 1.0F, 1.0F, 963.9813F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(characterArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertEquals(0, intArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, true}, booleanArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      ArrayUtils.shift(floatArray0, (-1), (int) (byte)91, 3081);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-3987.04F), 53.96274F, 0.0F, 1.0F, 1.0F, 963.9813F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 2049870754, 1936);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 97);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 256, 256);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1626);
      intArray0[1] = (-1396);
      intArray0[4] = (int) (short)0;
      ArrayUtils.swap(intArray0, 401, Integer.MAX_VALUE, 0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1626), (-1396), 0, 0, 0}, intArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) 0;
      objectArray0[3] = (Object) (-1396);
      Object object0 = ArrayUtils.get(objectArray0, 4);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      objectArray0[4] = null;
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = ']';
      charArray0[2] = '(';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '(');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'(', '%', ']', '('}, charArray1);
      assertArrayEquals(new char[] {'%', ']', '('}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(objectArray0, (-1626), (int) (short)0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-240L), 1921);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(1921);
      assertNotNull(double0);
      assertEquals(1921.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-240L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-240.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1.0);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.0);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(1.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      assertEquals(0.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[2];
      doubleArray2[1] = (double) doubleArray0[1];
      doubleArray2[1] = (double) doubleArray0[3];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray2);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray2, 0.01);
      assertTrue(boolean0);
      
      ArrayUtils.shuffle((Object[]) doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray2, 1.0, 1.0);
      assertEquals(2, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(2, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 1}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray2, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 1921);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 1921, 1921);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      ArrayUtils.reverse(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, 2444, 2444);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Double[] doubleArray0 = ArrayUtils.insert(14, (Double[]) null, (Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-32);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte) (-32);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-32.0F), 0.0F, 0.0F, (-32.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-32.0F);
      doubleArray0[1] = (double) (-32.0F);
      doubleArray0[2] = (double) (-32.0F);
      doubleArray0[3] = (double) (byte) (-32);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-32.0), (-32.0), (-32.0), (-32.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-32);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-32));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-32)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[4] = (float) 0;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (-4471));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1424;
      shortArray0[3] = (short)2;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1424, (short)2}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Byte byte0 = new Byte((byte) (-32));
      assertNotNull(byte0);
      assertEquals((byte) (-32), (byte)byte0);
      
      Object[] objectArray0 = ArrayUtils.addFirst((Object[]) null, (Object) byte0);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-2368), (int) (short)1424);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1482.665519);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1185.4562414681);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1909.576697;
      doubleArray0[6] = 0.0;
      Integer integer0 = new Integer(1555);
      assertNotNull(integer0);
      assertEquals(1555, (int)integer0);
      
      Integer integer1 = Integer.getInteger("The Array must not be null", 280);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(280, (int)integer1);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer1, integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Float float0 = new Float((float) 1555);
      assertNotNull(float0);
      assertEquals(1555.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((-1482.665519));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1482.6655F), (float)float1, 0.01F);
      
      Float float2 = new Float(0.0);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      Float float3 = new Float(1.0F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals(1.0F, (float)float3, 0.01F);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float3;
      floatArray0[1] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 280;
      intArray0[1] = 1555;
      intArray0[2] = 1555;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 5, 5);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {280, 1555, 1555}, intArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3259;
      shortArray0[1] = (short) (-1);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-1));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)3259, (short) (-1)}, shortArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1);
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, (int) (short)3259, (-1));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 3285.8694F, 9);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1927.9F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)17;
      shortArray0[1] = (short)17;
      shortArray0[2] = (short)35;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short) (-2116);
      shortArray0[5] = (short)1540;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)8);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)17, (short)17, (short)35, (short)8, (short) (-2116), (short)1540}, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 495);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 495;
      longArray0[1] = (long) 495;
      longArray0[2] = (long) 495;
      longArray0[3] = (long) 495;
      longArray0[4] = (long) 495;
      ArrayUtils.reverse(longArray0, 2288, 495);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {495L, 495L, 495L, 495L, 495L}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, 0.0F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 2288;
      intArray0[5] = 2288;
      ArrayUtils.swap(intArray0, 2288, (-1954), 14);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-1), 2288, 0, 2288}, intArray0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 14, 181);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (-1), 2);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)122;
      ArrayUtils.swap(byteArray0, (int) (byte)35, (int) (byte)0, (-2465));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)35, (byte)122}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)68;
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[3] = 'p';
      charArray0[4] = 'p';
      charArray0[5] = 'p';
      charArray0[6] = 'p';
      charArray0[7] = 'p';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'I', (int) (byte) (-107));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'p', 'p', '\u0000', 'p', 'p', 'p', 'p', 'p'}, charArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, true, (int) (byte)1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (byte)68);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1613.14F;
      floatArray0[2] = (-1902.5648F);
      floatArray0[3] = (-246.13F);
      floatArray0[4] = (-1433.4089F);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 122);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 122, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1088L;
      longArray0[1] = 2351L;
      longArray0[2] = 0L;
      longArray0[4] = 238L;
      longArray0[5] = 3818L;
      longArray0[6] = 1L;
      ArrayUtils.reverse(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1L, 3818L, 238L, 0L, 0L, 2351L, 1088L}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2351L);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1L, 3818L, 238L, 0L, 0L, 2351L, 1088L}, longArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 238L;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 1088L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 1088L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 560, 560);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {238.0, (-1.0), 1.0, (-1.0), 0.0, 1088.0, 1.0, 1088.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 3818L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 2351L;
      floatArray0[3] = (float) 2351L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 560;
      floatArray0[6] = (float) 0L;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 560);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 560, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-32);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte) (-32);
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte) (-32);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (byte)0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {0L, (-32L), 0L, (-32L)}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-32L), 0L, (-32L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3487;
      intArray0[1] = (-537);
      intArray0[2] = 748;
      intArray0[3] = 1569;
      intArray0[4] = 122;
      intArray0[5] = 46;
      intArray0[6] = 9;
      intArray0[7] = (-2505);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {3487, (-537), 748, 1569, 122, 46, 9, (-2505)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)19287;
      shortArray0[1] = (short) (-403);
      shortArray0[2] = (short)1305;
      shortArray0[3] = (short) (-3974);
      shortArray0[4] = (short)5260;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3974), (-1));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)19287, (short) (-403), (short)1305, (short) (-3974), (short)5260}, shortArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {3.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0, 3.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 122;
      longArray0[1] = (long) (short)1305;
      longArray0[2] = (long) 748;
      longArray0[3] = (long) (short)5260;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-161L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {122L, 1305L, 748L, 5260L}, longArray0);
      assertArrayEquals(new long[] {(-161L), 122L, 1305L, 748L, 5260L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      short[] shortArray0 = new short[2];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = '\u0018';
      ArrayUtils.reverse(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0018', 'U'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0018', 'U'}, charArray0);
      assertTrue(boolean0);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'\u0018', 'U'}, charArray0);
      assertArrayEquals(new char[] {'\u0018', 'U'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1927.9F;
      int[] intArray0 = new int[8];
      intArray0[5] = (-900);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-900));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-900), 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-900), 0, 0, 0, 0, 0, (-900), 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-3237);
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'd';
      charArray0[2] = '_';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '>');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'u', 'd', '_'}, charArray0);
      assertArrayEquals(new char[] {'u', 'd', '_'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-3237));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, (-3237), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-3237), 0, (-3237), 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 0L);
      assertNull(longArray0);
      
      ArrayUtils.reverse((long[]) null, 12, 12);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-20);
      byteArray0[0] = (byte) (-20);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byte byte2 = (byte) (-95);
      byteArray0[3] = (byte) (-95);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-20), (byte)0, (byte) (-1), (byte) (-95)}, byteArray0);
      assertEquals(1, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 12;
      doubleArray0[3] = (double) (byte) (-20);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte) (-20);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -20, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-4));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(bitSet0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, Integer.MAX_VALUE);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)23);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-2394);
      shortArray0[1] = (short) (byte)23;
      shortArray0[2] = (short) (byte)23;
      shortArray0[3] = (short) (byte)23;
      shortArray0[4] = (short) (byte)23;
      shortArray0[5] = (short) (byte)23;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 2, (short) (-513));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2394), (short)23, (short)23, (short)23, (short)23, (short)23}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2394), (short)23, (short) (-513), (short)23, (short)23, (short)23, (short)23}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-678L);
      longArray0[1] = (-2768L);
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, (-1), (-1), Integer.MAX_VALUE);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-678L), (-2768L), 0L}, longArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) (-678L);
      floatArray0[4] = (float) (-2768L);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 2.14748365E9F, 0.0F, (-678.0F), (-2768.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 2.14748365E9F, 0.0F, (-678.0F), (-2768.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      long[] longArray1 = new long[24];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-2768L);
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (long) Integer.MAX_VALUE;
      longArray1[0] = (-2768L);
      longArray1[5] = (long) Integer.MAX_VALUE;
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray1, longArray0);
      assertSame(longArray1, longArray2);
      assertEquals(24, longArray2.length);
      assertEquals(24, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      Long long0 = Long.getLong("DGdTXGHV)yC|j", 0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((-1));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      Long long2 = new Long(1088L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1088L, (long)long2);
      
      Long long3 = new Long(2147483647L);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(2147483647L, (long)long3);
      
      ArrayUtils.swap((boolean[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE, (-1));
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3987.04F);
      floatArray0[1] = 53.96274F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 963.9813F;
      floatArray0[7] = 53.96274F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertArrayEquals(new float[] {(-3987.04F), 53.96274F, 0.0F, 1.0F, 1.0F, 963.9813F, 0.0F, 53.96274F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(characterArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, true}, booleanArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      ArrayUtils.reverse((Object[]) characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3987.04F);
      floatArray0[1] = 53.96274F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 963.9813F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertArrayEquals(new float[] {(-3987.04F), 53.96274F, 0.0F, 1.0F, 1.0F, 963.9813F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(characterArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertEquals(0, intArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, true}, booleanArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      ArrayUtils.reverse((Object[]) characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-309.016828495);
      doubleArray0[2] = (-2372.0);
      doubleArray0[3] = 3136.4177125657;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.5;
      doubleArray0[6] = 230.990884001804;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3136.4177125657, 2194);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-309.016828495), (-2372.0), 3136.4177125657, 0.0, 1.5, 230.990884001804}, doubleArray0, 0.01);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Long long0 = new Long(1140L);
      assertNotNull(long0);
      assertEquals(1140L, (long)long0);
      
      Long long1 = Long.valueOf((long) (-49));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-49L), (long)long1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-49);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = 'U';
      charArray0[2] = '4';
      charArray0[3] = '.';
      charArray0[4] = ',';
      charArray0[5] = '%';
      charArray0[6] = '[';
      charArray0[7] = '&';
      charArray0[8] = 'U';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      assertArrayEquals(new char[] {']', 'U', '4', '.', ',', '%', '[', '&', 'U'}, charArray0);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1760.8441F);
      floatArray0[1] = (float) 'U';
      floatArray0[2] = (float) '[';
      MockRandom mockRandom0 = new MockRandom(1097L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(0L, (-1), 2);
      assertNotNull(intStream0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(1097L);
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1760.8441F), 91.0F, 85.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-32);
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) (byte)0;
      floatArray0[3] = (float) (byte) (-32);
      floatArray0[4] = (float) (byte) (-32);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-32.0F), (-32.0F), 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[3] = (double) (byte) (-32);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-32.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      floatArray0[3] = (float) (byte) (-32);
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (-2145564352), Integer.MAX_VALUE);
      assertNull(shortArray0);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-2145564352));
      assertNotNull(double0);
      assertEquals((-2.145564352E9), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-133.098564282));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-133.098564282), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(Integer.MAX_VALUE);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(2.147483647E9, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(100.0);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals(100.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(2264.18);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      assertEquals(2264.18, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = ArrayUtils.get(doubleArray0, (-2145564352));
      assertEquals(5, doubleArray0.length);
      assertNull(double5);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-240L);
      floatArray0[1] = (float) 1921;
      floatArray0[2] = (float) (-240L);
      floatArray0[3] = (float) 1921;
      floatArray0[4] = (float) (-240L);
      floatArray0[6] = (float) (-240L);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 19701.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {(-240.0F), 1921.0F, (-240.0F), 1921.0F, (-240.0F), 0.0F, (-240.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-240.0F), 1921.0F, (-240.0F), 1921.0F, (-240.0F), 0.0F, (-240.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, 401);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = (int) (short)0;
      intArray0[5] = (int) (short) (-1397);
      intArray0[7] = 2108438490;
      intArray0[8] = (int) (short) (-436);
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1458), (int) (byte)4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-436), (-1397));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)3660;
      shortArray0[1] = (short)465;
      shortArray0[2] = (short) (-23208);
      shortArray0[3] = (short) (-4038);
      shortArray0[4] = (short)1628;
      shortArray0[5] = (short) (-28440);
      shortArray0[6] = (short)1391;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2446, (-3077));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)3660, (short)465, (short) (-23208), (short) (-4038), (short)1628, (short) (-28440), (short)1391}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Character[] characterArray0 = new Character[8];
      Character character0 = new Character('.');
      assertNotNull(character0);
      assertEquals('.', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('q');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('q', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('z');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('z', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character2);
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('z', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character0);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('.', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('\'');
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertNotNull(character5);
      assertEquals('\'', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('|');
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character2));
      assertNotNull(character6);
      assertEquals('|', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character('j');
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character2));
      assertNotNull(character7);
      assertEquals('j', (char)character7);
      
      characterArray0[7] = character7;
      Character character8 = Character.valueOf('y');
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character4));
      assertNotNull(character8);
      assertEquals('y', (char)character8);
      
      Character character9 = ArrayUtils.get(characterArray0, (int) 1628, character8);
      assertEquals(8, characterArray0.length);
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character9.equals((Object)character4));
      assertFalse(character9.equals((Object)character3));
      assertFalse(character9.equals((Object)character7));
      assertFalse(character9.equals((Object)character0));
      assertFalse(character9.equals((Object)character6));
      assertFalse(character9.equals((Object)character2));
      assertFalse(character9.equals((Object)character1));
      assertFalse(character9.equals((Object)character5));
      assertNotNull(character9);
      assertEquals('y', (char)character9);
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'D');
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'D';
      doubleArray0[1] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 68.0, 52);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {68.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-3142);
      short short0 = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1632);
      shortArray0[3] = (short)48;
      short short1 = (short)1500;
      shortArray0[4] = (short)1500;
      short short2 = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-412);
      shortArray0[7] = (short) (-659);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1632);
      intArray0[1] = (int) (short) (-3142);
      intArray0[2] = (int) (short) (-3142);
      intArray0[3] = (int) (short) (-1632);
      intArray0[4] = (int) (short)0;
      intArray0[5] = 52;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 52, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3487;
      intArray0[1] = (-537);
      intArray0[2] = 748;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-537);
      longArray0[1] = (long) (-537);
      ArrayUtils.shift(longArray0, (-537), (-537), (-537));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-537L), (-537L)}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3487;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) (-537L);
      doubleArray0[3] = (double) 748;
      doubleArray0[0] = (double) 748;
      doubleArray0[5] = (double) (-537L);
      doubleArray0[6] = (double) 3487;
      doubleArray0[7] = (double) 3487;
      doubleArray0[8] = (double) (-537L);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-537), (double) 748);
      assertEquals(64, bitSet0.size());
      assertEquals(9, bitSet0.length());
      assertEquals("{1, 2, 4, 5, 8}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {748.0, (-1.0), (-537.0), 748.0, 0.0, (-537.0), 3487.0, 3487.0, (-537.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(objectArray0, 337);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 2791L);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      bitSet0.clear();
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Short short0 = new Short((short)25);
      assertNotNull(short0);
      assertEquals((short)25, (short)short0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      
      ArrayUtils.reverse(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)25);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(1);
      assertEquals(0, int0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'I';
      charArray0[1] = 'X';
      charArray0[2] = '';
      charArray0[3] = 's';
      charArray0[4] = '*';
      charArray0[5] = 'O';
      charArray0[6] = 'Z';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'X', '', 's', '*', 'O', 'Z', 'I'}, charArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)115;
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)75;
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)8;
      doubleArray0[1] = 1.0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)8;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {8.0, 1.0, 0.0, 0.0, 8.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = 'b';
      doubleArray0[4] = (double) '`';
      MockRandom mockRandom0 = new MockRandom((short)0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'b', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)692);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Float float0 = new Float((float) (short)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-103);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)98, (byte)3, (byte)0, (byte) (-32), (byte) (-103)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)98, (byte)3, (byte)0, (byte) (-32), (byte) (-103)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-537.0);
      doubleArray0[3] = (-100.0);
      doubleArray0[4] = 0.7;
      doubleArray0[5] = (-2624.555);
      doubleArray0[6] = 0.0;
      int int0 = 2376;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 2376, (-4382.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2376, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byte byte0 = (byte)1;
      byteArray0[1] = (byte)1;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)1;
      objectArray0[1] = (Object) (byte)1;
      objectArray0[2] = (Object) (byte) (-100);
      objectArray0[3] = (Object) (byte) (-100);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null, (int) (byte)1);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = null;
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-100), (byte)1, (byte)0, (byte)0}, byteArray0);
      assertNull(byteArray1);
      
      ArrayUtils.shift((boolean[]) null, (int) (byte)1, (int) (byte) (-100), (int) (byte)1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)1;
      int int0 = (-1396);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-1396), (double) (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1396, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 43, 43);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte) (-59));
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-59)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      long[] longArray0 = ArrayUtils.insert((-237), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[6] = 1452;
      intArray0[2] = 1452;
      intArray0[4] = 1452;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(21, intArray0.length);
      assertEquals(21, intArray1.length);
      assertNotNull(intArray1);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'A');
      assertNull(charArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) 0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.reverse(objectArray0, 108, (-1));
      assertEquals(0, objectArray0.length);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (byte) (-20);
      ArrayUtils.shift(shortArray0, (int) (byte)14, 1421, (-1));
      assertEquals(10, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-20), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3987.04F);
      floatArray0[1] = 53.96274F;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-3987.04F);
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(byteArray2, (-1), (-1085), (-1));
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      ArrayUtils.reverse(objectArray1, 108, (-1));
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      long[] longArray0 = ArrayUtils.insert((-1), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)104;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)13);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte) (-32);
      objectArray0[2] = (Object) (byte)104;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte)104;
      objectArray0[5] = (Object) (byte) (-32);
      objectArray0[6] = (Object) (byte)0;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(7, objectArray1.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(objectArray1);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      ArrayUtils.swap(byteArray2, (int) (byte)104, 1052, (-1073741824));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = 'v';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Q');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'*', 'v'}, charArray0);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      int[] intArray0 = new int[18];
      intArray0[0] = 1;
      intArray0[1] = (-3482);
      intArray0[2] = (-3482);
      intArray0[3] = 0;
      ArrayUtils.shift(intArray0, 103);
      assertEquals(18, intArray0.length);
      
      int int0 = (-3184);
      char char0 = '3';
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, 1326, 'O');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1326, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-120);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-79));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)75, (byte) (-120)}, byteArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, 1, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)1;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-107);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (byte)1;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-107.0F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-107.0F), 0.0F, 1.0F, (-107.0F), 0.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte) (-107);
      shortArray0[3] = (short) (byte)1;
      shortArray0[4] = (short) (byte) (-107);
      shortArray0[5] = (short) (byte)1;
      shortArray0[6] = (short) (byte) (-107);
      shortArray0[7] = (short) (byte)1;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short) (-107), (short)1, (short) (-107), (short)1, (short) (-107), (short)1}, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1760.8441F));
      assertNotSame(floatArray0, floatArray1);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-107.0F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-107);
      longArray0[1] = (long) (short) (-107);
      longArray0[2] = (long) (short)1;
      longArray0[3] = (long) (byte) (-107);
      longArray0[4] = (long) (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-2087L), (int) (byte) (-107));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-107L), (-107L), 1L, (-107L), 1L}, longArray0);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(floatArray1, (int) (short) (-107), (-2236));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-107.0F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-107.0F), 0.0F, 1.0F, (-107.0F), 0.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)24;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)692);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)24}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)24}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Float float0 = new Float((float) (short)24);
      assertNotNull(float0);
      assertEquals(24.0F, (float)float0, 0.01F);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)692;
      floatArray0[1] = (float) (short)692;
      floatArray0[2] = 4812.2964F;
      floatArray0[3] = (float) (short)24;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.swap(floatArray1, (int) (short)24, (int) (short)24, 2551);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (int) (short)692, 3088);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)24}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)24}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      
      Long long0 = new Long(2351L);
      assertNotNull(long0);
      assertEquals(2351L, (long)long0);
      
      Long long1 = new Long((short)24);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(24L, (long)long1);
      
      Long long2 = new Long(4399L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(4399L, (long)long2);
      
      Long[] longArray0 = new Long[6];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[3] = long2;
      longArray0[4] = long2;
      longArray0[5] = long1;
      Long long3 = ArrayUtils.get(longArray0, (int) 692);
      assertEquals(6, longArray0.length);
      assertNull(long3);
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte) (-37);
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte)121, 4909);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (byte) (-97);
      doubleArray0[2] = (double) (byte)56;
      doubleArray0[3] = (double) (byte) (-37);
      doubleArray0[4] = (double) (byte)1;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 96.0, (int) (byte)1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-97.0), 56.0, (-37.0), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-100), (byte)1, (byte) (-15), (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray0[3] = (byte) (-15);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-240.0);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (-240.0);
      doubleArray0[3] = 1909.576697;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-240.0), 0.0, (-240.0), 1909.576697, 0.0, 1.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-537.0));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-240.0), 0.0, (-240.0), 1909.576697, 0.0, 1.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      Long long0 = new Long(419L);
      assertNotNull(long0);
      assertEquals(419L, (long)long0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '\u0082';
      charArray0[2] = '-';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '\u0082';
      doubleArray0[1] = (-240.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 419L, (int) '\u0082', (-240.0));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {130.0, (-240.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2141107086, 560);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {130.0, (-240.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, 634.282F);
      assertNull(floatArray0);
      
      ArrayUtils.swap(doubleArray0, (-3946), 2877);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {130.0, (-240.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 2877);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'Y';
      charArray0[1] = '`';
      charArray0[2] = 'K';
      charArray0[3] = 'o';
      charArray0[4] = '/';
      charArray0[5] = '1';
      charArray0[6] = '!';
      charArray0[7] = '_';
      charArray0[8] = '`';
      double[] doubleArray0 = new double[2];
      ArrayUtils.shift(doubleArray0, (-601), 2683, 190);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      doubleArray0[0] = (double) '`';
      doubleArray0[1] = (double) 'Z';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 96.0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {96.0, 90.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-17);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (int) (byte) (-1));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-1), (byte) (-1), (byte) (-17)}, byteArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(doubleArray0, (int) (byte) (-17), 1064, (int) (byte) (-1));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {96.0, 90.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = (-3832L);
      longArray0[2] = 42L;
      longArray0[3] = (-1252L);
      longArray0[4] = 2267L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {1L, (-3832L), 42L, (-1252L), 2267L}, longArray0);
      assertArrayEquals(new long[] {1L, (-3832L), 42L, (-1252L), 2267L}, longArray1);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-3832L);
      floatArray0[1] = (float) 42L;
      floatArray0[2] = (float) 2267L;
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, Integer.MAX_VALUE, (float) (-3832L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      long[] longArray0 = ArrayUtils.insert((-1), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)104;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)13);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-32);
      objectArray0[1] = (Object) (byte)104;
      objectArray0[2] = (Object) (byte)104;
      objectArray0[3] = (Object) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], (int) (byte)104);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      byte[] byteArray2 = ArrayUtils.removeElements((byte[]) null, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNull(byteArray2);
      
      ArrayUtils.shift((boolean[]) null, (int) (byte) (-32), 0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)13;
      doubleArray0[1] = (double) (byte) (-53);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (byte) (-53));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {13.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {13.0, (-53.0), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false, false, true, true}, booleanArray0));
      assertEquals(8, int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2683;
      intArray0[1] = 8;
      intArray0[2] = 8;
      intArray0[3] = 8;
      intArray0[4] = 8;
      intArray0[5] = 8;
      intArray0[6] = 8;
      intArray0[7] = 8;
      intArray0[8] = 8;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {2683, 8, 8, 8, 8, 8, 8, 8, 8}, intArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-30);
      intArray0[1] = (-30);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayUtils.shift(intArray0, (-30));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-30), (-30), 0, 0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, 14);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-95), (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (-3179L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)0, (int) (byte) (-95));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, (-3179L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)102;
      shortArray0[2] = (short)0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)102;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)102;
      ArrayUtils.shift(doubleArray0, (-1651), (-4031), 645);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {102.0, 0.0, 0.0, 102.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-485.1792780405));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {102.0, 0.0, 0.0, 102.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-17);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-61), 49);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-1), (byte) (-17)}, byteArray0);
      assertEquals((-1), int0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 2926, 2683);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'Y';
      charArray0[1] = '`';
      charArray0[2] = 'K';
      charArray0[3] = 'o';
      charArray0[4] = '/';
      charArray0[5] = '1';
      charArray0[6] = '!';
      charArray0[7] = '_';
      charArray0[8] = '`';
      double[] doubleArray0 = new double[2];
      ArrayUtils.shift(doubleArray0, (-601), 2683, 190);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      doubleArray0[0] = (double) '`';
      doubleArray0[1] = (double) 'Z';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 96.0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {96.0, 90.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-17);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (int) (byte) (-1));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-1), (byte) (-1), (byte) (-17)}, byteArray0);
      assertEquals((-1), int0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 45, 968);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = 'l';
      charArray0[2] = 'q';
      charArray0[3] = '\'';
      charArray0[4] = '/';
      charArray0[5] = 'k';
      charArray0[6] = 's';
      charArray0[7] = 'Q';
      charArray0[8] = 'G';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '-', (-288));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {')', 'l', 'q', '\'', '/', 'k', 's', 'Q', 'G'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 2478.21;
      doubleArray0[2] = (double) 53;
      ArrayUtils.shift(doubleArray0, 190, (-601), 2683);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 53.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 2478.21, 53.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf((char[]) null, ',', 2683);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1078.76;
      doubleArray0[1] = (-778.2948321);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 3975.47312421;
      doubleArray0[4] = (-1033.8555775770376);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2926.85;
      doubleArray0[7] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 2926.85, 14, (-889.73771));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1078.76, (-778.2948321), 1.0, 3975.47312421, (-1033.8555775770376), 0.0, 2926.85, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '4';
      charArray0[2] = 'T';
      charArray0[3] = 'r';
      charArray0[4] = 'G';
      charArray0[5] = 'i';
      charArray0[6] = 'r';
      charArray0[7] = 'v';
      charArray0[8] = '-';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 't', Integer.MIN_VALUE);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'c', '4', 'T', 'r', 'G', 'i', 'r', 'v', '-'}, charArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Float float0 = new Float(2910.665);
      assertNotNull(float0);
      assertEquals(2910.665F, (float)float0, 0.01F);
      
      Object[] objectArray0 = ArrayUtils.addFirst((Object[]) null, (Object) float0);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte)0, 2683);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[4];
      intArray0[0] = 2683;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (-725);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2683, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)19;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)19, 64);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)19}, byteArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)19;
      doubleArray0[1] = (double) 64;
      doubleArray0[2] = (double) (byte)19;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = 401.722252045548;
      doubleArray0[5] = (double) (byte)19;
      doubleArray0[6] = (double) (byte)19;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 19.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {19.0, 64.0, 19.0, 2.0, 401.722252045548, 19.0, 19.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {64.0, 19.0, 2.0, 401.722252045548, 19.0, 19.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (int) (byte)19, (int) (byte)0, 52);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-12920);
      shortArray0[1] = (short) (-31);
      shortArray0[2] = (short) (-31);
      shortArray0[3] = (short) (-12920);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-12920), (short) (-31), (short) (-31), (short) (-12920)}, shortArray0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(shortArray0, (int) (short) (-31), 160);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-12920), (short) (-31), (short) (-31), (short) (-12920)}, shortArray0);
      
      ArrayUtils.swap((boolean[]) null, 2683, (int) (short) (-31));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 65.0;
      doubleArray0[1] = (double) 46;
      doubleArray0[2] = (double) (short) (-12920);
      doubleArray0[3] = (double) (short) (-31);
      doubleArray0[4] = (double) 160;
      doubleArray0[5] = (double) 2683;
      int[] intArray0 = new int[6];
      intArray0[0] = 2683;
      intArray0[1] = (int) (short) (-31);
      intArray0[2] = (int) (short) (-31);
      intArray0[3] = 4526;
      intArray0[4] = (int) (short) (-31);
      intArray0[5] = (int) (short) (-12920);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4526, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.swap(booleanArray0, 46, 46);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 46;
      doubleArray0[1] = (double) (-725);
      doubleArray0[2] = (double) (-725);
      doubleArray0[3] = (double) 2683;
      doubleArray0[4] = (double) 51;
      doubleArray0[5] = (double) 51;
      doubleArray0[6] = (double) 2683;
      int[] intArray0 = new int[5];
      intArray0[0] = 51;
      intArray0[1] = 51;
      intArray0[2] = (-725);
      intArray0[3] = (-725);
      intArray0[4] = 4526;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4526, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[2] = 'Y';
      charArray0[1] = '`';
      charArray0[2] = 'K';
      charArray0[3] = 'o';
      charArray0[4] = '/';
      charArray0[5] = '1';
      short short0 = (short)1211;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1211;
      shortArray0[1] = (short)1950;
      shortArray0[2] = (short)2100;
      shortArray0[3] = (short)6;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-965), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -965, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)465;
      shortArray0[2] = (short) (-23208);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert(100, (double[]) null, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1491);
      shortArray0[3] = (short)97;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-971);
      MockRandom mockRandom0 = new MockRandom(1581L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1491), (short)97, (short)0, (short) (-971), (short)2}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.insert((-1216), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-368), 183, 2);
      Integer integer0 = new Integer((-368));
      assertNotNull(integer0);
      assertEquals((-368), (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, (String) null);
      assertNotNull(string0);
      assertEquals("-368", string0);
      
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'O';
      charArray0[1] = 'I';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      charArray0[4] = 'T';
      int int0 = ArrayUtils.indexOf(charArray0, '_');
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'O', 'I', 'O', 'O', 'T'}, charArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 183;
      doubleArray0[1] = (double) 'O';
      doubleArray0[2] = (double) 'O';
      doubleArray0[3] = (double) 'T';
      doubleArray0[4] = (double) 'T';
      doubleArray0[5] = 336.0546163359;
      doubleArray0[6] = (-1285.0);
      doubleArray0[7] = (double) 'I';
      doubleArray0[8] = (double) (-1);
      ArrayUtils.swap(doubleArray0, (-92), (-1300), 2);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {183.0, 79.0, 79.0, 84.0, 84.0, 336.0546163359, (-1285.0), 73.0, (-1.0)}, doubleArray0, 0.01);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, 'T');
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = (double) 53;
      ArrayUtils.shift(doubleArray0, (-3010), 53, 53);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 0.0, 53.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 53);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 0.0, 53.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-1);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1200;
      shortArray0[1] = (short)7;
      ArrayUtils.shift(shortArray0, 767);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)7, (short)1200}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-23), (int) (short)7);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1061L);
      longArray0[1] = (long) (byte)2;
      longArray0[2] = (long) (short)1200;
      longArray0[3] = (long) (short)7;
      longArray0[4] = (long) (short)7;
      longArray0[5] = (long) (short)1200;
      longArray0[6] = (long) (short)7;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {(-1061L), 2L, 1200L, 7L, 7L, 1200L, 7L}, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[26];
      Boolean boolean0 = new Boolean("Cannot store ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[2] = boolean0;
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[3] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[4] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray0[5] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[6] = boolean5;
      Boolean boolean6 = Boolean.valueOf("Cannot store ");
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean4));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray0[7] = boolean6;
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3477.3418344755078;
      doubleArray0[2] = 3477.3418344755078;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3477.3418344755078, 3477.3418344755078}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1116.89173468728));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3477.3418344755078, 3477.3418344755078}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3477.3418344755078, 3477.3418344755078}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray2 = new boolean[2];
      booleanArray2[0] = (boolean) boolean3;
      booleanArray2[1] = (boolean) boolean3;
      ArrayUtils.swap(booleanArray2, (-189), (-189), (-189));
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 259.4, (-189), 1995.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3477.3418344755078, 3477.3418344755078}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray2, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      long[] longArray0 = ArrayUtils.insert((-1), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)104;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)13);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-32);
      objectArray0[1] = (Object) (byte)104;
      objectArray0[2] = (Object) (byte)104;
      objectArray0[3] = (Object) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], (int) (byte)104);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      byte[] byteArray2 = ArrayUtils.removeElements((byte[]) null, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)0, (byte) (-53), (byte)104}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNull(byteArray2);
      
      ArrayUtils.shift((boolean[]) null, (int) (byte) (-32), 0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)13;
      doubleArray0[1] = (double) (byte) (-53);
      doubleArray0[2] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (double) (byte) (-32));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-32.0), 13.0, (-53.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {13.0, (-53.0), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)0);
      assertEquals("{2}", bitSet1.toString());
      assertEquals(3, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(1, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {13.0, (-53.0), 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(bitSet1);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 0.0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-32.0), 13.0, (-53.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-32.0), 13.0, (-53.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {13.0, (-53.0), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-53);
      floatArray0[1] = 1968.5306F;
      floatArray0[2] = (float) (byte)13;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {(-53.0F), 1968.5306F, 13.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1L));
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1055);
      shortArray0[1] = (short) (-5195);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1055), (int) (short) (-5195));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1055), (short) (-5195)}, shortArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2185;
      shortArray0[1] = (short) (-1909);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)108);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)2185, (short) (-1909)}, shortArray0);
      assertArrayEquals(new short[] {(short)2185, (short) (-1909)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 241.0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = ',';
      int int0 = ArrayUtils.indexOf(charArray0, 'O');
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'T', ','}, charArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(doubleArray0, (-92), (-1), Integer.MAX_VALUE);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, 'O');
      assertNull(charArray1);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)15);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)2185, (short) (-1909)}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (short) (-1909));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      int[] intArray0 = new int[2];
      float[] floatArray0 = new float[1];
      Long long0 = new Long(15851L);
      assertNotNull(long0);
      assertEquals(15851L, (long)long0);
      
      Long long1 = Long.getLong("", (Long) null);
      assertNull(long1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = 15851L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {0L, 15851L}, longArray0);
      assertArrayEquals(new long[] {0L, 15851L, 0L, 15851L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '7');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 53;
      doubleArray0[1] = (double) 53;
      ArrayUtils.shift(doubleArray0, (-3010), 53, 53);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 53.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = 'G';
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'G';
      longArray0[1] = (long) 'G';
      longArray0[2] = (long) '/';
      longArray0[3] = (-2505L);
      longArray0[4] = (long) '/';
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) '/';
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(6, longArray2.length);
      assertArrayEquals(new long[] {71L, 71L, 47L, (-2505L), 47L}, longArray0);
      assertArrayEquals(new long[] {47L}, longArray1);
      assertArrayEquals(new long[] {71L, 71L, 47L, (-2505L), 47L, 47L}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      
      Character character0 = Character.valueOf('>');
      assertNotNull(character0);
      assertEquals('>', (char)character0);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, '|');
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte)90;
      byteArray1[3] = (byte)90;
      byteArray1[3] = (byte)90;
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)90, (byte)0, (byte)90}, byteArray1);
      assertArrayEquals(new byte[] {(byte)90, (byte)90, (byte)0, (byte)90}, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-656), floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-656);
      longArray0[1] = (long) (byte)90;
      ArrayUtils.swap(longArray0, 2873, (-1825), (-1825));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-656L), 90L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-656), (int) (byte)90);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.insert(0, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1268;
      shortArray0[2] = (short)61;
      shortArray0[3] = (short)9;
      shortArray0[4] = (short) (-2674);
      ArrayUtils.shift(shortArray0, (-1222));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)61, (short)9, (short) (-2674), (short)0, (short)1268}, shortArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (short)1268;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = 1927.9F;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) (short)9;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), (-1222));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 1268.0F, (-1.0F), 0.0F, 1927.9F, 1.0F, 9.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 3285.8694F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)317;
      shortArray0[1] = (short) (-1392);
      shortArray0[2] = (short)317;
      shortArray0[3] = (short) (-1392);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-1392);
      shortArray0[6] = (short)317;
      ArrayUtils.shift(shortArray0, 3016);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1392), (short)317, (short) (-1392), (short)2, (short) (-1392), (short)317, (short)317}, shortArray0);
      
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short)2;
      shortArray1[1] = (Short) (short)317;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray2, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertEquals(2, shortArray2.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.swap(byteArray2, (-1), (int) (byte)14, (-1));
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      ArrayUtils.reverse(objectArray0, 108, (-1));
      assertEquals(0, objectArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-20);
      ArrayUtils.shift(shortArray0, (int) (byte) (-20), 1421, (-1));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short) (-20)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-588);
      shortArray0[1] = (short) (-436);
      ArrayUtils.shift(shortArray0, (int) (short) (-588), 423, 0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-588), (short) (-436), (short)0, (short)0}, shortArray0);
      
      ArrayUtils.swap((short[]) null, (int) (short) (-436), 0, 806);
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-1392);
      shortArray0[6] = (short)0;
      ArrayUtils.shift(shortArray0, 3017);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)2, (short) (-1392), (short)0}, shortArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      long[] longArray0 = ArrayUtils.insert((int) (short)2, (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-588);
      shortArray0[1] = (short) (-436);
      shortArray0[2] = (short) (-588);
      shortArray0[3] = (short) (-436);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-588), (short) (-436), (short) (-588), (short) (-436)}, shortArray0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte)4, (byte)4, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-588), (short) (-436), (short) (-588), (short) (-436)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-588), (short) (-436), (short) (-588), (short) (-436), (short) (-588), (short) (-436), (short) (-588), (short) (-436)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)1001);
      assertNotNull(short0);
      assertEquals((short)1001, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)19701);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)19701, (short)short1);
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (Short) null);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)shortArray0[1];
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {19701.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)90, (byte)90, (byte)90, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)90, (byte)90, (byte)90, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)90, (byte)90, (byte)90, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      Long long0 = new Long(15851L);
      assertNotNull(long0);
      assertEquals(15851L, (long)long0);
      
      Long long1 = Long.getLong("", (Long) null);
      assertNull(long1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1397);
      shortArray0[1] = (short) (-1397);
      shortArray0[2] = (short) (-1397);
      shortArray0[3] = (short) (-1397);
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1397), (short) (-1397), (short) (-1397), (short) (-1397)}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1397), (short) (-1397), (short) (-1397), (short) (-1397)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1397), (short) (-1397), (short) (-1397), (short) (-1397), (short) (-1397), (short) (-1397), (short) (-1397), (short) (-1397)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)102;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-3077);
      shortArray0[4] = (short)2185;
      shortArray0[5] = (short) (-1909);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)102, (short)0, (short) (-3077), (short)2185, (short) (-1909)}, shortArray0);
      assertArrayEquals(new short[] {(short)102, (short) (-3077), (short)2185, (short) (-1909)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)2185;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2185.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = '+';
      charArray0[2] = ',';
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)102;
      longArray0[1] = (long) 'a';
      longArray0[2] = (long) 'T';
      longArray0[3] = (long) (short)2185;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short) (-3077);
      longArray0[6] = 4296L;
      ArrayUtils.shift(longArray0, 2013, 850, 2146993858);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {102L, 97L, 84L, 2185L, 0L, (-3077L), 4296L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)102, (short)0, (short) (-3077), (short)2185, (short) (-1909)}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3487;
      intArray0[1] = (-537);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-1);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1), 2449);
      assertEquals(20, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1050.6F;
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1050.6F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'Q');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[15];
      intArray0[0] = (int) 'Q';
      intArray0[1] = (int) 'Q';
      intArray0[2] = (int) 'Q';
      intArray0[3] = (int) 'Q';
      intArray0[4] = (int) 'Q';
      intArray0[5] = (int) 'Q';
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(15, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Float[] floatArray1 = new Float[2];
      floatArray1[0] = (Float) 1.0F;
      floatArray1[1] = floatArray1[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(2, floatArray2.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1050.6F;
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1050.6F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'Q');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'Q';
      intArray0[1] = (int) 'Q';
      intArray0[2] = (int) 'Q';
      intArray0[3] = (int) 'Q';
      intArray0[4] = (int) 'Q';
      intArray0[5] = (int) 'Q';
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {81, 81, 81, 81, 81, 81}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Float[] floatArray1 = new Float[2];
      floatArray1[0] = (Float) 1.0F;
      Float float0 = new Float((-817.0));
      assertNotNull(float0);
      assertEquals((-817.0F), (float)float0, 0.01F);
      
      floatArray1[1] = float0;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(2, floatArray2.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, (-817.0F)}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (-2146627833), 1.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2146627833);
      longArray0[1] = (long) (-2146627833);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-2146627833);
      longArray0[5] = (long) (-2146627833);
      longArray0[6] = (long) (-1);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(14, longArray1.length);
      assertArrayEquals(new long[] {(-2146627833L), (-2146627833L), (-1L), (-1L), (-2146627833L), (-2146627833L), (-1L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2191);
      doubleArray0[1] = (double) (-2191);
      doubleArray0[2] = (double) (-2191);
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 1.5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2191.0), (-2191.0));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-2191.0), (-2191.0), (-2191.0), 1.5, 1.5}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        bitSet0.flip((-2191));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -2191
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1194);
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)0, (double) (short)0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf('\u008D');
      assertNotNull(character0);
      assertEquals('\u008D', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('\u008D', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character0);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('\u008D', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('-');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('-', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character2);
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character3));
      assertFalse(character2.equals((Object)character3));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character4);
      assertEquals('\u008D', (char)character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertArrayEquals(new char[] {'\u008D', '\u008D', '\u008D', '-', '\u008D'}, charArray0);
      assertNotNull(charArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-1194);
      longArray0[1] = (-1032L);
      longArray0[2] = (long) (char)character0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short) (-1194);
      longArray0[6] = (long) (char)character1;
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Short[] shortArray1 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      objectArray0[1] = (Object) 0;
      objectArray0[3] = (Object) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[2], (-2318));
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1967;
      shortArray0[1] = (short)13;
      shortArray0[2] = (short)13;
      shortArray0[3] = (short) (-2406);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-3354), (-1343));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1967, (short)13, (short)13, (short) (-2406)}, shortArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, (int) (short)13, (-2318));
      assertEquals(4, objectArray0.length);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (int) (short)13;
      intArray2[1] = 2;
      intArray2[2] = (int) (short) (-558);
      intArray2[3] = (-2318);
      ArrayUtils.shift(intArray2, (int) (short)13);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(4, intArray2.length);
      assertArrayEquals(new int[] {(-2318), 13, 2, (-558)}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 67.097;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2230.47643);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 1.0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {67.097, 0.0, (-1.0), (-2230.47643), 0.0, (-1.0), (-1.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {67.097, 0.0, (-1.0), (-2230.47643), 0.0, (-1.0), (-1.0), 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1229;
      intArray0[1] = 396;
      intArray0[2] = 1442;
      intArray0[3] = 2144616513;
      intArray0[4] = (-216);
      intArray0[5] = 1517;
      intArray0[6] = 3262;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(14, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {1229, 396, 1442, 2144616513, (-216), 1517, 3262}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short)1106);
      assertNotNull(short0);
      assertEquals((short)1106, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals(6, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)1106, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)1106);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short)1106, (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)2599);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short)2599, (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) shortArray0[2]);
      assertEquals(6, shortArray0.length);
      assertTrue(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short)1106, (short)short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) shortArray0[2]);
      assertEquals(6, shortArray0.length);
      assertTrue(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short1));
      assertNotNull(short5);
      assertEquals((short)1106, (short)short5);
      
      shortArray0[5] = short5;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'W', 'W', 'W', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[1];
      ArrayUtils.reverse(shortArray0, (int) (short)108, (-2147483630));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(1);
      assertEquals(0, int0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'I';
      int int1 = mockRandom0.nextInt();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      ArrayUtils.swap(charArray0, (-552), 1, Integer.MAX_VALUE);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'I'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)75;
      shortArray0[2] = (short) (-4038);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)8, (short)75, (short) (-4038)}, shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)8;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (short)8;
      doubleArray0[3] = (double) (short) (-4038);
      doubleArray0[4] = (double) (short)8;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {8.0, 1.0, 8.0, (-4038.0), 8.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'b';
      charArray0[2] = '`';
      charArray0[3] = '7';
      ArrayUtils.swap(charArray0, (-552), 2146427854, 1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'M', 'b', '`', '7'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)14;
      shortArray0[1] = (short) (byte)14;
      shortArray0[2] = (short) (byte)14;
      shortArray0[3] = (short) (byte) (-20);
      shortArray0[4] = (short) (-2020);
      shortArray0[5] = (short) (byte) (-20);
      shortArray0[6] = (short) (byte)14;
      shortArray0[7] = (short) (byte) (-20);
      shortArray0[8] = (short) (byte)14;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)14);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)14, (short)14, (short)14, (short) (-20), (short) (-2020), (short) (-20), (short)14, (short) (-20), (short)14}, shortArray0);
      assertArrayEquals(new short[] {(short)14, (short)14, (short) (-20), (short) (-2020), (short) (-20), (short)14, (short) (-20), (short)14}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray0, (short) (byte)14);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(4, shortArray2.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-20), (short) (-2020), (short) (-20), (short) (-20)}, shortArray2);
      assertArrayEquals(new short[] {(short)14, (short)14, (short)14, (short) (-20), (short) (-2020), (short) (-20), (short)14, (short) (-20), (short)14}, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (int) (byte) (-113));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)88}, byteArray0);
      assertEquals((-1), int0);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Field names are mandatory when using JsonToStringStyle";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)689);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[1] = "";
      stringArray0[2] = "hyHbg";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "L";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-368), (-368), 2);
      Integer integer0 = new Integer((-368));
      assertNotNull(integer0);
      assertEquals((-368), (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, (String) null);
      assertNotNull(string0);
      assertEquals("-368", string0);
      
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      Integer integer2 = new Integer(2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer1, integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2719.0849;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 2719.0849}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2719.0849);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 2719.0849}, doubleArray0, 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2996.853545;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 3.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2700.38066656);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2996.853545, Double.NaN, 3.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1482.665519);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1185.4562414681);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1909.576697;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 2719.0849;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1482.665519), 0.0, (-1185.4562414681), 1.0, 0.0, 1909.576697, 0.0, 1.0, 2719.0849}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 1.5);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      int int0 = (-1394);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, (-1394));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1394, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1313L;
      longArray0[1] = (-2810L);
      longArray0[2] = 1L;
      longArray0[3] = (-445L);
      longArray0[4] = 1474L;
      longArray0[5] = 1185L;
      longArray0[6] = (-1971L);
      longArray0[7] = 2913L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 35L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {1313L, (-2810L), 1L, (-445L), 1474L, 1185L, (-1971L), 2913L}, longArray0);
      assertArrayEquals(new long[] {1313L, (-2810L), 1L, (-445L), 1474L, 1185L, (-1971L), 2913L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 545;
      intArray0[1] = 1452;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 0;
      intArray0[4] = 0;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 1452;
      longArray0[2] = 189L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) Integer.MAX_VALUE;
      longArray0[6] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-1208L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {0L, 1452L, 189L, 0L, 0L, 2147483647L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 1452L, 189L, 0L, 0L, 2147483647L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      float[] floatArray0 = new float[5];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, Float.NaN, 1959);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)99);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) (short)1540;
      doubleArray0[2] = (double) 0.0F;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1788.88, 1959);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 1540.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-368), (-368), 2);
      Integer integer0 = new Integer((-368));
      assertNotNull(integer0);
      assertEquals((-368), (int)integer0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-368);
      doubleArray0[1] = (double) (-368);
      doubleArray0[2] = (double) (-368);
      doubleArray0[3] = (double) (-368);
      doubleArray0[4] = (double) (-368);
      doubleArray0[5] = (double) (-368);
      doubleArray0[6] = (double) (-368);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1387.73, 2980.4);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-368.0), (-368.0), (-368.0), (-368.0), (-368.0), (-368.0), (-368.0)}, doubleArray0, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      long[] longArray0 = new long[1];
      longArray0[0] = (-1555L);
      ArrayUtils.shift(longArray0, 2);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1555L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {1, 0}, intArray0);
      assertNotNull(integerArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "ou<,.>r!0p9{");
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertEquals(2, stringArray0.length);
      assertArrayEquals(new int[] {1, 0}, intArray0);
      assertNotNull(stringArray0);
      
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('z');
      assertNotNull(character0);
      assertEquals('z', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(':');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals(':', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('z');
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('z', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('5');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('5', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf((char) character0);
      assertTrue(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('z', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('G');
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      assertEquals('G', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('4');
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character1));
      assertNotNull(character6);
      assertEquals('4', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf('G');
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertNotNull(character7);
      assertEquals('G', (char)character7);
      
      characterArray0[7] = character7;
      Character character8 = Character.valueOf('2');
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character3));
      assertNotNull(character8);
      assertEquals('2', (char)character8);
      
      characterArray0[8] = character8;
      Character character9 = ArrayUtils.get(characterArray0, 3348);
      assertEquals(9, characterArray0.length);
      assertNull(character9);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) character2);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {1, 0}, intArray0);
      assertFalse(character2.equals((Object)character3));
      assertFalse(character2.equals((Object)character5));
      assertFalse(character2.equals((Object)character6));
      assertFalse(character2.equals((Object)character7));
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character8));
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character4));
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      longArray0[2] = 1934L;
      longArray0[3] = (-5146L);
      int[] intArray0 = new int[7];
      intArray0[0] = 227;
      intArray0[1] = 9;
      intArray0[2] = 9;
      intArray0[3] = 9;
      intArray0[5] = 9;
      intArray0[6] = 409;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {227, 9, 9, 9, 0, 9, 409}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3482;
      intArray0[1] = (-537);
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {3482, (-537), 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)5260;
      shortArray0[1] = (short) (-694);
      shortArray0[2] = (short)5260;
      shortArray0[4] = (short)5260;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)5260, 7);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)5260, (short) (-694), (short)5260, (short)0, (short)5260}, shortArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      boolean[] booleanArray0 = null;
      int int0 = (-368);
      int int1 = 183;
      ArrayUtils.shift((boolean[]) null, (-368), 183, 2);
      Integer integer0 = new Integer((-368));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals((-368), (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, (String) null);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(string0);
      assertEquals("-368", string0);
      
      AbstractMap.SimpleEntry<Integer, Integer>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 4);
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      try { 
        Integer.valueOf("jmkOpOT`Q=_5#=je]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jmkOpOT`Q=_5#=je]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      String string0 = ArrayUtils.toString((Object) null, "Array and element cannot both be null");
      assertNotNull(string0);
      assertEquals("Array and element cannot both be null", string0);
      
      Integer integer0 = new Integer((-2146955100));
      assertNotNull(integer0);
      assertEquals((-2146955100), (int)integer0);
      
      Integer integer1 = new Integer((-2146955100));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2146955100), (int)integer1);
      
      Integer integer2 = new Integer(1936);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1936, (int)integer2);
      
      Integer integer3 = new Integer(1936);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(1936, (int)integer3);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer2, integer3);
      assertTrue(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertTrue(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2719.0849;
      doubleArray0[1] = 2719.0849;
      doubleArray0[2] = 2719.0849;
      doubleArray0[3] = 2719.0849;
      doubleArray0[4] = (double) (-2146955100);
      doubleArray0[5] = 2719.0849;
      doubleArray0[6] = 2719.0849;
      doubleArray0[7] = 2719.0849;
      doubleArray0[8] = (double) (-2146955100);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {2719.0849, 2719.0849, 2719.0849, 2719.0849, (-2.1469551E9), 2719.0849, 2719.0849, 2719.0849, (-2.1469551E9)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3477.3418344755078);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {2719.0849, 2719.0849, 2719.0849, 2719.0849, (-2.1469551E9), 2719.0849, 2719.0849, 2719.0849, (-2.1469551E9)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-368), (-368), 2);
      Integer integer0 = new Integer((-368));
      assertNotNull(integer0);
      assertEquals((-368), (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, (String) null);
      assertNotNull(string0);
      assertEquals("-368", string0);
      
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      try { 
        Integer.valueOf("jmkOpOT`Q=_5#=je]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jmkOpOT`Q=_5#=je]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = new Boolean("anr#");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      boolean boolean4 = ArrayUtils.isSorted(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'C'}, charArray0);
      assertTrue(boolean4);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 2233);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2233, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1180;
      shortArray0[1] = (short)1180;
      ArrayUtils.shift(shortArray0, 767);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1180, (short)1180}, shortArray0);
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      Character character1 = Character.valueOf('U');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('U', (char)character1);
      
      Character character2 = Character.valueOf('U');
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('U', (char)character2);
      
      Character character3 = Character.valueOf('S');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('S', (char)character3);
      
      Character character4 = Character.valueOf('S');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      assertEquals('S', (char)character4);
  }

  @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      MockRandom mockRandom0 = new MockRandom(2351L);
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[1];
      LongStream longStream0 = mockRandom0.longs((long) (short)429, 2351L);
      assertNotNull(longStream0);
      
      shortArray0[0] = (short)429;
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)429}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.insert(Integer.MAX_VALUE, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1900;
      ArrayUtils.swap(shortArray0, 2418, 91, 700);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)1900}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 14, 1936);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-53);
      shortArray0[1] = (short)2324;
      shortArray0[2] = (short) (-1857);
      shortArray0[3] = (short) (-1);
      Double[] doubleArray0 = ArrayUtils.insert(2341, (Double[]) null, (Double[]) null);
      assertNull(doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '1', (int) (short) (-1857));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = 32;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 32, (short)3326);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      Double double0 = new Double((-747.2308091677613));
      assertNotNull(double0);
      assertEquals((-747.2308091677613), (double)double0, 0.01);
      
      MutableInt mutableInt0 = new MutableInt(double0);
      assertEquals((-747.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-747L), mutableInt0.longValue());
      assertEquals((-747.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)21, mutableInt0.byteValue());
      assertEquals((-747), (int)mutableInt0.getValue());
      assertEquals((-747), (int)mutableInt0.toInteger());
      assertEquals("-747", mutableInt0.toString());
      assertEquals((-747), mutableInt0.intValue());
      assertEquals((short) (-747), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals((-747.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-747L), mutableInt0.longValue());
      assertEquals((-747.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)21, mutableInt0.byteValue());
      assertEquals((-747), (int)mutableInt0.getValue());
      assertEquals((-747), (int)mutableInt0.toInteger());
      assertEquals("-747", mutableInt0.toString());
      assertEquals((-747), mutableInt0.intValue());
      assertEquals((short) (-747), mutableInt0.shortValue());
      assertEquals((-747.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-747), mutableInt1.intValue());
      assertEquals("-747", mutableInt1.toString());
      assertEquals((short) (-747), mutableInt1.shortValue());
      assertEquals((-747), (int)mutableInt1.toInteger());
      assertEquals((byte)21, mutableInt1.byteValue());
      assertEquals((-747), (int)mutableInt1.getValue());
      assertEquals((-747L), mutableInt1.longValue());
      assertEquals((-747.0), mutableInt1.doubleValue(), 0.01);
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      assertNotNull(mutableInt1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1917;
      intArray0[1] = 1848;
      intArray0[2] = 1662;
      intArray0[3] = 4089;
      intArray0[4] = (-975);
      intArray0[5] = 0;
      mutableInt0.increment();
      assertEquals((-746L), mutableInt0.longValue());
      assertEquals((-746.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-746), (int)mutableInt0.getValue());
      assertEquals((-746), (int)mutableInt0.toInteger());
      assertEquals((byte)22, mutableInt0.byteValue());
      assertEquals("-746", mutableInt0.toString());
      assertEquals((-746.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-746), mutableInt0.shortValue());
      assertEquals((-746), mutableInt0.intValue());
      assertSame(mutableInt0, mutableInt1);
      
      intArray0[6] = 1343;
      mutableInt0.subtract((Number) (-975));
      assertEquals(229L, mutableInt0.longValue());
      assertEquals(229.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(229.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-27), mutableInt0.byteValue());
      assertEquals(229, (int)mutableInt0.getValue());
      assertEquals(229, (int)mutableInt0.toInteger());
      assertEquals("229", mutableInt0.toString());
      assertEquals(229, mutableInt0.intValue());
      assertEquals((short)229, mutableInt0.shortValue());
      assertSame(mutableInt0, mutableInt1);
      
      intArray0[7] = (-1822);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1343);
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {(-1343)}, intArray0);
      assertArrayEquals(new int[] {(-1343)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1343);
      objectArray0[1] = (Object) (-1343);
      objectArray0[2] = (Object) (-1343);
      objectArray0[3] = (Object) (-1343);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[2], (-2318));
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1967;
      shortArray0[1] = (short)13;
      shortArray0[2] = (short) (-558);
      shortArray0[3] = (short) (-2406);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-3354), (-1343));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1967, (short)13, (short) (-558), (short) (-2406)}, shortArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, (int) (short)13, (-2318));
      assertEquals(4, objectArray0.length);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (int) (short)13;
      intArray2[1] = 2;
      intArray2[2] = (int) (short) (-558);
      intArray2[3] = (-2318);
      ArrayUtils.shift(intArray2, (int) (short) (-558));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(4, intArray2.length);
      assertArrayEquals(new int[] {(-558), (-2318), 13, 2}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      Double[] doubleArray0 = new Double[12];
      Double double0 = new Double((-4521.304286724299));
      assertNotNull(double0);
      assertEquals((-4521.304286724299), (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      Double double1 = new Double((-4521.304286724299));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-4521.304286724299), (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(12, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-4521.304286724299), (double)double2, 0.01);
      
      Double double3 = new Double(19.716295293968958);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(19.716295293968958, (double)double3, 0.01);
      
      doubleArray0[5] = doubleArray0[2];
      Long long0 = new Long(1960L);
      assertNotNull(long0);
      assertEquals(1960L, (long)long0);
      
      int int0 = ArrayUtils.indexOf((Object[]) doubleArray0, (Object) long0);
      assertEquals(12, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      Object[] objectArray0 = new Object[7];
      objectArray0[5] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) 3285.8694F;
      objectArray0[5] = (Object) 3285.8694F;
      objectArray0[6] = (Object) null;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "(JEg&1");
      assertEquals(7, objectArray0.length);
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-1626);
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      assertArrayEquals(new int[] {0, 0, (-1626), 0, 0}, intArray0);
      assertNotNull(integerArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (int) (short)0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      ArrayUtils.reverse(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "Arguments cannot both be null");
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte) (-1), (byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-1', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1072;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-2117);
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)11;
      shortArray0[8] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (short)0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertArrayEquals(new short[] {(short)1072, (short)0, (short)0, (short) (-1), (short)0, (short) (-2117), (short) (-1), (short)11, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1072, (short)0, (short)0, (short) (-1), (short)0, (short) (-2117), (short) (-1), (short)11, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3987.04F);
      floatArray0[1] = 53.96274F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 963.9813F;
      floatArray0[7] = 53.96274F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertArrayEquals(new float[] {(-3987.04F), 53.96274F, 0.0F, 1.0F, 1.0F, 963.9813F, 0.0F, 53.96274F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      char[] charArray0 = new char[0];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      
      float float0 = (-1760.8441F);
      long long0 = 1097L;
      MockRandom mockRandom0 = new MockRandom(1097L);
      assertNotNull(mockRandom0);
      
      long long1 = 0L;
      int int0 = (-1);
      int int1 = 2;
      int int2 = 3102;
      // Undeclared exception!
      try { 
        mockRandom0.ints(638L, 18688, 3102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, 50L);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, 90);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray0);
      assertEquals(0, int0);
      
      Long[] longArray1 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      int int0 = (-2146627833);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2146627833);
      longArray0[1] = (long) (-2146627833);
      int int1 = 534;
      int int2 = ArrayUtils.indexOf((double[]) null, (double) 0L, 534);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = new float[2];
      floatArray1[0] = (float) 534;
      floatArray1[1] = 1410.0428F;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray1, (-2202));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2202, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      char char0 = '[';
      char[] charArray0 = new char[7];
      charArray0[0] = '%';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '&';
      charArray0[5] = '%';
      charArray0[6] = '[';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      assertArrayEquals(new char[] {'%', '[', '[', '[', '&', '%', '['}, charArray0);
      assertNotNull(characterArray0);
      
      MockRandom mockRandom0 = new MockRandom((-1208L));
      assertNotNull(mockRandom0);
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        mockRandom0.ints(0L, 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) (byte) (-20);
      doubleArray0[1] = (double) (byte) (-20);
      doubleArray0[2] = (double) (byte) (-20);
      doubleArray0[3] = (double) (byte) (-20);
      doubleArray0[4] = (double) '<';
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-20.0), (-20.0), (-20.0), 60.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-20.0), (-20.0), (-20.0), 60.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, (-20.0), (-20.0), (-20.0), 60.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-20.0), (-20.0), (-20.0), 60.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-20.0), (-20.0), (-20.0), 60.0, 0.0, (-20.0), (-20.0), (-20.0), 60.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) '<';
      doubleArray3[1] = (double) (byte) (-20);
      doubleArray3[2] = (double) (byte) (-20);
      int int0 = new Character('<');
      assertEquals('<', int0);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float(60.0);
      assertNotNull(float0);
      assertEquals(60.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(Float.NaN);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(Float.NaN, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(Float.NaN);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(Float.NaN, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[0]);
      assertEquals(5, floatArray0.length);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals(60.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-20.0));
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals((-20.0F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      int[] intArray0 = new int[0];
      Float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short)571);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[3] = true;
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1116.872378251227));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test835()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(3479);
      assertEquals(3479, mutableInt0.intValue());
      assertEquals("3479", mutableInt0.toString());
      assertEquals(3479.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3479.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3479L, mutableInt0.longValue());
      assertEquals((short)3479, mutableInt0.shortValue());
      assertEquals(3479, (int)mutableInt0.toInteger());
      assertEquals((byte) (-105), mutableInt0.byteValue());
      assertEquals(3479, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      Class<MutableInt[]> class0 = MutableInt[].class;
      MutableInt[] mutableIntArray0 = ArrayUtils.nullToEmpty((MutableInt[]) null, class0);
      assertEquals(0, mutableIntArray0.length);
      assertNotNull(mutableIntArray0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test836()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1116.872378251227));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[7];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean0);
      
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[1] = (long) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, 0L, (-1));
      assertEquals(5, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test837()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3987.04F);
      floatArray0[1] = 53.96274F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 963.9813F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertArrayEquals(new float[] {(-3987.04F), 53.96274F, 0.0F, 1.0F, 1.0F, 963.9813F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'T'}, charArray0);
      assertNotNull(characterArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertEquals(0, intArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, true}, booleanArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test838()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 2873);
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Short short0 = new Short((short)1533);
      assertNotNull(short0);
      assertEquals((short)1533, (short)short0);
      
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null);
      assertTrue(boolean0);
      
      Long long0 = new Long((short)1533);
      assertNotNull(long0);
      assertEquals(1533L, (long)long0);
      
      Long long1 = new Long((short)1533);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1533L, (long)long1);
      
      Long long2 = new Long((-1L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      
      Long long3 = new Long((-1L));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-1L), (long)long3);
      
      Long long4 = new Long(2873);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals(2873L, (long)long4);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)21;
      shortArray0[1] = (short)1533;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)1533, 2117);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)21, (short)1533}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test839()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)0;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-34), (byte) (-111), (byte)0, (byte)0}, byteArray0);
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((byte) (-111));
      assertNotNull(short0);
      assertEquals((short) (-111), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte)0);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((byte) (-111));
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-111), (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[1]);
      assertEquals(4, shortArray0.length);
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short)0, (short)short3);
      
      shortArray0[3] = short3;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[9];
      Long long0 = new Long(739L);
      assertNotNull(long0);
      assertEquals(739L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((byte) (-34));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-34L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((byte)12);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(12L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((byte)12);
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(12L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(739L);
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      assertEquals(739L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = Long.getLong("", (long) (byte) (-111));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertNotNull(long5);
      assertEquals((-111L), (long)long5);
      
      Long long6 = new Long((byte)0);
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long5));
      assertNotNull(long6);
      assertEquals(0L, (long)long6);
      
      Long long7 = new Long((long) shortArray0[1]);
      assertEquals(4, shortArray0.length);
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long0));
      assertTrue(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long1));
      assertNotNull(long7);
      assertEquals(0L, (long)long7);
      
      longArray0[7] = long7;
      Long long8 = new Long((long) longArray0[7]);
      assertEquals(9, longArray0.length);
      assertFalse(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long4));
      assertFalse(long8.equals((Object)long1));
      assertTrue(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long5));
      assertTrue(long8.equals((Object)long6));
      assertNotNull(long8);
      assertEquals(0L, (long)long8);
  }

  @Test(timeout = 4000)
  public void test840()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 2873);
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-1);
      ArrayUtils.swap(byteArray0, 2873, 98, 4608);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-1)}, byteArray0);
      
      ArrayUtils.reverse(objectArray0, 108, 98);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test841()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      LongStream longStream0 = mockRandom0.longs(1687L, (long) 39, 1687L);
      assertNotNull(longStream0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test842()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      short short0 = (short)2;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[3] = (short) (-1404);
      shortArray0[4] = (short)2;
      shortArray0[6] = (short)2;
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short) (-1404);
      shortArray1[1] = (Short) (short)2;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertNotNull(shortArray2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)2;
      floatArray0[0] = 0.0F;
      doubleArray0[2] = (double) (short)2;
      floatArray0[2] = 0.0F;
      doubleArray0[5] = (double) short0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 0.0, 2.0, 2.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      LongStream longStream0 = mockRandom0.longs(1300L, (-116L), 2253L);
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test843()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)0;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-34), (byte) (-111), (byte)0, (byte)12}, byteArray0);
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((byte) (-111));
      assertNotNull(short0);
      assertEquals((short) (-111), (short)short0);
      
      shortArray0[0] = short0;
      short short1 = (short)90;
      Short short2 = new Short((short)90);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short)90, (short)short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((byte) (-111));
      assertFalse(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short) (-111), (short)short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short(short1);
      assertTrue(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short)90, (short)short4);
      
      shortArray0[3] = short4;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[9];
      Long long0 = new Long(739L);
      assertNotNull(long0);
      assertEquals(739L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((byte) (-34));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-34L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((byte)2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(2L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((byte)12);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(12L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(739L);
      assertFalse(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals(739L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = Long.getLong("", 1L);
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertNotNull(long5);
      assertEquals(1L, (long)long5);
      
      longArray0[5] = long5;
      Long long6 = new Long((byte)0);
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long2));
      assertNotNull(long6);
      assertEquals(0L, (long)long6);
      
      longArray0[6] = long6;
      Long long7 = new Long((-97L));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long2));
      assertNotNull(long7);
      assertEquals((-97L), (long)long7);
      
      longArray0[7] = long7;
      try { 
        Long.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test844()  throws Throwable  {
      char[] charArray0 = new char[22];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'T');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(22, charArray0.length);
      assertEquals(23, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = (long) 'T';
      charArray0[12] = 'T';
      longArray0[3] = (long) 'T';
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1L, 84L, 0L, 84L}, longArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      ArrayUtils.shift(byteArray0, 0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test845()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = '-';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '-'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '-'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[8];
      charArray0[0] = '\u0000';
      floatArray0[1] = (float) 'a';
      floatArray0[2] = (float) 'a';
      floatArray0[3] = (float) '\u0000';
      floatArray0[4] = 97.0F;
      floatArray0[5] = (float) 'a';
      floatArray0[6] = (float) '-';
      floatArray0[7] = (float) '-';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (-2145564352));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 97.0F, 97.0F, 0.0F, 97.0F, 97.0F, 45.0F, 45.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test846()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-1L);
      objectArray0[1] = (Object) (-1L);
      Object object0 = ArrayUtils.get(objectArray0, 38);
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      
      objectArray0[2] = null;
      ArrayUtils.shift(objectArray0, 38);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test847()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)88;
      doubleArray0[1] = (double) (byte) (-113);
      doubleArray0[2] = (double) (byte)88;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-551.10913489109), (-113.0));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {88.0, (-113.0), 88.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test848()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-32);
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      ArrayUtils.shift(byteArray1, (int) (byte) (-32));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shift((short[]) null, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-32);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.swap(shortArray0, (int) (short)0, (int) (short)0, (int) (short)0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-32), (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test849()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[1];
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-1), (short)short1);
      
      Short short2 = new Short((short) (-1266));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-1266), (short)short2);
      
      Short short3 = new Short((short) (-1));
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short) (-1), (short)short3);
      
      Short short4 = new Short((short) (-1));
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short1));
      assertNotNull(short4);
      assertEquals((short) (-1), (short)short4);
      
      Short short5 = new Short((short) (-1));
      assertTrue(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short4));
      assertNotNull(short5);
      assertEquals((short) (-1), (short)short5);
      
      Short short6 = new Short((short) (-543));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short4));
      assertNotNull(short6);
      assertEquals((short) (-543), (short)short6);
      
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short3;
      shortArray0[1] = short4;
      shortArray0[2] = short5;
      shortArray0[3] = short1;
      shortArray0[4] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1));
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray1);
      assertNotNull(shortArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) shortArray0, (Random) mockRandom0);
      assertEquals(5, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1942.2936F), (int) short0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test850()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-240L), 1921);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(1921);
      assertNotNull(double0);
      assertEquals(1921.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-240L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-240.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1.0);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.0);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(1.0, (double)double3, 0.01);
      
      doubleArray0[3] = double0;
      Double double4 = new Double((double) doubleArray0[1]);
      assertEquals(5, doubleArray0.length);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals((-240.0), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      doubleArray0[2] = doubleArray0[1];
      ArrayUtils.shuffle((Object[]) doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      BitSet bitSet1 = new BitSet(1921);
      assertEquals(1984, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 1921);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test851()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-240L), 1921);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(1921);
      assertNotNull(double0);
      assertEquals(1921.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-240L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-240.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1.0);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.0);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(1.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[1]);
      assertEquals(5, doubleArray0.length);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals((-240.0), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[2];
      doubleArray2[1] = (double) doubleArray0[1];
      doubleArray2[1] = (double) doubleArray0[3];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray2);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray2, 0.01);
      assertTrue(boolean0);
      
      ArrayUtils.shuffle((Object[]) doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray2, 1.0, 1.0);
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 1}", bitSet1.toString());
      assertEquals(2, bitSet1.length());
      assertEquals(2, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray2, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 1921);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test852()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = 'U';
      charArray0[3] = '.';
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2008.315), (-2008.315));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test853()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-240L), 1921);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(1921);
      assertNotNull(double0);
      assertEquals(1921.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-240L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-240.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1.0);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.0);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(1.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals(0.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) doubleArray0[1];
      doubleArray2[1] = (double) doubleArray0[3];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray2);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {(-240.0), 1.0}, doubleArray2, 0.01);
      assertTrue(boolean0);
      
      ArrayUtils.shuffle((Object[]) doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray2, 1.0, 1.0);
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(2, bitSet1.length());
      assertEquals("{1}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {(-240.0), 1.0}, doubleArray2, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 1921);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test854()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1420.053F;
      floatArray0[1] = 0.0F;
      int[] intArray0 = new int[4];
      intArray0[0] = 768;
      intArray0[1] = 0;
      intArray0[2] = 287;
      intArray0[3] = 65;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 768, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test855()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 4010L;
      longArray0[1] = 4511L;
      longArray0[2] = 1061L;
      longArray0[3] = (-1208L);
      longArray0[4] = 0L;
      longArray0[5] = (-4827L);
      longArray0[6] = (-2295L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1208L), 2);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {4010L, 4511L, 1061L, (-1208L), 0L, (-4827L), (-2295L)}, longArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test856()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-20));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.reverse(objectArray0, 108, (-1));
      assertEquals(0, objectArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-20);
      ArrayUtils.shift(shortArray0, (int) (byte) (-20), 1421, (int) (byte)14);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-20), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test857()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-100), (byte)1, (byte) (-15), (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-15);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-100);
      byteArray1[3] = (byte) (-15);
      byteArray1[4] = (byte) (-15);
      byteArray1[5] = (byte) (-15);
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-15), (byte)0, (byte) (-100), (byte) (-15), (byte) (-15), (byte) (-15)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-15), (byte)0, (byte) (-100), (byte) (-15), (byte) (-15), (byte) (-15)}, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test858()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1194);
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)0, (double) (short)0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      ArrayUtils.swap(shortArray0, 1175, (-3339), (-3339));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1194), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1175;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3339), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3339, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test859()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[7];
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.subarray(intArray0, (-1966), 223);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray2.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      
      ArrayUtils.shift(intArray0, (-1515));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
  }

  @Test(timeout = 4000)
  public void test860()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 120;
      intArray0[1] = (-1);
      intArray0[2] = Integer.MAX_VALUE;
      ArrayUtils.shift(intArray0, 2117, 2146791509, (-2944));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {120, (-1), Integer.MAX_VALUE}, intArray0);
  }

  @Test(timeout = 4000)
  public void test861()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-3237);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayUtils.shift(intArray0, (-3237));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-3237)}, intArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'Y';
      charArray0[2] = '~';
      charArray0[3] = ',';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-3184), '/');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3184, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test862()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2153L;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 35);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 35, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test863()  throws Throwable  {
      long[] longArray0 = new long[2];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-274);
      doubleArray0[1] = (double) (-274);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1290.9201636), (-1517.091801939));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-274.0), (-274.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[0];
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2, (double) (-274));
      assertNotSame(doubleArray3, doubleArray0);
      assertSame(doubleArray3, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test864()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)689);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[1] = "";
      stringArray0[2] = "hyHbg";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "L";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotNull(stringArray1);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray1, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test865()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[1] = 1452;
      intArray0[2] = 1452;
      intArray0[4] = 1452;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(21, intArray0.length);
      assertEquals(21, intArray1.length);
      assertNotNull(intArray1);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'A');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test866()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-4525.675139581));
      assertNotNull(double0);
      assertEquals((-4525.675139581), (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      Double double1 = new Double((-4525.675139581));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-4525.675139581), (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-4525.675139581), (double)double2, 0.01);
      
      doubleArray0[4] = double2;
      Double double3 = new Double(0.0);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[5] = double3;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)48;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-51), (byte)48, (byte) (-51), (byte)48, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-51), (byte)48, (byte) (-51), (byte)48, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-51), (byte)48, (byte) (-51), (byte)48, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = ArrayUtils.insert(2385, (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test867()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = ArrayUtils.get(objectArray0, 253);
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.toPrimitive(object0);
      assertEquals(3, objectArray0.length);
      assertNull(object2);
      
      objectArray0[2] = null;
      ArrayUtils.swap(objectArray0, 30, 8192, 253);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test868()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-4525.675139581));
      assertNotNull(double0);
      assertEquals((-4525.675139581), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-4525.675139581));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-4525.675139581), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-4525.675139581));
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-4525.675139581), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals((-4525.675139581), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[1]);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      assertEquals((-4525.675139581), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      assertEquals(0.0, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = '`';
      charArray0[2] = 'j';
      char[] charArray1 = ArrayUtils.add(charArray0, 'j');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'v', '`', 'j', 'j'}, charArray1);
      assertArrayEquals(new char[] {'v', '`', 'j'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'v';
      floatArray0[1] = (-1760.8441F);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 'v';
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {118.0F, (-1760.8441F), 0.0F, 118.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {118.0F, (-1760.8441F), 118.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test869()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.shift(longArray0, 4, 4, 4);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) null);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test870()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      longArray0[2] = 1934L;
      longArray0[3] = (-5146L);
      longArray0[4] = 2935L;
      longArray0[5] = (-1L);
      longArray0[6] = 4296L;
      ArrayUtils.shift(longArray0, 18688, 18688, 18688);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 1L, 1934L, (-5146L), 2935L, (-1L), 4296L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test871()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1194);
      shortArray0[2] = (short)15;
      shortArray0[3] = (short)1211;
      shortArray0[4] = (short)2100;
      shortArray0[6] = (short)373;
      shortArray0[7] = (short)6;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(51, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test872()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1194);
      shortArray0[2] = (short) (-711);
      shortArray0[3] = (short)1211;
      shortArray0[4] = (short)2100;
      shortArray0[5] = (short)1950;
      shortArray0[6] = (short)373;
      shortArray0[7] = (short)6;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(53, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test873()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1533);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1533)}, shortArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-1533);
      floatArray0[1] = (float) (short) (-1533);
      floatArray0[2] = (-2456.5017F);
      floatArray0[3] = (float) (short) (-1533);
      floatArray0[4] = (float) (short) (-1533);
      floatArray0[5] = (float) (short) (-1533);
      floatArray0[6] = (float) (short) (-1533);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1533.0F));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1533.0F), (-1533.0F), (-2456.5017F), (-1533.0F), (-1533.0F), (-1533.0F), (-1533.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (-499));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1626);
      intArray0[1] = (int) (short) (-1533);
      intArray0[2] = (-1);
      ArrayUtils.swap(intArray0, (int) (short) (-1533), Integer.MAX_VALUE, (int) (short) (-1533));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1626), (-1533), (-1)}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ArrayUtils.shift(charArray1, 43);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test874()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 12);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1954);
      intArray0[2] = 0;
      intArray0[3] = 12;
      intArray0[4] = (-1);
      intArray0[5] = 14;
      intArray0[6] = 14;
      intArray0[7] = 0;
      intArray0[8] = 12;
      ArrayUtils.swap(intArray0, (-856), (-1), (-1));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, (-1954), 0, 12, (-1), 14, 14, 0, 12}, intArray0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 12, (-1954));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, (-1954), 0, 12, (-1), 14, 14, 0, 12}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test875()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[3] = (long) 'T';
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1L, 0L, 0L, 84L}, longArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[17];
      intArray0[0] = 969;
      ArrayUtils.swap(intArray0, 969, 5, 2683);
      assertEquals(17, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-2294), 5);
      assertNull(booleanArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(17, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Short short0 = new Short((short)2);
      assertNotNull(short0);
      assertEquals((short)2, (short)short0);
  }

  @Test(timeout = 4000)
  public void test876()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[15];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 35;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(15, intArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shuffle(intArray0);
      assertEquals(15, intArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, (-111));
      assertEquals((-1), int0);
      
      boolean[] booleanArray2 = new boolean[0];
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurences(booleanArray2, true);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotNull(booleanArray3);
  }

  @Test(timeout = 4000)
  public void test877()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 495);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 495;
      longArray0[1] = (long) 495;
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 43, 43);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test878()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1L));
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      ArrayUtils.shift(doubleArray0, 90, 90, 743);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, Integer.MAX_VALUE, (-1116.89173468728));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 743;
      floatArray0[2] = (float) (-1);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) Integer.MAX_VALUE);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 743.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-717L), 743);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(floatArray0, (-1342), 68);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 743.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test879()  throws Throwable  {
      Short short0 = new Short((short)1001);
      assertNotNull(short0);
      assertEquals((short)1001, (short)short0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'p', (int) (short)1001);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'N'}, charArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, false, (-1956));
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test880()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = ArrayUtils.indexOf((float[]) null, 59.0F);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 59.0F;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      ArrayUtils.shift(intArray0, 320);
      assertNotSame(intArray0, intArray1);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test881()  throws Throwable  {
      int[] intArray0 = new int[8];
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-244), floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test882()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test883()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)121;
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, 'S', (int) (byte) (-97));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test884()  throws Throwable  {
      short[] shortArray0 = new short[3];
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)157, (int) (byte)28);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)85);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)85}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test885()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = 'v';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Q');
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'*', 'v'}, charArray0);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-123);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte) (-1), (byte) (-70), (byte)0, (byte) (-123)}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test886()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 0L);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-95);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-20), (byte)0, (byte) (-1), (byte) (-95)}, byteArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test887()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1050.6F;
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1050.6F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'Q');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[15];
      intArray0[0] = (int) 'Q';
      intArray0[1] = (int) 'Q';
      intArray0[2] = (int) 'Q';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 81);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(15, intArray0.length);
      assertEquals(16, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test888()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'v';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Z');
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'v'}, charArray0);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[4] = (byte)0;
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test889()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)24;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)692);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)24}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)24}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      Float float0 = new Float((float) (short)24);
      assertNotNull(float0);
      assertEquals(24.0F, (float)float0, 0.01F);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)692;
      short[] shortArray2 = new short[8];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)0;
      shortArray2[1] = (short)2;
      shortArray2[2] = (short)24;
      shortArray2[3] = (short)692;
      shortArray2[4] = (short)24;
      shortArray2[5] = (short)2;
      shortArray2[6] = (short)24;
      shortArray2[7] = (short)24;
      short[] shortArray3 = ArrayUtils.removeElements(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(8, shortArray2.length);
      assertEquals(6, shortArray3.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)24}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)24}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)24, (short)692, (short)24, (short)2, (short)24, (short)24}, shortArray2);
      assertArrayEquals(new short[] {(short)2, (short)692, (short)24, (short)2, (short)24, (short)24}, shortArray3);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertNotNull(shortArray3);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)692;
      longArray0[1] = (long) (short)24;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {692L, 24L}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test890()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-368);
      intArray0[1] = (-368);
      intArray0[2] = (-368);
      intArray0[3] = (-368);
      intArray0[4] = (-368);
      intArray0[5] = (-368);
      intArray0[6] = (-368);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -368, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test891()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1996);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-97), shortArray0, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -97, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test892()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-4471);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-4471)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-4471);
      longArray0[1] = (long) (short) (-4471);
  }

  @Test(timeout = 4000)
  public void test893()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      booleanArray0[1] = false;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[3];
      intArray0[0] = (int) (short) (-14613);
      shortArray0[1] = (short) (-14613);
      shortArray0[2] = (short) (-14613);
      ArrayUtils.reverse(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-14613), (short) (-14613), (short)0}, shortArray0);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-14613);
      Object[] objectArray1 = ArrayUtils.clone(objectArray0);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(1, objectArray1.length);
      assertEquals(1, objectArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test894()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)99);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (short)1540;
      floatArray0[2] = (-1626.0F);
      floatArray0[3] = 124.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-512.3F), (-4471));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1540.0F, (-1626.0F), 124.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test895()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1252.1113;
      doubleArray0[1] = (-449.65916772937);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.0);
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1252.1113;
      doubleArray1[1] = 1252.1113;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1252.1113, (-449.65916772937), 0.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1252.1113, 1252.1113}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test896()  throws Throwable  {
      Short short0 = new Short((short)1001);
      assertNotNull(short0);
      assertEquals((short)1001, (short)short0);
      
      Short short1 = new Short((short)19701);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)19701, (short)short1);
      
      float[] floatArray0 = new float[1];
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-266.44F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test897()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-240L), 1921);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(1921);
      assertNotNull(double0);
      assertEquals(1921.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-240L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-240.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 142.964614;
      doubleArray1[1] = (double) doubleArray0[0];
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray1, (double) doubleArray0[0]);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {142.964614, 1921.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {142.964614}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test898()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 4;
      longArray0[1] = (-1380L);
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1380L);
      longArray1[1] = (-1380L);
      longArray1[2] = 890L;
      longArray1[3] = (long) 4;
      longArray1[4] = (-1380L);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(4, longArray0, longArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test899()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2458.25F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2458.25F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)100;
      shortArray0[1] = (short)1;
      ArrayUtils.swap(shortArray0, 2873, 2873);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)100, (short)1}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) (short)100;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[2]);
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      Float[] floatArray1 = new Float[2];
      floatArray1[0] = (Float) 2458.25F;
      floatArray1[1] = (Float) 2458.25F;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertNotNull(floatArray2);
      
      int int0 = 1073741824;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 1073741824, (-1.0F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1073741824, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test900()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ArrayUtils.reverse((Object[]) stringArray0, (int) (short)0, (int) (short)0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)120;
      byteArray0[3] = (byte)65;
      ArrayUtils.removeElement(byteArray0, (byte)65);
      byte[] byteArray1 = new byte[0];
      ArrayUtils.removeElements(byteArray0, byteArray1);
      ArrayUtils.shift((float[]) null, (int) (byte)120, (int) (byte)65, (-1622));
  }

  @Test(timeout = 4000)
  public void test901()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1482.665519);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1185.4562414681);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-95);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-123), (-3303));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test902()  throws Throwable  {
      ArrayUtils.toPrimitive((Long[]) null, 0L);
      ArrayUtils.reverse((long[]) null, 12, 12);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-95);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test903()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 2478.21;
      doubleArray0[2] = (double) 53;
      ArrayUtils.shift(doubleArray0, 190, (-601), 2683);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN);
      assertEquals("{}", bitSet0.toString());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)90, 2683);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test904()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      ArrayUtils.isSameLength((float[]) null, (float[]) null);
      ArrayUtils.shift((boolean[]) null, (-1482), 43, 881);
  }

  @Test(timeout = 4000)
  public void test905()  throws Throwable  {
      ArrayUtils.removeAllOccurrences((long[]) null, (-1L));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      ArrayUtils.shift(doubleArray0, 90, 90, 743);
      ArrayUtils.lastIndexOf(doubleArray0, 0.0, Integer.MAX_VALUE, (-1116.89173468728));
      byte[] byteArray0 = new byte[0];
      ArrayUtils.isEmpty(byteArray0);
      ArrayUtils.shift((long[]) null, 90);
  }

  @Test(timeout = 4000)
  public void test906()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-53);
      ArrayUtils.removeElement(byteArray0, (byte)13);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      ArrayUtils.isSorted((boolean[]) null);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(2139453870, floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test907()  throws Throwable  {
      ArrayUtils.indexesOf((byte[]) null, (byte)23);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-2394);
      shortArray0[1] = (short) (byte)23;
      shortArray0[2] = (short) (byte)23;
      shortArray0[3] = (short) (byte)23;
      shortArray0[4] = (short) (byte)23;
      shortArray0[5] = (short) (byte)23;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 2, (short) (-513));
      assertArrayEquals(new short[] {(short) (-2394), (short)23, (short) (-513), (short)23, (short)23, (short)23, (short)23}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test908()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayUtils.shift(longArray0, (-1956), (-1956), (-1956));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-274);
      doubleArray0[1] = (double) (-1956);
      doubleArray0[2] = (double) 4;
      doubleArray0[4] = (double) (-274);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1401.128));
      assertArrayEquals(new double[] {(-274.0), (-1956.0), 4.0, 0.0, (-274.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test909()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2458.25F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)1;
      ArrayUtils.swap(shortArray0, 2873, 2873);
      Long long0 = new Long(15851L);
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, long0);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test910()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)104;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)13);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)104;
      objectArray0[3] = (Object) (byte)0;
      ArrayUtils.indexesOf(objectArray0, objectArray0[0], (int) (byte)104);
      ArrayUtils.isSorted((boolean[]) null);
      byte[] byteArray2 = ArrayUtils.removeElements((byte[]) null, byteArray1);
      assertEquals(4, byteArray1.length);
      assertNull(byteArray2);
      
      ArrayUtils.shift((boolean[]) null, (int) (byte) (-32), 0, 0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-53);
      floatArray0[1] = 1968.5306F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test911()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test912()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      short[] shortArray0 = new short[5];
      ArrayUtils.reverse(shortArray0, (int) (short)108, 2147483639);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)108, (int) (short)108);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'S';
      doubleArray0[1] = (double) 'S';
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (short)108);
      assertArrayEquals(new double[] {83.0, 83.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test913()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.isSorted(booleanArray0);
      String string0 = "java.lang.Byte";
      Byte byte0 = new Byte((byte)108);
      int[] intArray0 = new int[7];
      intArray0[0] = 34;
      intArray0[1] = (int) (byte)108;
      intArray0[2] = (int) (byte)108;
      intArray0[3] = (int) (byte)108;
      intArray0[4] = (int) (byte)108;
      intArray0[5] = (int) (byte)108;
      intArray0[6] = (int) (byte)108;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test914()  throws Throwable  {
      char[] charArray0 = new char[1];
      ArrayUtils.shift(charArray0, (-503));
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'r';
      intArray0[0] = (int) '\u0000';
      intArray0[2] = (-503);
      intArray0[3] = (-503);
      intArray0[4] = (int) '\u0000';
      ArrayUtils.shift(intArray0, 15, (-503), 923);
      double[] doubleArray0 = new double[2];
      intArray0[4] = 15;
      doubleArray0[1] = (double) 923;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2, (double) 15);
      assertArrayEquals(new double[] {0.0, 923.0, 15.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test915()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)127;
      byteArray0[8] = (byte) (-20);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)78);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-71), (byte)1, (byte)12, (byte)3, (byte)127, (byte) (-20)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test916()  throws Throwable  {
      Float float0 = new Float(334.7777F);
      ArrayUtils.toPrimitive((Object) float0);
      float[] floatArray0 = new float[7];
      floatArray0[1] = (float) 15851L;
      floatArray0[3] = (float) 1000L;
      floatArray0[4] = 334.7777F;
      floatArray0[5] = 334.7777F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 334.7777F);
      assertArrayEquals(new float[] {0.0F, 15851.0F, 0.0F, 1000.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test917()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test918()  throws Throwable  {
      ArrayUtils.insert((-1), (long[]) null, (long[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)104;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)13);
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-32);
      objectArray0[1] = (Object) (byte)104;
      objectArray0[2] = (Object) (byte)104;
      objectArray0[3] = (Object) (byte)0;
      ArrayUtils.indexesOf(objectArray0, objectArray0[0], (int) (byte)104);
      ArrayUtils.isSorted((boolean[]) null);
      ArrayUtils.removeElements((byte[]) null, byteArray1);
      ArrayUtils.shift((boolean[]) null, (int) (byte) (-32), 0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)13;
      doubleArray0[1] = (double) (byte) (-53);
      doubleArray0[2] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (double) (byte) (-32));
      ArrayUtils.indexesOf(doubleArray0, (double) (byte)0);
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 0.0);
      assertArrayEquals(new double[] {(-32.0), 13.0, (-53.0)}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-53);
      floatArray0[1] = 1968.5306F;
      floatArray0[2] = (float) (byte)13;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test919()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test920()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4689, 4689);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test921()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[1] = 1452;
      intArray0[2] = 1452;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayUtils.nullToEmpty(intArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test922()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1927.9F;
      floatArray0[1] = 3285.8694F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      ArrayUtils.isSorted(floatArray0);
      long[] longArray0 = new long[3];
      longArray0[0] = (-2768L);
      longArray0[1] = (-1748L);
      longArray0[2] = 0L;
      ArrayUtils.indexOf(longArray0, (-2768L));
      ArrayUtils.removeElements(floatArray0, floatArray0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test923()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.indexOf(doubleArray0, (-1116.872378251227));
      Long long0 = new Long(1061L);
      int int0 = 2;
      int int1 = 4326;
      Long long1 = Long.valueOf((long) 2);
      // Undeclared exception!
      try { 
        ArrayUtils.add((Long[]) null, 4326, long1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4326, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test924()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-97));
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test925()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 644;
      intArray0[1] = (int) (short)2;
      intArray0[2] = (int) (short)2;
      intArray0[3] = 644;
      intArray0[4] = (int) (short)2;
      intArray0[5] = (int) (short) (-1212);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 644);
      assertArrayEquals(new int[] {2, 2, 644, 2, (-1212)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test926()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-1L));
      longArray0[1] = long0;
      ArrayUtils.add(longArray0, 2, long0);
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      ArrayUtils.remove(intArray0, 2);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test927()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      long long0 = (-544L);
      Long long1 = Long.valueOf((-544L));
      longArray0[0] = long1;
      Long long2 = new Long((-1L));
      longArray0[1] = long2;
      int int0 = 2;
      ArrayUtils.add(longArray0, 2, long2);
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      ArrayUtils.remove(intArray0, 2);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long2, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test928()  throws Throwable  {
      ArrayUtils.removeAllOccurences((char[]) null, 'D');
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'D';
      doubleArray0[1] = 0.0;
      ArrayUtils.indexesOf(doubleArray0, 68.0, 0);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-3142);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1632);
      shortArray0[3] = (short)48;
      shortArray0[4] = (short)1500;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-412);
      shortArray0[7] = (short) (-659);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1632);
      intArray0[1] = (int) (short) (-3142);
      intArray0[2] = (int) (short) (-3142);
      intArray0[3] = (int) (short) (-1632);
      intArray0[4] = (int) (short)0;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1632, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test929()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)99);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (short)1540;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1788.88, 1959);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test930()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[1] = "";
      stringArray0[2] = "hyHbg";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "L";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(7, stringArray1.length);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray1, (short)0);
      assertEquals(0, shortArray2.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test931()  throws Throwable  {
      int int0 = 285;
      ArrayUtils.removeAllOccurences((boolean[]) null, false);
      short[] shortArray0 = null;
      int[] intArray0 = new int[3];
      intArray0[0] = 285;
      intArray0[1] = 285;
      intArray0[2] = 285;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 285, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test932()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[5] = (-900);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test933()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-754);
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)689);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short) (-754);
      intArray0[4] = 3262;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (short)0;
      intArray0[8] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3262, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test934()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, (-1708), (-1708));
  }

  @Test(timeout = 4000)
  public void test935()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test936()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      char[] charArray0 = new char[0];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      ArrayUtils.reverse(byteArray0, (int) (byte)115, (int) (byte)115);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test937()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 1533.0);
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test938()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1116.872378251227));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.nextInt((-1));
      mockRandom0.nextBoolean();
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      ArrayUtils.reverse(byteArray0, (int) (byte)115, (int) (byte)115);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (byte)115;
      floatArray0[2] = (float) (byte)115;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (byte)115;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test939()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Character character0 = Character.valueOf('B');
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'B';
      intArray0[1] = (int) 'B';
      intArray0[2] = (int) 'B';
      intArray0[3] = (int) 'B';
      intArray0[4] = (int) 'B';
      intArray0[5] = (int) 'B';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 66, 127);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test940()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)2;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.removeAllOccurences(booleanArray0, false);
      ArrayUtils.addFirst(byteArray0, (byte)43);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-107);
      intArray0[1] = (int) (byte) (-107);
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) (byte)43;
      intArray0[4] = (-3120);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test941()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)689);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray1.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[1] = "";
      stringArray0[2] = "hyHbg";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "L";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(7, stringArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test942()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-1266));
      assertEquals(0, int0);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test943()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Long long0 = new Long(0L);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test944()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.lastIndexOf(booleanArray0, false, 1962);
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-97);
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, Integer.MAX_VALUE, (short) (-97));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test945()  throws Throwable  {
      int int0 = 4;
      int int1 = 59;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test946()  throws Throwable  {
      Short short0 = new Short((short)1001);
      long[] longArray0 = new long[6];
      longArray0[1] = (long) (short)1001;
      longArray0[1] = (long) (short)1001;
      longArray0[2] = (long) (short)1001;
      longArray0[3] = (long) 'N';
      longArray0[4] = (long) 'N';
      longArray0[5] = (long) (short)1001;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-2234L));
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test947()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 545;
      floatArray0[1] = (float) 545;
      floatArray0[2] = (float) 545;
      floatArray0[3] = (float) 545;
      floatArray0[4] = (float) 545;
      floatArray0[5] = (float) 545;
      ArrayUtils.isSorted(floatArray0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 545;
      longArray0[0] = (-2768L);
      longArray0[2] = 0L;
      longArray0[3] = 2791L;
      longArray0[4] = (long) 545;
      longArray0[5] = 0L;
      ArrayUtils.indexOf(longArray0, (-1974L));
      ArrayUtils.removeElements(floatArray0, floatArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test948()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1088L;
      longArray0[1] = 2351L;
      longArray0[2] = 0L;
      longArray0[4] = 238L;
      longArray0[5] = 3818L;
      longArray0[6] = 1L;
      ArrayUtils.reverse(longArray0);
      ArrayUtils.indexesOf(longArray0, 2351L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 238L;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 1088L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 1088L;
      ArrayUtils.subarray(doubleArray0, 560, 560);
      short[] shortArray0 = new short[0];
  }

  @Test(timeout = 4000)
  public void test949()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "028;k[x|a>FhUi*=s$l";
      stringArray0[2] = "The type must not be null";
      stringArray0[3] = "~a~vRmr9*";
      ArrayUtils.subarray(stringArray0, (-253), 6);
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 10, 10);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test950()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Float float0 = new Float(2910.665);
      ArrayUtils.addFirst((Object[]) null, (Object) float0);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[2] = (short)1950;
      ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (short)1950;
      floatArray0[3] = 0.0F;
      ArrayUtils.removeElement(floatArray0, 119.0F);
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test951()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.indexOf(doubleArray0, (-1116.872378251227));
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      ArrayUtils.addAll(floatArray0, floatArray0);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4063);
      shortArray0[1] = (short) (-4063);
      ArrayUtils.toObject(shortArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short) (-4063);
      longArray0[1] = (long) (short) (-4063);
      longArray0[2] = (long) (short) (-4063);
      longArray0[3] = (long) (short) (-4063);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (short) (-4063);
      longArray0[6] = (long) (short) (-4063);
      ArrayUtils.nullToEmpty(longArray0);
      ArrayUtils.contains(floatArray0, (-1.0F));
      long[] longArray1 = new long[6];
      longArray1[0] = (long) (short) (-4063);
      longArray1[1] = (long) (-1);
      longArray1[2] = (long) (short) (-4063);
      longArray1[3] = (long) (short) (-4063);
      longArray1[4] = (long) (short) (-4063);
      longArray1[5] = (long) (short) (-4063);
      ArrayUtils.indexesOf(longArray1, (-4063L), (-1));
      ArrayUtils.swap(floatArray0, 0, 0);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test952()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 0;
      intArray0[2] = 748;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      ArrayUtils.shift(longArray0, 0, 0, 0);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(13, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test953()  throws Throwable  {
      ArrayUtils.toObject((boolean[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-120);
      ArrayUtils.contains(byteArray0, (byte) (-79));
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)75;
      longArray0[1] = (long) (byte)0;
      ArrayUtils.indexesOf(longArray0, 0L);
      ArrayUtils.reverse(longArray0, 249, (int) (byte) (-79));
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test954()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, 1073741824);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1073741824, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test955()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 560;
      doubleArray0[1] = (double) 560;
      doubleArray0[2] = (double) 560;
      doubleArray0[4] = (double) 560;
      doubleArray0[5] = (double) 560;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 560, 560);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test956()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.get(objectArray0, 2873);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2873;
      longArray0[1] = (long) 2873;
      longArray0[2] = (long) 2873;
      longArray0[3] = (long) 2873;
      ArrayUtils.removeAllOccurrences(longArray0, 2873L);
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 2873, 108);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test957()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '&';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      ArrayUtils.add(charArray0, '!');
      Long[] longArray0 = new Long[4];
      long long0 = 1L;
      Long long1 = new Long(1L);
      longArray0[0] = long1;
      Long long2 = new Long(1L);
      longArray0[1] = long2;
      Long long3 = new Long(0L);
      longArray0[2] = long3;
      longArray0[3] = (Long) long0;
      ArrayUtils.nullToEmpty(longArray0);
      long[] longArray1 = new long[0];
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test958()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      ArrayUtils.removeElement(byteArray0, (byte) (-20));
      ArrayUtils.isEmpty(byteArray0);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      char[] charArray0 = new char[0];
      ArrayUtils.nullToEmpty(charArray0);
      ArrayUtils.swap(byteArray1, (-1), (int) (byte)14, (-1));
      ArrayUtils.reverse(objectArray0, 108, (-1));
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-20);
      Float float0 = new Float((-2481.4486124161));
      Short short0 = new Short((short)21628);
      Integer integer0 = new Integer(108);
      ArrayUtils.isSameType(short0, integer0);
      ArrayUtils.reverse(shortArray0, (-2442), 43);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte) (-20), (-3066));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test959()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test960()  throws Throwable  {
      ArrayUtils.removeAllOccurrences((long[]) null, (-1L));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      ArrayUtils.toObject((float[]) null);
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test961()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1088L;
      longArray0[1] = 2351L;
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      longArray0[4] = 238L;
      longArray0[5] = 3818L;
      longArray0[6] = 1L;
      ArrayUtils.reverse(longArray0);
      ArrayUtils.indexesOf(longArray0, 2351L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 238L;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) 1088L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 1088L;
      int int0 = 560;
      ArrayUtils.subarray(doubleArray0, 560, 560);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray1, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test962()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3987.04F);
      ArrayUtils.removeAllOccurences(floatArray0, (-3987.04F));
      ArrayUtils.clone((long[]) null);
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)10);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test963()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (double) (byte) (-32);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test964()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1296;
      shortArray0[1] = (short)1421;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1421);
      assertArrayEquals(new short[] {(short)1296}, shortArray1);
      
      ArrayUtils.toPrimitive((Object) null);
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test965()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2020);
      shortArray0[1] = (short) (-2020);
      shortArray0[2] = (short) (-2020);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-457));
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray1, (short) (-457));
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short) (-2020), (short) (-2020), (short) (-2020)}, shortArray2);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test966()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)3196;
      shortArray0[1] = (short)51;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1624;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)62;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short)3196, (short)51, (short)2, (short)0, (short)1624, (short)0, (short)62}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test967()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'Y';
      charArray0[1] = '`';
      charArray0[2] = 'K';
      charArray0[3] = 'o';
      charArray0[4] = '/';
      charArray0[5] = '1';
      charArray0[6] = '!';
      charArray0[7] = '_';
      charArray0[8] = '`';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-601), 'Z');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -601, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test968()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 48;
      intArray0[1] = (-461);
      intArray0[2] = 59;
      intArray0[3] = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-1), 3150);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test969()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[1] = 1452;
      intArray0[2] = 1452;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(21, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test970()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 545;
      intArray0[1] = 1452;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test971()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      ArrayUtils.removeElement(byteArray0, (byte) (-20));
      ArrayUtils.addFirst((char[]) null, '<');
      int[] intArray0 = new int[1];
      intArray0[0] = (-2351);
      ArrayUtils.shift(intArray0, 26, (-2351), (-2351));
      assertArrayEquals(new int[] {(-2351)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test972()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test973()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = 2478.21;
      ArrayUtils.shift(doubleArray0, 190, 53, 2683);
      Long[] longArray0 = new Long[1];
      Long.getLong("The type must not be null");
      longArray0[0] = null;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test974()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(3359.944589012565);
      doubleArray0[0] = double0;
      Double double1 = new Double(1305.0);
      Double[] doubleArray1 = ArrayUtils.add(doubleArray0, double1);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test975()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Short short0 = new Short((short)1533);
      Short[] shortArray0 = new Short[4];
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test976()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '&';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      char[] charArray1 = ArrayUtils.add(charArray0, '!');
      assertArrayEquals(new char[] {'!', '&', 'E', 'E', '!'}, charArray1);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(1L);
      longArray0[0] = long0;
      Long long1 = new Long(1L);
      longArray0[1] = long1;
      Long long2 = new Long(0L);
      longArray0[2] = long2;
      Long.getLong("hVY(F 9^");
      longArray0[3] = null;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(4, longArray1.length);
  }
}
