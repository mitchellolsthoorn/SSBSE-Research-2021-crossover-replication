/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:33:15 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1666L));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-1666L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 83;
      intArray0[2] = 1811;
      intArray0[3] = 2;
      intArray0[4] = (-5211);
      intArray0[5] = 1521;
      intArray0[6] = (-709);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), 85);
      assertArrayEquals(new int[] {(-1), 83, 1811, 2, (-5211), 1521, (-709)}, intArray0);
      assertArrayEquals(new int[] {(-1), 83, 1811, 2, (-5211), 1521, (-709)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'P';
      charArray0[1] = 'x';
      charArray0[2] = 'J';
      charArray0[3] = 'p';
      charArray0[4] = '\"';
      charArray0[5] = 'g';
      charArray0[6] = 'o';
      charArray0[7] = 'z';
      charArray0[8] = 'E';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'J');
      assertArrayEquals(new char[] {'J', 'P', 'x', 'J', 'p', '\"', 'g', 'o', 'z', 'E'}, charArray1);
      assertArrayEquals(new char[] {'P', 'x', 'J', 'p', '\"', 'g', 'o', 'z', 'E'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(10, charArray1.length);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = 'H';
      charArray0[2] = '3';
      charArray0[3] = '_';
      charArray0[4] = '\\';
      charArray0[5] = 'o';
      ArrayUtils.swap(charArray0, (-175), (-175), 3560);
      assertArrayEquals(new char[] {'x', 'H', '3', '_', '\\', 'o'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 524.2689F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {524.2689F, Float.NaN, Float.NaN}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {524.2689F, Float.NaN, Float.NaN}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = 'l';
      charArray0[2] = '\\';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'o', 'l', '\\'}, charArray0);
      assertArrayEquals(new char[] {'o', 'l', '\\'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (double) Float.NaN;
      doubleArray0[4] = (double) 524.2689F;
      doubleArray0[5] = (double) 524.2689F;
      doubleArray0[6] = (double) (-505);
      doubleArray0[7] = (double) '\\';
      doubleArray0[8] = (double) 'l';
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, Double.NaN, 524.2689208984375, 524.2689208984375, (-505.0), 92.0, 108.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, Double.NaN, 524.2689208984375, 524.2689208984375, (-505.0), 92.0, 108.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      Double[] doubleArray2 = new Double[2];
      doubleArray2[0] = (Double) 92.0;
      doubleArray2[1] = (Double) Double.NaN;
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2, (-2373.5402294924));
      assertArrayEquals(new double[] {92.0, Double.NaN}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (-505));
      assertNull(longArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray1, 'l');
      assertArrayEquals(new char[] {'o', 'l', '\\'}, charArray0);
      assertArrayEquals(new char[] {'o', '\\'}, charArray2);
      assertArrayEquals(new char[] {'o', 'l', '\\'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray2.length);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-2811);
      shortArray0[2] = (short)2100;
      shortArray0[3] = (short) (-2811);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-948);
      shortArray0[3] = (short)0;
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = '\\';
      charArray0[2] = '3';
      charArray0[3] = ' ';
      charArray0[4] = 'S';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'/', '\\', '3', ' ', 'S'}, charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      
      int int0 = ArrayUtils.indexOf(charArray0, '3', (int) (short)0);
      assertArrayEquals(new char[] {'/', '\\', '3', ' ', 'S'}, charArray0);
      assertEquals(2, int0);
      assertEquals(5, charArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '3';
      intArray0[1] = (-2139229234);
      intArray0[2] = (int) '3';
      intArray0[3] = (int) '\\';
      intArray0[4] = 2;
      intArray0[5] = (int) 'S';
      intArray0[6] = (int) (short) (-948);
      intArray0[7] = (int) (short) (-948);
      int int1 = ArrayUtils.indexOf(intArray0, (int) (short) (-3085), (-948));
      assertArrayEquals(new int[] {51, (-2139229234), 51, 92, 2, 83, (-948), (-948)}, intArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 818.0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1414);
      longArray0[1] = (long) (-1414);
      longArray0[2] = (long) (-1414);
      doubleArray0[1] = (double) (-1414);
      longArray0[4] = (long) (-1414);
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      longArray0[2] = (long) '[';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {(-1414L), (-1414L), 91L, 0L, (-1414L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "java.util.BitSet");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(5, booleanArray0.length);
      
      Object[] objectArray0 = new Object[2];
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.7);
      assertEquals(0.7, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-945.1523));
      assertEquals((-945.1523), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(0.7, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(4, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.7);
      assertEquals(0.7, (double)double3, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = ArrayUtils.get(doubleArray0, 2);
      assertEquals(0.7, (double)double4, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      assertEquals(4, doubleArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double4);
      assertEquals(0.7, object0);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertTrue(object0.equals((Object)double0));
      assertTrue(object0.equals((Object)double2));
      assertTrue(object0.equals((Object)double3));
      assertFalse(object0.equals((Object)double1));
      assertNotNull(object0);
      assertEquals(4, doubleArray0.length);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get((Object[]) doubleArray0, (-3872));
      assertNull(object1);
      assertEquals(4, doubleArray0.length);
      
      objectArray0[1] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) double0, 98);
      assertEquals((-1), int0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertEquals((double)double0, (double)object0, 0.01);
      assertEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double0, (double)double4, 0.01);
      assertEquals((double)double0, (double)double3, 0.01);
      assertEquals(2, objectArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = 'K';
      charArray0[2] = '%';
      int int1 = ArrayUtils.indexOf(charArray0, '1');
      assertArrayEquals(new char[] {'1', 'K', '%'}, charArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(3, charArray0.length);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, 0, (short)45);
      assertArrayEquals(new short[] {(short)45}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)25;
      byteArray0[8] = (byte)111;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)127);
      assertArrayEquals(new byte[] {(byte)56, (byte)0, (byte)18, (byte)91, (byte)29, (byte)127, (byte)112, (byte)25, (byte)111}, byteArray0);
      assertEquals(5, int0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte byte0 = (byte)2;
      byte byte1 = (byte)1;
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      long[] longArray0 = new long[13];
      longArray0[1] = (long) (byte)1;
      longArray0[2] = (long) (byte)2;
      int[] intArray0 = new int[8];
      intArray0[0] = 2146315544;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 69);
      assertArrayEquals(new int[] {2146315544, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {69, 2146315544, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      
      Long[] longArray1 = new Long[8];
      longArray1[0] = (Long) 1L;
      longArray1[1] = (Long) 2L;
      longArray1[2] = (Long) 1L;
      longArray1[3] = (Long) 1L;
      longArray1[4] = (Long) 1L;
      longArray0[2] = 2L;
      longArray1[6] = (Long) 2L;
      longArray1[7] = (Long) 2L;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('E');
      assertEquals('E', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      ArrayUtils.swap((long[]) null, 1992297809, 2);
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      boolean[] booleanArray2 = new boolean[4];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      booleanArray2[2] = false;
      booleanArray2[3] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray2));
      assertFalse(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(4, booleanArray2.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[7];
      Double double0 = new Double(2255.257);
      assertEquals(2255.257, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(1.0);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray1[1] = double1;
      Double double2 = new Double(2);
      assertEquals(2.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray1[2] = double2;
      Double double3 = new Double((-2993.5));
      assertEquals((-2993.5), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray1[3] = double3;
      Double double4 = new Double(1.0);
      assertEquals(1.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      
      doubleArray1[4] = double4;
      Double double5 = new Double((double) doubleArray1[3]);
      assertEquals((-2993.5), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotNull(double5);
      assertEquals(7, doubleArray1.length);
      
      doubleArray1[5] = double5;
      Double double6 = new Double((double) doubleArray1[2]);
      assertEquals(2.0, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotNull(double6);
      assertEquals(7, doubleArray1.length);
      
      doubleArray1[6] = double6;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = ']';
      charArray0[1] = '9';
      charArray0[5] = '9';
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) (-105);
      floatArray0[2] = (-1988.7599F);
      floatArray0[3] = (float) '\u0000';
      floatArray0[4] = (float) ']';
      floatArray0[5] = (float) '9';
      ArrayUtils.shift(floatArray0, (int) (short)0, 3212, (-105));
      assertArrayEquals(new float[] {0.0F, 93.0F, 57.0F, 0.0F, (-105.0F), (-1988.7599F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 57.0F, 2146742297);
      assertArrayEquals(new float[] {0.0F, 93.0F, 57.0F, 0.0F, (-105.0F), (-1988.7599F)}, floatArray0, 0.01F);
      assertEquals(2, int0);
      assertEquals(6, floatArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean0);
      assertEquals(true, object0);
      assertNotNull(object0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) ']';
      longArray0[1] = (long) '9';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {93L, 57L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray1, (Object) boolean0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotNull(bitSet0);
      assertNotSame(byteArray0, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F, 93.0F, 57.0F, 0.0F, (-105.0F), (-1988.7599F)}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2);
      assertArrayEquals(new short[] {(short)2, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-2278);
      longArray0[1] = (long) (short)2;
      ArrayUtils.swap(longArray0, (int) (short)2, 533);
      assertArrayEquals(new long[] {(-2278L), 2L}, longArray0);
      assertEquals(2, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[26];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(26, booleanArray1.length);
      assertEquals(26, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(26, booleanArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-978.96805609);
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {(-978.96805609)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.7);
      assertArrayEquals(new double[] {(-978.96805609)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-978.96805609)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (-1229.98038));
      assertArrayEquals(new double[] {(-978.96805609)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-978.96805609)}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)3;
      Byte byte1 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)3, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)34);
      assertEquals((byte)34, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)21);
      assertEquals((byte)21, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '^');
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '^';
      floatArray0[1] = (float) '^';
      floatArray0[2] = (float) '^';
      floatArray0[3] = (float) '^';
      floatArray0[4] = (float) '^';
      int int0 = ArrayUtils.indexOf(floatArray0, 94.0F, (-1683));
      assertArrayEquals(new float[] {94.0F, 94.0F, 94.0F, 94.0F, 94.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      assertEquals(5, floatArray0.length);
      
      Float[] floatArray1 = new Float[2];
      floatArray1[0] = (Float) 94.0F;
      floatArray1[1] = (Float) 94.0F;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 484.2911790115549, (-1683), (double) floatArray1[1]);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertSame(floatArray1, floatArray2);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[25];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean0);
      assertTrue(boolean2);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean("<O");
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf((boolean) boolean3);
      assertFalse(boolean4);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("<O");
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertTrue(boolean6);
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      String[] stringArray0 = ArrayUtils.clone((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      long[] longArray0 = new long[13];
      longArray0[1] = (long) (byte)1;
      longArray0[2] = (long) (byte)2;
      int[] intArray0 = new int[8];
      intArray0[0] = 2146315544;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 69);
      assertArrayEquals(new int[] {2146315544, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {69, 2146315544, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      
      Long[] longArray1 = new Long[8];
      longArray1[0] = (Long) 1L;
      longArray1[1] = (Long) 2L;
      longArray1[2] = (Long) 1L;
      longArray1[3] = (Long) 1L;
      longArray1[4] = (Long) 1L;
      longArray1[5] = (Long) 2L;
      longArray1[6] = (Long) 2L;
      longArray1[7] = (Long) 2L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertArrayEquals(new long[] {1L, 2L, 1L, 1L, 1L, 2L, 2L, 2L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(8, longArray2.length);
      assertEquals(8, longArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 2146315544;
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0, 2146315544);
      assertArrayEquals(new int[] {2146315544}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray2.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-2811);
      shortArray0[2] = (short)2100;
      shortArray0[3] = (short) (-2811);
      shortArray0[4] = (short) (-9);
      shortArray0[5] = (short) (-948);
      shortArray0[3] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-3085));
      assertArrayEquals(new short[] {(short)0, (short) (-2811), (short)2100, (short)0, (short) (-9), (short) (-948), (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(8, shortArray0.length);
      
      long[] longArray0 = new long[2];
      shortArray0[6] = (short)0;
      longArray0[1] = (long) (short) (-9);
      ArrayUtils.shift(longArray0, (int) (short) (-2811));
      assertArrayEquals(new long[] {(-9L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-9L), 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (short) (-3085);
      longArray1[1] = (-1671L);
      longArray1[2] = (long) (short) (-9);
      longArray1[4] = (long) (short) (-2811);
      longArray1[6] = (long) (short)2100;
      longArray1[7] = (long) (short)2100;
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {(-9L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-3085L), (-1671L), (-9L), 0L, (-2811L), 0L, 2100L, 2100L}, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(2, longArray0.length);
      assertEquals(8, longArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((short) (-2811));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-68));
      assertNull(byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2100;
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '+', 0);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)2100;
      intArray0[1] = (int) (byte) (-52);
      intArray0[2] = (int) '+';
      intArray0[3] = 0;
      intArray0[4] = (int) (short)2100;
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)2100;
      shortArray1[1] = (short) (byte) (-52);
      short[] shortArray2 = ArrayUtils.addAll(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2100, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2100, (short) (-52)}, shortArray1);
      assertArrayEquals(new short[] {(short)2100, (short) (-52), (short)2100, (short)0}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals(4, shortArray2.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (int) (short)2100, 'Y');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2100, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[0];
      int int0 = (-873);
      int int1 = (-823);
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-873), (-823));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int[] intArray0 = new int[2];
      int int2 = (-2145659106);
      intArray0[0] = (-823);
      intArray0[1] = (-873);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-823);
      longArray0[1] = (long) (-823);
      longArray0[2] = (long) (-2145659106);
      longArray0[3] = (long) (-823);
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-823);
      longArray1[1] = (long) (-873);
      longArray1[2] = (long) (-823);
      longArray1[3] = (long) (-2145659106);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertArrayEquals(new long[] {(-823L), (-823L), (-2145659106L), (-823L)}, longArray0);
      assertArrayEquals(new long[] {(-823L), (-873L), (-823L), (-2145659106L)}, longArray1);
      assertTrue(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      int int3 = 1;
      int int4 = (-120);
      int int5 = ArrayUtils.lastIndexOf(intArray0, 1, (-120));
      assertArrayEquals(new int[] {(-823), (-873)}, intArray0);
      assertEquals((-1), int5);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -823, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, 0, 0, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 429;
      intArray0[3] = 429;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[6] = 429;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertArrayEquals(new int[] {(-1), 429, 0, 429, 0, (-1), 429, 0}, intArray0);
      assertArrayEquals(new int[] {429, 0, 429, 0, (-1), 429, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(429);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = '-';
      charArray0[2] = 'Y';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = ']';
      ArrayUtils.shift(charArray0, (-1), 0, (-1365));
      assertArrayEquals(new char[] {'\\', '-', 'Y', '9', '9', ']'}, charArray0);
      assertEquals(6, charArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'Y';
      doubleArray0[1] = (double) 'Y';
      doubleArray0[2] = (double) 'Y';
      doubleArray0[3] = (double) 'Y';
      doubleArray0[4] = (double) '\\';
      doubleArray0[5] = (double) 'Y';
      doubleArray0[6] = (double) 'Y';
      ArrayUtils.swap(doubleArray0, 429, (-643), 429);
      assertArrayEquals(new double[] {89.0, 89.0, 89.0, 89.0, 92.0, 89.0, 89.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'*'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.swap((float[]) null, (-55), (-55), (-55));
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, (char) character0);
      assertArrayEquals(new char[] {'Z'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(classArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertEquals(0, classArray0.length);
      
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-13);
      byte[] byteArray1 = ArrayUtils.insert(11, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(20, byteArray0.length);
      assertEquals(40, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[25];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      int[] intArray0 = new int[3];
      intArray0[0] = (-2146933292);
      intArray0[1] = (-1);
      intArray0[2] = 1371;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 7, 1);
      assertArrayEquals(new int[] {(-2146933292), (-1), 1371}, intArray0);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (-1282.8));
      assertArrayEquals(new double[] {(-1282.8)}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray1 = ArrayUtils.add(intArray0, 5);
      assertArrayEquals(new int[] {(-2146933292), (-1), 1371}, intArray0);
      assertArrayEquals(new int[] {(-2146933292), (-1), 1371, 5}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      
      Integer integer0 = new Integer((-2146933292));
      assertEquals((-2146933292), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Long long0 = new Long(901L);
      assertEquals(901L, (long)long0);
      assertNotNull(long0);
      
      String string0 = ArrayUtils.toString((Object) long0, "@`");
      assertEquals("901", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 3914L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 3914L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 3914L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[2] = (double) 'o';
      doubleArray0[3] = (double) '@';
      doubleArray0[5] = (double) 3914L;
      doubleArray0[6] = (double) (byte)29;
      doubleArray0[7] = (-2121.0);
      doubleArray0[8] = (double) '<';
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 29.0;
      doubleArray1[2] = (Double) 0.0;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)29;
      intArray0[1] = (int) '<';
      intArray0[2] = (-23);
      intArray0[3] = (int) (byte)6;
      intArray0[4] = (int) '<';
      intArray0[5] = (int) '@';
      intArray0[6] = (int) 'o';
      intArray0[7] = (int) (byte)6;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)6, (int) (byte)5);
      assertArrayEquals(new int[] {29, 60, (-23), 6, 60, 64, 111, 6}, intArray0);
      assertEquals(3, int0);
      assertEquals(8, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-2442), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2442, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-1L));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)93;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 639, (int) (byte)93);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-7), (byte)93}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) 639);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, 1979);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((int[]) null, (-962), (-962));
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      long[] longArray0 = ArrayUtils.insert(1136, (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      charArray0[1] = '4';
      charArray0[2] = '#';
      charArray0[3] = '\'';
      charArray0[4] = 'O';
      charArray0[5] = 'q';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'F', '4', '#', '\'', 'O', 'q'}, charArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Float float0 = new Float((double) 1959);
      assertEquals(1959.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-3136);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-3136);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-3136), (int) (short)1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short) (-1), (short) (-3136), (short)1, (short)1, (short) (-3136)}, shortArray0);
      assertEquals(3, int0);
      assertEquals(7, shortArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-59);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-59), 3);
      assertArrayEquals(new byte[] {(byte) (-59), (byte) (-59), (byte) (-59), (byte)0, (byte) (-59), (byte) (-59), (byte)0}, byteArray0);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertEquals(7, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short) (-3136), (int) (short)1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = new long[1];
      ArrayUtils.shift(longArray0, (int) (byte)0, 10, 3);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'N';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'N');
      assertArrayEquals(new char[] {'K', 'N'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(2, charArray0.length);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'V');
      assertArrayEquals(new char[] {'K', 'N'}, charArray0);
      assertArrayEquals(new char[] {'K', 'N', 'V'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)1;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
      
      char[] charArray2 = ArrayUtils.removeElement(charArray1, 'N');
      assertArrayEquals(new char[] {'K', 'N'}, charArray0);
      assertArrayEquals(new char[] {'K', 'N', 'V'}, charArray1);
      assertArrayEquals(new char[] {'K', 'V'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(2, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = 'x';
      charArray0[2] = 'B';
      charArray0[5] = 'B';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'k', 'x', 'B', '\u0000', '\u0000', 'B', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      
      Double double0 = new Double((-2368.249728));
      assertEquals((-2368.249728), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1488.0377478646135));
      assertEquals((-1488.0377478646135), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)127, (byte)127, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)127, (byte)127, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      
      int int0 = ArrayUtils.indexOf(longArray1, (long) (byte)127);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals((-1), int0);
      assertFalse(longArray0.equals((Object)longArray2));
      assertNotSame(longArray0, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'k';
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 'k';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.7, 749);
      assertArrayEquals(new double[] {107.0, Double.NaN, 107.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'B';
      intArray0[1] = (-1);
      intArray0[2] = 9;
      intArray0[3] = (int) 'k';
      intArray0[4] = (int) (byte)127;
      int int1 = ArrayUtils.indexOf(intArray0, 107, (-1));
      assertArrayEquals(new int[] {66, (-1), 9, 107, 127}, intArray0);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = (-1931L);
      longArray0[0] = (-1931L);
      longArray0[1] = 2147483647L;
      longArray0[2] = 1396L;
      longArray0[3] = 99L;
      longArray0[4] = (-359L);
      longArray0[5] = 0L;
      int[] intArray0 = new int[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertArrayEquals(new long[] {(-1931L), 2147483647L, 1396L, 99L, (-359L), 0L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {(-1931L), 2147483647L, 1396L, 99L, (-359L), 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(6, longArray1.length);
      
      Character character0 = Character.valueOf('O');
      assertEquals('O', (char)character0);
      assertNotNull(character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short) (-394);
      shortArray0[1] = (short)3648;
      shortArray0[2] = (short)3648;
      ArrayUtils.shift(shortArray0, (-1440));
      assertEquals(11, shortArray0.length);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-394);
      doubleArray0[1] = (-2157.21);
      doubleArray0[2] = (double) (short)3648;
      doubleArray0[3] = (double) (short) (-394);
      doubleArray0[4] = (double) (short) (-394);
      doubleArray0[5] = (double) (-1440);
      doubleArray0[6] = (double) (short) (-394);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-394.0), (-2157.21), 3648.0, (-394.0), (-394.0), (-1440.0), (-394.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)123;
      Byte byte1 = new Byte((byte)123);
      assertEquals((byte)123, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)123, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)123, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)123);
      assertEquals((byte)123, (byte)byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      byte byte6 = (byte) (-34);
      Byte byte7 = new Byte((byte) (-34));
      assertEquals((byte) (-34), (byte)byte7);
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte(byte6);
      assertEquals((byte) (-34), (byte)byte8);
      assertFalse(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte2));
      assertTrue(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte6 == byte0);
      assertNotNull(byte8);
      
      byteArray0[6] = byte8;
      Byte byte9 = new Byte((byte)73);
      assertEquals((byte)73, (byte)byte9);
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte2));
      assertNotNull(byte9);
      
      byteArray0[7] = byte9;
      Byte byte10 = new Byte(byte0);
      assertEquals((byte)123, (byte)byte10);
      assertFalse(byte0 == byte6);
      assertTrue(byte10.equals((Object)byte1));
      assertTrue(byte10.equals((Object)byte3));
      assertFalse(byte10.equals((Object)byte7));
      assertTrue(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte9));
      assertTrue(byte10.equals((Object)byte4));
      assertTrue(byte10.equals((Object)byte2));
      assertFalse(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte5));
      assertFalse(byte10.equals((Object)byte6));
      assertNotNull(byte10);
      
      byteArray0[8] = byte10;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)123, (byte)123, (byte)123, (byte)52, (byte) (-34), (byte) (-34), (byte)73, (byte)123}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'y');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'y'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-631);
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 515);
      assertArrayEquals(new int[] {1, (-631), 0}, intArray0);
      assertArrayEquals(new int[] {1, (-631), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray1, 'y');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'y'}, charArray1);
      assertArrayEquals(new char[] {'y', 'y'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray2.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) 0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1]);
      assertEquals(3, int0);
      assertEquals(4, objectArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 515;
      longArray0[2] = (long) 0;
      longArray0[3] = (-3194L);
      longArray0[4] = (long) 1;
      int int1 = ArrayUtils.indexOf(longArray0, (long) 0, 3881);
      assertArrayEquals(new long[] {1L, 515L, 0L, (-3194L), 1L}, longArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2133538948, (-1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.reverse((long[]) null, 2, 1744);
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'A';
      charArray0[4] = 'x';
      charArray0[5] = 'A';
      charArray0[6] = 'Z';
      charArray0[7] = 'J';
      charArray0[8] = 'A';
      ArrayUtils.shift(charArray0, 2);
      assertArrayEquals(new char[] {'J', 'A', 'x', 'x', 'x', 'A', 'x', 'A', 'Z'}, charArray0);
      assertEquals(9, charArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray1, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = Double.valueOf((-2626.41));
      assertEquals((-2626.41), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(15.0);
      assertEquals(15.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2626.41));
      assertEquals((-2626.41), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(15.0);
      assertEquals(15.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(100.0);
      assertEquals(100.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[1]);
      assertEquals(15.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      assertEquals(7, doubleArray0.length);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[3]);
      assertEquals(15.0, (double)double6, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotNull(double6);
      assertEquals(7, doubleArray0.length);
      
      doubleArray0[6] = double6;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-2626.41), 15.0, (-2626.41), 15.0, 100.0, 15.0, 15.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      objectArray0[3] = (Object) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) 2;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2L;
      floatArray0[1] = (float) 2L;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 2, (-42.0F));
      assertArrayEquals(new float[] {2.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, 2.0F, (-42.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Integer integer0 = new Integer((-221));
      assertEquals((-221), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2388);
      assertEquals(2388, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-221), 2388, (-221), (-221), (-221)}, intArray0);
      assertNotNull(intArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1839;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-3753);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)214;
      shortArray0[5] = (short) (-3685);
      shortArray0[6] = (short)2653;
      shortArray0[7] = (short)3706;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)1839, (short) (-1), (short) (-3753), (short)1, (short)214, (short) (-3685), (short)2653, (short)3706}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray1, (Object[]) classArray0);
      assertFalse(boolean0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, classArray0.length);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      
      Boolean[] booleanArray1 = new Boolean[6];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) false;
      booleanArray1[5] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2416);
      shortArray0[1] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((short)0);
      Object[] objectArray0 = new Object[28];
      objectArray0[0] = (Object) (short) (-2416);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short) (-2416);
      doubleArray0[3] = (double) (short) (-2416);
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) (short)0;
      doubleArray0[8] = (double) (short)0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, (-2416.0), (-2416.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 2);
      assertArrayEquals(new double[] {0.0, 0.0, (-2416.0), (-2416.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, int0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'X');
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(1190.0);
      assertEquals(1190.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1738.1604522));
      assertEquals((-1738.1604522), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-3729));
      assertEquals((-3729.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-3729));
      assertEquals((-3729.0), (double)double4, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-3729));
      assertEquals((-3729.0), (double)double5, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1738.1604522));
      assertArrayEquals(new double[] {1190.0, (-1738.1604522), (-3729.0), 1.0, (-3729.0), (-3729.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-3729);
      intArray0[1] = (-3729);
      intArray0[2] = (-3729);
      intArray0[3] = (-3729);
      intArray0[4] = (int) 'X';
      intArray0[5] = (-897);
      intArray0[6] = (-3729);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-3729), (-897), 88, (-3729), (-3729), (-3729), (-3729)}, intArray0);
      assertEquals(7, intArray0.length);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-1004));
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      
      int int1 = ArrayUtils.indexOf(charArray0, 'U', (int) (short) (-1004));
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'U';
      intArray0[1] = (int) (short) (-1004);
      intArray0[2] = (int) 'U';
      intArray0[3] = (int) 'U';
      intArray0[4] = (int) (short) (-1004);
      int int2 = ArrayUtils.indexOf(intArray0, 1811, (-3747));
      assertArrayEquals(new int[] {85, (-1004), 85, 85, (-1004)}, intArray0);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 2042.800134712;
      doubleArray0[0] = (-350.7645);
      doubleArray0[3] = 924.7283338535548;
      doubleArray0[5] = (-1.0);
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2146474491));
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-88);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)29);
      assertArrayEquals(new byte[] {(byte)98, (byte)29, (byte) (-88), (byte) (-88)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)29, (byte)98, (byte)29, (byte) (-88), (byte) (-88)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)29;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {29L}, longArray1);
      assertArrayEquals(new long[] {29L}, longArray0);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (-681));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = new Integer((-3729));
      assertEquals((-3729), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) (int)integer0;
      longArray0[3] = (long) (-3729);
      longArray0[5] = (long) (-3729);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1614);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      ArrayUtils.reverse(byteArray0, 2, (int) integer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)124}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-3729L), 0L, (-3729L), (-3729L), (-3729L), (-3729L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = '^';
      charArray0[2] = '@';
      charArray0[3] = '~';
      boolean boolean0 = ArrayUtils.contains(charArray0, '!');
      assertArrayEquals(new char[] {'[', '^', '@', '~'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) (byte)124;
      objectArray0[2] = (Object) (-3729L);
      objectArray0[3] = (Object) '@';
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], (int) (byte)124);
      assertEquals(0, int0);
      assertEquals(4, objectArray0.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-3729L));
      assertEquals((-3729.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) integer0);
      assertEquals((-3729.0), (double)double1, 0.01);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((byte)124);
      assertEquals(124.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((byte)0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[2]);
      assertEquals(124.0, (double)double4, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((byte)0);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-3729L));
      assertEquals((-3729.0), (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((byte)0);
      assertEquals(0.0, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(1.0);
      assertEquals(1.0, (double)double8, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotNull(double8);
      
      doubleArray0[8] = doubleArray0[3];
      Double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 365.3596;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {818.0, 0.0, 365.3596}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2070;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-583);
      shortArray0[4] = (short) (-1139);
      shortArray0[5] = (short)1239;
      shortArray0[6] = (short)676;
      shortArray0[7] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1139), (int) (short)676);
      assertArrayEquals(new short[] {(short)2070, (short)0, (short)0, (short) (-583), (short) (-1139), (short)1239, (short)676, (short)0}, shortArray0);
      assertEquals(4, int0);
      assertEquals(8, shortArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = ')';
      charArray0[2] = '`';
      int int1 = ArrayUtils.indexOf(charArray0, 'b', (-495));
      assertArrayEquals(new char[] {'', ')', '`'}, charArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(3, charArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (-1390);
      intArray0[2] = (int) (short)0;
      int int2 = ArrayUtils.indexOf(intArray0, 0);
      assertArrayEquals(new int[] {0, (-1390), 0}, intArray0);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1643);
      intArray0[1] = (-1643);
      intArray0[2] = (-2195);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 57, (-2195));
      assertArrayEquals(new int[] {(-1643), (-1643), (-2195)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      charArray0[5] = 'X';
      charArray0[6] = 'X';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'X', 'X', 'X', 'X', 'X', 'X', 'X', '\u0000'}, charArray2);
      assertArrayEquals(new char[] {'X', 'X', 'X', 'X', 'X', 'X', 'X', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(8, charArray2.length);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1800L);
      longArray0[1] = 0L;
      longArray0[2] = (-402L);
      longArray0[3] = (-2439L);
      longArray0[4] = (-2439L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-1800L), 0L, (-402L), (-2439L), (-2439L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-402L);
      doubleArray0[1] = (double) (-1800L);
      doubleArray0[2] = (double) (-402L);
      doubleArray0[3] = (-2342.7);
      doubleArray0[4] = (double) (-402L);
      doubleArray0[5] = (double) (-402L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-402.0), 2, 100.0);
      assertArrayEquals(new double[] {(-402.0), (-1800.0), (-402.0), (-2342.7), (-402.0), (-402.0)}, doubleArray0, 0.01);
      assertEquals(2, int0);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-3729.642533851));
      assertArrayEquals(new double[] {(-402.0), (-1800.0), (-402.0), (-2342.7), (-402.0), (-402.0), (-3729.642533851)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-402.0), (-1800.0), (-402.0), (-2342.7), (-402.0), (-402.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false, true, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      ArrayUtils.reverse(intArray0, 532, 2);
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = '\'';
      Character character0 = Character.valueOf('\'');
      assertEquals('\'', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Character character1 = Character.valueOf('\'');
      assertEquals('\'', (char)character1);
      assertNotNull(character1);
      
      AbstractMap.SimpleEntry<Boolean, Character> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Boolean, Character>(boolean0, character1);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Boolean, Character> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Boolean, Character>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Boolean, Character> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Boolean, Character>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Boolean, Character> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Boolean, Character>(boolean0, (Character) char0);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      AbstractMap.SimpleImmutableEntry<Boolean, Character>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.addFirst((AbstractMap.SimpleImmutableEntry<Boolean, Character>[]) null, abstractMap_SimpleImmutableEntry2);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry1);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) char0;
      floatArray0[1] = (float) '\'';
      floatArray0[2] = 3651.212F;
      floatArray0[3] = (float) char0;
      floatArray0[4] = (float) '\'';
      floatArray0[5] = (float) '\'';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {39.0F, 39.0F, 3651.212F, 39.0F, 39.0F, 39.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte)10;
      ArrayUtils.swap(byteArray0, (-3174), (int) (byte) (-1), 85);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-5), (byte)0, (byte)56, (byte) (-57), (byte) (-1), (byte) (-124), (byte)10}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '\"';
      objectArray0[1] = (Object) '\"';
      objectArray0[1] = (Object) '\"';
      objectArray0[4] = (Object) '\"';
      objectArray0[5] = (Object) '\"';
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1129;
      intArray0[1] = (int) '\"';
      intArray0[2] = 1129;
      intArray0[3] = (int) '\"';
      intArray0[4] = 34;
      intArray0[5] = 1129;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1140), (-3316));
      assertArrayEquals(new int[] {1129, 34, 1129, 34, 34, 1129}, intArray0);
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, booleanArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-873), (-844));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2145659106);
      intArray0[1] = (-873);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-844);
      longArray0[1] = (long) (-2145659106);
      longArray0[2] = (long) (-2145659106);
      longArray0[3] = (long) (-2145659106);
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-2145659106);
      long[] longArray2 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(0, longArray2.length);
      
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[20];
      boolean boolean0 = ArrayUtils.contains(charArray0, 'x');
      assertFalse(boolean0);
      assertEquals(20, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) byte0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[3], (int) (byte) (-1));
      assertEquals((-1), int0);
      assertEquals(5, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, 96, 96, Integer.MAX_VALUE);
      assertEquals(5, objectArray0.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '`');
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)24);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[1] = (long) '`';
      longArray0[2] = (long) (byte) (-61);
      longArray0[3] = (long) (byte)19;
      longArray0[4] = (long) '`';
      longArray0[5] = (long) (byte) (-61);
      int int0 = ArrayUtils.indexOf(longArray0, 517L, (int) (byte)24);
      assertArrayEquals(new long[] {0L, 96L, (-61L), 19L, 96L, (-61L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[1] = (-2188);
      intArray0[2] = (int) (byte)24;
      intArray0[3] = (-1);
      intArray0[4] = (int) (byte)43;
      intArray0[5] = (-2146641332);
      intArray0[6] = (int) (byte) (-61);
      intArray0[7] = (int) (byte)43;
      intArray0[8] = (int) '`';
      ArrayUtils.shift(intArray0, (-2146641332), 12, 630);
      assertArrayEquals(new int[] {0, (-2188), 24, (-1), 43, (-2146641332), (-61), 43, 96}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 3914L;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)6;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {(byte)29, (byte) (-52), (byte) (-1), (byte)5, (byte)6, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(6, byteArray0.length);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 3914L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 3914L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) 'o';
      doubleArray0[3] = (double) '@';
      doubleArray0[4] = (double) (byte) (-52);
      doubleArray0[5] = (double) 3914L;
      doubleArray0[6] = (double) (byte)29;
      doubleArray0[7] = (-2121.0);
      doubleArray0[8] = (double) '<';
      double[] doubleArray1 = ArrayUtils.insert((int) (byte)6, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 111.0, 64.0, (-52.0), 3914.0, 29.0, (-2121.0), 60.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(18, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      Double[] doubleArray2 = new Double[3];
      doubleArray2[0] = (Double) (-52.0);
      doubleArray2[1] = (Double) 29.0;
      doubleArray2[2] = (Double) (-52.0);
      Double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray2);
      assertNotNull(doubleArray3);
      assertSame(doubleArray2, doubleArray3);
      assertSame(doubleArray3, doubleArray2);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'D');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((short)51);
      assertEquals((short)51, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)3630);
      assertEquals((short)3630, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1734));
      assertEquals((short) (-1734), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)114);
      assertEquals((short)114, (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) shortArray0[2]);
      assertEquals((short) (-1734), (short)short4);
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertNotNull(short4);
      assertEquals(5, shortArray0.length);
      
      shortArray0[4] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)51, (short)3630, (short) (-1734), (short)114, (short) (-1734)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "V-+/3C;AlCt;$76";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "V-+/3C;AlCt;$76";
      stringArray0[4] = "i+L3eix<i6u u4aVml";
      stringArray0[5] = "V-+/3C;AlCt;$76";
      stringArray0[6] = "V-+/3C;AlCt;$76";
      stringArray0[7] = "";
      String[] stringArray1 = ArrayUtils.clone(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(8.0);
      assertEquals(8.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(8.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(8.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-646.96340119954));
      assertEquals((-646.96340119954), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      assertEquals((-646.96340119954), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(1.5);
      assertEquals(1.5, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[3]);
      assertEquals((-646.96340119954), (double)double6, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNotNull(double6);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      assertEquals(0.0, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.5);
      assertArrayEquals(new double[] {8.0, 8.0, 8.0, (-646.96340119954), (-646.96340119954), 1.5, (-646.96340119954), 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = '+';
      charArray0[2] = '&';
      charArray0[3] = '2';
      charArray0[4] = '';
      charArray0[5] = '\\';
      charArray0[6] = '}';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'm', 45);
      assertArrayEquals(new char[] {'F', '+', '&', '2', '', '\\', '}'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(1770L);
      assertEquals(1770L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, long0);
      assertFalse(long0.equals((Object)long1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 1770L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 701);
      assertArrayEquals(new double[] {0.0, 1770.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-3100.32130094476), 0);
      assertArrayEquals(new double[] {0.0, 1770.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(2, doubleArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) 701);
      assertArrayEquals(new double[] {0.0, 1770.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1770.0, 701.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)0;
      shortArray0[8] = (short) (byte)0;
      int int2 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(9, shortArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      double[] doubleArray2 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertArrayEquals(new double[] {0.0, 1770.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {1770.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 818.0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1492;
      longArray0[1] = (long) 1492;
      longArray0[3] = (long) 1492;
      longArray0[4] = (long) 1492;
      ArrayUtils.swap(longArray0, 231, 1492);
      assertArrayEquals(new long[] {1492L, 1492L, 0L, 1492L, 1492L}, longArray0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'h';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'t', 'h'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-103));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-103), (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 231;
      intArray0[1] = (int) 't';
      intArray0[2] = 6;
      doubleArray0[0] = (double) (short) (-103);
      ArrayUtils.swap(intArray0, (-1832), 0, (-1832));
      assertArrayEquals(new int[] {231, 116, 6, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-103), (-144));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(bitSet0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.shift((boolean[]) null, (-3096));
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-144);
      intArray1[1] = (int) 'h';
      intArray1[2] = (int) 'h';
      intArray1[3] = (int) 'h';
      doubleArray0[0] = (double) 'h';
      intArray1[5] = (int) 'h';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 104, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-3278);
      shortArray0[3] = (short) (-3278);
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-3278);
      doubleArray0[6] = (double) (int)integer0;
      doubleArray0[2] = (-44.9908);
      doubleArray0[3] = (double) (int)integer0;
      doubleArray0[4] = (double) (int)integer0;
      doubleArray0[5] = (double) (short) (-3278);
      doubleArray0[6] = (double) (int)integer0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) integer0, Double.NaN);
      assertArrayEquals(new double[] {(-3278.0), 0.0, (-44.9908), 1.0, 1.0, (-3278.0), 1.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (short) (-3278);
      intArray0[2] = (int) (short)2;
      intArray0[4] = (int) (short) (-3278);
      intArray0[5] = (int) (short)2;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 0, 18688);
      assertArrayEquals(new int[] {2, (-3278), 2, 0, (-3278), 2}, intArray0);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      assertEquals(6, intArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean boolean2 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 18688);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 18688;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 76L;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 76L;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {18688.0F, 0.0F, 76.0F, (-1.0F), 0.0F, 0.0F, 76.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-3278);
      shortArray0[3] = (short) (-3278);
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-3278);
      doubleArray0[6] = (double) (int)integer0;
      doubleArray0[2] = (-44.9908);
      doubleArray0[3] = (double) (int)integer0;
      doubleArray0[4] = (double) (int)integer0;
      doubleArray0[5] = (double) (short) (-3278);
      doubleArray0[6] = (double) (int)integer0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) integer0, Double.NaN);
      assertArrayEquals(new double[] {(-3278.0), 0.0, (-44.9908), 1.0, 1.0, (-3278.0), 1.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (short) (-3278);
      intArray0[2] = (int) (short)2;
      intArray0[3] = 1;
      intArray0[4] = (int) (short) (-3278);
      intArray0[5] = (int) (short)2;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 0, 18688);
      assertArrayEquals(new int[] {2, (-3278), 2, 1, (-3278), 2}, intArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(6, intArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Float float0 = new Float(2.133538948E9);
      assertEquals(2.13353894E9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-394);
      shortArray0[1] = (short)3648;
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-2918L));
      assertEquals((-2918L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-328L));
      assertEquals((-328L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      longArray0[2] = long1;
      Long long2 = new Long((short)3648);
      assertEquals(3648L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[3] = long2;
      longArray0[4] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      long[] longArray2 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray2, (-2147483648L));
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals((-1), int0);
      assertEquals(0, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Integer integer0 = new Integer(84);
      assertEquals(84, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-685));
      assertEquals((-685), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2070.0F;
      floatArray0[1] = (float) (-685);
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'o';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertArrayEquals(new char[] {'K', 'o'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-430L));
      assertEquals((-430L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(84);
      assertEquals(84L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-1877L));
      assertEquals((-1877L), (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2416);
      shortArray0[1] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-430));
      Object[] objectArray0 = new Object[28];
      objectArray0[0] = (Object) (short) (-2416);
      objectArray0[1] = (Object) (short)0;
      ArrayUtils.shift((byte[]) null, (-374), (int) (short) (-2416), (-1014));
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.reverse(shortArray0, (int) (short)0, (int) (short) (-176));
      assertArrayEquals(new short[] {(short) (-2416), (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-3451), (-75));
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-2416), (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)14;
      intArray0[1] = (-1251);
      intArray0[2] = (int) (byte)14;
      intArray0[3] = (-1251);
      intArray0[4] = (int) (byte)14;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 14, (int) (byte)14);
      assertArrayEquals(new int[] {14, (-1251), 14, (-1251), 14, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = ArrayUtils.toPrimitive((Object) 14);
      assertEquals(14, object0);
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = objectArray0[0];
      objectArray0[3] = (Object) (-1251);
      objectArray0[6] = (Object) 14;
      ArrayUtils.swap(objectArray0, 0, (-1251), 14);
      assertEquals(8, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      int[] intArray2 = ArrayUtils.clone(intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {14, (-1251), 14, (-1251), 14, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertEquals(0, intArray2.length);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 14;
      longArray0[1] = (long) (byte)14;
      longArray0[2] = (long) (byte)14;
      longArray0[3] = (long) 14;
      ArrayUtils.swap(longArray0, 14, (-172), 14);
      assertArrayEquals(new long[] {14L, 14L, 14L, 14L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      Float[] floatArray1 = new Float[13];
      floatArray1[0] = (Float) 0.0F;
      floatArray1[1] = (Float) 0.0F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) floatArray1[1]);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(13, floatArray1.length);
      assertEquals(13, floatArray2.length);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[4] = 'M';
      float[] floatArray3 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertNotNull(floatArray3);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray3.length);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 2147483647L);
      assertArrayEquals(new long[] {2147483647L}, longArray0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray4 = ArrayUtils.nullToEmpty(floatArray3);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {}, floatArray4, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertNotNull(floatArray4);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(floatArray3, floatArray4);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray4, floatArray2);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray3.length);
      assertEquals(0, floatArray4.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-11.193588670977903);
      doubleArray0[2] = (double) 3;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0, 2, 2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 3;
      floatArray0[1] = 1896.21F;
      floatArray0[2] = (float) 11;
      floatArray0[3] = (float) 3;
      floatArray0[4] = (float) (-639);
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) 11;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {3.0F, 1896.21F, 11.0F, 3.0F, (-639.0F), 2.0F, 11.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 633;
      intArray0[1] = (-812);
      intArray0[2] = 1905;
      intArray0[3] = 219;
      intArray0[4] = (-1431);
      intArray0[5] = 10;
      intArray0[6] = (-406);
      intArray0[7] = 1499;
      intArray0[8] = (-1);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {633, (-812), 1905, 219, (-1431), 10, (-406), 1499, (-1)}, intArray0);
      assertArrayEquals(new int[] {633, (-812), 1905, 219, (-1431), 10, (-406), 1499, (-1)}, intArray1);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1826);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)974;
      shortArray0[4] = (short)1282;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2, 1905);
      assertArrayEquals(new short[] {(short) (-1826), (short)2, (short)2, (short)974, (short)1282}, shortArray0);
      assertEquals(2, int0);
      assertEquals(5, shortArray0.length);
      
      ArrayUtils.swap((float[]) null, (int) (short)1282, 1905, 6);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = '&';
      charArray0[14] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      Float float0 = new Float(924.3982F);
      assertEquals(924.3982F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(15, charArray0.length);
      assertEquals(30, charArray1.length);
      
      ArrayUtils.shift((Object[]) floatArray0, (-134), (-134), 1760);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 924.3982F;
      doubleArray0[1] = (double) '@';
      doubleArray0[2] = (double) (-134);
      doubleArray0[3] = (double) '@';
      doubleArray0[4] = (double) '@';
      ArrayUtils.shift(doubleArray0, (-285));
      assertArrayEquals(new double[] {924.398193359375, 64.0, (-134.0), 64.0, 64.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '&';
      intArray0[1] = (int) '@';
      intArray0[2] = (int) 'e';
      intArray0[3] = (int) '&';
      intArray0[4] = (int) '@';
      intArray0[5] = (int) '&';
      intArray0[6] = 368;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeAll(intArray0, intArray1);
      assertArrayEquals(new int[] {38, 64, 101, 38, 64, 38, 368}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {38, 64, 101, 38, 64, 38, 368}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(7, intArray2.length);
      
      float[] floatArray2 = ArrayUtils.insert(38, floatArray1, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      long[] longArray0 = new long[13];
      longArray0[1] = (long) (byte)1;
      longArray0[2] = (long) (byte)2;
      ArrayUtils.shift((float[]) null, 682, (-1905), (int) (byte)51);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      ArrayUtils.reverse(booleanArray0, (-1905), (int) (byte)51);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 682;
      intArray0[1] = (-522);
      intArray0[2] = 14;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = (int) (byte)51;
      intArray0[5] = (int) (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 682);
      assertArrayEquals(new int[] {682, (-522), 14, 2, 51, 1}, intArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-873), (-823));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-823);
      intArray0[1] = (-873);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-823);
      longArray0[1] = (long) (-823);
      longArray0[2] = (long) (-2145659106);
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-823);
      longArray1[1] = (long) (-873);
      longArray1[2] = (long) (-823);
      longArray1[3] = (long) (-2145659106);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertArrayEquals(new long[] {(-823L), (-823L), (-2145659106L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-823L), (-873L), (-823L), (-2145659106L)}, longArray1);
      assertTrue(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1, (-120));
      assertArrayEquals(new int[] {(-823), (-873)}, intArray0);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, true}, booleanArray0));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-873), (-823));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2145659106);
      intArray0[1] = (-873);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-823);
      longArray0[1] = (long) (-2145659106);
      longArray0[2] = (long) (-2145659106);
      longArray0[3] = (long) (-2145659106);
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-2145659106);
      longArray1[1] = (long) (-873);
      longArray1[2] = (long) (-823);
      longArray1[3] = (long) (-2145659106);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertArrayEquals(new long[] {(-823L), (-2145659106L), (-2145659106L), (-2145659106L)}, longArray0);
      assertArrayEquals(new long[] {(-2145659106L), (-873L), (-823L), (-2145659106L)}, longArray1);
      assertTrue(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1129, (-120));
      assertArrayEquals(new int[] {(-2145659106), (-873)}, intArray0);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, true}, booleanArray0));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 0.0;
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray0));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, booleanArray0.length);
      
      Character[] characterArray0 = new Character[1];
      char char0 = 'z';
      Character character0 = new Character('z');
      assertEquals('z', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(characterArray0, (int) character0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 122, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = '&';
      charArray0[14] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      Float float0 = new Float(924.3982F);
      assertEquals(924.3982F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(15, charArray0.length);
      assertEquals(30, charArray1.length);
      
      ArrayUtils.shift((Object[]) floatArray0, (-1013), (-1013), 1760);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 924.3982F;
      doubleArray0[1] = (double) '@';
      doubleArray0[2] = (double) (-1013);
      doubleArray0[3] = (double) '@';
      doubleArray0[4] = (double) '@';
      ArrayUtils.shift(doubleArray0, (-285));
      assertArrayEquals(new double[] {924.398193359375, 64.0, (-1013.0), 64.0, 64.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((short)51);
      assertEquals((short)51, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)51);
      assertEquals((short)51, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-1734));
      assertEquals((short) (-1734), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      shortArray0[3] = short1;
      Short short3 = new Short((short) shortArray0[2]);
      assertEquals((short) (-1734), (short)short3);
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals(5, shortArray0.length);
      
      shortArray0[4] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)51, (short)0, (short) (-1734), (short)51, (short) (-1734)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Object[] objectArray0 = new Object[7];
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-977.388097921361);
      doubleArray0[1] = (double) 2L;
      doubleArray0[2] = (-480.4197647);
      doubleArray0[3] = (double) 2L;
      doubleArray0[4] = (double) 2L;
      doubleArray0[5] = (-977.388097921361);
      doubleArray0[6] = (-480.4197647);
      doubleArray0[7] = 2154.9762927539;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2.0, Double.NaN);
      assertArrayEquals(new double[] {(-977.388097921361), 2.0, (-480.4197647), 2.0, 2.0, (-977.388097921361), (-480.4197647), 2154.9762927539}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)1959);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      
      Object[] objectArray0 = new Object[4];
      Float float0 = new Float((float) (byte)14);
      assertEquals(14.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)14;
      intArray0[1] = (int) (byte)14;
      intArray0[2] = (int) (byte)14;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) float0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[3] = 'E';
      charArray0[4] = 'd';
      charArray0[2] = 'm';
      charArray0[6] = 'i';
      charArray0[7] = '#';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'm', 'E', 'd', '\u0000', 'i', '#'}, charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'm', 'E', 'd', '\u0000', 'i', '#'}, charArray1);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'i';
      doubleArray0[2] = (double) 'i';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'd';
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertArrayEquals(new int[] {100}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = 53L;
      longArray0[0] = 53L;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 2063;
      intArray0[2] = 1827;
      intArray0[3] = 9;
      intArray0[4] = 348;
      intArray0[5] = 2759;
      intArray0[6] = 111;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2759, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 126;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {126}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 126);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {126.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 126;
      doubleArray0[1] = (double) 126;
      doubleArray0[2] = (double) 126;
      doubleArray0[3] = (double) 126;
      doubleArray0[4] = (double) 126;
      doubleArray0[5] = (double) 126;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1012.72), (-850));
      assertArrayEquals(new double[] {126.0, 126.0, 126.0, 126.0, 126.0, 126.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)66);
      assertArrayEquals(new byte[] {(byte)66, (byte)49, (byte)17, (byte)3}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(4, byteArray0.length);
      
      Float[] floatArray2 = new Float[7];
      Float float0 = Float.valueOf((float) (byte)17);
      assertEquals(17.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray2[0] = float0;
      Float float1 = new Float(0.1);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray2[1] = float1;
      Float float2 = new Float(4202.430151755968);
      assertEquals(4202.43F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray2[2] = float2;
      Float float3 = new Float((float) floatArray2[0]);
      assertEquals(17.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals(7, floatArray2.length);
      
      floatArray2[3] = float3;
      Float float4 = new Float(1.0F);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      
      floatArray2[4] = float4;
      Float float5 = new Float((double) (byte)3);
      assertEquals(3.0F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotNull(float5);
      
      floatArray2[5] = float5;
      Float float6 = new Float(91.0);
      assertEquals(91.0F, (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotNull(float6);
      
      floatArray2[6] = float6;
      Float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray2);
      assertNotNull(floatArray3);
      assertSame(floatArray3, floatArray2);
      assertSame(floatArray2, floatArray3);
      assertEquals(7, floatArray3.length);
      assertEquals(7, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2416);
      shortArray0[1] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, (int)  (-2416));
      assertNull(object0);
      assertEquals(1, objectArray0.length);
      
      objectArray0[0] = null;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(1, objectArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-2416);
      int int0 = ArrayUtils.indexOf(intArray0, (-1277), (-992));
      assertArrayEquals(new int[] {0, (-2416)}, intArray0);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.util.BitSet";
      stringArray0[1] = "OCOqhr+I|JN:r:";
      stringArray0[2] = "OCOqhr+I|JN:r:";
      stringArray0[3] = "java.util.BitSet";
      stringArray0[4] = "OCOqhr+I|JN:r:";
      stringArray0[5] = "OCOqhr+I|JN:r:";
      stringArray0[6] = "OCOqhr+I|JN:r:";
      boolean boolean1 = ArrayUtils.isArrayIndexValid(stringArray0, (-1277));
      assertFalse(boolean1);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'P';
      charArray0[2] = 'j';
      charArray0[3] = '9';
      charArray0[4] = 'P';
      charArray0[5] = '9';
      charArray0[7] = 'P';
      charArray0[8] = 'P';
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '9';
      intArray0[2] = (int) '9';
      intArray0[3] = (int) 'j';
      intArray0[4] = (int) '9';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 7);
      assertArrayEquals(new int[] {57, 0, 57, 106, 57}, intArray0);
      assertEquals(1, int0);
      assertEquals(5, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) '9';
      ArrayUtils.swap(doubleArray0, 0, (-1673), 7);
      assertArrayEquals(new double[] {1.0, 57.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'P';
      charArray0[2] = 'j';
      charArray0[3] = '9';
      charArray0[4] = 'P';
      charArray0[5] = '9';
      charArray0[6] = '9';
      charArray0[7] = 'P';
      charArray0[8] = 'P';
      ArrayUtils.shift(charArray0, (int) (short)0, 1697, (-1116));
      assertArrayEquals(new char[] {'9', 'P', 'j', '9', 'P', '9', '9', 'P', 'P'}, charArray0);
      assertEquals(9, charArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '9';
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) '9';
      intArray0[3] = (int) 'j';
      intArray0[4] = (int) '9';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 7);
      assertArrayEquals(new int[] {57, 0, 57, 106, 57}, intArray0);
      assertEquals(1, int0);
      assertEquals(5, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) '9';
      ArrayUtils.swap(doubleArray0, 0, (-1673), 7);
      assertArrayEquals(new double[] {1.0, 57.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(3422L);
      assertEquals(3422L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertArrayEquals(new long[] {3422L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 605;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-2181);
      intArray0[3] = (-2181);
      intArray0[4] = (int) (short)0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1689), (-1689));
      assertArrayEquals(new int[] {605, 0, (-2181), (-2181), 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = '`';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, ']');
      assertArrayEquals(new char[] {']', 'X', 'X', '`'}, charArray1);
      assertArrayEquals(new char[] {'X', 'X', '`'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray2 = ArrayUtils.clone(charArray1);
      assertArrayEquals(new char[] {']', 'X', 'X', '`'}, charArray1);
      assertArrayEquals(new char[] {']', 'X', 'X', '`'}, charArray2);
      assertArrayEquals(new char[] {'X', 'X', '`'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray2.length);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2416);
      shortArray0[1] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-430));
      double[] doubleArray0 = ArrayUtils.insert((-2147483642), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Double[] doubleArray1 = new Double[3];
      Double double0 = new Double((short)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double((short)0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray1[1] = double1;
      Double double2 = new Double((short) (-2416));
      assertEquals((-2416.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray1[2] = double2;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-2416), (short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-11.193588670977903);
      float[] floatArray0 = new float[3];
      doubleArray0[2] = (double) 3;
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) (-639);
      ArrayUtils.shift(floatArray0, (-639), 3, 11);
      assertArrayEquals(new float[] {3.0F, (-639.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0, 2, 2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2884);
      shortArray0[1] = (short)380;
      shortArray0[2] = (short)102;
      shortArray0[3] = (short)57;
      shortArray0[4] = (short) (-1828);
      shortArray0[5] = (short)54;
      shortArray0[6] = (short) (-2642);
      ArrayUtils.shift(shortArray0, 2, 2125114026, 2125114026);
      assertArrayEquals(new short[] {(short) (-2884), (short)380, (short) (-2642), (short)102, (short)57, (short) (-1828), (short)54}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 11;
      intArray0[2] = (int) (short) (-2642);
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (short)54);
      assertArrayEquals(new int[] {2, 11, (-2642)}, intArray0);
      assertFalse(boolean0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[0];
      byte byte0 = (byte) (-1);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (byte) (-1);
      int int0 = ArrayUtils.indexOf(longArray0, (-1L));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L)}, longArray0);
      assertEquals(0, int0);
      assertEquals(3, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 69;
      intArray0[1] = (-1934);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 69, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      characterArray0[1] = character0;
      Character character1 = new Character('^');
      assertEquals('^', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character[] characterArray1 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (char)character1;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {94.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {94.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-125));
      assertEquals((byte) (-125), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-83));
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, 1575.2F, (-2));
      assertEquals((-1), int0);
      
      boolean boolean2 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {94.0}, doubleArray0, 0.01);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (int) (byte) (-83), 116);
      assertNull(shortArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) character0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals((-1), int1);
      assertTrue(character0.equals((Object)character1));
      assertTrue(int1 == int0);
      assertEquals(1, longArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[0] = boolean3;
      Boolean boolean4 = Boolean.valueOf(false);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[1] = boolean4;
      Boolean boolean5 = new Boolean(true);
      assertTrue(boolean5);
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      booleanArray0[2] = boolean5;
      Boolean boolean6 = Boolean.valueOf(false);
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      
      booleanArray0[3] = boolean6;
      Boolean boolean7 = Boolean.FALSE;
      assertFalse(boolean7);
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean2));
      assertNotNull(boolean7);
      
      booleanArray0[4] = boolean7;
      Boolean boolean8 = new Boolean("org.apache.commons.lang3.builder.HashCodeBuilder");
      assertFalse(boolean8);
      assertFalse(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean2));
      assertNotNull(boolean8);
      
      booleanArray0[5] = boolean8;
      Boolean boolean9 = Boolean.FALSE;
      assertFalse(boolean9);
      assertFalse(boolean9.equals((Object)boolean1));
      assertTrue(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean3));
      assertFalse(boolean9.equals((Object)boolean5));
      assertTrue(boolean9.equals((Object)boolean2));
      assertFalse(boolean9.equals((Object)boolean0));
      assertNotNull(boolean9);
      
      booleanArray0[6] = boolean9;
      Boolean boolean10 = new Boolean("`Z{gA0I.R");
      assertFalse(boolean10);
      assertFalse(boolean10.equals((Object)boolean1));
      assertTrue(boolean10.equals((Object)boolean8));
      assertFalse(boolean10.equals((Object)boolean0));
      assertTrue(boolean10.equals((Object)boolean9));
      assertTrue(boolean10.equals((Object)boolean6));
      assertTrue(boolean10.equals((Object)boolean2));
      assertTrue(boolean10.equals((Object)boolean4));
      assertTrue(boolean10.equals((Object)boolean7));
      assertFalse(boolean10.equals((Object)boolean5));
      assertFalse(boolean10.equals((Object)boolean3));
      assertNotNull(boolean10);
      
      booleanArray0[7] = boolean10;
      Boolean boolean11 = new Boolean("|h*");
      assertFalse(boolean11);
      assertTrue(boolean11.equals((Object)boolean9));
      assertFalse(boolean11.equals((Object)boolean0));
      assertFalse(boolean11.equals((Object)boolean5));
      assertFalse(boolean11.equals((Object)boolean3));
      assertTrue(boolean11.equals((Object)boolean7));
      assertTrue(boolean11.equals((Object)boolean2));
      assertTrue(boolean11.equals((Object)boolean4));
      assertTrue(boolean11.equals((Object)boolean10));
      assertTrue(boolean11.equals((Object)boolean8));
      assertTrue(boolean11.equals((Object)boolean6));
      assertFalse(boolean11.equals((Object)boolean1));
      assertNotNull(boolean11);
      
      booleanArray0[8] = boolean11;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, 0, 0, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[3] = 429;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[6] = 429;
      intArray0[7] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertArrayEquals(new int[] {(-1), 0, 0, 429, 0, (-1), 429, (-1)}, intArray0);
      assertArrayEquals(new int[] {0, 0, 429, 0, (-1), 429, (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(429);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = '-';
      charArray0[2] = 'Y';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = ']';
      ArrayUtils.shift(charArray0, (-1), (-1), (-1365));
      assertArrayEquals(new char[] {'\\', '-', 'Y', '9', '9', ']'}, charArray0);
      assertEquals(6, charArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'Y';
      longArray0[1] = (long) 0;
      longArray0[2] = 2254L;
      longArray0[3] = (long) '-';
      longArray0[4] = (long) '\\';
      longArray0[5] = (long) 'Y';
      longArray0[6] = (long) '9';
      ArrayUtils.shift(longArray0, 0, 0, (-1));
      assertArrayEquals(new long[] {89L, 0L, 2254L, 45L, 92L, 89L, 57L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 0;
      intArray0[2] = 301;
      intArray0[3] = 1;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, 301, 1}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, 301, 1, Integer.MAX_VALUE, 0, 301, 1}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = 'j';
      charArray0[2] = '\\';
      charArray0[3] = 'w';
      char[] charArray1 = ArrayUtils.remove(charArray0, 2);
      assertArrayEquals(new char[] {'s', 'j', '\\', 'w'}, charArray0);
      assertArrayEquals(new char[] {'s', 'j', 'w'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2145659106);
      Double double0 = new Double((-2145659106));
      assertEquals((-2.145659106E9), (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) double0, (-715));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-2145659106);
      floatArray0[1] = (float) (-2145659106);
      floatArray0[2] = (float) (-2145659106);
      floatArray0[3] = (float) (-823);
      floatArray0[4] = (float) (-2145659106);
      floatArray0[5] = (float) (-4361);
      floatArray0[6] = (float) (-2145659106);
      floatArray0[7] = (float) (-715);
      floatArray0[8] = (float) (-2145659106);
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 5);
      assertArrayEquals(new float[] {(-2.14565914E9F), (-2.14565914E9F), (-2.14565914E9F), (-823.0F), (-2.14565914E9F), (-4361.0F), (-2.14565914E9F), (-715.0F), (-2.14565914E9F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2.14565914E9F), (-2.14565914E9F), (-2.14565914E9F), (-823.0F), (-2.14565914E9F), (-2.14565914E9F), (-715.0F), (-2.14565914E9F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = 's';
      charArray0[2] = '7';
      charArray0[3] = '9';
      charArray0[4] = '_';
      charArray0[5] = 'R';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'%', 's', '7', '9', '_', 'R'}, charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      
      ArrayUtils.swap(intArray0, 1158, (-70), (-1));
      assertArrayEquals(new int[] {(-2145659106), 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, 0, 0, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[7] = 429;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[6] = 429;
      intArray0[7] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertArrayEquals(new int[] {(-1), (-1), 0, 0, 0, (-1), 429, (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, (-1), 429, (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(429);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = '-';
      charArray0[2] = 'Y';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = ']';
      ArrayUtils.shift(charArray0, (-1), (-1), (-1365));
      assertArrayEquals(new char[] {'\\', '-', 'Y', '9', '9', ']'}, charArray0);
      assertEquals(6, charArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '-';
      longArray0[1] = (long) ']';
      longArray0[2] = (long) 429;
      longArray0[3] = (long) '\\';
      longArray0[4] = (long) ']';
      longArray0[5] = (long) (-1);
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-1));
      assertArrayEquals(new long[] {45L, 93L, 429L, 92L, 93L, (-1L)}, longArray0);
      assertTrue(boolean0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 818.0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1414);
      longArray0[1] = (long) (-1414);
      longArray0[2] = (long) (-1414);
      doubleArray0[1] = (double) (-1414);
      longArray0[4] = (long) (-1414);
      ArrayUtils.swap(longArray0, 533, (-1414));
      assertArrayEquals(new long[] {(-1414L), (-1414L), (-1414L), 0L, (-1414L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      longArray0[2] = (long) '[';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {(-1414L), (-1414L), 91L, 0L, (-1414L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-405.53));
      assertArrayEquals(new double[] {818.0, (-1414.0)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 't';
      intArray0[1] = (int) '[';
      intArray0[2] = (int) '[';
      intArray0[3] = 533;
      intArray0[4] = (-1414);
      intArray0[5] = 533;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1553);
      assertArrayEquals(new int[] {116, 91, 91, 533, (-1414), 533}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(longArray0, 91L);
      assertArrayEquals(new long[] {(-1414L), (-1414L), 91L, 0L, (-1414L)}, longArray0);
      assertTrue(boolean2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(longArray0, longArray1);
      assertEquals(5, longArray0.length);
      
      int int0 = ArrayUtils.indexOf(intArray0, 533, 2309);
      assertArrayEquals(new int[] {116, 91, 91, 533, (-1414), 533}, intArray0);
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-963.73694F), 27);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '#';
      charArray0[2] = '/';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) 'k';
      intArray0[2] = (int) 'k';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {35, 107, 107, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {35, 107, 107, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 107;
      integerArray0[1] = (Integer) 107;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) integerArray0[0], (-1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (int) '#';
      intArray2[1] = 0;
      intArray2[2] = (-1);
      intArray2[3] = (int) 'k';
      intArray2[4] = (int) '/';
      intArray2[5] = (int) integerArray0[0];
      int int1 = ArrayUtils.lastIndexOf(intArray2, (-1));
      assertArrayEquals(new int[] {35, 0, (-1), 107, 47, 107}, intArray2);
      assertEquals(2, int1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(int1 == int0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(6, intArray2.length);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)125);
      assertEquals((byte)125, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)115);
      assertArrayEquals(new byte[] {(byte)125, (byte)121}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1800L);
      longArray0[1] = 0L;
      longArray0[2] = (-402L);
      longArray0[3] = (-2439L);
      longArray0[4] = 348L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-1800L), 0L, (-402L), (-2439L), 348L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
      
      Double double0 = new Double((-2439L));
      assertEquals((-2439.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Object[] objectArray0 = ArrayUtils.removeElements((Object[]) longArray1, (Object[]) longArray1);
      assertArrayEquals(new long[] {(-1800L), 0L, (-402L), (-2439L), 348L}, longArray0);
      assertNotNull(objectArray0);
      assertNotSame(longArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean1 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      Long[] longArray2 = ArrayUtils.subarray(longArray1, (int) integerArray0[0], 0);
      assertArrayEquals(new long[] {(-1800L), 0L, (-402L), (-2439L), 348L}, longArray0);
      assertFalse(longArray1.equals((Object)objectArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)objectArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray1, objectArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, objectArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, integerArray0.length);
      assertEquals(5, longArray1.length);
      assertEquals(0, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'x';
      charArray0[2] = 'B';
      charArray0[0] = 'a';
      charArray0[4] = 'a';
      charArray0[5] = 'B';
      charArray0[6] = 'a';
      charArray0[7] = 'B';
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'B';
      doubleArray0[1] = 924.7283338535548;
      doubleArray0[2] = (double) 'x';
      doubleArray0[3] = (double) 'B';
      doubleArray0[4] = (double) 'a';
      int int0 = ArrayUtils.indexOf(doubleArray0, 66.0);
      assertArrayEquals(new double[] {66.0, 924.7283338535548, 120.0, 66.0, 97.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) "");
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, 1607, (-82), (-3247));
      assertEquals(0, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {66.0, 924.7283338535548, 120.0, 66.0, 97.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '\"';
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '\u0000';
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '\"';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-3729);
      doubleArray0[3] = (double) (-3729);
      int int1 = ArrayUtils.indexOf(doubleArray0, 924.7283338535548);
      assertArrayEquals(new double[] {34.0, (-1.0), (-3729.0), (-3729.0)}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(4, doubleArray0.length);
      
      Object object0 = ArrayUtils.get(objectArray0, (-1), objectArray0[0]);
      assertEquals('\u0000', object0);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, (-1), 1, (-82));
      assertEquals(6, objectArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)99;
      shortArray0[1] = (short) (-1757);
      shortArray0[2] = (short)611;
      shortArray0[3] = (short) (-41);
      shortArray0[4] = (short)3;
      shortArray0[5] = (short) (-2821);
      short[] shortArray1 = new short[7];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-41);
      shortArray1[1] = (short) (-2821);
      shortArray1[2] = (short) (-2821);
      shortArray1[3] = (short) (-1757);
      shortArray1[4] = (short)3;
      shortArray1[5] = (short) (-1757);
      shortArray1[6] = (short)99;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-41), (short) (-2821), (short) (-2821), (short) (-1757), (short)3, (short) (-1757), (short)99}, shortArray1);
      assertArrayEquals(new short[] {(short)99, (short) (-1757), (short)611, (short) (-41), (short)3, (short) (-2821)}, shortArray0);
      assertFalse(boolean0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[17];
      charArray0[0] = 'H';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(17, charArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)65;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)6);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)6, (byte)6, (byte)5, (byte)65}, byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(17, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 3914L;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)65;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {(byte)29, (byte) (-52), (byte) (-1), (byte)5, (byte)6, (byte)65}, byteArray0);
      assertTrue(boolean0);
      assertEquals(6, byteArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = '@';
      charArray0[2] = '<';
      charArray0[3] = 'o';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertArrayEquals(new char[] {'K', '@', '<', 'o'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'y');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'y'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-631);
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1634), 515);
      assertArrayEquals(new int[] {1, (-631), 0}, intArray0);
      assertArrayEquals(new int[] {1, (-631), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray1, 'y');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'y'}, charArray1);
      assertArrayEquals(new char[] {'y', 'y'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray2.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 0, (-1740), 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(3, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 288);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'y');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'y'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 0, (-1740), 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(3, booleanArray0.length);
      
      BitSet bitSet0 = null;
      try {
        bitSet0 = new BitSet((-1634));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -1634
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[25];
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Boolean boolean4 = new Boolean("<O");
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean4);
      assertFalse(boolean5);
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.valueOf("<O");
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean4));
      assertNotNull(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean4));
      assertNotNull(boolean7);
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = Boolean.valueOf((boolean) boolean3);
      assertFalse(boolean8);
      assertTrue(boolean3.equals((Object)boolean4));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean7));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean1));
      assertNotNull(boolean8);
      
      booleanArray0[7] = boolean8;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean0);
      assertNotNull(booleanArray1);
      assertEquals(25, booleanArray0.length);
      assertEquals(25, booleanArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '{';
      floatArray0[2] = (float) '`';
      boolean boolean9 = ArrayUtils.contains(floatArray0, 69.0F);
      assertArrayEquals(new float[] {123.0F, 0.0F, 96.0F}, floatArray0, 0.01F);
      assertFalse(boolean9);
      assertFalse(boolean9 == boolean0);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.shift(booleanArray1, 78, 78, 78);
      assertFalse(boolean0 == boolean9);
      assertEquals(25, booleanArray0.length);
      assertEquals(25, booleanArray1.length);
      
      org.evosuite.runtime.Random.setNextRandom(9);
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, (Object) null, 78);
      assertEquals(24, int0);
      assertEquals(25, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '`';
      intArray0[1] = 78;
      intArray0[2] = 285;
      intArray0[3] = (int) '`';
      intArray0[4] = 24;
      intArray0[5] = (int) '{';
      intArray0[6] = (int) '{';
      intArray0[7] = 24;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2704, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2704, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[25];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[3] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("<O");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[5] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[6] = boolean3;
      Boolean boolean4 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean4);
      assertFalse(boolean0.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      booleanArray0[7] = boolean4;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '{';
      floatArray0[2] = (float) '`';
      boolean boolean5 = ArrayUtils.contains(floatArray0, 69.0F);
      assertArrayEquals(new float[] {123.0F, 0.0F, 96.0F}, floatArray0, 0.01F);
      assertFalse(boolean5);
      assertEquals(3, floatArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom(9);
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, (Object) null, 78);
      assertEquals(24, int0);
      assertEquals(25, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '`';
      intArray0[1] = 78;
      intArray0[2] = 285;
      intArray0[3] = (int) '`';
      intArray0[4] = 24;
      intArray0[5] = (int) '{';
      intArray0[6] = (int) '`';
      intArray0[7] = 24;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2704, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2704, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 65536;
      int[] intArray0 = new int[4];
      int int1 = (-1);
      intArray0[0] = (-1);
      intArray0[1] = 65536;
      intArray0[2] = 65536;
      intArray0[3] = 65536;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(65536, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65536, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Short short0 = new Short((short) (-2765));
      assertEquals((short) (-2765), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)11);
      assertEquals((short)11, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[1];
      Short short3 = new Short((short) (-1065));
      assertEquals((short) (-1065), (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      
      shortArray0[0] = short3;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'X');
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)19);
      assertArrayEquals(new byte[] {(byte) (-58)}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-3805L), (int) (short)11);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-1065);
      intArray0[1] = (int) 'X';
      intArray0[2] = (int) 'X';
      intArray0[3] = (-2188);
      ArrayUtils.shift(intArray0, (-2188), (-2146641332), 3314);
      assertArrayEquals(new int[] {(-1065), 88, 88, (-2188)}, intArray0);
      assertEquals(4, intArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 818.0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1414);
      longArray0[1] = (long) (-1414);
      longArray0[2] = (long) (-1414);
      doubleArray0[1] = (double) (-1414);
      longArray0[4] = (long) (-1414);
      ArrayUtils.swap(longArray0, 533, (-1414));
      assertArrayEquals(new long[] {(-1414L), (-1414L), (-1414L), 0L, (-1414L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = '[';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {(-1414L), (-1414L), (-1414L), 0L, (-1414L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-405.53));
      assertArrayEquals(new double[] {818.0, (-1414.0), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
      
      boolean[] booleanArray2 = new boolean[8];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = false;
      booleanArray2[3] = false;
      booleanArray2[4] = false;
      booleanArray2[5] = true;
      booleanArray2[6] = false;
      booleanArray2[7] = false;
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurrences(booleanArray2, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray3));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertEquals(8, booleanArray2.length);
      assertEquals(5, booleanArray3.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 38);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, true}, booleanArray0));
      assertEquals(3, int0);
      assertEquals(7, booleanArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[2] = '5';
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'&', '&', '5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0, 701.4F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '@';
      intArray0[1] = (int) '@';
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {64, 64}, intArray0);
      assertArrayEquals(new int[] {64, 64, 64, 64}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      float[] floatArray3 = ArrayUtils.addAll(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertNotNull(floatArray3);
      assertSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray2, floatArray3);
      assertSame(floatArray2, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      
      Object[] objectArray0 = ArrayUtils.removeElements((Object[]) floatArray0, (Object[]) floatArray0);
      assertNotNull(objectArray0);
      assertNotSame(floatArray0, objectArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, objectArray0.length);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) '&';
      characterArray0[1] = (Character) '&';
      Character character0 = Character.valueOf('5');
      assertEquals('5', (char)character0);
      assertNotNull(character0);
      
      characterArray0[2] = character0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(characterArray0, (-1406), characterArray0[1]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1406, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('^');
      assertEquals('^', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('E');
      assertEquals('E', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) character1);
      assertFalse(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)character0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(2, characterArray1.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)24;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)24, (byte)24, (byte)24}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Long long0 = new Long((byte)24);
      assertEquals(24L, (long)long0);
      assertNotNull(long0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'E';
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {69L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(7, longArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (int) character1, 12);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)character0));
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (int) (byte)24, 12);
      assertNull(charArray0);
      
      ArrayUtils.shift((Object[]) characterArray1, (int) (byte)24);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)character0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(2, characterArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray1, (Object) null, (int) character0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      assertFalse(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)character0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(bitSet0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(2, characterArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)24;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)14, (-2010));
      assertArrayEquals(new short[] {(short)24}, shortArray0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray0, (byte)24);
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)24, (byte)24, (byte)24}, byteArray0);
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)24, (byte)24}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray2.length);
      
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) '^';
      floatArray1[1] = (float) (byte)24;
      floatArray1[2] = (float) (char)character1;
      floatArray1[3] = (float) 12;
      floatArray1[4] = (float) 69L;
      floatArray1[5] = (float) (byte)24;
      floatArray1[6] = (float) (byte)24;
      floatArray1[7] = (float) 'E';
      floatArray1[8] = (float) (byte)24;
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray1, (float) (byte)24);
      assertArrayEquals(new float[] {94.0F, 94.0F, 12.0F, 69.0F, 69.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {94.0F, 24.0F, 94.0F, 12.0F, 69.0F, 24.0F, 24.0F, 69.0F, 24.0F}, floatArray1, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertEquals(5, floatArray2.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 222;
      floatArray0[1] = (float) 222;
      floatArray0[2] = (float) 222;
      floatArray0[3] = (float) 222;
      floatArray0[4] = (float) 222;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 3313L;
      floatArray1[1] = (float) 3313L;
      floatArray1[2] = (float) 222;
      floatArray1[3] = (float) 3313L;
      floatArray1[4] = (float) 2;
      int int0 = ArrayUtils.indexOf(floatArray1, (float) 3313L, (-2855));
      assertArrayEquals(new float[] {3313.0F, 3313.0F, 222.0F, 3313.0F, 2.0F}, floatArray1, 0.01F);
      assertEquals(0, int0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)794;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)794, (-2463));
      assertArrayEquals(new short[] {(short)794}, shortArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      ArrayUtils.reverse(byteArray0, 2, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)124}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)124;
      objectArray0[1] = (Object) (byte)124;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte)124;
      objectArray0[5] = (Object) (byte)0;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(6, objectArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, (int) (byte)124, (-992));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray2.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.util.BitSet";
      stringArray0[1] = "OCOqhr+I|JN:r:";
      boolean boolean2 = ArrayUtils.isArrayIndexValid(stringArray0, 757);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse((long[]) null);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-5505), floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 0.0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      byte byte0 = (byte)0;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      ArrayUtils.reverse(byteArray0, (int) (byte)0, 1514);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      bitSet0.flip((int) (byte)0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)0;
      intArray1[1] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-5505), intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5505, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-963.73694F), 27);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '#';
      charArray0[2] = '-';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) 'k';
      intArray0[2] = (int) 'k';
      intArray0[8] = 0;
      intArray0[4] = (-1);
      intArray0[5] = (int) '#';
      intArray0[6] = 0;
      intArray0[7] = (int) '#';
      intArray0[8] = (-631);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 35, 8);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {35, 107, 107, 0, (-1), 35, 0, 35, (-631)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {35, 107, 107, 0, (-1), 35, 0, 35, (-631)}, intArray0);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 107;
      doubleArray0[1] = (double) 35;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1), 8, 35.0);
      assertArrayEquals(new double[] {107.0, 35.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences((double[]) null, (double) 107);
      assertNull(doubleArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-631);
      longArray0[2] = (long) 35;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 107;
      longArray0[5] = (long) 107;
      longArray0[6] = (long) '#';
      longArray0[7] = (long) (-631);
      longArray0[8] = (long) '-';
      ArrayUtils.reverse(longArray0, (-114), 8);
      assertArrayEquals(new long[] {(-631L), 35L, 107L, 107L, 0L, 35L, (-631L), (-1L), 45L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2100;
      shortArray0[1] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((-430), (int) (short)0);
      assertNotNull(intStream0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)2100;
      floatArray0[1] = (float) (-430);
      floatArray0[2] = (float) (short)2100;
      floatArray0[3] = (float) (short)2100;
      floatArray0[4] = (float) (short)2100;
      floatArray0[5] = (float) (short)2100;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2100.0F, (-430.0F), 2100.0F, 2100.0F, 2100.0F, 2100.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)2100;
      longArray0[1] = (-3963L);
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)2100;
      boolean boolean1 = ArrayUtils.contains(longArray0, (-1021L));
      assertArrayEquals(new long[] {2100L, (-3963L), 0L, 2100L}, longArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, longArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-3428);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)2100;
      intArray0[3] = (int) (short)2100;
      intArray0[4] = (-430);
      int[] intArray1 = ArrayUtils.insert((int) (short)0, intArray0, intArray0);
      assertArrayEquals(new int[] {(-3428), 0, 2100, 2100, (-430)}, intArray0);
      assertArrayEquals(new int[] {(-3428), 0, 2100, 2100, (-430), (-3428), 0, 2100, 2100, (-430)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertArrayEquals(new int[] {(-3428), 0, 2100, 2100, (-430)}, intArray0);
      assertArrayEquals(new int[] {(-3428), 0, 2100, 2100, (-430), (-3428), 0, 2100, 2100, (-430)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertEquals(10, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 818.0;
      doubleArray0[2] = 365.3596;
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      Boolean boolean0 = new Boolean("Array and element cannot both be null");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("maxWith cannot be negative");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) ' ';
      longArray0[1] = (long) ' ';
      longArray0[2] = (long) ' ';
      longArray0[3] = (long) '\"';
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) boolean0;
      objectArray0[1] = (Object) "Array and element cannot both be null";
      objectArray0[2] = (Object) ' ';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 32L;
      boolean boolean2 = ArrayUtils.contains(objectArray0, objectArray0[1]);
      assertTrue(boolean2);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 5375.4047181427;
      doubleArray0[3] = 1183.644;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3550.3);
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1, (-2750.4));
      assertArrayEquals(new double[] {0.0, 0.0, 5375.4047181427, 1183.644, 0.0, 0.0, (-3550.3), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2750.4), 0.0, 5375.4047181427, 1183.644, 0.0, 0.0, (-3550.3), 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(1);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      longArray0[2] = long0;
      Long long1 = new Long((long) longArray0[2]);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(7, longArray0.length);
      
      longArray0[4] = long1;
      Long long2 = new Long(0L);
      assertEquals(0L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      doubleArray0[3] = (double) (long)long2;
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 5375.4047181427, 0.0, 0.0, 0.0, (-3550.3), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2750.4), 0.0, 5375.4047181427, 1183.644, 0.0, 0.0, (-3550.3), 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(19, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (long)longArray0[2];
      floatArray0[2] = (float) (long)longArray0[4];
      floatArray0[3] = (-2184.4F);
      ArrayUtils.shift(floatArray0, 1);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 1.0F, (-2184.4F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) longArray0[2];
      objectArray0[1] = (Object) long0;
      objectArray0[2] = (Object) long0;
      objectArray0[3] = (Object) long1;
      objectArray0[4] = (Object) long2;
      objectArray0[5] = (Object) long0;
      Double[] doubleArray3 = new Double[2];
      Double double0 = new Double((double) longArray0[4]);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(7, longArray0.length);
      
      doubleArray3[0] = double0;
      doubleArray3[1] = (Double) 0.0;
      Double double1 = ArrayUtils.get(doubleArray3, 16);
      assertNull(double1);
      assertEquals(2, doubleArray3.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 975.23978513475, 3);
      assertArrayEquals(new double[] {0.0, 0.0, 5375.4047181427, 0.0, 0.0, 0.0, (-3550.3), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(bitSet0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(9, doubleArray0.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 5375.4047181427, 0.0, 0.0, 0.0, (-3550.3), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNull(object0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(9, doubleArray0.length);
      
      objectArray0[6] = null;
      objectArray0[7] = (Object) long0;
      objectArray0[8] = (Object) 0.0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[5]);
      assertTrue(boolean0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (-1251);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (-1251);
      intArray0[4] = (int) (byte) (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), (int) (byte) (-1));
      assertArrayEquals(new int[] {(-1), (-1251), (-1), (-1251), (-1), 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = ArrayUtils.toPrimitive((Object) (-1));
      assertEquals((-1), object0);
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = objectArray0[0];
      objectArray0[3] = (Object) (-1251);
      objectArray0[5] = (Object) (-1);
      objectArray0[6] = (Object) (-1);
      ArrayUtils.swap(objectArray0, 0, (-1251), (-1));
      assertEquals(8, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 3313L, 222);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 222;
      floatArray0[1] = (float) 222;
      floatArray0[2] = (float) 222;
      floatArray0[3] = (float) 222;
      floatArray0[4] = (float) 222;
      floatArray0[5] = (-822.6674F);
      floatArray0[6] = (float) 222;
      floatArray0[7] = (float) 222;
      floatArray0[8] = (float) 3313L;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {222.0F, 222.0F, 222.0F, 222.0F, (-822.6674F), 222.0F, 222.0F, 3313.0F, 222.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {222.0F, 222.0F, 222.0F, 222.0F, (-822.6674F), 222.0F, 222.0F, 3313.0F, 222.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {222.0F, 222.0F, 222.0F, 222.0F, (-822.6674F), 222.0F, 222.0F, 3313.0F, 222.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Float float0 = new Float((double) 1959);
      assertEquals(1959.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(848.5330940875);
      assertEquals(848.5331F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Character character0 = new Character('O');
      assertEquals('O', (char)character0);
      assertNotNull(character0);
      
      AbstractMap.SimpleImmutableEntry<Character, Float> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Character, Float>(character0, float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Character, Float> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Character, Float>(abstractMap_SimpleImmutableEntry0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(abstractMap_SimpleEntry0);
      
      Double double0 = new Double((-1636.18825446));
      assertEquals((-1636.18825446), (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) character0, 1959);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'O';
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-4361);
      floatArray0[3] = (float) '5';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-4361));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4361, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[2] = '5';
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Double double0 = new Double(1770.0);
      assertEquals(1770.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = Double.valueOf(1.5);
      assertEquals(1.5, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double2 = new Double(0.0F);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1770.0);
      assertEquals(1770.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      doubleArray0[4] = double1;
      doubleArray0[5] = double1;
      doubleArray0[6] = double1;
      doubleArray0[7] = double1;
      doubleArray0[8] = double0;
      Double double4 = ArrayUtils.get(doubleArray0, 3371);
      assertNull(double4);
      assertEquals(9, doubleArray0.length);
      
      String[] stringArray0 = ArrayUtils.removeElement((String[]) null, (Object) null);
      assertNull(stringArray0);
      
      ArrayUtils.reverse((Object[]) null, 1656, Integer.MAX_VALUE);
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) null, "Array element ");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      charArray0[4] = '&';
      charArray0[2] = '5';
      charArray0[6] = 'e';
      charArray0[7] = '@';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'e');
      assertArrayEquals(new char[] {'&', '&', '5', 'e', '&', '\u0000', 'e', '@'}, charArray0);
      assertArrayEquals(new char[] {'e', '&', '&', '5', 'e', '&', '\u0000', 'e', '@'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'e';
      doubleArray0[1] = (double) '5';
      charArray0[2] = 'e';
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'&', '&', 'e', 'e', '&', '\u0000', 'e', '@'}, charArray0);
      assertFalse(boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertEquals(8, charArray0.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1639);
      intArray0[1] = (-1639);
      intArray0[2] = (-2181);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)605;
      ArrayUtils.swap(shortArray0, (-2181), (-1639), 2);
      assertArrayEquals(new short[] {(short)605}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift(intArray0, (-2181));
      assertArrayEquals(new int[] {(-1639), (-1639), (-2181)}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1639, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-873), (-823));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2145659106);
      intArray0[1] = (-873);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-823);
      longArray0[1] = (long) (-873);
      longArray0[2] = (long) (-2145659106);
      longArray0[3] = (long) (-2145659106);
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-2145659106);
      longArray1[1] = (long) (-873);
      longArray1[2] = (long) (-823);
      longArray1[3] = (long) (-2145659106);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertArrayEquals(new long[] {(-823L), (-873L), (-2145659106L), (-2145659106L)}, longArray0);
      assertArrayEquals(new long[] {(-2145659106L), (-873L), (-823L), (-2145659106L)}, longArray1);
      assertTrue(boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1089, (-120));
      assertArrayEquals(new int[] {(-2145659106), (-873)}, intArray0);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) (-823L);
      floatArray0[2] = (float) (-2145659106);
      floatArray0[3] = (float) (-823);
      floatArray0[4] = (float) (-2145659106);
      floatArray0[5] = 938.2F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (float) (-2145659106L);
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {Float.NaN, (-823.0F), (-2.14565914E9F), (-823.0F), (-2.14565914E9F), 938.2F, (-1.0F), (-2.14565914E9F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean2 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '\"';
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '\u0000';
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-";
      stringArray0[1] = "-";
      stringArray0[3] = "-";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '\"';
      doubleArray0[1] = (double) (-3729);
      doubleArray0[2] = (-234.803137234);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (-3729));
      assertArrayEquals(new double[] {34.0, (-3729.0), (-234.803137234)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {34.0, (-234.803137234)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1653.50112442);
      assertArrayEquals(new double[] {34.0, (-3729.0), (-234.803137234)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {34.0, (-234.803137234)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {34.0, (-234.803137234)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) stringArray0, (Object) boolean1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(bitSet0);
      assertEquals(9, stringArray0.length);
      
      ArrayUtils.shift(intArray0, (-1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.shift(intArray0, 1399);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1399;
      floatArray0[1] = (float) '\"';
      floatArray0[2] = (float) '\"';
      floatArray0[3] = (float) '\"';
      floatArray0[4] = (float) (-3729);
      floatArray0[5] = (float) 1399;
      floatArray0[6] = (float) '\"';
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1871.4355F);
      assertArrayEquals(new float[] {1399.0F, 34.0F, 34.0F, 34.0F, (-3729.0F), 1399.0F, 34.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1399.0F, 34.0F, 34.0F, 34.0F, (-3729.0F), 1399.0F, 34.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-66);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)2, (byte) (-1), (byte)88, (byte) (-102), (byte) (-66)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = (float) (byte)88;
      floatArray0[3] = (float) (byte) (-1);
      floatArray0[4] = (float) (short)0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {2.0F, 2.0F, 88.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-377), 3414.6516F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -377, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) stringArray0, (Object) null);
      assertEquals((-1), int0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)591;
      shortArray0[2] = (short) (-222);
      shortArray0[3] = (short) (-892);
      shortArray0[4] = (short) (-2861);
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-3136);
      shortArray0[7] = (short)15;
      shortArray0[8] = (short) (-1);
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1, (-3761));
      assertArrayEquals(new short[] {(short)1, (short)591, (short) (-222), (short) (-892), (short) (-2861), (short)1, (short) (-3136), (short)15, (short) (-1)}, shortArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(9, shortArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-89), (-831));
      assertArrayEquals(new byte[] {(byte) (-89)}, byteArray0);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.shift(floatArray0, (int) (short)1, 53, (int) (short) (-2861));
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, (-1.0F), (-1.0F), (-1.0F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      char char0 = '^';
      Character character0 = Character.valueOf('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      characterArray0[1] = character0;
      characterArray0[2] = (Character) char0;
      Character[] characterArray1 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(char0);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) char0;
      doubleArray0[1] = (double) char0;
      doubleArray0[2] = (double) char0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {94.0, 94.0, 94.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = (Byte) (byte)19;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-67));
      assertArrayEquals(new byte[] {(byte)19}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) char0;
      intArray0[1] = (int) (byte) (-67);
      intArray0[2] = (int) (byte) (-67);
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {94, (-67), (-67)}, intArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-627), 1101, 1655);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-627);
      doubleArray0[2] = (double) 1101;
      doubleArray0[3] = (double) 1101;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-627.0), 1101.0, 1101.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-32251), (int) (short) (-32251));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-32251);
      intArray0[1] = (int) (short) (-32251);
      intArray0[2] = 1655;
      intArray0[3] = (-758);
      intArray0[4] = 1655;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 1514, (-1));
      assertArrayEquals(new int[] {(-32251), (-32251), 1655, (-758), 1655, 0}, intArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, (-627.0), 1101.0, 1101.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-627.0), 1101.0, 1101.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      int[] intArray1 = ArrayUtils.add(intArray0, 120);
      assertArrayEquals(new int[] {(-32251), (-32251), 1655, (-758), 1655, 0, 120}, intArray1);
      assertArrayEquals(new int[] {(-32251), (-32251), 1655, (-758), 1655, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(6, intArray0.length);
      
      Integer integer0 = new Integer(1235);
      assertEquals(1235, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "@`");
      assertEquals("1235", string0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(string0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray1, intArray1);
      assertArrayEquals(new int[] {(-32251), (-32251), 1655, (-758), 1655, 0, 120}, intArray1);
      assertArrayEquals(new int[] {(-32251), (-32251), 1655, (-758), 1655, 0}, intArray0);
      assertTrue(boolean1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(6, intArray0.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, byteArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf((Object[]) null, (Object) "@`", (-758));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, 801);
      assertArrayEquals(new int[] {(-32251), (-32251), 1655, (-758), 1655, 0, 120}, intArray1);
      assertArrayEquals(new int[] {(-32251), (-32251), 1655, (-758), 1655, 0}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(bitSet0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-3634));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      int int0 = ArrayUtils.indexOf((char[]) null, '$', (-203));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)51;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)112, (byte)90}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)51;
      shortArray0[1] = (short) (byte)112;
      shortArray0[2] = (short) (byte)51;
      shortArray0[3] = (short) (byte)112;
      shortArray0[4] = (short) (byte)90;
      shortArray0[5] = (short) (byte)112;
      shortArray0[6] = (short) (byte)112;
      shortArray0[7] = (short) (byte)90;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte)90, (-1668));
      assertArrayEquals(new short[] {(short)51, (short)112, (short)51, (short)112, (short)90, (short)112, (short)112, (short)90}, shortArray0);
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{4, 7}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(8, shortArray0.length);
      
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)112, (byte)51}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = ']';
      charArray0[1] = '9';
      charArray0[5] = '9';
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) (-105);
      floatArray1[1] = (float) 0;
      floatArray1[2] = (-1988.7599F);
      floatArray1[3] = (float) '\u0000';
      floatArray1[4] = (float) ']';
      floatArray1[5] = (float) '9';
      ArrayUtils.shift(floatArray1, (int) (short)0, 3212, (-105));
      assertArrayEquals(new float[] {0.0F, 93.0F, 57.0F, (-105.0F), 0.0F, (-1988.7599F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, 57.0F, 2146742297);
      assertArrayEquals(new float[] {0.0F, 93.0F, 57.0F, (-105.0F), 0.0F, (-1988.7599F)}, floatArray1, 0.01F);
      assertEquals(2, int0);
      assertEquals(6, floatArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) '9';
      doubleArray0[2] = (double) 93.0F;
      doubleArray0[3] = (double) '9';
      doubleArray0[4] = (double) (-105);
      doubleArray0[5] = (double) 3212;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) '9';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 57.0);
      assertArrayEquals(new double[] {0.0, 57.0, 93.0, 57.0, (-105.0), 3212.0, 0.0, 0.0, 57.0}, doubleArray0, 0.01);
      assertEquals("{1, 3, 8}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) stringArray0, (Object) null);
      assertEquals((-1), int0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)591;
      shortArray0[2] = (short) (-222);
      shortArray0[3] = (short) (-892);
      shortArray0[4] = (short) (-2861);
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-3136);
      shortArray0[7] = (short)15;
      shortArray0[8] = (short) (-1);
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1, (-3761));
      assertArrayEquals(new short[] {(short)1, (short)591, (short) (-222), (short) (-892), (short) (-2861), (short)1, (short) (-3136), (short)15, (short) (-1)}, shortArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(9, shortArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-89), (-831));
      assertArrayEquals(new byte[] {(byte) (-89)}, byteArray0);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-222);
      doubleArray0[1] = (double) (short) (-2861);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2612.0);
      assertArrayEquals(new double[] {(-222.0), (-2861.0)}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1800L);
      longArray0[1] = 0L;
      longArray0[2] = (-402L);
      longArray0[3] = (-2439L);
      longArray0[4] = 348L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-1800L), 0L, (-402L), (-2439L), 348L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-402L);
      doubleArray0[1] = (double) (-1800L);
      doubleArray0[2] = (double) (-402L);
      Float float0 = new Float((float) (-402L));
      assertEquals((-402.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, 1091.27F);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 153.1488901891, 55, (double) 2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-1271.41));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1271.41)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 55;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 55;
      floatArray0[6] = (float) 2;
      floatArray0[7] = (float) 2;
      floatArray0[8] = (float) 55;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 55.0F, (-1.0F), 55.0F, 2.0F, 2.0F, 55.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-3278);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1533);
      shortArray0[6] = (short)14;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-3278), (short)2, (short)0, (short) (-1533), (short)14, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      assertEquals(10, shortArray0.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)2, 2144971971);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-3278), (short)2, (short)0, (short) (-1533), (short)14, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = '8';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      charArray0[4] = ')';
      charArray0[5] = 'a';
      charArray0[6] = 'p';
      Short[] shortArray1 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-3278), (short)2, (short)0, (short) (-1533), (short)14, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-3278), (short)2, (short)0, (short) (-1533), (short)14, (short)0, (short)0, (short)0}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(10, shortArray0.length);
      assertEquals(10, shortArray2.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-3278);
      longArray0[1] = (long) (short)2;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (short)0);
      assertArrayEquals(new long[] {(-3278L), 2L}, longArray0);
      assertArrayEquals(new long[] {0L, (-3278L), 2L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-3278);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1533);
      shortArray0[6] = (short)14;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-3278), (short)2, (short)0, (short) (-1533), (short)14, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      assertEquals(10, shortArray0.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)2, 2144971971);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-3278), (short)2, (short)0, (short) (-1533), (short)14, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = '8';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      charArray0[4] = ')';
      charArray0[5] = 'a';
      charArray0[6] = 'p';
      Short[] shortArray1 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-3278), (short)2, (short)0, (short) (-1533), (short)14, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-3278), (short)2, (short)0, (short) (-1533), (short)14, (short)0, (short)0, (short)0}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(10, shortArray0.length);
      assertEquals(10, shortArray2.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-3278);
      longArray0[1] = (long) (short)2;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (short)0);
      assertArrayEquals(new long[] {(-3278L), 2L}, longArray0);
      assertArrayEquals(new long[] {0L, (-3278L), 2L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'x';
      charArray0[2] = 'B';
      Double double0 = new Double((-90.2138181340827));
      assertEquals((-90.2138181340827), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(103.5);
      assertEquals(103.5, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(103.5);
      assertEquals(103.5, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0.7);
      assertEquals(0.7, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 0, 488);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-4));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      
      Double double4 = new Double((-3100.32130094476));
      assertEquals((-3100.32130094476), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray0 = ArrayUtils.removeAllOccurrences((Double[]) null, double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNull(doubleArray0);
      
      ArrayUtils.shift((Object[]) null, (-1), 0, (-1032784240));
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-4));
      assertEquals((-4), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = Integer.getInteger((String) null, integer2);
      assertEquals(0, (int)integer3);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[2] = integer3;
      try { 
        Integer.valueOf((String) null, (-1032784240));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-2146645224), (-2146645224), 1073741824);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.shift(booleanArray0, (-2146645224));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)25;
      shortArray0[2] = (short)1232;
      shortArray0[3] = (short)3429;
      shortArray0[4] = (short) (-1773);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)25, (short)1232, (short)3429, (short) (-1773)}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)25, (short)1232, (short)3429, (short) (-1773)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[7];
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) true;
      booleanArray1[4] = (Boolean) false;
      booleanArray1[6] = (Boolean) false;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-2146645224), (-2146645224), 1073741824);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.shift(booleanArray0, (-2146645224));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)25;
      shortArray0[2] = (short)1232;
      shortArray0[3] = (short)3429;
      shortArray0[4] = (short) (-1773);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)25, (short)1232, (short)3429, (short) (-1773)}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)25, (short)1232, (short)3429, (short) (-1773)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[7];
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) true;
      booleanArray1[4] = (Boolean) false;
      Boolean boolean0 = new Boolean((boolean) booleanArray1[1]);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      assertEquals(7, booleanArray1.length);
      
      booleanArray1[6] = (Boolean) true;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'o';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'\\', 'o'}, charArray0);
      assertArrayEquals(new char[] {'\\', 'o'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)4;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-100));
      assertArrayEquals(new byte[] {(byte)17, (byte)91, (byte) (-70), (byte)4}, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-70);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-70)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-70);
      doubleArray0[1] = (double) (byte)17;
      doubleArray0[2] = (double) (byte)4;
      doubleArray0[3] = (double) (byte)91;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)4;
      doubleArray0[6] = (double) (byte)91;
      doubleArray0[7] = (double) (byte)4;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short) (-70), (int) (byte)0, 635.58);
      assertArrayEquals(new double[] {(-70.0), 17.0, 4.0, 91.0, 0.0, 4.0, 91.0, 4.0}, doubleArray0, 0.01);
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-116);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)119;
      doubleArray0[1] = (double) (byte) (-116);
      doubleArray0[2] = (double) (byte) (-85);
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)119;
      byteArray1[1] = (byte) (-85);
      byteArray1[2] = (byte)68;
      byteArray1[3] = (byte) (-85);
      byteArray1[4] = (byte) (-116);
      byteArray1[5] = (byte) (-85);
      byteArray1[6] = (byte) (-85);
      byteArray1[7] = (byte)119;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray1, byteArray1);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-85), (byte)68, (byte) (-85), (byte) (-116), (byte) (-85), (byte) (-85), (byte)119}, byteArray1);
      assertTrue(boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1652);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)119;
      shortArray0[1] = (short) (byte) (-85);
      shortArray0[2] = (short) (byte) (-116);
      shortArray0[3] = (short) (byte) (-85);
      shortArray0[4] = (short) (byte) (-85);
      shortArray0[5] = (short) (byte)119;
      shortArray0[6] = (short) (byte) (-116);
      shortArray0[7] = (short)970;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte)68, (int) (byte) (-116));
      assertArrayEquals(new short[] {(short)119, (short) (-85), (short) (-116), (short) (-85), (short) (-85), (short)119, (short) (-116), (short)970}, shortArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-844.407F);
      floatArray0[1] = 1066.445F;
      floatArray0[2] = 132.3915F;
      floatArray0[3] = (-2595.06F);
      floatArray0[4] = 1120.0F;
      floatArray0[5] = (-1988.7599F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 132.3915F, 1);
      assertArrayEquals(new float[] {(-844.407F), 1066.445F, 132.3915F, (-2595.06F), 1120.0F, (-1988.7599F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(6, floatArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 132.3915F;
      objectArray0[1] = (Object) 1066.445F;
      objectArray0[2] = (Object) (-844.407F);
      objectArray0[3] = (Object) (-1988.7599F);
      objectArray0[4] = (Object) (-2595.06F);
      objectArray0[5] = (Object) (-2595.06F);
      objectArray0[6] = (Object) 132.3915F;
      objectArray0[7] = (Object) 132.3915F;
      objectArray0[8] = (Object) 1120.0F;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2612;
      shortArray0[1] = (short)2612;
      short[] shortArray1 = ArrayUtils.addAll((short[]) null, shortArray0);
      assertArrayEquals(new short[] {(short)2612, (short)2612}, shortArray0);
      assertArrayEquals(new short[] {(short)2612, (short)2612}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Character character0 = new Character('3');
      assertEquals('3', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('3');
      assertEquals('3', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 98;
      intArray0[1] = (int) 'y';
      intArray0[2] = (int) 'y';
      intArray0[3] = (int) '3';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {98, 121, 121, 51}, intArray0);
      assertArrayEquals(new int[] {98, 121, 121, 51}, intArray1);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 98;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 51, 121);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, 98);
      assertArrayEquals(new int[] {98, 121, 121, 51}, intArray0);
      assertArrayEquals(new int[] {98, 121, 121, 51}, intArray1);
      assertEquals(0, int0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)2;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)79, (-435));
      assertArrayEquals(new byte[] {(byte)33, (byte)2}, byteArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(2, byteArray0.length);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(2.133538948E9);
      assertEquals(2.13353894E9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals(2.13353894E9F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(3, floatArray0.length);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) floatArray0[1]);
      assertEquals(2.13353894E9F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(3, floatArray0.length);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      char char0 = 'o';
      char char1 = 'n';
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 'n';
      doubleArray0[2] = (double) 'o';
      doubleArray0[3] = (double) (float)floatArray0[1];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 2.133538944E9, 111.0, 110.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2454;
      shortArray0[1] = (short) (-7);
      shortArray0[2] = (short) (-1325);
      shortArray0[3] = (short)0;
      ArrayUtils.swap(shortArray0, 12, 25, (int) (short) (-7));
      assertArrayEquals(new short[] {(short)2454, (short) (-7), (short) (-1325), (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      MutableInt mutableInt0 = new MutableInt(12);
      assertEquals(12, (int)mutableInt0.getValue());
      assertEquals((byte)12, mutableInt0.byteValue());
      assertEquals(12, (int)mutableInt0.toInteger());
      assertEquals("12", mutableInt0.toString());
      assertEquals(12, mutableInt0.intValue());
      assertEquals((short)12, mutableInt0.shortValue());
      assertEquals(12.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(12.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(12L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndAdd((Number) (short)0);
      assertEquals(12, (int)mutableInt0.getValue());
      assertEquals((byte)12, mutableInt0.byteValue());
      assertEquals(12, (int)mutableInt0.toInteger());
      assertEquals("12", mutableInt0.toString());
      assertEquals(12, mutableInt0.intValue());
      assertEquals((short)12, mutableInt0.shortValue());
      assertEquals(12.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(12.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(12L, mutableInt0.longValue());
      assertEquals(12, int0);
      
      mutableInt0.decrement();
      assertEquals(11, (int)mutableInt0.getValue());
      assertEquals(11, (int)mutableInt0.toInteger());
      assertEquals((byte)11, mutableInt0.byteValue());
      assertEquals("11", mutableInt0.toString());
      assertEquals(11.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(11, mutableInt0.intValue());
      assertEquals((short)11, mutableInt0.shortValue());
      assertEquals(11.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(11L, mutableInt0.longValue());
      
      int int1 = mutableInt0.getAndAdd((-2623));
      assertEquals((byte) (-52), mutableInt0.byteValue());
      assertEquals((-2612), (int)mutableInt0.toInteger());
      assertEquals((short) (-2612), mutableInt0.shortValue());
      assertEquals("-2612", mutableInt0.toString());
      assertEquals((-2612L), mutableInt0.longValue());
      assertEquals((-2612), (int)mutableInt0.getValue());
      assertEquals((-2612.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2612), mutableInt0.intValue());
      assertEquals((-2612.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals(11, int1);
      assertFalse(int1 == int0);
      
      mutableInt0.subtract(477);
      assertEquals((-3089), (int)mutableInt0.getValue());
      assertEquals((byte) (-17), mutableInt0.byteValue());
      assertEquals((-3089), (int)mutableInt0.toInteger());
      assertEquals((-3089.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3089.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3089), mutableInt0.intValue());
      assertEquals("-3089", mutableInt0.toString());
      assertEquals((short) (-3089), mutableInt0.shortValue());
      assertEquals((-3089L), mutableInt0.longValue());
      
      int int2 = mutableInt0.getAndDecrement();
      assertEquals((-3090), (int)mutableInt0.toInteger());
      assertEquals((-3090L), mutableInt0.longValue());
      assertEquals((-3090), (int)mutableInt0.getValue());
      assertEquals((byte) (-18), mutableInt0.byteValue());
      assertEquals("-3090", mutableInt0.toString());
      assertEquals((-3090.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3090.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-3090), mutableInt0.shortValue());
      assertEquals((-3090), mutableInt0.intValue());
      assertEquals((-3089), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals((-3090), (int)mutableInt0.toInteger());
      assertEquals((-3090L), mutableInt0.longValue());
      assertEquals((-3090), (int)mutableInt0.getValue());
      assertEquals((byte) (-18), mutableInt0.byteValue());
      assertEquals("-3090", mutableInt0.toString());
      assertEquals((-3090.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3090.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-3090), mutableInt0.shortValue());
      assertEquals((-3090), mutableInt0.intValue());
      assertEquals("-3090", mutableInt1.toString());
      assertEquals((-3090.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-3090), mutableInt1.intValue());
      assertEquals((-3090), (int)mutableInt1.getValue());
      assertEquals((-3090), (int)mutableInt1.toInteger());
      assertEquals((-3090.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((byte) (-18), mutableInt1.byteValue());
      assertEquals((short) (-3090), mutableInt1.shortValue());
      assertEquals((-3090L), mutableInt1.longValue());
      assertNotNull(mutableInt1);
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 5263.773;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (short)2454);
      assertArrayEquals(new double[] {2454.0, 5263.773, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5263.773, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)2454, 25, 697.52);
      assertArrayEquals(new double[] {5263.773, 0.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(bitSet0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int3 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true, true}, booleanArray0));
      assertEquals(2, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2607);
      intArray0[1] = (-1727);
      int int0 = 0;
      intArray0[3] = 0;
      intArray0[5] = (-2434);
      intArray0[6] = 2735;
      ArrayUtils.swap(intArray0, (-4295), (-3887));
      assertArrayEquals(new int[] {(-2607), (-1727), 0, 0, 0, (-2434), 2735, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[1] = integer0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 2841L);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      
      Character character0 = new Character(' ');
      assertEquals(' ', (char)character0);
      assertNotNull(character0);
      
      boolean boolean2 = ArrayUtils.isEquals(character0, character0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-155.5F);
      floatArray0[1] = (float) (-4295);
      floatArray0[2] = (float) (-2607);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) (-2607);
      floatArray0[6] = (float) 0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-1182.914F), (-1727));
      assertArrayEquals(new float[] {(-155.5F), (-4295.0F), (-2607.0F), 0.0F, 0.0F, (-2607.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), (-1251));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '%');
      assertArrayEquals(new char[] {'X', 'X', '\u0000', 'X', 'X'}, charArray0);
      assertArrayEquals(new char[] {'%', 'X', 'X', '\u0000', 'X', 'X'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(1, bitSet1.length());
      assertEquals("{0}", bitSet1.toString());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (byte) (-61), (-3154));
      assertEquals((-1), int0);
      
      ArrayUtils.shift(intArray0, (int) (byte)19, (-2954), (int) (byte) (-1));
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-7);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 5594, (int) (byte) (-7));
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)122, (byte) (-7)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)122, (byte) (-7)}, byteArray0);
      assertFalse(boolean1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(5, byteArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = 'H';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '6');
      assertArrayEquals(new char[] {'6', 'H'}, charArray0);
      assertEquals(0, int0);
      assertEquals(2, charArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)122, (byte) (-7)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(boolean2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      charArray0[2] = '5';
      Float float0 = new Float(924.3982F);
      assertEquals(924.3982F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(100.0);
      assertEquals(100.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-405.53));
      assertEquals((-405.53), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2524.262549006175));
      assertEquals((-2524.262549006175), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.7);
      assertEquals(0.7, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '@';
      longArray0[1] = (long) '&';
      longArray0[2] = (long) 'e';
      longArray0[3] = (long) '@';
      longArray0[4] = (long) '&';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1, 0);
      assertArrayEquals(new long[] {64L, 38L, 101L, 64L, 38L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, (int) '&');
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(1, int0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-2308), 9);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1171;
      shortArray0[1] = (short)2254;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)85);
      assertArrayEquals(new short[] {(short)1171, (short)2254}, shortArray0);
      assertArrayEquals(new short[] {(short)1171, (short)2254, (short)85}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)2254;
      floatArray0[1] = (float) (short)2254;
      floatArray0[2] = (float) (short)2254;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray1, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)1171, (short)2254}, shortArray0);
      assertArrayEquals(new short[] {(short)2254, (short)85, (short)1171}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = 'N';
      charArray0[2] = ';';
      int int0 = ArrayUtils.indexOf(charArray0, 'E');
      assertArrayEquals(new char[] {'(', 'N', ';'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-386.143747533615);
      doubleArray0[1] = (-629.516278);
      doubleArray0[2] = 107.0;
      doubleArray0[3] = (-1326.795636);
      doubleArray0[4] = (-1472.81323);
      doubleArray0[5] = 1770.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1334.299), 1965);
      assertArrayEquals(new double[] {(-386.143747533615), (-629.516278), 107.0, (-1326.795636), (-1472.81323), 1770.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'E';
      charArray0[2] = 'j';
      charArray0[3] = '9';
      charArray0[4] = 'E';
      charArray0[5] = '9';
      charArray0[6] = '9';
      charArray0[7] = 'E';
      charArray0[8] = 'E';
      ArrayUtils.shift(charArray0, (int) (short)0, 1697, (-1116));
      assertArrayEquals(new char[] {'9', 'E', 'j', '9', 'E', '9', '9', 'E', 'E'}, charArray0);
      assertEquals(9, charArray0.length);
      
      float[] floatArray1 = new float[7];
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) (short)0;
      floatArray1[2] = (float) '9';
      floatArray1[3] = (float) 'E';
      floatArray1[4] = (float) 0;
      floatArray1[5] = (float) 'E';
      floatArray1[6] = (float) '9';
      ArrayUtils.shift(floatArray1, 0, 1697, (-2147042805));
      assertArrayEquals(new float[] {69.0F, 57.0F, 0.0F, 0.0F, 57.0F, 69.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray1.length);
      
      ArrayUtils.shift(booleanArray0, 0, 57, 57);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 32L;
      longArray0[1] = 1L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {32L, 1L}, longArray0);
      assertArrayEquals(new long[] {32L, 1L, 32L, 1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      charArray0[1] = 'E';
      charArray0[2] = 'd';
      charArray0[3] = 'e';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'b', 'E', 'd', 'e'}, charArray0);
      assertArrayEquals(new char[] {'b', 'E', 'd', 'e', 'b', 'E', 'd', 'e'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 0.0, 0.0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'd';
      intArray0[1] = 89;
      intArray0[2] = (int) 'd';
      intArray0[3] = (int) 'E';
      intArray0[4] = (-1);
      intArray0[5] = 2729;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {100, 89, 100, 69, (-1), 2729}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(12, intArray1.length);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2147483647L);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) (byte)40;
      floatArray0[3] = (float) (short)0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "u;YEvOtl2o=B=G";
      stringArray0[1] = "ny=k=5r0k\"S";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1770);
      longArray0[2] = (long) (byte)72;
      longArray0[3] = (long) (byte)40;
      longArray0[4] = (long) (byte)72;
      int int0 = ArrayUtils.indexOf(longArray0, 72L, (-1770));
      assertArrayEquals(new long[] {(-1770L), 0L, 72L, 40L, 72L}, longArray0);
      assertEquals(2, int0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-3278);
      shortArray0[3] = (short)2;
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(8, integerArray1.length);
      assertEquals(8, integerArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-3278);
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (-44.9908);
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) (short) (-3278);
      doubleArray0[6] = (double) int0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) int0, Double.NaN);
      assertArrayEquals(new double[] {(-3278.0), 1.0, (-44.9908), 1.0, 1.0, (-3278.0), 1.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(7, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)10);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2793.967333);
      doubleArray0[1] = (double) 2133538948;
      doubleArray0[2] = (double) 2133538948;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1200.5937017773));
      assertArrayEquals(new double[] {(-2793.967333), 2.133538948E9, 2.133538948E9, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 2.133538948E9;
      objectArray0[1] = (Object) "6EV.*Ih=";
      objectArray0[2] = (Object) 2.133538948E9;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) (-2793.967333);
      objectArray0[6] = (Object) 0.0;
      objectArray0[7] = (Object) "6EV.*Ih=";
      Object object0 = ArrayUtils.get(objectArray0, (-444), objectArray0[6]);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      assertEquals(8, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, (-516), (int) (byte) (-6), (-444));
      assertEquals(8, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(8, objectArray0.length);
      
      ArrayUtils.swap(doubleArray0, 655, (-1), 861);
      assertArrayEquals(new double[] {(-2793.967333), 2.133538948E9, 2.133538948E9, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)84);
      assertNull(byteArray0);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-1465L));
      assertEquals((-1465L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertEquals((-1465L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(3, longArray0.length);
      
      longArray0[1] = long1;
      Long long2 = new Long((byte) (-6));
      assertEquals((-6L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-3422L));
      assertArrayEquals(new long[] {(-1465L), (-1465L), (-6L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1800L);
      longArray0[1] = 0L;
      longArray0[2] = (-402L);
      longArray0[3] = (-2439L);
      longArray0[4] = 348L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-1800L), 0L, (-402L), (-2439L), 348L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-402L);
      doubleArray0[1] = (double) (-1800L);
      doubleArray0[2] = (double) (-402L);
      Float float0 = new Float((float) (-402L));
      assertEquals((-402.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = 'x';
      charArray0[2] = 'B';
      charArray0[3] = 'k';
      charArray0[5] = 'B';
      charArray0[7] = 'B';
      char[] charArray1 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray1);
      
      Double double0 = new Double((-2368.249728));
      assertEquals((-2368.249728), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1488.03774786461));
      assertEquals((-1488.03774786461), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)3;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)127, (byte)3, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)127, (byte)3, (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray0.length);
      
      int int0 = ArrayUtils.indexOf(longArray1, (long) (byte)127);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals((-1), int0);
      assertFalse(longArray0.equals((Object)longArray2));
      assertNotSame(longArray0, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      short short0 = (short)0;
      Short short1 = new Short((short) (-2765));
      assertEquals((short) (-2765), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[1];
      Short short3 = new Short((short)0);
      assertEquals((short)0, (short)short3);
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray0[0] = short3;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'X');
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'X';
      doubleArray0[1] = (double) short0;
      doubleArray0[2] = (double) 'X';
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, 88.0);
      assertArrayEquals(new double[] {88.0, 88.0, 0.0, 88.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {88.0, 0.0, 88.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(doubleArray1, (-1.0), (-116.0));
      assertArrayEquals(new double[] {88.0, 88.0, 0.0, 88.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {88.0, 0.0, 88.0}, doubleArray0, 0.01);
      assertFalse(boolean2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 2330.0, (-2689));
      assertArrayEquals(new double[] {88.0, 88.0, 0.0, 88.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {88.0, 0.0, 88.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1183.644;
      doubleArray0[4] = (-659.6599684696);
      doubleArray0[6] = (-3550.3);
      int[] intArray0 = new int[4];
      intArray0[0] = 70;
      intArray0[1] = (-2070787803);
      intArray0[2] = (-2145894811);
      intArray0[3] = (-1953);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {70, (-2070787803), (-2145894811), (-1953)}, intArray0);
      assertArrayEquals(new int[] {70, (-2070787803), (-2145894811), (-1953)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2070787803), (-2145894811));
      assertArrayEquals(new int[] {70, (-2070787803), (-2145894811), (-1953)}, intArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(bitSet0);
      assertNotSame(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(1136, longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Boolean boolean0 = new Boolean("VdJ1&#p{/By");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("bLIy&");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[5] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3914;
      longArray0[1] = (long) 3914;
      longArray0[3] = (long) 3914;
      longArray0[4] = (long) 3914;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 635L);
      assertArrayEquals(new long[] {3914L, 3914L, 0L, 3914L, 3914L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(5, longArray0.length);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.shift(booleanArray1, 3914);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3914;
      intArray0[1] = 3914;
      intArray0[2] = 3914;
      intArray0[3] = 3914;
      intArray0[4] = 3914;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {3914, 3914, 3914, 3914, 3914}, intArray0);
      assertArrayEquals(new int[] {3914, 3914, 3914, 3914, 3914}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 3914, 1136);
      assertArrayEquals(new int[] {3914, 3914, 3914, 3914, 3914}, intArray0);
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(5, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1136, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1136, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Boolean boolean0 = new Boolean("VdJ1&#p{/By");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("bLIy&");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      Boolean boolean2 = Boolean.valueOf(false);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[5] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3914;
      longArray0[1] = (long) 3914;
      longArray0[2] = (long) 3914;
      longArray0[3] = (long) 3914;
      longArray0[4] = (long) 3914;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 635L);
      assertArrayEquals(new long[] {3914L, 3914L, 3914L, 3914L, 3914L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(5, longArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) booleanArray0);
      assertNotNull(objectArray0);
      assertSame(booleanArray0, objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray1, 3914);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertSame(booleanArray0, objectArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3914;
      intArray0[1] = 3914;
      intArray0[2] = 3914;
      intArray0[3] = 3914;
      intArray0[4] = 3914;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {3914, 3914, 3914, 3914, 3914}, intArray0);
      assertArrayEquals(new int[] {3914, 3914, 3914, 3914, 3914}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 3914, 1136);
      assertArrayEquals(new int[] {3914, 3914, 3914, 3914, 3914}, intArray0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(5, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1136, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1136, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Object[] objectArray0 = new Object[7];
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-85.0));
      assertEquals((-85.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((-85.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals((-85.0), (double)double3, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[1]);
      assertEquals((-85.0), (double)double4, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      assertEquals(2.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[1]);
      assertEquals((-85.0), (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotNull(double6);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(1474.57801752632);
      assertEquals(1474.57801752632, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      Double double8 = new Double((double) doubleArray0[3]);
      assertEquals((-85.0), (double)double8, 0.01);
      assertEquals((double)double8, (double)double4, 0.01);
      assertEquals((double)double8, (double)double6, 0.01);
      assertEquals((double)double8, (double)double3, 0.01);
      assertEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotNull(double8);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[8] = double8;
      Double double9 = ArrayUtils.get(doubleArray0, (-2721));
      assertNull(double9);
      assertEquals(9, doubleArray0.length);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Short short0 = new Short((short) (-1642));
      assertEquals((short) (-1642), (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = null;
      Short short1 = ArrayUtils.get((Short[]) null, 1364, short0);
      assertEquals((short) (-1642), (short)short1);
      assertNotNull(short1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-1642);
      doubleArray0[1] = (double) 1364;
      doubleArray0[2] = 1753.355012;
      doubleArray0[3] = (double) 1114111;
      doubleArray0[4] = (double) 1114111;
      doubleArray0[5] = (double) (short) (-1642);
      doubleArray0[6] = (double) 1114111;
      doubleArray0[7] = (double) 1114111;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short) (-1642), 0, 569.4058587);
      assertArrayEquals(new double[] {(-1642.0), 1364.0, 1753.355012, 1114111.0, 1114111.0, (-1642.0), 1114111.0, 1114111.0}, doubleArray0, 0.01);
      assertEquals(6, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 5}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertArrayEquals(new double[] {(-1642.0), 1364.0, 1753.355012, 1114111.0, 1114111.0, (-1642.0), 1114111.0, 1114111.0}, doubleArray0, 0.01);
      assertEquals(6, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 5}", bitSet0.toString());
      assertNull(object1);
      assertEquals(8, doubleArray0.length);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 43, (-1686));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-2313L), 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2133538948, (-1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.reverse((long[]) null, 2, 1744);
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = '3';
      charArray0[2] = '5';
      charArray0[3] = '<';
      charArray0[4] = 'z';
      charArray0[5] = '(';
      charArray0[6] = '*';
      charArray0[7] = 'O';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertArrayEquals(new char[] {'l', '3', '5', '<', 'z', '(', '*', 'O'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(8, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, (long) 2);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      short[] shortArray0 = new short[5];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)76;
      doubleArray0[1] = 3952.7655267443497;
      doubleArray0[2] = (double) (short)76;
      doubleArray0[3] = (double) (short)76;
      doubleArray0[4] = (double) (short)76;
      doubleArray0[5] = (double) (short)76;
      doubleArray0[6] = (double) (short)76;
      doubleArray0[7] = (double) (short)76;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {76.0, 3952.7655267443497, 76.0, 76.0, 76.0, 76.0, 76.0, 76.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {76.0, 3952.7655267443497, 76.0, 76.0, 76.0, 76.0, 76.0, 76.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)4;
      Byte byte1 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)4, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-54));
      assertArrayEquals(new byte[] {(byte)4, (byte)4}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)4;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) byte0;
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {4.0F, 1.0F, 4.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {76.0, 3952.7655267443497, 76.0, 76.0, 76.0, 76.0, 76.0, 76.0}, doubleArray0, 0.01);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)4, (-739));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-116);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)119;
      doubleArray0[1] = (double) (byte) (-116);
      doubleArray0[2] = (double) (byte) (-85);
      doubleArray0[3] = (double) (byte) (-85);
      doubleArray0[0] = (double) (byte)119;
      doubleArray0[5] = (double) (byte) (-116);
      doubleArray0[6] = (double) (byte) (-116);
      doubleArray0[7] = (double) (byte) (-85);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {119.0, (-116.0), (-85.0), (-85.0), 0.0, (-116.0), (-116.0), (-85.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {119.0, (-116.0), (-85.0), (-85.0), 0.0, (-116.0), (-116.0), (-85.0)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, doubleArray0.length);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-72));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)119;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte) (-116), (int) (byte) (-85));
      assertArrayEquals(new float[] {119.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {119.0, (-116.0), (-85.0), (-85.0), 0.0, (-116.0), (-116.0), (-85.0)}, doubleArray0, 0.01);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-85);
      shortArray0[1] = (short) (-2599);
      shortArray0[2] = (short) (byte) (-85);
      shortArray0[3] = (short) (byte) (-85);
      shortArray0[4] = (short) (byte) (-116);
      shortArray0[5] = (short) (byte) (-85);
      shortArray0[6] = (short) (byte) (-72);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-386), 0);
      assertArrayEquals(new short[] {(short) (-85), (short) (-2599), (short) (-85), (short) (-85), (short) (-116), (short) (-85), (short) (-72)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      short[] shortArray0 = new short[5];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)76;
      doubleArray0[1] = 3952.7655267443497;
      doubleArray0[2] = (double) (short)76;
      doubleArray0[3] = (double) (short)76;
      doubleArray0[4] = (double) (short)76;
      doubleArray0[6] = (double) (short)76;
      doubleArray0[7] = (double) (short)76;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {76.0, 3952.7655267443497, 76.0, 76.0, 76.0, 0.0, 76.0, 76.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {76.0, 3952.7655267443497, 76.0, 76.0, 76.0, 0.0, 76.0, 76.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)4;
      Byte byte1 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)4, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-54));
      assertArrayEquals(new byte[] {(byte)4, (byte)4}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)4;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) byte0;
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {4.0F, 1.0F, 4.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {76.0, 3952.7655267443497, 76.0, 76.0, 76.0, 0.0, 76.0, 76.0}, doubleArray0, 0.01);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)4, (-739));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[25];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean("<O");
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf((boolean) boolean3);
      assertFalse(boolean4);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      boolean boolean5 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean5);
      
      boolean boolean6 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean6);
      assertTrue(boolean6 == boolean5);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte) (-72));
      assertEquals((byte) (-72), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)96;
      Byte byte2 = Byte.valueOf((byte)96);
      assertEquals((byte)96, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)96);
      assertEquals((byte)96, (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-72));
      assertEquals((byte) (-72), (byte)byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte1);
      assertEquals((byte)96, (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-97));
      assertArrayEquals(new byte[] {(byte) (-72), (byte)96, (byte)96, (byte) (-72), (byte)96, (byte) (-42)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      charArray0[2] = '5';
      Float float0 = new Float(924.3982F);
      assertEquals(924.3982F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'&', '&', '5', 'e', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0, 701.4F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1800L);
      longArray0[1] = 0L;
      longArray0[2] = (-402L);
      longArray0[3] = (-2438L);
      longArray0[4] = (-402L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-1800L), 0L, (-402L), (-2438L), (-402L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Double double0 = new Double((-2438L));
      assertEquals((-2438.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayUtils.swap(intArray0, 0, (-2144739193), 1239);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      Character character0 = new Character('}');
      assertEquals('}', (char)character0);
      assertNotNull(character0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) character0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(3, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1225;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-608);
      shortArray0[3] = (short)312;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)3923;
      shortArray0[6] = (short)195;
      shortArray0[7] = (short)1857;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short) (-2594));
      assertArrayEquals(new short[] {(short)1225, (short)0, (short) (-608), (short)312, (short) (-1), (short)3923, (short)195, (short)1857}, shortArray0);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      int int0 = 1;
      String string0 = "Q.Mh(";
      Boolean boolean0 = Boolean.valueOf("Q.Mh(");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Object object0 = ArrayUtils.get(objectArray0, 1, (Object) boolean0);
      assertNull(object0);
      assertEquals(8, objectArray0.length);
      
      objectArray0[0] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.get(objectArray0, 1);
      assertNotNull(object2);
      assertSame(object2, object1);
      assertEquals(8, objectArray0.length);
      
      objectArray0[2] = object2;
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      int int1 = 429;
      intArray0[5] = 429;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 429, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'P';
      charArray0[2] = 'j';
      charArray0[3] = '9';
      charArray0[4] = 'P';
      charArray0[5] = '9';
      charArray0[6] = 'P';
      charArray0[7] = 'P';
      charArray0[8] = 'P';
      ArrayUtils.shift(charArray0, (int) (short)0, 1697, 1697);
      assertArrayEquals(new char[] {'P', '9', 'P', 'P', 'P', '9', 'P', 'j', '9'}, charArray0);
      assertEquals(9, charArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 'P';
      doubleArray0[2] = (double) 'P';
      doubleArray0[3] = (double) 'P';
      doubleArray0[4] = (double) '9';
      doubleArray0[5] = (double) 'P';
      doubleArray0[6] = (double) 'j';
      doubleArray0[7] = 105.0;
      doubleArray0[8] = (double) (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 80.0, 80.0, 80.0, 57.0, 80.0, 106.0, 105.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0);
      assertEquals(0L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(0);
      assertEquals(0L, (long)long2);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-1L));
      assertEquals((-1L), (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      try { 
        Long.decode(", '");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \", '\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'C');
      assertArrayEquals(new char[] {'C', 'C', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'C', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) 'C';
      floatArray0[2] = (float) (-2145659106);
      floatArray0[3] = (float) 'C';
      floatArray0[4] = (float) 'C';
      floatArray0[5] = (float) 'C';
      floatArray0[6] = (float) 'C';
      floatArray0[7] = (float) 'C';
      ArrayUtils.swap(floatArray0, 0, (-2145659106), (-850));
      assertArrayEquals(new float[] {0.0F, 67.0F, (-2.14565914E9F), 67.0F, 67.0F, 67.0F, 67.0F, 67.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'D');
      assertArrayEquals(new char[] {'C', 'C', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'C', 'C', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'D';
      floatArray0[1] = (float) 'C';
      floatArray0[2] = (float) (-2145659106);
      floatArray0[3] = (float) 'C';
      floatArray0[4] = (float) 'C';
      floatArray0[5] = (float) 'C';
      floatArray0[6] = (float) 'D';
      floatArray0[7] = (float) 'D';
      ArrayUtils.swap(floatArray0, 0, (-2145659106), (-850));
      assertArrayEquals(new float[] {68.0F, 67.0F, (-2.14565914E9F), 67.0F, 67.0F, 67.0F, 68.0F, 68.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[2] = (short) (-1027);
      ArrayUtils.swap(shortArray0, 43, 17, 43);
      assertArrayEquals(new short[] {(short)1, (short)0, (short) (-1027)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)51;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-27), (byte)85, (byte)2, (byte)1, (byte)51}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-27), (byte)85, (byte)2, (byte)1, (byte)51, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      Boolean boolean0 = Boolean.valueOf("9FqdDQ4:n!`pp");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameType(boolean0, boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '/';
      intArray0[0] = (int) '/';
      intArray0[2] = (int) '/';
      intArray0[0] = (int) '/';
      intArray0[4] = (int) '/';
      intArray0[5] = (int) '/';
      int[] intArray1 = ArrayUtils.add(intArray0, 115);
      assertArrayEquals(new int[] {47, 0, 47, 0, 47, 47}, intArray0);
      assertArrayEquals(new int[] {47, 0, 47, 0, 47, 47, 115}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)37;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3562), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3562, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1643);
      intArray0[1] = (-1643);
      intArray0[2] = (-2181);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 605, (-2181));
      assertArrayEquals(new int[] {(-1643), (-1643), (-2181)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      charArray0[5] = 'X';
      charArray0[6] = 'X';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'X');
      assertArrayEquals(new char[] {'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'X', 'X', 'X', 'X', 'X', 'X', 'X', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(9, charArray1.length);
      assertEquals(8, charArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray2 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'X', 'X', 'X', 'X', 'X', 'X', 'X', '\u0000'}, charArray2);
      assertArrayEquals(new char[] {'X', 'X', 'X', 'X', 'X', 'X', 'X', '\u0000'}, charArray0);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertEquals(8, charArray2.length);
      assertEquals(8, charArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'X';
      doubleArray0[1] = (double) 'X';
      doubleArray0[2] = (double) (-1643);
      doubleArray0[3] = (double) (-1643);
      doubleArray0[4] = (double) (-2181);
      doubleArray0[5] = (double) (-2181);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-2181.0), (-2181.0), (-1643.0), (-1643.0), 88.0, 88.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-3729);
      longArray0[4] = (long) (-1);
      longArray0[4] = (long) (-1);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), (-3729L), (-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), (-3729L), (-1L), 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1614);
      char char0 = '4';
      Character character0 = Character.valueOf('*');
      assertEquals('*', (char)character0);
      assertFalse(character0.equals((Object)char0));
      assertNotNull(character0);
      
      Character character1 = new Character('i');
      assertEquals('i', (char)character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('4');
      assertEquals('4', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character[] characterArray1 = new Character[2];
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3752));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '\"';
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '\u0000';
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-";
      stringArray0[1] = "-";
      stringArray0[3] = "-";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '\"';
      doubleArray0[1] = (double) (-3752);
      doubleArray0[2] = (-234.803137234);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-4596.767656041));
      assertArrayEquals(new double[] {34.0, (-3752.0), (-234.803137234)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {34.0, (-3752.0), (-234.803137234)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1653.50112442);
      assertArrayEquals(new double[] {34.0, (-3752.0), (-234.803137234)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {34.0, (-3752.0), (-234.803137234)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {34.0, (-3752.0), (-234.803137234)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) stringArray0, (Object) boolean1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(9, stringArray0.length);
      
      ArrayUtils.shift(intArray0, (-1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      Float float0 = new Float(924.3982F);
      assertEquals(924.3982F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(15, charArray0.length);
      assertEquals(30, charArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray0);
      assertNotNull(stringArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, stringArray0.length);
      
      Double double0 = new Double((-3080.0));
      assertEquals((-3080.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-2340.137710229718));
      assertEquals((-2340.137710229718), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(characterArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(15, charArray0.length);
      assertEquals(15, characterArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)4726;
      shortArray0[4] = (short)68;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)4726, (short)68}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)4726, (short)68}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short)119);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)4726, (short)68, (short)119}, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)4726, (short)68}, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(6, shortArray2.length);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      charArray0[2] = '5';
      Float float0 = new Float(924.3982F);
      assertEquals(924.3982F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Double[] doubleArray0 = new Double[5];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'&', '&', '5', 'e', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray0);
      assertNotNull(stringArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, stringArray0.length);
      
      Double double0 = new Double((-3080.0));
      assertEquals((-3080.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-2340.137710229718));
      assertEquals((-2340.137710229718), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2340.137710229718));
      assertArrayEquals(new double[] {(-2340.137710229718), (-2340.137710229718), (-2340.137710229718), (-2340.137710229718), (-2340.137710229718)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'&', '&', '5', 'e', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(characterArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, characterArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)635;
      shortArray0[1] = (short)1477;
      shortArray0[2] = (short)119;
      shortArray0[3] = (short)4726;
      shortArray0[4] = (short)68;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertArrayEquals(new short[] {(short)635, (short)1477, (short)119, (short)4726, (short)68}, shortArray0);
      assertArrayEquals(new short[] {(short)635, (short)1477, (short)119, (short)4726, (short)68}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short)119);
      assertArrayEquals(new short[] {(short)635, (short)1477, (short)119, (short)4726, (short)68}, shortArray0);
      assertArrayEquals(new short[] {(short)635, (short)1477, (short)119, (short)4726, (short)68, (short)119}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-627), 1101, 1655);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-627);
      doubleArray0[2] = (double) 1101;
      doubleArray0[3] = (double) 1101;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-627.0), 1101.0, 1101.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      int int0 = new Integer(1655);
      assertEquals(1655, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-32251);
      intArray0[1] = (int) (short) (-32251);
      intArray0[2] = 1655;
      intArray0[3] = (-758);
      intArray0[4] = 1655;
      intArray0[5] = 1655;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 1514, 1655);
      assertArrayEquals(new int[] {(-32251), (-32251), 1655, (-758), 1655, 1655}, intArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, (-627.0), 1101.0, 1101.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-627.0), 1101.0, 1101.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      int[] intArray1 = ArrayUtils.add(intArray0, 100);
      assertArrayEquals(new int[] {(-32251), (-32251), 1655, (-758), 1655, 1655, 100}, intArray1);
      assertArrayEquals(new int[] {(-32251), (-32251), 1655, (-758), 1655, 1655}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(6, intArray0.length);
      
      Integer integer0 = new Integer(1235);
      assertEquals(1235, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "@`");
      assertEquals("1235", string0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      charArray0[4] = '&';
      charArray0[2] = '5';
      charArray0[6] = 'e';
      charArray0[7] = '@';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'e');
      assertArrayEquals(new char[] {'&', '&', '5', 'e', '&', '\u0000', 'e', '@'}, charArray0);
      assertArrayEquals(new char[] {'e', '&', '&', '5', 'e', '&', '\u0000', 'e', '@'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'e';
      doubleArray0[1] = (double) '5';
      charArray0[2] = 'e';
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short) (-3278), Integer.MAX_VALUE);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), (-1251));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (-1251);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (-1251);
      intArray0[4] = (int) (byte) (-1);
      intArray0[5] = (int) (byte) (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), (int) (byte) (-1));
      assertArrayEquals(new int[] {(-1), (-1251), (-1), (-1251), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) bitSet0;
      Object object0 = ArrayUtils.get(objectArray0, 611);
      assertNull(object0);
      assertEquals(8, objectArray0.length);
      
      objectArray0[1] = null;
      objectArray0[2] = objectArray0[0];
      objectArray0[3] = (Object) (-1251);
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) (-1);
      objectArray0[6] = (Object) (-1);
      BitSet bitSet1 = (BitSet)ArrayUtils.get(objectArray0, (int)  (-1), (Object) bitSet0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.cardinality());
      assertEquals(1, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotNull(bitSet1);
      assertSame(bitSet0, bitSet1);
      assertSame(bitSet1, bitSet0);
      assertEquals(1, byteArray0.length);
      assertEquals(8, objectArray0.length);
      
      objectArray0[7] = (Object) bitSet1;
      bitSet1.xor(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertSame(bitSet0, bitSet1);
      assertSame(bitSet1, bitSet0);
      assertEquals(1, byteArray0.length);
      assertEquals(8, objectArray0.length);
      
      ArrayUtils.swap(objectArray0, (-1), (-1251), (-1));
      assertEquals(8, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'n');
      assertEquals((-1), int0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((float) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (-1251));
      assertEquals((-1251.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      charArray0[2] = '5';
      Float float0 = new Float(924.3982F);
      assertEquals(924.3982F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(100.0);
      assertEquals(100.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-405.53));
      assertEquals((-405.53), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[3] = double1;
      Double double2 = new Double((-54.83639107187673));
      assertEquals((-54.83639107187673), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)73;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)73);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)73}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)73;
      intArray0[1] = (int) '5';
      intArray0[2] = (int) 'e';
      intArray0[3] = (int) 'e';
      intArray0[4] = (int) 'e';
      intArray0[5] = (int) '5';
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {53, 101, 101, 101, 53, 73}, intArray0);
      assertEquals(6, intArray0.length);
      
      Class<Double[]> class0 = Double[].class;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0, class0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      ArrayUtils.shift(charArray0, 2146786639);
      assertArrayEquals(new char[] {'&', '5', 'e', '\u0000', '\u0000', '\u0000', '\u0000', '&'}, charArray0);
      assertEquals(8, charArray0.length);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray1, (-318.662F));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('^');
      assertEquals('^', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('E');
      assertEquals('E', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) character1);
      assertFalse(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)character0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(2, characterArray1.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (char)character1;
      floatArray0[1] = (float) (char)character2;
      floatArray0[2] = (float) (char)character2;
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), 2);
      assertArrayEquals(new float[] {94.0F, 69.0F, 69.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3486);
      shortArray0[1] = (short)1212;
      shortArray0[2] = (short)219;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1212, (-1974));
      assertArrayEquals(new short[] {(short) (-3486), (short)1212, (short)219}, shortArray0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(3, shortArray0.length);
      
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-110);
      Byte byte3 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte2);
      assertEquals((byte) (-110), (byte)byte6);
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte(byte2);
      assertEquals((byte) (-110), (byte)byte8);
      assertFalse(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte7));
      assertNotNull(byte8);
      
      byteArray0[7] = byte8;
      Byte byte9 = new Byte((byte)85);
      assertEquals((byte)85, (byte)byte9);
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte0));
      assertNotNull(byte9);
      
      byteArray0[8] = byte9;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1634.481071;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 853, 853, 853);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Float float0 = new Float((float) 853);
      assertEquals(853.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-2);
      longArray0[1] = (long) 853;
      longArray0[2] = (long) 853;
      longArray0[3] = (long) 3353;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1.0), 0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(bitSet0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-2), 853);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      
      bitSet0.set(0, 0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1.0;
      objectArray0[1] = (Object) bitSet0;
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, (Object) bitSet0, (-359));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals("{1}", bitSet1.toString());
      assertEquals(2, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(bitSet0, bitSet1);
      assertEquals(2, objectArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 5375.4047181427;
      doubleArray0[3] = 5375.4047181427;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 5375.4047181427;
      ArrayUtils.shift(objectArray0, (-285), 1760, (-285));
      assertEquals(4, objectArray0.length);
      
      ArrayUtils.shift(doubleArray0, 1760);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5375.4047181427, 5375.4047181427}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Float float0 = new Float(2.133538948E9);
      assertEquals(2.13353894E9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-394);
      shortArray0[1] = (short)3648;
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean boolean1 = true;
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean(false);
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.valueOf(boolean1);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = new Boolean("79B#Wk");
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean0));
      assertNotNull(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Float float0 = new Float((double) 1959);
      assertEquals(1959.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-3136);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-3136);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-3136), (int) (short)1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short) (-1), (short) (-3136), (short)1, (short)1, (short) (-3136)}, shortArray0);
      assertEquals(3, int0);
      assertEquals(7, shortArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-89);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-89), 3);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte)0}, byteArray0);
      assertEquals(3, int1);
      assertTrue(int1 == int0);
      assertEquals(7, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short) (-3136), (int) (short)1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1707L;
      ArrayUtils.shift(longArray0, (int) (byte) (-89), 10, 1);
      assertArrayEquals(new long[] {1707L}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'N';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'N');
      assertArrayEquals(new char[] {'K', 'N'}, charArray0);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(2, charArray0.length);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'V');
      assertArrayEquals(new char[] {'K', 'N'}, charArray0);
      assertArrayEquals(new char[] {'K', 'N', 'V'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-2146645224), 1965, 1073741824);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.shift(booleanArray0, 1965);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, true, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)25;
      shortArray0[2] = (short)1232;
      shortArray0[3] = (short)3429;
      shortArray0[4] = (short) (-1770);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)25, (short)1232, (short)3429, (short) (-1770)}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)25, (short)1232, (short)3429, (short) (-1770)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[7];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      Boolean boolean0 = new Boolean("[^m`E'H19hR@OuLvM6x");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray1[5] = boolean0;
      booleanArray1[6] = (Boolean) true;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("<O");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.valueOf("<O");
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      Boolean boolean5 = Boolean.TRUE;
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      
      Boolean boolean6 = Boolean.valueOf(true);
      assertTrue(boolean6);
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '{';
      longArray0[1] = (long) '{';
      longArray0[2] = (long) '{';
      longArray0[3] = (long) '{';
      longArray0[4] = (long) '{';
      longArray0[5] = (long) '{';
      longArray0[6] = (long) '{';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 563L);
      assertArrayEquals(new long[] {123L, 123L, 123L, 123L, 123L, 123L, 123L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(7, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = '{';
      charArray0[4] = '{';
      charArray0[5] = '{';
      charArray0[6] = '{';
      charArray0[7] = '{';
      boolean boolean7 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'{', '{', '{', '{', '{', '{', '{', '{'}, charArray0);
      assertTrue(boolean7);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Float float0 = new Float((double) 1959);
      assertEquals(1959.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(848.5330940875);
      assertEquals(848.5331F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Character character0 = new Character('O');
      assertEquals('O', (char)character0);
      assertNotNull(character0);
      
      AbstractMap.SimpleImmutableEntry<Character, Float> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Character, Float>(character0, float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Character, Float> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Character, Float>(abstractMap_SimpleImmutableEntry0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(abstractMap_SimpleEntry0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((AbstractMap.SimpleEntry<Character, Float>[]) null, 1959, abstractMap_SimpleEntry0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1959, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Float float0 = new Float((double) 1959);
      assertEquals(1959.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(848.5330940875);
      assertEquals(848.5331F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      AbstractMap.SimpleImmutableEntry<Character, Float> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Character, Float>(character0, float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Character, Float> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Character, Float>(abstractMap_SimpleImmutableEntry0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(abstractMap_SimpleEntry0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((AbstractMap.SimpleEntry<Character, Float>[]) null, 1959, abstractMap_SimpleEntry0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1959, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '&';
      longArray0[1] = (long) '5';
      longArray0[2] = (long) '%';
      ArrayUtils.swap(longArray0, 533, 2);
      assertArrayEquals(new long[] {38L, 53L, 37L}, longArray0);
      assertEquals(3, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {38L, 53L, 37L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      booleanArray0[3] = true;
      booleanArray0[6] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(7, booleanArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '5';
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 38L;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) '&';
      floatArray0[5] = (float) 37L;
      floatArray0[6] = (float) '5';
      floatArray0[7] = (float) '%';
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 93.0F);
      assertArrayEquals(new float[] {53.0F, 2.0F, 38.0F, 2.0F, 38.0F, 37.0F, 53.0F, 37.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {53.0F, 2.0F, 38.0F, 2.0F, 38.0F, 37.0F, 53.0F, 37.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 533;
      intArray0[1] = (int) '%';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 533, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 816.5807920546938;
      doubleArray0[1] = 816.5807920546938;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1492;
      longArray0[1] = (long) 1492;
      longArray0[2] = (long) 1492;
      longArray0[3] = (long) 1492;
      longArray0[4] = (long) 1492;
      ArrayUtils.swap(longArray0, 533, 1492);
      assertArrayEquals(new long[] {1492L, 1492L, 1492L, 1492L, 1492L}, longArray0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'l';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {1492L, 1492L, 1492L, 1492L, 1492L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(16, booleanArray1.length);
      assertEquals(16, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(16, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)155;
      shortArray0[2] = (short) (-1027);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)108;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)58, (byte)108, (byte)58, (byte)58, (byte) (-92), (byte)108}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-92);
      doubleArray0[1] = (double) (byte)108;
      doubleArray0[2] = (double) (short) (-1027);
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) (byte)58;
      doubleArray0[5] = (double) (byte)58;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (byte)58);
      assertArrayEquals(new double[] {(-92.0), 108.0, (-1027.0), 1.0, 58.0, 58.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 818.0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1414);
      longArray0[1] = (long) (-1414);
      longArray0[2] = (long) (-1414);
      longArray0[3] = (long) (-1414);
      longArray0[4] = (long) (-1414);
      ArrayUtils.swap(longArray0, 533, (-1414));
      assertArrayEquals(new long[] {(-1414L), (-1414L), (-1414L), (-1414L), (-1414L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = '[';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {(-1414L), (-1414L), (-1414L), (-1414L), (-1414L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-405.53));
      assertArrayEquals(new double[] {818.0, 818.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-2895.198F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1758;
      intArray0[1] = 0;
      intArray0[2] = 444;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 0);
      assertArrayEquals(new int[] {1758, 0, 444}, intArray0);
      assertArrayEquals(new int[] {1758, 444}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      charArray0[2] = '5';
      Float float0 = new Float(924.3982F);
      assertEquals(924.3982F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(100.0);
      assertEquals(100.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-405.53));
      assertEquals((-405.53), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2524.262549006175));
      assertEquals((-2524.262549006175), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)73;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)73);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)73}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)73;
      intArray0[1] = (int) '5';
      intArray0[2] = (int) 'e';
      intArray0[3] = (int) 'e';
      intArray0[4] = (int) 'e';
      intArray0[5] = (int) '5';
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {53, 101, 101, 101, 53, 73}, intArray0);
      assertEquals(6, intArray0.length);
      
      Class<Double[]> class0 = Double[].class;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0, class0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[1] = (-1613);
      intArray0[2] = (-2181);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)605;
      ArrayUtils.swap(shortArray0, (-2181), (-1613), 2);
      assertArrayEquals(new short[] {(short)605}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift(intArray0, 0);
      assertArrayEquals(new int[] {0, (-1613), (-2181)}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-963.73694F), 27);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '#';
      charArray0[2] = '/';
      char[] charArray1 = ArrayUtils.add(charArray0, 1, 'k');
      assertArrayEquals(new char[] {'-', '#', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'-', 'k', '#', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(10, charArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) 'k';
      intArray0[2] = (int) 'k';
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = (int) '#';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '#';
      doubleArray0[1] = (double) 107;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {35.0, 107.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {35.0, 107.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 107;
      objectArray0[1] = (Object) boolean0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) boolean1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(bitSet0);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.shift(intArray0, 2620);
      assertArrayEquals(new int[] {0, 35, 107, 107, 0, (-1), 35, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1135);
      doubleArray0[1] = (-1135.0);
      doubleArray0[2] = (double) (-1135);
      ArrayUtils.shift(doubleArray0, (-443));
      assertArrayEquals(new double[] {(-1135.0), (-1135.0), (-1135.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      short short0 = (short)100;
      Short short1 = new Short((short)100);
      assertEquals((short)100, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      short short2 = (short) (-1);
      Short short3 = new Short((short)100);
      assertEquals((short)100, (short)short3);
      assertTrue(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertNotNull(short3);
      
      Short short4 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short2));
      assertNotNull(short4);
      
      Short short5 = new Short((short)961);
      assertEquals((short)961, (short)short5);
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertNotNull(short5);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short3;
      shortArray0[1] = short5;
      doubleArray0[0] = (double) (short)short5;
      shortArray0[3] = short1;
      shortArray0[4] = short1;
      shortArray0[5] = short4;
      Short short6 = new Short((short) (-1642));
      assertEquals((short) (-1642), (short)short6);
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short2));
      assertNotNull(short6);
      
      Short short7 = ArrayUtils.get(shortArray0, (int) short2, short6);
      assertEquals((short) (-1642), (short)short7);
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short2 == short0);
      assertNotNull(short7);
      assertEquals(6, shortArray0.length);
      
      String string0 = ArrayUtils.toString((Object) shortArray0[1]);
      assertEquals("961", string0);
      assertNotNull(string0);
      assertEquals(6, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) short0, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1135);
      doubleArray0[1] = 103.5;
      doubleArray0[2] = (double) (-1135);
      ArrayUtils.shift(doubleArray0, (-443));
      assertArrayEquals(new double[] {(-1135.0), (-1135.0), 103.5}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      short short0 = (short)100;
      Short short1 = new Short((short)100);
      assertEquals((short)100, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)100);
      assertEquals((short)100, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      Short short4 = new Short((short)961);
      assertEquals((short)961, (short)short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short2;
      shortArray0[1] = short4;
      shortArray0[2] = short4;
      shortArray0[3] = short1;
      shortArray0[4] = short1;
      shortArray0[5] = short3;
      Short short5 = new Short((short) (-1642));
      assertEquals((short) (-1642), (short)short5);
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertNotNull(short5);
      
      Short short6 = ArrayUtils.get(shortArray0, 1114111, short5);
      assertEquals((short) (-1642), (short)short6);
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short1));
      assertNotNull(short6);
      assertEquals(6, shortArray0.length);
      
      String string0 = ArrayUtils.toString((Object) shortArray0[1]);
      assertEquals("961", string0);
      assertNotNull(string0);
      assertEquals(6, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) short0, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (-1251);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (-1251);
      intArray0[4] = (int) (byte) (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), (int) (byte) (-1));
      assertArrayEquals(new int[] {(-1), (-1251), (-1), (-1251), (-1), 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = ArrayUtils.toPrimitive((Object) (-1));
      assertEquals((-1), object0);
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = objectArray0[0];
      objectArray0[3] = (Object) (-1251);
      objectArray0[6] = (Object) (-1);
      ArrayUtils.swap(objectArray0, 0, (-1251), (-1));
      assertEquals(8, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (-1251);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (-1251);
      intArray0[4] = (int) (byte) (-1);
      intArray0[5] = (int) (byte) (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), (int) (byte) (-1));
      assertArrayEquals(new int[] {(-1), (-1251), (-1), (-1251), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = ArrayUtils.toPrimitive((Object) (-1));
      assertEquals((-1), object0);
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = objectArray0[0];
      objectArray0[3] = (Object) (-1251);
      objectArray0[5] = (Object) (-1);
      objectArray0[6] = (Object) (-1);
      ArrayUtils.swap(objectArray0, (-1), (-1251), (-1));
      assertEquals(8, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)72);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 69;
      doubleArray0[1] = 1721.22331;
      doubleArray0[2] = (double) 69;
      doubleArray0[3] = (-11.193588670977903);
      doubleArray0[4] = (double) (byte)72;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-11.193588670977903), (int) (byte)72, 0.0);
      assertArrayEquals(new double[] {69.0, 1721.22331, 69.0, (-11.193588670977903), 72.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)48);
      assertArrayEquals(new short[] {(short)48}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-296);
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-1), 751);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = 'M';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'd');
      assertArrayEquals(new char[] {'?', '%', '%', '?', '?', 'M'}, charArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charArray0.length);
      
      byte[] byteArray0 = ArrayUtils.insert((-1427), (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Short short0 = new Short((short) (-2765));
      assertEquals((short) (-2765), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray0 = new Short[1];
      Short short2 = new Short((short) (-1065));
      assertEquals((short) (-1065), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[0] = short2;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'X');
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short) (-1065));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)8, (int) (byte)8);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2827L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {2827L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (byte)8;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short) (-1529);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)8, (short)0, (short)0, (short)0, (short)2, (short) (-1529)}, shortArray0);
      assertTrue(boolean0);
      assertEquals(7, shortArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)68, (-3167));
      assertArrayEquals(new short[] {(short)0, (short)8, (short)0, (short)0, (short)0, (short)2, (short) (-1529)}, shortArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(7, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)13);
      assertArrayEquals(new short[] {(short)0, (short)8, (short)0, (short)0, (short)0, (short)2, (short) (-1529)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)8, (short)0, (short)0, (short)0, (short)2, (short) (-1529)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(2, byteArray0.length);
      
      Long[] longArray2 = ArrayUtils.addAll(longArray1, longArray1);
      assertArrayEquals(new long[] {2827L}, longArray0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertEquals(2, longArray2.length);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2460.13F);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.insert((int) (byte)0, floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-2460.13F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2460.13F), (-1.0F), 0.0F, (-2460.13F), (-1.0F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'x';
      charArray0[2] = 'B';
      Double double0 = new Double((-90.2138181340827));
      assertEquals((-90.2138181340827), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(103.5);
      assertEquals(103.5, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(103.5);
      assertEquals(103.5, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0.7);
      assertEquals(0.7, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 0, 488);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 4091L;
      longArray0[1] = (-263L);
      longArray0[2] = 1L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 4091L, (-2));
      assertArrayEquals(new long[] {4091L, (-263L), 1L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)74;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)16, (byte)106, (byte)101, (byte) (-15), (byte)74}, byteArray0);
      assertTrue(boolean0);
      assertEquals(6, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (int) (byte)32);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(0, booleanArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)101;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)970, 2123940245);
      assertArrayEquals(new short[] {(short)101}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      charArray0[2] = '5';
      Float float0 = new Float(924.3982F);
      assertEquals(924.3982F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(100.0);
      assertEquals(100.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-405.53));
      assertEquals((-405.53), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2524.262549006175));
      assertEquals((-2524.262549006175), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.7);
      assertEquals(0.7, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '@';
      longArray0[1] = (long) '&';
      longArray0[2] = (long) 'e';
      longArray0[3] = (long) '@';
      longArray0[4] = (long) '&';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1, 0);
      assertArrayEquals(new long[] {64L, 38L, 101L, 64L, 38L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1643);
      intArray0[1] = (-1643);
      intArray0[2] = (-1643);
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-120), 3653);
      assertArrayEquals(new int[] {(-1643), (-1643), (-1643)}, intArray0);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1643);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (-1643);
      floatArray0[4] = (float) (-1643);
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1643.0F), (-1.0F), (-1643.0F), 0.0F, (-1643.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, floatArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'P';
      charArray0[2] = 'j';
      charArray0[3] = '9';
      charArray0[4] = 'P';
      charArray0[5] = '9';
      charArray0[6] = '9';
      charArray0[7] = 'P';
      charArray0[8] = 'P';
      ArrayUtils.shift(charArray0, (int) (short)0, 1697, (-1116));
      assertArrayEquals(new char[] {'9', 'P', 'j', '9', 'P', '9', '9', 'P', 'P'}, charArray0);
      assertEquals(9, charArray0.length);
      
      float[] floatArray1 = new float[7];
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 'P';
      floatArray1[2] = (float) 'P';
      floatArray1[3] = (float) '9';
      floatArray1[4] = (float) 'j';
      floatArray1[5] = (float) 1697;
      floatArray1[6] = (float) '9';
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray1);
      assertArrayEquals(new float[] {0.0F, 80.0F, 80.0F, 57.0F, 106.0F, 1697.0F, 57.0F}, floatArray1, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-3729);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-3729);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1614);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      ArrayUtils.reverse(byteArray0, 2, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)124}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-3729L), (-1L), (-3729L), (-1L), (-3729L), (-3729L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = '^';
      charArray0[2] = '@';
      charArray0[3] = '~';
      boolean boolean0 = ArrayUtils.contains(charArray0, '!');
      assertArrayEquals(new char[] {'[', '^', '@', '~'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1L);
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (-1L);
      objectArray0[3] = (Object) '@';
      int int1 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], (int) (byte)124);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertEquals(4, objectArray0.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-3729L));
      assertEquals((-3729.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((byte)124);
      assertEquals(124.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((byte)0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[2]);
      assertEquals(124.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((byte)0);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-3729L));
      assertEquals((-3729.0), (double)double6, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((byte)0);
      assertEquals(0.0, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertEquals((double)double7, (double)double5, 0.01);
      assertEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(1.0);
      assertEquals(1.0, (double)double8, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotNull(double8);
      
      doubleArray0[8] = double8;
      Double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      characterArray0[1] = character0;
      Character character1 = new Character('^');
      assertEquals('^', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character[] characterArray1 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((long) character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (char)character1;
      doubleArray0[1] = (double) (char)character1;
      doubleArray0[2] = (double) (char)character0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {94.0, 94.0, 94.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) (byte)19;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-67));
      assertArrayEquals(new byte[] {(byte)19, (byte) (-67)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {94.0, 94.0, 94.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1988.7599F);
      floatArray1[1] = (float) (char)character1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)19, floatArray0, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2607);
      intArray0[1] = (-1727);
      intArray0[3] = 0;
      intArray0[5] = (-2434);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "6EV.*Ih=";
      objectArray0[1] = (Object) (-1727);
      objectArray0[2] = (Object) (-2434);
      objectArray0[3] = (Object) (-2434);
      objectArray0[4] = (Object) "6EV.*Ih=";
      objectArray0[5] = (Object) (-1727);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-5920), object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertEquals(6, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, 25, (-1727), 2356);
      assertEquals(6, objectArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-20.532F);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-20.532F));
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-20.532F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Short[] shortArray0 = new Short[3];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short)3466);
      assertEquals((short)3466, (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short)3466;
      shortArray1[1] = (short) shortArray0[2];
      shortArray1[2] = (short) shortArray0[2];
      shortArray1[3] = short0;
      shortArray1[4] = (short)3466;
      shortArray1[5] = short0;
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) shortArray0[2]);
      assertArrayEquals(new short[] {(short)3466, (short)3466, (short)3466, (short)0, (short)3466, (short)0}, shortArray1);
      assertEquals(4, int0);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      ArrayUtils.shift(booleanArray0, 4, 3353, 3353);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.reverse(shortArray1, 71, (-1683));
      assertArrayEquals(new short[] {(short)3466, (short)3466, (short)3466, (short)0, (short)3466, (short)0}, shortArray1);
      assertEquals(6, shortArray1.length);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences((long[]) null, (long) short0);
      assertNull(longArray1);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      float[] floatArray1 = new float[8];
      floatArray1[0] = (float) short0;
      floatArray1[1] = (float) 71;
      floatArray1[2] = (float) (short)3466;
      floatArray1[3] = (float) short0;
      floatArray1[4] = (float) 3353;
      floatArray1[5] = (float) (short)shortArray0[2];
      floatArray1[6] = (float) (short)0;
      floatArray1[7] = (float) 0;
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, 27.0F);
      assertArrayEquals(new float[] {0.0F, 71.0F, 3466.0F, 0.0F, 3353.0F, 3466.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, 71.0F, 3466.0F, 0.0F, 3353.0F, 3466.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertEquals(8, floatArray2.length);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-963.73694F), 0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '\'';
      charArray0[2] = '/';
      char[] charArray1 = ArrayUtils.add(charArray0, 1, 'k');
      assertArrayEquals(new char[] {'-', '\'', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'-', 'k', '\'', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(10, charArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '\'';
      intArray0[1] = (int) 'k';
      intArray0[2] = (int) 'k';
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = (int) '\'';
      intArray0[6] = 0;
      intArray0[7] = (int) '\'';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1, 961);
      assertArrayEquals(new int[] {39, 107, 107, 0, (-1), 39, 0, 39}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 2042.800134712;
      doubleArray0[2] = (-1.0);
      ArrayUtils.shift((char[]) null, (-2018), 128, (-2146641332));
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1146.1420985);
      assertArrayEquals(new double[] {1.5, 2042.800134712, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1146.1420985, 1.5, 2042.800134712, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2146641332);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertArrayEquals(new float[] {(-2.14664128E9F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-2.14664128E9F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-116));
      assertArrayEquals(new byte[] {(byte) (-116)}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      charArray0[1] = 's';
      charArray0[2] = '?';
      charArray0[3] = 'W';
      charArray0[4] = 'p';
      charArray0[5] = 'L';
      char[] charArray1 = ArrayUtils.subarray(charArray0, Integer.MAX_VALUE, 3185);
      assertArrayEquals(new char[] {'V', 's', '?', 'W', 'p', 'L'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 's';
      intArray0[1] = (int) 'W';
      intArray0[2] = (int) 'L';
      intArray0[3] = (int) 'V';
      intArray0[4] = (int) 'p';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertArrayEquals(new int[] {0, 115, 87, 76, 86, 112}, intArray1);
      assertArrayEquals(new int[] {115, 87, 76, 86, 112}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(5, intArray0.length);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'W');
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {'V', 's', '?', 'W', 'p', 'L'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertEquals(0, charArray2.length);
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) floatArray1, (Object[]) floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray2);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(2.133538948E9);
      assertEquals(2.13353894E9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals(2.13353894E9F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(3, floatArray0.length);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) floatArray0[1]);
      assertEquals(2.13353894E9F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(3, floatArray0.length);
      
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 'o';
      doubleArray0[3] = (double) (float)floatArray0[1];
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      Float[] floatArray1 = new Float[13];
      floatArray1[0] = (Float) 0.0F;
      floatArray1[1] = (Float) 0.0F;
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      ArrayUtils.swap(longArray0, (-3729), 356, 7);
      assertArrayEquals(new long[] {(-3729L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = '$';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-3729L);
      objectArray0[1] = (Object) '$';
      objectArray0[2] = (Object) '$';
      objectArray0[3] = (Object) '\"';
      objectArray0[4] = (Object) '$';
      objectArray0[5] = (Object) (-3729L);
      objectArray0[6] = (Object) (-3729L);
      objectArray0[7] = (Object) (-3729L);
      ArrayUtils.shift(objectArray0, 7, (-285), (-2179));
      assertEquals(8, objectArray0.length);
      
      ArrayUtils.shift((double[]) null, (-8));
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)62);
      assertNull(byteArray0);
      
      ArrayUtils.swap(intArray0, 7, 135, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)155;
      shortArray0[2] = (short) (-1027);
      ArrayUtils.swap(shortArray0, 43, 17, 43);
      assertArrayEquals(new short[] {(short)1, (short)155, (short) (-1027)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)155;
      intArray0[2] = 43;
      ArrayUtils.shift(intArray0, 43);
      assertArrayEquals(new int[] {43, 1, 155}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 17;
      floatArray0[1] = (float) (short) (-1027);
      floatArray0[2] = (float) 43;
      floatArray0[3] = (float) 155;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 155, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)155;
      shortArray0[2] = (short) (-1027);
      ArrayUtils.swap(shortArray0, 43, 17, 43);
      assertArrayEquals(new short[] {(short)1, (short)155, (short) (-1027)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)51;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-27), (byte)85, (byte)2, (byte)1, (byte)51}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-27), (byte)85, (byte)2, (byte)1, (byte)51, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2416);
      shortArray0[1] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) (short)0);
      assertNotNull(doubleStream0);
      
      mockRandom0.setSeed((-430));
      Object[] objectArray0 = new Object[26];
      objectArray0[0] = (Object) (short) (-2416);
      objectArray0[1] = (Object) (short)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'K';
      charArray0[2] = 'p';
      charArray0[3] = '\\';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'L', 'K', 'p', '\\'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      
      intArray0[1] = (int) (short) (-2416);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'y');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'y'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-631);
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1634), 515);
      assertArrayEquals(new int[] {1, (-631), 0}, intArray0);
      assertArrayEquals(new int[] {1, (-631), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray1, 'y');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'y'}, charArray1);
      assertArrayEquals(new char[] {'y', 'y'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray2.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 0, (-1740), 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-92), 53);
      assertNull(longArray0);
      
      Class<MutableInt>[] classArray0 = (Class<MutableInt>[]) Array.newInstance(Class.class, 2);
      Class<MutableInt> class0 = MutableInt.class;
      classArray0[0] = class0;
      Class<MutableInt> class1 = MutableInt.class;
      classArray0[1] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(2, classArray1.length);
      assertEquals(2, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-34));
      assertFalse(boolean0);
      
      Class<Character>[] classArray0 = (Class<Character>[]) Array.newInstance(Class.class, 6);
      Class<Character> class0 = Character.class;
      classArray0[0] = class0;
      Class<Character> class1 = Character.class;
      classArray0[1] = class1;
      Class<Character> class2 = Character.class;
      classArray0[2] = class2;
      Class<Character> class3 = Character.class;
      classArray0[3] = class3;
      Class<Character> class4 = Character.class;
      classArray0[4] = class4;
      Class<Character> class5 = Character.class;
      classArray0[5] = class5;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(6, classArray0.length);
      assertEquals(6, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("<O");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Short short0 = new Short((short)11);
      assertEquals((short)11, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      boolean boolean3 = ArrayUtils.isNotEmpty((Short[]) null);
      assertFalse(boolean3);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, true}, booleanArray1));
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean3));
      assertFalse(boolean0.equals((Object)boolean2));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      boolean boolean4 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      
      boolean boolean5 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean5);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)49, 2041);
      assertArrayEquals(new byte[] {(byte)68, (byte)25, (byte)68, (byte)5, (byte)4, (byte) (-118), (byte)3}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, 0.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(2.133538948E9);
      assertEquals(2.13353894E9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals(2.13353894E9F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(3, floatArray0.length);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) floatArray0[1]);
      assertEquals(2.13353894E9F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(3, floatArray0.length);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = 'o';
      charArray0[2] = '@';
      char char0 = 'o';
      charArray0[3] = 'o';
      char char1 = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'r';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 54);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 54, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Character character0 = new Character('3');
      assertEquals('3', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('3');
      assertEquals('3', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 98;
      intArray0[1] = (int) 'y';
      intArray0[2] = (int) 'y';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {98, 121, 121, 0}, intArray0);
      assertArrayEquals(new int[] {98, 121, 121, 0}, intArray1);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 98;
      int int0 = ArrayUtils.lastIndexOf(intArray1, 98);
      assertArrayEquals(new int[] {98, 121, 121, 0}, intArray0);
      assertArrayEquals(new int[] {98, 121, 121, 0}, intArray1);
      assertEquals(0, int0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-401));
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'A';
      ArrayUtils.shift(charArray0, (-401), (-401), 1);
      assertArrayEquals(new char[] {'2', 'A'}, charArray0);
      assertEquals(2, charArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 1, (-209));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 5375.4047181427;
      doubleArray0[3] = 1183.644;
      doubleArray0[4] = (-659.6599684696);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3550.3);
      doubleArray0[8] = 0.0;
      Character character0 = new Character('y');
      assertEquals('y', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('|');
      assertEquals('|', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'y';
      intArray0[1] = (int) '|';
      intArray0[2] = (int) '|';
      intArray0[3] = (int) 'y';
      intArray0[4] = (int) 'y';
      intArray0[5] = (int) 'y';
      intArray0[6] = (int) '|';
      intArray0[7] = (int) '|';
      intArray0[8] = 98;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {121, 124, 124, 121, 121, 121, 124, 124, 98}, intArray1);
      assertArrayEquals(new int[] {121, 124, 124, 121, 121, 121, 124, 124, 98}, intArray0);
      assertNotNull(intArray1);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 124, (-6));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-6));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -6, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2793.967333);
      doubleArray0[1] = (double) 2133538948;
      doubleArray0[2] = (double) 2133538948;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1200.5937017773));
      assertArrayEquals(new double[] {(-2793.967333), 2.133538948E9, 2.133538948E9, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 2.133538948E9;
      objectArray0[1] = (Object) "6EV.*Ih=";
      objectArray0[2] = (Object) 2.133538948E9;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) (-2793.967333);
      objectArray0[6] = (Object) 0.0;
      objectArray0[7] = (Object) "6EV.*Ih=";
      Object object0 = ArrayUtils.get(objectArray0, (-444), objectArray0[6]);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      assertEquals(8, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, (-516), (int) (byte) (-6), (-444));
      assertEquals(8, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(8, objectArray0.length);
      
      ArrayUtils.swap(doubleArray0, 4088, (-1), (-1));
      assertArrayEquals(new double[] {(-2793.967333), 2.133538948E9, 2.133538948E9, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'D');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-281);
      longArray0[1] = (long) (short)2593;
      longArray0[2] = 1826L;
      longArray0[3] = (long) (short)2593;
      longArray0[4] = (long) (short)9;
      int int0 = ArrayUtils.indexOf(longArray0, 2593L, (int) (short) (-281));
      assertArrayEquals(new long[] {(-281L), 2593L, 1826L, 2593L, 9L}, longArray0);
      assertEquals(1, int0);
      assertEquals(5, longArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'D';
      floatArray0[1] = (-510.86526F);
      floatArray0[2] = (float) 9L;
      floatArray0[3] = (float) (short)9;
      floatArray0[4] = (float) 1826L;
      floatArray0[5] = (float) (short)2327;
      floatArray0[6] = (float) (short) (-281);
      floatArray0[7] = (float) 1826L;
      floatArray0[8] = (float) (short)9;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)2327, 1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {68.0F, (-510.86526F), 9.0F, 9.0F, 1826.0F, 2327.0F, (-281.0F), 1826.0F, 9.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 635.937668;
      doubleArray0[1] = 0.0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-39.0F);
      floatArray0[1] = 178.259F;
      floatArray0[2] = 960.13F;
      floatArray0[3] = (-611.7F);
      floatArray0[4] = (-2723.5F);
      floatArray0[5] = 1424.0F;
      floatArray0[6] = (-328.20993F);
      floatArray0[7] = (-1284.6984F);
      floatArray0[8] = 0.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 10, 10);
      assertArrayEquals(new float[] {(-39.0F), 178.259F, 960.13F, (-611.7F), (-2723.5F), 1424.0F, (-328.20993F), (-1284.6984F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)8, (int) (byte)8);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((byte)8);
      assertNotNull(mockRandom0);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-78), (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(2, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)72;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (byte) (-42);
      floatArray0[3] = (float) (byte)8;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 3212, (int) (byte) (-42));
      assertArrayEquals(new float[] {72.0F, (-1.0F), (-42.0F), 8.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {72.0F, (-1.0F), (-42.0F), 8.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(bitSet0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)40;
      doubleArray0[1] = (-1794.6822672584499);
      doubleArray0[2] = (double) 72.0F;
      doubleArray0[3] = 1224.7072764268;
      doubleArray0[4] = (double) (byte)8;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (byte) (-78);
      doubleArray0[7] = (double) (byte)40;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {40.0, (-1794.6822672584499), 72.0, 1224.7072764268, 8.0, (-1.0), (-78.0), 40.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("Index: ");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = ArrayUtils.get((Boolean[]) null, (int) 2);
      assertNull(boolean3);
      
      ArrayUtils.swap((Object[]) null, (int) (byte)111, (int) (byte)111);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-63));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)16, (byte)16, (byte)0, (byte)111, (byte) (-1)}, byteArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean4 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)16, (byte)16, (byte)0, (byte)111, (byte) (-1)}, byteArray0);
      assertTrue(boolean4);
      assertEquals(7, byteArray0.length);
      
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte)16;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short)3648;
      shortArray0[7] = (short) (byte) (-1);
      shortArray0[8] = (short) (byte)16;
      ArrayUtils.shift(shortArray0, 1440);
      assertEquals(13, shortArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)16;
      floatArray0[1] = (float) (short)3648;
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (byte) (-1);
      boolean boolean5 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {16.0F, 3648.0F, (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean4);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("java.util.BitSet");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(false);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray1);
      
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) '`';
      floatArray0[1] = (float) '7';
      floatArray0[2] = 3019.847F;
      boolean boolean4 = ArrayUtils.contains(floatArray0, 96.0F);
      assertArrayEquals(new float[] {96.0F, 55.0F, 3019.847F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean4);
      assertEquals(10, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 365.3596;
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = '\"';
      charArray0[2] = '4';
      charArray0[3] = '';
      charArray0[4] = 'd';
      charArray0[5] = '[';
      charArray0[6] = '1';
      charArray0[7] = 'r';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'J');
      assertArrayEquals(new char[] {' ', '\"', '4', '', 'd', '[', '1', 'r'}, charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 'd';
      objectArray0[1] = (Object) 'd';
      objectArray0[2] = (Object) 818.0;
      objectArray0[3] = (Object) '1';
      objectArray0[4] = (Object) '1';
      objectArray0[5] = (Object) 365.3596;
      objectArray0[6] = (Object) 0.0;
      objectArray0[7] = (Object) '4';
      objectArray0[8] = (Object) ' ';
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, (int) (byte) (-1));
      assertEquals((-1), int0);
      assertEquals(9, objectArray0.length);
      
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 0.0;
      objectArray1[1] = (Object) '1';
      ArrayUtils.shift(objectArray1, (int) (byte) (-1), (int) (byte) (-1), 78);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(2, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-2278);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2);
      assertArrayEquals(new short[] {(short)2, (short) (-2278)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2278)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-2278);
      longArray0[1] = (long) (short)2;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 18688, 1);
      assertArrayEquals(new long[] {(-2278L), 2L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Long[] longArray2 = new Long[0];
      Long[] longArray3 = ArrayUtils.nullToEmpty(longArray2);
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotNull(longArray3);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = 'x';
      charArray0[2] = 'B';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'B';
      charArray0[6] = 'k';
      charArray0[7] = 'B';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'k', 'x', 'B', 'k', 'k', 'B', 'k', 'B', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      
      Double double0 = new Double((-2368.249728));
      assertEquals((-2368.249728), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1488.0377478646135));
      assertEquals((-1488.0377478646135), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)3;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)127, (byte)3, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)127, (byte)3, (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray0.length);
      
      int int0 = ArrayUtils.indexOf(longArray1, (long) (byte)127);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals((-1), int0);
      assertFalse(longArray0.equals((Object)longArray2));
      assertNotSame(longArray0, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '/';
      intArray0[0] = (int) '/';
      intArray0[2] = (int) '/';
      intArray0[0] = (int) '/';
      intArray0[4] = (int) '/';
      intArray0[5] = (int) '/';
      Short short0 = new Short((short)1);
      assertEquals((short)1, (short)short0);
      assertNotNull(short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short)1, object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 47;
      objectArray0[1] = (Object) 47;
      objectArray0[2] = (Object) 47;
      objectArray0[3] = (Object) 47;
      objectArray0[4] = (Object) 47;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(5, objectArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)91;
      ArrayUtils.shift(byteArray0, (-1594));
      assertArrayEquals(new byte[] {(byte) (-40), (byte)91, (byte)2, (byte) (-56), (byte) (-59), (byte)11, (byte) (-31)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      ArrayUtils.shift((long[]) null, 121, (int) (byte) (-40), (-2144112072));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-31);
      doubleArray0[1] = (double) (byte) (-59);
      doubleArray0[2] = (double) 47;
      doubleArray0[3] = (double) 47;
      doubleArray0[4] = (double) (byte)91;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {(-31.0), (-59.0), 47.0, 47.0, 91.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-31.0), (-59.0), 47.0, 47.0, 91.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-11.193588670977903);
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)72);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-11.193588670977903), 69, (double) (byte)72);
      assertArrayEquals(new double[] {(-11.193588670977903), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)72;
      intArray0[1] = 69;
      intArray0[2] = (int) (byte)72;
      intArray0[3] = (-3779);
      intArray0[4] = 69;
      intArray0[5] = 69;
      intArray0[6] = (int) (byte)72;
      intArray0[7] = 2;
      intArray0[8] = 69;
      int[] intArray1 = ArrayUtils.add(intArray0, 64);
      assertArrayEquals(new int[] {72, 69, 72, (-3779), 69, 69, 72, 2, 69, 64}, intArray1);
      assertArrayEquals(new int[] {72, 69, 72, (-3779), 69, 69, 72, 2, 69}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(10, intArray1.length);
      assertEquals(9, intArray0.length);
      
      byte[] byteArray0 = ArrayUtils.insert(78, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2607);
      intArray0[2] = (-4971);
      intArray0[3] = 0;
      intArray0[4] = 16;
      intArray0[5] = (-2434);
      intArray0[6] = 2735;
      ArrayUtils.swap(intArray0, (-4295), (-3887));
      assertArrayEquals(new int[] {(-2607), 0, (-4971), 0, 16, (-2434), 2735, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      Integer integer0 = new Integer((-4971));
      assertEquals((-4971), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 2841L);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2607);
      intArray0[1] = (-1727);
      intArray0[2] = (-4971);
      intArray0[3] = 0;
      intArray0[4] = 16;
      intArray0[5] = (-2434);
      intArray0[6] = 2735;
      ArrayUtils.swap(intArray0, (-4295), (-3887));
      assertArrayEquals(new int[] {(-2607), (-1727), (-4971), 0, 16, (-2434), 2735, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 0;
      Integer integer0 = new Integer((-4971));
      assertEquals((-4971), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[1] = integer0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertFalse(boolean0);
      assertEquals(2, integerArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 2841L);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 818.0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1492;
      longArray0[1] = (long) 1492;
      longArray0[2] = (long) 1492;
      longArray0[3] = (long) 1492;
      longArray0[4] = (long) 1492;
      ArrayUtils.swap(longArray0, 216, 1492);
      assertArrayEquals(new long[] {1492L, 1492L, 1492L, 1492L, 1492L}, longArray0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'l';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'t', 'l'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 216;
      intArray0[1] = (int) 't';
      intArray0[2] = 6;
      intArray0[3] = (-2146171391);
      intArray0[4] = (int) (short) (-1);
      intArray0[5] = (int) (short) (-1);
      ArrayUtils.swap(intArray0, (-2146171391), (-2146171391), (-2146171391));
      assertArrayEquals(new int[] {216, 116, 6, (-2146171391), (-1), (-1)}, intArray0);
      assertEquals(6, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), (-144));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(bitSet0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.shift((boolean[]) null, (-3096));
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertTrue(boolean1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      charArray0[4] = '&';
      charArray0[2] = '5';
      Float float0 = new Float(924.3982F);
      assertEquals(924.3982F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(100.0);
      assertEquals(100.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-405.53));
      assertEquals((-405.53), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2524.262549006175));
      assertEquals((-2524.262549006175), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.7);
      assertEquals(0.7, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-999.6898487));
      assertEquals((-999.6898487), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 703);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 703, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, 0, 0, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 429;
      intArray0[3] = 429;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[6] = 429;
      intArray0[7] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertArrayEquals(new int[] {(-1), 429, 0, 429, 0, (-1), 429, (-1)}, intArray0);
      assertArrayEquals(new int[] {429, 0, 429, 0, (-1), 429, (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(429);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = '2';
      charArray0[2] = 'Y';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = ']';
      ArrayUtils.shift(charArray0, (-1), (-1), 1697);
      assertArrayEquals(new char[] {'\\', '2', 'Y', '9', '9', ']'}, charArray0);
      assertEquals(6, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 1697);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1697, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short)102;
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift((char[]) null, (int) (short)8, (-2018), 128);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1871, 1981);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.reverse((long[]) null, 128, 0);
      byte byte0 = (byte)2;
      Integer integer0 = new Integer((short)102);
      assertEquals(102, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(integer0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-8), 1132, 1132);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-8);
      doubleArray0[1] = 2949.42820567631;
      doubleArray0[2] = (double) (-8);
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = (double) (short)2;
      doubleArray0[5] = (double) (short)2;
      doubleArray0[6] = (double) (short)2;
      doubleArray0[7] = (double) 1132;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) 1132);
      assertArrayEquals(new double[] {(-8.0), 2949.42820567631, (-8.0), 2.0, 2.0, 2.0, 2.0, 1132.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-2278);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2);
      assertArrayEquals(new short[] {(short)2, (short) (-2278)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2278)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-2278);
      longArray0[1] = (long) (short)2;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 18688, 1);
      assertArrayEquals(new long[] {(-2278L), 2L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, 0, 0, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 429;
      intArray0[3] = 429;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[6] = 429;
      intArray0[7] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertArrayEquals(new int[] {(-1), 429, 0, 429, 0, (-1), 429, (-1)}, intArray0);
      assertArrayEquals(new int[] {429, 0, 429, 0, (-1), 429, (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(429);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = '2';
      charArray0[2] = 'Y';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = ']';
      ArrayUtils.shift(charArray0, (-1), (-1), 1697);
      assertArrayEquals(new char[] {'\\', '2', 'Y', '9', '9', ']'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)81;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {(byte)85, (byte) (-43), (byte)114, (byte)66, (byte)36, (byte)81}, byteArray1);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-43), (byte)114, (byte)66, (byte)36, (byte)81}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-526), 98);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      
      ArrayUtils.reverse((long[]) null, 3317, (-710));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'R';
      charArray0[2] = '!';
      charArray0[3] = 'W';
      charArray0[4] = 'n';
      charArray0[5] = 'N';
      charArray0[6] = 'G';
      charArray0[7] = 'z';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'G');
      assertArrayEquals(new char[] {'v', 'R', '!', 'W', 'n', 'N', 'G', 'z'}, charArray0);
      assertEquals("{6}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(8, charArray0.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertArrayEquals(new char[] {'v', 'R', '!', 'W', 'n', 'N', 'G', 'z'}, charArray0);
      assertEquals("{6}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNull(object0);
      assertEquals(8, charArray0.length);
      
      objectArray0[1] = null;
      Short short0 = new Short((short) (-3278));
      assertEquals((short) (-3278), (short)short0);
      assertNotNull(short0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) short0);
      assertEquals((-1), int0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-14);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertArrayEquals(new int[] {(-14), 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-14);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-14.0);
      objectArray0[1] = (Object) (-14.0);
      objectArray0[2] = (Object) (-14.0);
      objectArray0[4] = (Object) (-14.0);
      ArrayUtils.reverse(objectArray0, 347, (-14));
      assertEquals(5, objectArray0.length);
      
      Float float0 = new Float(100.0);
      assertEquals(100.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 4711.66F);
      assertArrayEquals(new float[] {100.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (float)floatArray0[0];
      doubleArray1[1] = (double) (-14);
      ArrayUtils.reverse(doubleArray1);
      assertArrayEquals(new double[] {(-14.0), 100.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(2.133538948E9);
      assertEquals(2.13353894E9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals(2.13353894E9F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(3, floatArray0.length);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) floatArray0[1]);
      assertEquals(2.13353894E9F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(3, floatArray0.length);
      
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 'n';
      doubleArray0[2] = (double) 'o';
      doubleArray0[3] = (double) (float)floatArray0[1];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 2.133538944E9, 111.0, 110.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = 'k';
      charArray0[2] = 'i';
      charArray0[3] = '$';
      charArray0[4] = 'L';
      charArray0[5] = 's';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 's');
      assertArrayEquals(new char[] {'}', 'k', 'i', '$', 'L', 's'}, charArray0);
      assertArrayEquals(new char[] {'}', 'k', 'i', '$', 'L'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = 'r';
      charArray0[2] = 'n';
      charArray0[3] = 'v';
      charArray0[4] = ' ';
      charArray0[5] = ';';
      charArray0[6] = 'g';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '(');
      assertArrayEquals(new char[] {'b', 'r', 'n', 'v', ' ', ';', 'g'}, charArray1);
      assertArrayEquals(new char[] {'b', 'r', 'n', 'v', ' ', ';', 'g'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-11.193588670977903);
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)72);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-11.193588670977903), 69, (double) (byte)72);
      assertArrayEquals(new double[] {(-11.193588670977903), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      Object[] objectArray0 = new Object[7];
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[0] = object2;
      objectArray0[1] = object1;
      Object object3 = ArrayUtils.toPrimitive(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      assertNotSame(object2, object1);
      assertSame(object2, object3);
      assertNotSame(object2, object0);
      assertSame(object3, object2);
      assertNotSame(object3, object0);
      assertNotSame(object3, object1);
      
      objectArray0[2] = object3;
      objectArray0[3] = (Object) (-11.193588670977903);
      objectArray0[4] = (Object) (-11.193588670977903);
      objectArray0[5] = (Object) (-11.193588670977903);
      objectArray0[6] = (Object) (-11.193588670977903);
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, objectArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)72;
      ArrayUtils.shift(byteArray0, 38);
      assertArrayEquals(new byte[] {(byte)72, (byte)72, (byte)72, (byte)72, (byte)72, (byte)72, (byte)72}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = '6';
      boolean boolean2 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'k', '6'}, charArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, charArray0.length);
      
      boolean boolean3 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'k', '6'}, charArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "V-+/3C;AlCt;$76";
      stringArray0[1] = "i+L3eix<i6u u4aVml";
      stringArray0[2] = "V-+/3C;AlCt;$76";
      stringArray0[3] = "V-+/3C;AlCt;$76";
      stringArray0[4] = "i+L3eix<i6u u4aVml";
      stringArray0[5] = "V-+/3C;AlCt;$76";
      stringArray0[6] = "V-+/3C;AlCt;$76";
      stringArray0[7] = "V-+/3C;AlCt;$76";
      stringArray0[8] = "V-+/3C;AlCt;$76";
      String[] stringArray1 = ArrayUtils.clone(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 100.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-27), (byte)0, (byte) (-27), (byte)2, (byte) (-1), (byte)1, (byte) (-27), (byte)0, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)0, (byte) (-27), (byte)2, (byte) (-1), (byte)1, (byte) (-27), (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(8, byteArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-27);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-27)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray0, (short) (byte) (-27));
      assertArrayEquals(new short[] {(short) (-27)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray2.length);
      
      Short[] shortArray3 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-27)}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray3.length);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-192.6F);
      floatArray0[1] = (-2457.5095F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2110.15F));
      assertArrayEquals(new float[] {(-192.6F), (-2457.5095F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)24;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)24}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) (-1L);
      longArray1[1] = (Long) (-1L);
      Long long0 = new Long((byte)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.swap(floatArray0, (int) (byte)24, (-1));
      assertArrayEquals(new float[] {(-192.6F), (-2457.5095F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = 'p';
      charArray0[2] = 'i';
      charArray0[3] = '#';
      charArray0[4] = 'r';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-611), (int) (byte)24);
      assertArrayEquals(new char[] {'{', 'p', 'i', '#', 'r'}, charArray0);
      assertArrayEquals(new char[] {'{', 'p', 'i', '#', 'r'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      
      ArrayUtils.shift((Object[]) longArray1, (-1));
      assertEquals(2, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray1, (Object) long0, (int) (byte)24);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(2, longArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)24;
      shortArray0[1] = (short) (byte)24;
      shortArray0[2] = (short) (byte)24;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte)24);
      assertArrayEquals(new short[] {(short)24, (short)24, (short)24}, shortArray0);
      assertArrayEquals(new short[] {(short)24, (short)24}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = 'I';
      charArray0[2] = 'E';
      charArray0[3] = 'j';
      charArray0[4] = 'o';
      charArray0[5] = 'J';
      charArray0[6] = 'N';
      charArray0[7] = 'Q';
      charArray0[8] = '0';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o');
      assertArrayEquals(new char[] {'V', 'I', 'E', 'j', 'o', 'J', 'N', 'Q', '0'}, charArray0);
      assertEquals(4, int0);
      assertEquals(9, charArray0.length);
      
      int int1 = ArrayUtils.indexOf((byte[]) null, (byte) (-1));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-3856.67442618306);
      doubleArray0[2] = 755.73395;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 683.86319;
      doubleArray0[5] = 3012.3800356652;
      doubleArray0[6] = 1.5;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-89), (int) (byte) (-89));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-89);
      floatArray0[1] = (float) (byte) (-89);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte) (-89), (-1));
      assertArrayEquals(new float[] {(-89.0F), (-89.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-89.0F);
      doubleArray0[1] = (double) (-89.0F);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (-89.0F);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1441.0592339165), (-1), 2394.756628297);
      assertArrayEquals(new double[] {(-89.0), (-89.0), 1.0, (-89.0)}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 635.937668;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1197.95868123;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {635.937668, 0.0, 1197.95868123, 0.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(4, doubleArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-47);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-6);
      shortArray0[2] = (short) (byte)65;
      shortArray0[0] = (short) (byte)65;
      shortArray0[4] = (short) (byte)6;
      shortArray0[6] = (short)54;
      shortArray0[7] = (short) (byte) (-1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short) (-1);
      objectArray0[1] = (Object) (short)65;
      objectArray0[2] = (Object) (byte) (-1);
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) 0.0;
      Object object0 = ArrayUtils.get(objectArray0, 1, (Object) "6EV.*Ih=");
      assertEquals((short)65, object0);
      assertNotNull(object0);
      assertEquals(7, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, (-1), (int) (short)65, (int) (byte)65);
      assertEquals(7, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(7, objectArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (-4989));
      assertArrayEquals(new byte[] {(byte) (-6), (byte)6, (byte) (-1), (byte)65, (byte) (-47)}, byteArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-8), 1132, 1132);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(0, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-8), (int) (short)2);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 818.0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1492;
      longArray0[2] = (long) 1492;
      longArray0[3] = (long) 1492;
      longArray0[4] = (long) 1492;
      ArrayUtils.swap(longArray0, 216, 1492);
      assertArrayEquals(new long[] {1492L, 0L, 1492L, 1492L, 1492L}, longArray0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'l';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'t', 'l'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 216;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {216, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(12, intArray1.length);
      assertEquals(6, intArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1979, 1979);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'t', 'l'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short)0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = 2413.838549139;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (short)0;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (-277);
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, (int) (short)0);
      assertArrayEquals(new long[] {0L, (-277L), 0L, 0L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 719;
      intArray0[1] = (-277);
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      ArrayUtils.swap(intArray0, (-144), 719, (-2));
      assertArrayEquals(new int[] {719, (-277), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)122;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-103), 5594);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-103), (byte) (-7), (byte) (-41), (byte)0, (byte)122}, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-103), (byte) (-7), (byte) (-41), (byte)0, (byte)122}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 69;
      doubleArray0[1] = 1721.22331;
      doubleArray0[2] = (double) 69;
      doubleArray0[3] = (-11.193588670977903);
      doubleArray0[4] = (double) (byte)72;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-11.193588670977903), (int) (byte)72, 0.0);
      assertArrayEquals(new double[] {69.0, 1721.22331, 69.0, (-11.193588670977903), 72.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)48);
      assertArrayEquals(new short[] {(short)48}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[2];
      doubleArray0[3] = (double) (-296);
      intArray0[1] = (int) (byte)72;
      ArrayUtils.swap(intArray0, 0, (-3085), (-2146828926));
      assertArrayEquals(new int[] {0, 72}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-5505), floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 0.0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) bitSet0;
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = (Object) bitSet0;
      ArrayUtils.swap(objectArray0, Integer.MAX_VALUE, (-5505), Integer.MAX_VALUE);
      assertEquals(4, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray2 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)47;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(79, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 79, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '/';
      intArray0[0] = (int) '/';
      intArray0[2] = (int) '/';
      intArray0[0] = (int) '/';
      intArray0[4] = (int) '/';
      intArray0[5] = (int) '/';
      int[] intArray1 = ArrayUtils.add(intArray0, 115);
      assertArrayEquals(new int[] {47, 0, 47, 0, 47, 47}, intArray0);
      assertArrayEquals(new int[] {47, 0, 47, 0, 47, 47, 115}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)37;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1038, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1038, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      short[] shortArray0 = new short[9];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(9, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2829;
      doubleArray0[3] = (double) 2829;
      doubleArray0[4] = 0.0;
      ArrayUtils.reverse(doubleArray0, 2829, 443);
      assertArrayEquals(new double[] {0.0, 0.0, 2829.0, 2829.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 2829.0, 2829.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 1.0);
      assertArrayEquals(new double[] {0.0, 0.0, 2829.0, 2829.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2829;
      intArray0[1] = 0;
      intArray0[2] = 2155;
      ArrayUtils.shift(intArray0, (-2145828772));
      assertArrayEquals(new int[] {0, 2155, 2829}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '`');
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)24);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)24;
      longArray0[1] = (long) '`';
      longArray0[2] = (long) (byte) (-61);
      longArray0[3] = (long) (byte)19;
      longArray0[4] = (long) '`';
      longArray0[5] = (long) (byte) (-61);
      int int0 = ArrayUtils.indexOf(longArray0, 517L, 27);
      assertArrayEquals(new long[] {24L, 96L, (-61L), 19L, 96L, (-61L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-125);
      intArray0[1] = (-2188);
      intArray0[2] = (int) (byte)24;
      intArray0[3] = (-1);
      intArray0[4] = (int) (byte)43;
      intArray0[5] = (-2146641332);
      intArray0[6] = (int) (byte) (-61);
      intArray0[7] = (int) (byte)43;
      intArray0[8] = (int) '`';
      ArrayUtils.shift(intArray0, (-2146641332), 12, 630);
      assertArrayEquals(new int[] {(-125), (-2188), 24, (-1), 43, (-2146641332), (-61), 43, 96}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "V-+/3C;AlCt;$76";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "V-+/3C;AlCt;$76";
      stringArray0[4] = "i+L3eix<i6u u4aVml";
      stringArray0[5] = "V-+/3C;AlCt;$76";
      stringArray0[6] = "V-+/3C;AlCt;$76";
      stringArray0[7] = "";
      stringArray0[8] = "V-+/3C;AlCt;$76";
      String[] stringArray1 = ArrayUtils.clone(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (-508.915535334);
      doubleArray0[2] = (-1127.31);
      doubleArray0[3] = 1293.063548209;
      doubleArray0[4] = 853.0;
      doubleArray0[5] = (-1007.4418660529744);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-753.76953);
      doubleArray0[8] = 0.0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {100.0, (-508.915535334), (-1127.31), 1293.063548209, 853.0, (-1007.4418660529744), 0.0, (-753.76953), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1127.31), (-508.915535334));
      assertArrayEquals(new double[] {100.0, (-508.915535334), (-1127.31), 1293.063548209, 853.0, (-1007.4418660529744), 0.0, (-753.76953), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      ArrayUtils.shift(intArray0, 2155);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-11.193588670977903);
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[1] = '>';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '\\';
      charArray0[5] = 'Y';
      charArray0[6] = '8';
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(charArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 818.0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1492;
      longArray0[1] = (long) 1492;
      longArray0[2] = (long) 1492;
      longArray0[3] = (long) 1492;
      longArray0[4] = (long) 1492;
      ArrayUtils.swap(longArray0, 533, 1492);
      assertArrayEquals(new long[] {1492L, 1492L, 1492L, 1492L, 1492L}, longArray0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'l';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'t', 'l'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-2287L), 6);
      assertArrayEquals(new long[] {1492L, 1492L, 1492L, 1492L, 1492L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1492L;
      objectArray0[1] = (Object) 1492L;
      BitSet bitSet0 = new BitSet('l');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(128, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 486;
      intArray0[1] = 52;
      boolean boolean2 = ArrayUtils.contains(intArray0, (-878));
      assertArrayEquals(new int[] {486, 52}, intArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(52);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {52, 486}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-3729);
      longArray0[4] = (long) (-1);
      longArray0[4] = (long) (-1);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), (-3729L), (-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), (-3729L), (-1L), 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1614);
      char char0 = '*';
      Character character0 = Character.valueOf('*');
      assertEquals('*', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('i');
      assertEquals('i', (char)character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('4');
      assertEquals('4', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'*', '*'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-559), (int) char0);
      assertArrayEquals(new short[] {(short) (-1614)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1614)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1474.57801752632;
      doubleArray0[1] = (double) (short) (-1614);
      doubleArray0[2] = 635.937668;
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) '4';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-3729L), 649.0);
      assertArrayEquals(new double[] {1474.57801752632, (-1614.0), 635.937668, (-1.0), 52.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-116);
      double[] doubleArray0 = new double[27];
      doubleArray0[0] = (double) (byte)119;
      doubleArray0[1] = (double) (byte) (-116);
      doubleArray0[2] = (double) (byte) (-119);
      doubleArray0[0] = (double) (byte)119;
      doubleArray0[5] = (double) (byte) (-116);
      doubleArray0[6] = (double) (byte) (-116);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(27, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(27, doubleArray0.length);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-119));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)119;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte) (-116), (int) (byte) (-119));
      assertArrayEquals(new float[] {119.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(27, doubleArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-119);
      shortArray0[1] = (short) (-2599);
      shortArray0[2] = (short) (byte) (-119);
      shortArray0[3] = (short) (byte) (-119);
      shortArray0[4] = (short) (byte) (-116);
      shortArray0[5] = (short) (byte) (-119);
      shortArray0[6] = (short) (byte)119;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-386), 0);
      assertArrayEquals(new short[] {(short) (-119), (short) (-2599), (short) (-119), (short) (-119), (short) (-116), (short) (-119), (short)119}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean3 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(27, doubleArray0.length);
      
      Byte[] byteArray3 = ArrayUtils.toObject(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = ArrayUtils.indexOf(floatArray0, (-2069.6F), Integer.MAX_VALUE);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2069.6F);
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) (-2069.6F);
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 1.0F;
      doubleArray0[7] = (double) (-2069.6F);
      doubleArray0[8] = (double) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-2069.60009765625), 2.147483647E9, (-2069.60009765625), 1.0, (-1.0), (-1.0), 1.0, (-2069.60009765625), (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3954;
      shortArray0[1] = (short)14;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-1893);
      shortArray0[4] = (short)2;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, Integer.MAX_VALUE);
      assertArrayEquals(new short[] {(short)3954, (short)14, (short)2, (short) (-1893), (short)2}, shortArray1);
      assertArrayEquals(new short[] {(short)3954, (short)14, (short)2, (short) (-1893), (short)2}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 153.1488901891, 55, (double) 2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-1271.41));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1271.41)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      charArray0[4] = 'O';
      charArray0[5] = 'O';
      charArray0[6] = 'O';
      charArray0[7] = 'O';
      charArray0[8] = 'O';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'j';
      ArrayUtils.shift(charArray0, (-1116), (-1116), 0);
      assertArrayEquals(new char[] {'j', 'j', 'j', 'j', 'j', 'j'}, charArray0);
      assertEquals(6, charArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Boolean, Character>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Boolean, Character>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      Character character0 = Character.valueOf('j');
      assertEquals('j', (char)character0);
      assertNotNull(character0);
      
      AbstractMap.SimpleImmutableEntry<Boolean, Character> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Boolean, Character>((Boolean) false, character0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Boolean, Character> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Boolean, Character>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Boolean, Character> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Boolean, Character>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Boolean, Character> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Boolean, Character>(abstractMap_SimpleEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Boolean, Character>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addFirst(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntry1);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry2);
      assertEquals(3, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2666, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2666, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[3] = 2836.7F;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-34);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-34), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Double[] doubleArray0 = new Double[10];
      Double double0 = new Double(0.0F);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2836.7F);
      assertEquals(2836.699951171875, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) double1, (-2256));
      assertEquals((-1), int0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(10, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) doubleArray0, 88, (int) (byte) (-34), (int) (byte) (-3));
      assertEquals(10, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 365.3596;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {818.0, 0.0, 365.3596}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2070;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-583);
      shortArray0[4] = (short) (-1139);
      shortArray0[5] = (short)1239;
      shortArray0[6] = (short)676;
      shortArray0[7] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1139), (int) (short)676);
      assertArrayEquals(new short[] {(short)2070, (short)0, (short)0, (short) (-583), (short) (-1139), (short)1239, (short)676, (short)0}, shortArray0);
      assertEquals(4, int0);
      assertEquals(8, shortArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = ')';
      charArray0[2] = '`';
      int int1 = ArrayUtils.indexOf(charArray0, 'b', (-495));
      assertArrayEquals(new char[] {'', ')', '`'}, charArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      String[] stringArray0 = new String[0];
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 365.3596;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) 818.0;
      doubleArray1[4] = (Double) 818.0;
      doubleArray1[5] = (Double) 365.3596;
      doubleArray1[6] = (Double) 0.0;
      doubleArray1[7] = (Double) 0.0;
      doubleArray1[8] = (Double) 0.0;
      Double double0 = ArrayUtils.get(doubleArray1, (int) 0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(9, doubleArray1.length);
      
      String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) double0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'D');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-281);
      shortArray0[1] = (short)2327;
      shortArray0[2] = (short) (-1);
      shortArray0[4] = (short)9;
      shortArray0[5] = (short)2593;
      ArrayUtils.shift(shortArray0, (int) (short) (-1));
      assertArrayEquals(new short[] {(short)2327, (short) (-1), (short)0, (short)9, (short)2593, (short)0, (short) (-281)}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('^');
      assertEquals('^', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('^');
      assertEquals('^', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character2));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(2, characterArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((long) character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (char)character2;
      doubleArray0[1] = (double) (char)character2;
      doubleArray0[2] = (double) (char)character1;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {94.0, 94.0, 94.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = (Byte) (byte)19;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-67));
      assertArrayEquals(new byte[] {(byte)19}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('^');
      assertEquals('^', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('^');
      assertEquals('^', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character[] characterArray1 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((long) character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (char)character2;
      doubleArray0[1] = (double) (char)character2;
      doubleArray0[2] = (double) (char)character1;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {94.0, 94.0, 94.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) (byte)19;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-67));
      assertArrayEquals(new byte[] {(byte)19, (byte) (-67)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4596.0;
      doubleArray0[3] = 404.86;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, 4596.0, 404.86, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) 4596.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 4596.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 4596.0, 404.86, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 4596.0, 404.86, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte) (-77));
      assertEquals((byte) (-77), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)8;
      Byte byte2 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte1);
      assertEquals((byte)8, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      byte byte4 = (byte)65;
      Byte byte5 = new Byte((byte)65);
      assertEquals((byte)65, (byte)byte5);
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte4);
      assertArrayEquals(new byte[] {(byte) (-77), (byte)8, (byte)8, (byte)65}, byteArray1);
      assertFalse(byte4 == byte1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      charArray0[4] = '&';
      charArray0[2] = '5';
      charArray0[6] = 'e';
      charArray0[7] = '@';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'e');
      assertArrayEquals(new char[] {'&', '&', '5', 'e', '&', '\u0000', 'e', '@'}, charArray0);
      assertArrayEquals(new char[] {'e', '&', '&', '5', 'e', '&', '\u0000', 'e', '@'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'e';
      doubleArray0[1] = (double) '5';
      charArray0[2] = 'e';
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)2, 2097);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      
      ArrayUtils.reverse((long[]) null, (int) (short) (-3278), 1407);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1154.0247F);
      floatArray0[2] = 0.0F;
      ArrayUtils.reverse(floatArray0, 0, 2);
      assertArrayEquals(new float[] {(-1154.0247F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-1));
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((short[]) null, 1630, (-4969));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1154.0247F);
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-4969);
      longArray0[1] = (long) (-4969);
      longArray0[2] = 0L;
      longArray0[3] = (long) 2100;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (short) (-1);
      longArray0[6] = (long) 1630;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-4969L), (-4969L), 0L, 2100L, (-1L), (-1L), 1630L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(7, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      char char0 = '^';
      Character character0 = Character.valueOf('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      characterArray0[1] = character0;
      characterArray0[2] = (Character) char0;
      Character[] characterArray1 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(char0);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) char0;
      doubleArray0[1] = (double) char0;
      doubleArray0[2] = (double) char0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {94.0, 94.0, 94.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Float float0 = new Float((float) (byte)19);
      assertEquals(19.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {19.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertArrayEquals(new float[] {19.0F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '&';
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertArrayEquals(new int[] {38}, intArray0);
      assertArrayEquals(new int[] {38}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      float[] floatArray3 = ArrayUtils.addAll(floatArray1, floatArray2);
      assertArrayEquals(new float[] {19.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {19.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {19.0F, 19.0F}, floatArray3, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertNotNull(floatArray3);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertEquals(2, floatArray3.length);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)19, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)19, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)19;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray2, (byte)19);
      assertArrayEquals(new byte[] {(byte)19}, byteArray2);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(bitSet0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-93));
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-93), (byte) (-93)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-93), 0, (-437));
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-93), (byte) (-93)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[2] = (-437);
      intArray0[3] = (-437);
      intArray0[4] = (int) 'm';
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {2, 0, (-437), (-437), 109}, intArray0);
      assertArrayEquals(new int[] {2, 0, (-437), (-437), 109, 2, 0, (-437), (-437), 109}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[2] = '5';
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'&', '&', '5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 701.4F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '@';
      intArray0[1] = (int) '@';
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {64, 64}, intArray0);
      assertArrayEquals(new int[] {64, 64, 64, 64}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), 7, 3872);
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)455;
      shortArray0[1] = (short)68;
      shortArray0[2] = (short)100;
      shortArray0[3] = (short)126;
      shortArray0[4] = (short)67;
      shortArray0[5] = (short)429;
      shortArray0[6] = (short) (-660);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)935);
      assertArrayEquals(new short[] {(short)455, (short)68, (short)100, (short)126, (short)67, (short)429, (short) (-660)}, shortArray0);
      assertArrayEquals(new short[] {(short)455, (short)68, (short)100, (short)126, (short)67, (short)429, (short) (-660)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-93));
      assertArrayEquals(new byte[] {(byte) (-93)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      ArrayUtils.swap(byteArray0, (-1390), (-797), 0);
      assertArrayEquals(new byte[] {(byte) (-93)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1218);
      intArray0[1] = (-4983);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {(-1218), (-4983)}, intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-17);
      ArrayUtils.swap(byteArray0, (-1218), (-937));
      assertArrayEquals(new byte[] {(byte)99, (byte)1, (byte) (-17)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)99;
      shortArray0[1] = (short) (byte) (-17);
      shortArray0[2] = (short) (byte) (-17);
      shortArray0[3] = (short) (byte)1;
      boolean boolean2 = ArrayUtils.contains(shortArray0, (short)1);
      assertArrayEquals(new short[] {(short)99, (short) (-17), (short) (-17), (short)1}, shortArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(4, shortArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)99, (byte)1, (byte) (-17)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short)1;
      floatArray0[2] = (float) (-937);
      floatArray0[3] = (float) (-4983);
      floatArray0[4] = (float) (byte)99;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2418, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {1.0F, 1.0F, (-937.0F), (-4983.0F), 99.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-36.0);
      doubleArray0[1] = 1074.818232163;
      doubleArray0[2] = 2479.63;
      doubleArray0[3] = 233.0;
      doubleArray0[4] = (-471.9379576297778);
      doubleArray0[5] = (-1489.430142960893);
      ArrayUtils.swap(doubleArray0, (-2440), 1390);
      assertArrayEquals(new double[] {(-36.0), 1074.818232163, 2479.63, 233.0, (-471.9379576297778), (-1489.430142960893)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = 'Q';
      char[] charArray1 = ArrayUtils.add(charArray0, 'Q');
      assertArrayEquals(new char[] {'{', 'Q'}, charArray0);
      assertArrayEquals(new char[] {'{', 'Q', 'Q'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1390;
      intArray0[1] = 1390;
      intArray0[2] = (int) 'Q';
      intArray0[3] = (-2440);
      intArray0[4] = 4052;
      intArray0[5] = (int) 'Q';
      intArray0[6] = 1390;
      intArray0[7] = (int) '{';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {1390, 1390, 81, (-2440), 4052, 81, 1390, 123}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 216, 216);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 216;
      floatArray0[1] = (float) 216;
      floatArray0[2] = (float) 216;
      floatArray0[3] = (float) 216;
      floatArray0[4] = (float) 216;
      floatArray0[5] = (float) 216;
      floatArray0[6] = (float) 216;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {216.0F, 216.0F, 216.0F, 216.0F, 216.0F, 216.0F, 216.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) true;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals(true, object0);
      assertNotNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 216.0F;
      ArrayUtils.reverse(objectArray0, 25, 2);
      assertEquals(3, objectArray0.length);
      
      Float[] floatArray2 = new Float[5];
      floatArray2[0] = (Float) 216.0F;
      floatArray2[1] = (Float) 216.0F;
      Float float0 = new Float(1150.7183802);
      assertEquals(1150.7184F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray2[2] = float0;
      floatArray2[3] = (Float) 216.0F;
      floatArray2[4] = (Float) 216.0F;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2, (float) floatArray2[4]);
      assertArrayEquals(new float[] {216.0F, 216.0F, 1150.7184F, 216.0F, 216.0F}, floatArray3, 0.01F);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotNull(floatArray3);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertEquals(5, floatArray2.length);
      assertEquals(5, floatArray3.length);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 1492;
      intArray0[0] = 1492;
      int int1 = (-183);
      intArray0[1] = (-183);
      int int2 = (-2737);
      intArray0[2] = (-2737);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1492, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short)102;
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift((char[]) null, (int) (short)8, (-2018), 128);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1871, 1981);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.reverse((long[]) null, 128, 0);
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) 0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)2;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-25), 1543);
      assertArrayEquals(new byte[] {(byte)2, (byte)108, (byte)3, (byte) (-4), (byte)2}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 16;
      intArray0[1] = 820;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertArrayEquals(new int[] {16, 820}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      char[] charArray0 = new char[28];
      charArray0[2] = '\u0080';
      charArray0[3] = 'O';
      charArray0[4] = 'O';
      charArray0[5] = 'B';
      charArray0[6] = '8';
      charArray0[7] = '>';
      charArray0[8] = '(';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(28, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(28, charArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'B';
      doubleArray0[1] = (double) '8';
      doubleArray0[2] = (double) '\u0080';
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1.0);
      assertArrayEquals(new double[] {66.0, 56.0, 128.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 66.0, 56.0, 128.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(8, booleanArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '8';
      floatArray0[1] = (float) '>';
      floatArray0[2] = (float) '8';
      floatArray0[3] = (float) '>';
      floatArray0[4] = (float) '8';
      floatArray0[5] = (float) '>';
      boolean boolean3 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {56.0F, 62.0F, 56.0F, 62.0F, 56.0F, 62.0F}, floatArray0, 0.01F);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-3729);
      longArray0[4] = (long) (-1);
      longArray0[4] = (long) (-1);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), (-3729L), (-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), (-3729L), (-1L), 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1614);
      Character character0 = Character.valueOf('*');
      assertEquals('*', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('i');
      assertEquals('i', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'*', '*'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      
      int int1 = ArrayUtils.indexOf(longArray1, (-1L));
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), (-3729L), (-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), (-3729L), (-1L), 0L}, longArray1);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      int int2 = ArrayUtils.indexOf(shortArray0, (short)562, 0);
      assertArrayEquals(new short[] {(short) (-1614)}, shortArray0);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '\"';
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '\u0000';
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-";
      stringArray0[1] = "-";
      stringArray0[3] = "-";
      stringArray0[4] = "-";
      stringArray0[5] = "-";
      stringArray0[6] = "-";
      stringArray0[7] = "-";
      stringArray0[8] = "-";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertArrayEquals(new char[] {'\u0000', '\"', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'\u0000', '\"', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(4, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) '\"';
      longArray0[2] = (long) '\"';
      longArray0[3] = (long) (-3729);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) '\"';
      longArray0[6] = (long) '\"';
      longArray0[7] = (long) (-3729);
      longArray0[8] = (long) (-1);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-1L), 34L, 34L, (-3729L), (-1L), 34L, 34L, (-3729L), (-1L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)117;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 256, (byte)6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 256, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-3278);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short) (-3278), (int) (short)0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.reverse((long[]) null, 0, (int) (short)2);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean("<O");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean4);
      assertFalse(boolean5);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.valueOf("<O");
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean0));
      assertNotNull(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertTrue(boolean7);
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean4));
      assertNotNull(boolean7);
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = Boolean.valueOf((boolean) boolean3);
      assertFalse(boolean8);
      assertFalse(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean4));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean4));
      assertFalse(boolean3.equals((Object)boolean7));
      assertNotNull(boolean8);
      
      booleanArray0[7] = boolean8;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = '{';
      charArray0[2] = '6';
      charArray0[3] = '*';
      charArray0[4] = '0';
      charArray0[5] = '{';
      charArray0[6] = '`';
      ArrayUtils.swap(charArray0, 8, 8, 8);
      assertArrayEquals(new char[] {'6', '{', '6', '*', '0', '{', '`'}, charArray0);
      assertEquals(7, charArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '6';
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 54);
      assertArrayEquals(new int[] {54}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 200.261399975434;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 40.0;
      doubleArray0[3] = (-2563.8708758);
      doubleArray0[4] = (-1072.5941413);
      doubleArray0[5] = (-616.96340119954);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {200.261399975434, 1.0, 40.0, (-2563.8708758), (-1072.5941413), (-616.96340119954)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-116);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)119;
      doubleArray0[1] = (double) (byte) (-116);
      doubleArray0[2] = (double) (byte) (-85);
      doubleArray0[3] = (double) (byte) (-85);
      doubleArray0[4] = (double) (byte)119;
      doubleArray0[5] = (double) (byte) (-116);
      doubleArray0[6] = (double) (byte) (-116);
      doubleArray0[7] = (double) (byte) (-85);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {119.0, (-116.0), (-85.0), (-85.0), 119.0, (-116.0), (-116.0), (-85.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {119.0, (-116.0), (-85.0), (-85.0), 119.0, (-116.0), (-116.0), (-85.0)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, doubleArray0.length);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-72));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1463);
      shortArray0[1] = (short)766;
      shortArray0[2] = (short) (-580);
      shortArray0[3] = (short) (-1463);
      shortArray0[4] = (short) (-1463);
      shortArray0[6] = (short)233;
      Object[] objectArray0 = new Object[3];
      Float float0 = new Float((double) (short) (-580));
      assertEquals((-580.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1463));
      assertArrayEquals(new short[] {(short) (-1463), (short)766, (short) (-580), (short) (-1463), (short) (-1463), (short)0, (short)233, (short)0, (short)0}, shortArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals("{0, 3, 4}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(9, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) float0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1800L);
      longArray0[1] = 0L;
      longArray0[2] = (-402L);
      longArray0[3] = (-2439L);
      longArray0[4] = 348L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-1800L), 0L, (-402L), (-2439L), 348L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Double double0 = new Double((-2439L));
      assertEquals((-2439.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean1 = ArrayUtils.isSameType(bitSet0, double0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-2));
      assertEquals((-2.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2), mutableInt0.intValue());
      assertEquals((-2L), mutableInt0.longValue());
      assertEquals((-2), (int)mutableInt0.toInteger());
      assertEquals("-2", mutableInt0.toString());
      assertEquals((byte) (-2), mutableInt0.byteValue());
      assertEquals((-2), (int)mutableInt0.getValue());
      assertEquals((short) (-2), mutableInt0.shortValue());
      assertEquals((-2.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Character character0 = new Character('%');
      assertEquals('%', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.isSameType(mutableInt0, character0);
      assertEquals((-2.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2), mutableInt0.intValue());
      assertEquals((-2L), mutableInt0.longValue());
      assertEquals((-2), (int)mutableInt0.toInteger());
      assertEquals("-2", mutableInt0.toString());
      assertEquals((byte) (-2), mutableInt0.byteValue());
      assertEquals((-2), (int)mutableInt0.getValue());
      assertEquals((short) (-2), mutableInt0.shortValue());
      assertEquals((-2.0F), mutableInt0.floatValue(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2721;
      shortArray0[1] = (short)664;
      shortArray0[2] = (short)108;
      shortArray0[3] = (short)18688;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-1900);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2721);
      assertArrayEquals(new short[] {(short)2721, (short)664, (short)108, (short)18688, (short)2, (short) (-1900)}, shortArray0);
      assertTrue(boolean0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 11;
      intArray0[1] = (int) (short)0;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {11, 0}, intArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, intArray0.length);
      
      Boolean boolean2 = Boolean.valueOf(false);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      String string0 = ArrayUtils.toString((Object) boolean2, "Klo.'n6p");
      assertEquals("false", string0);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(string0);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1328);
      intArray1[1] = 11;
      intArray1[2] = 11;
      intArray1[3] = (int) (short)0;
      intArray1[4] = 11;
      intArray1[5] = 11;
      intArray1[6] = 11;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertArrayEquals(new int[] {(-1328), 11, 11, 0, 11, 11, 11}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(7, integerArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1328);
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) 11;
      doubleArray0[3] = (double) 11;
      doubleArray0[4] = (double) 11;
      doubleArray0[5] = (double) 11;
      doubleArray0[6] = (double) 11;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertArrayEquals(new double[] {(-1328.0), 11.0, 11.0, 11.0, 11.0, 11.0, 11.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {11.0, 11.0, 11.0, 11.0, 11.0, 11.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      int int0 = 3914;
      Boolean boolean0 = new Boolean("VdJ1&#p{/By");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("bLIy&");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean1;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      Boolean boolean2 = Boolean.valueOf(false);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[5] = boolean2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2836.7F;
      floatArray0[1] = 1091.27F;
      floatArray0[2] = 2836.7F;
      floatArray0[3] = 0.0F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {2836.7F, 1091.27F, 2836.7F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2836.7F, 1091.27F, 2836.7F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray0, 2836.7F);
      assertArrayEquals(new float[] {2836.7F, 1091.27F, 2836.7F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1091.27F, 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(2, floatArray2.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1091.27F;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 2836.7F;
      doubleArray0[4] = (-4051.641);
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 2836.7F;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-1090.169671353));
      assertArrayEquals(new double[] {0.0, 1091.27001953125, 0.0, 2836.699951171875, (-4051.641), 0.0, 2836.699951171875, (-1090.169671353)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1091.27001953125, 0.0, 2836.699951171875, (-4051.641), 0.0, 2836.699951171875}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      
      ArrayUtils.reverse((char[]) null, 84, 84);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      char[] charArray0 = new char[4];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'Q');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-281);
      shortArray0[1] = (short)2327;
      shortArray0[2] = (short) (-1);
      shortArray0[4] = (short)9;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-281);
      doubleArray0[1] = (double) (short) (-281);
      doubleArray0[2] = (double) (short) (-281);
      doubleArray0[3] = (double) (short)9;
      doubleArray0[4] = (double) (short)2327;
      doubleArray0[5] = (double) (short)9;
      doubleArray0[6] = (double) (short)2327;
      doubleArray0[7] = (-2181.5821632613597);
      doubleArray0[8] = (double) 'Q';
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-281.0), (-281.0), (-281.0), 9.0, 2327.0, 9.0, 2327.0, (-2181.5821632613597), 81.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 635.937668;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1197.95868123;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {635.937668, 0.0, 1197.95868123, 0.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(4, doubleArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-47);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-6);
      shortArray0[1] = (short) (byte)65;
      shortArray0[2] = (short) (byte)65;
      shortArray0[0] = (short) (byte)65;
      shortArray0[4] = (short) (byte)6;
      shortArray0[6] = (short)54;
      shortArray0[7] = (short) (byte) (-1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short) (-1);
      objectArray0[1] = (Object) (short)65;
      objectArray0[2] = (Object) (byte) (-1);
      objectArray0[3] = (Object) (short)65;
      objectArray0[4] = (Object) 0.0;
      Object object0 = ArrayUtils.get(objectArray0, 1, (Object) "6EV.*Ih=");
      assertEquals((short)65, object0);
      assertNotNull(object0);
      assertEquals(7, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, (-1), (int) (short)65, (int) (byte)65);
      assertEquals(7, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("Index: ");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = ArrayUtils.get((Boolean[]) null, (int) 2);
      assertNull(boolean3);
      
      ArrayUtils.swap((Object[]) null, (int) (byte)111, (int) (byte)111);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-63));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)16, (byte)16, (byte)0, (byte)111, (byte) (-1)}, byteArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean4 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)16, (byte)16, (byte)0, (byte)111, (byte) (-1)}, byteArray0);
      assertTrue(boolean4);
      assertEquals(7, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte)16;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short)3648;
      shortArray0[7] = (short) (byte) (-1);
      shortArray0[8] = (short) (byte)16;
      ArrayUtils.shift(shortArray0, 1440);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)16, (short) (-1), (short) (-1), (short) (-1), (short)3648, (short) (-1), (short)16}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '\"';
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '\u0000';
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-";
      stringArray0[1] = "-";
      stringArray0[3] = "-";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '\"';
      doubleArray0[1] = (double) (-3729);
      doubleArray0[2] = (-234.803137234);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-4596.767656041));
      assertArrayEquals(new double[] {34.0, (-3729.0), (-234.803137234)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {34.0, (-3729.0), (-234.803137234)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1653.50112442);
      assertArrayEquals(new double[] {34.0, (-3729.0), (-234.803137234)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {34.0, (-3729.0), (-234.803137234)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {34.0, (-3729.0), (-234.803137234)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) stringArray0, (Object) boolean1);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(bitSet0);
      assertEquals(9, stringArray0.length);
      
      ArrayUtils.shift(intArray0, (-1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-3729);
      longArray0[4] = (long) (-1);
      longArray0[4] = (long) (-1);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), (-3729L), (-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), (-3729L), (-1L), 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1614);
      Character character0 = Character.valueOf('*');
      assertEquals('*', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('i');
      assertEquals('i', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('4');
      assertEquals('4', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'*', '*'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      
      ArrayUtils.shift(intArray0, (int) (short) (-1614), (-3729), (-860));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Character character3 = new Character('N');
      assertEquals('N', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      
      Boolean boolean0 = ArrayUtils.get((Boolean[]) null, (-85));
      assertNull(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) character3, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1235), (-1235), (-1235));
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Short short0 = new Short((short) (-2765));
      assertEquals((short) (-2765), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)11);
      assertEquals((short)11, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[1];
      Short short3 = new Short((short) (-1065));
      assertEquals((short) (-1065), (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      
      shortArray0[0] = short3;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'X');
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)19);
      assertArrayEquals(new byte[] {(byte) (-61)}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-3805L), (int) (short)11);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-1065);
      intArray0[1] = (int) 'X';
      intArray0[2] = (int) 'X';
      intArray0[3] = (-2188);
      ArrayUtils.shift(intArray0, (-2188), (-2146641332), 3314);
      assertArrayEquals(new int[] {(-1065), 88, 88, (-2188)}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 635.937668;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1197.95868123;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {635.937668, 0.0, 1197.95868123, 0.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(4, doubleArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-47);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-6);
      shortArray0[1] = (short) (byte)65;
      shortArray0[2] = (short) (byte)65;
      shortArray0[0] = (short) (byte)65;
      shortArray0[4] = (short) (byte)6;
      shortArray0[6] = (short)54;
      shortArray0[7] = (short) (byte) (-1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short) (-1);
      objectArray0[1] = (Object) (short)65;
      objectArray0[2] = (Object) (byte) (-1);
      objectArray0[3] = (Object) (short)65;
      objectArray0[4] = (Object) 0.0;
      Object object0 = ArrayUtils.get(objectArray0, 1, (Object) "6EV.*Ih=");
      assertEquals((short)65, object0);
      assertNotNull(object0);
      assertEquals(7, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, (-1), (int) (short)65, (int) (byte)65);
      assertEquals(7, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      ArrayUtils.reverse(byteArray0, 2, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)124}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)124;
      objectArray0[1] = (Object) (byte)124;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte)124;
      objectArray0[5] = (Object) (byte)0;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(6, objectArray0.length);
      
      Character[] characterArray0 = new Character[3];
      char char0 = '4';
      Character character0 = Character.valueOf('4');
      assertEquals('4', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('4');
      assertEquals('4', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertEquals('4', (char)character2);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) char0;
      longArray0[2] = (long) (byte)124;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) '4';
      longArray0[5] = (long) (-3729);
      longArray0[6] = (long) (byte)124;
      longArray0[7] = (long) (byte)0;
      longArray0[8] = (long) char0;
      ArrayUtils.shift(longArray0, (int) (byte)0, (-466), (-3686));
      assertArrayEquals(new long[] {0L, 52L, 124L, 0L, 52L, (-3729L), 124L, 0L, 52L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2000;
      shortArray0[1] = (short)766;
      shortArray0[2] = (short)233;
      shortArray0[3] = (short)233;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short)2000;
      shortArray0[6] = (short) (-580);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-580), (short)2000, (short)0, (short)233, (short)233, (short)766, (short)2000}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)233;
      doubleArray0[1] = (double) (short) (-580);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.7910996301101824;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (short)2000;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (double) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 751.38);
      assertArrayEquals(new double[] {233.0, (-580.0), 1.0, 0.7910996301101824, 0.0, 2000.0, Double.NaN, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(8, doubleArray0.length);
      
      Short short0 = new Short((short)1012);
      assertEquals((short)1012, (short)short0);
      assertNotNull(short0);
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) boolean0, (Object) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('^');
      assertEquals('^', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('E');
      assertEquals('E', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, (-1605));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '=';
      charArray0[2] = 't';
      charArray0[3] = 'O';
      charArray0[4] = '?';
      charArray0[5] = 'B';
      charArray0[6] = '8';
      charArray0[7] = '>';
      charArray0[8] = '(';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'/', '=', 't', 'O', '?', 'B', '8', '>', '('}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '(';
      floatArray0[1] = (float) 'O';
      floatArray0[2] = (float) 't';
      ArrayUtils.swap(floatArray0, (-2011447989), (-2011447989), (-2011447989));
      assertArrayEquals(new float[] {40.0F, 79.0F, 116.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) 'B';
      characterArray0[1] = (Character) '=';
      characterArray0[2] = (Character) '?';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '?');
      assertArrayEquals(new char[] {'B', '=', '?'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray1.length);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {40.0F, 79.0F, 116.0F, 40.0F, 79.0F, 116.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {40.0F, 79.0F, 116.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(3, floatArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '=';
      longArray0[1] = (long) '/';
      longArray0[2] = (long) (-2011447989);
      longArray0[3] = (long) '=';
      longArray0[4] = (-1014L);
      longArray0[5] = (long) '=';
      longArray0[6] = (-1770L);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'B';
      intArray0[1] = (int) '>';
      intArray0[2] = (int) '?';
      intArray0[3] = (int) 'O';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 79, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = 'e';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = '(';
      charArray0[5] = '*';
      charArray0[6] = '>';
      charArray0[7] = 'B';
      charArray0[8] = '(';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'>', 'e', 'B', 'B', '(', '*', '>', 'B', '('}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      
      int int0 = (-55);
      ArrayUtils.swap((float[]) null, 1004, (-1135), (-55));
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('e');
      assertEquals('e', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '~');
      assertArrayEquals(new char[] {'e'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray1.length);
      assertEquals(1, characterArray0.length);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(characterArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'e', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = '&';
      charArray0[14] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(15, charArray0.length);
      assertEquals(30, charArray1.length);
      
      char[] charArray2 = ArrayUtils.removeElement(charArray0, '@');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(15, charArray0.length);
      assertEquals(14, charArray2.length);
      
      ArrayUtils.swap(floatArray0, 0, 55, (int) '@');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Double double0 = new Double(46.0);
      assertEquals(46.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) "', is neither of type Map.Entry nor an Array", (Object) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '=';
      charArray0[2] = '/';
      charArray0[3] = 'O';
      charArray0[4] = '?';
      charArray0[6] = '8';
      charArray0[7] = '>';
      charArray0[8] = '(';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'/', '=', '/', 'O', '?', '\u0000', '8', '>', '('}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '(';
      floatArray0[1] = (float) 'O';
      floatArray0[2] = (float) '/';
      ArrayUtils.swap(floatArray0, (int) '?', (int) '?', (int) '?');
      assertArrayEquals(new float[] {40.0F, 79.0F, 47.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) '\u0000';
      characterArray0[1] = (Character) '=';
      characterArray0[2] = (Character) '?';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '?');
      assertArrayEquals(new char[] {'\u0000', '=', '?'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray1.length);
      assertEquals(3, characterArray0.length);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {40.0F, 79.0F, 47.0F, 40.0F, 79.0F, 47.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {40.0F, 79.0F, 47.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(3, floatArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (char)characterArray0[0];
      intArray0[1] = (int) 'B';
      intArray0[2] = (int) '8';
      intArray0[3] = (int) '?';
      intArray0[4] = (int) '8';
      intArray0[5] = (int) '>';
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 66, 56, 63, 56, 62}, intArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, (int) characterArray0[0], 56, 2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 11;
      intArray0[1] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {11, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      String string0 = ArrayUtils.toString((Object) boolean1, "Klo.'n6p");
      assertEquals("false", string0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(string0);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1328);
      intArray1[1] = 11;
      intArray1[2] = 11;
      intArray1[3] = (int) (short)0;
      intArray1[4] = 11;
      intArray1[5] = 11;
      intArray1[6] = 11;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertArrayEquals(new int[] {(-1328), 11, 11, 0, 11, 11, 11}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(7, integerArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1328);
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) 11;
      doubleArray0[3] = (double) 11;
      doubleArray0[4] = (double) 11;
      doubleArray0[5] = (double) 11;
      doubleArray0[6] = (double) 11;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertArrayEquals(new double[] {11.0, 11.0, 11.0, 11.0, 11.0, 11.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1328.0), 11.0, 11.0, 11.0, 11.0, 11.0, 11.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (-1371L);
      longArray0[2] = 1L;
      longArray0[3] = (-2881L);
      longArray0[4] = 2147483647L;
      ArrayUtils.shift(longArray0, 2, (-194), 2);
      assertArrayEquals(new long[] {0L, (-1371L), 1L, (-2881L), 2147483647L}, longArray0);
      assertEquals(5, longArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-15);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte)48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-1251));
      assertArrayEquals(new byte[] {(byte)76}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)76;
      intArray0[1] = (-1251);
      intArray0[2] = (int) (byte)76;
      intArray0[3] = (-1251);
      intArray0[5] = (int) (byte)76;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (int) (byte)76);
      assertArrayEquals(new int[] {76, (-1251), 76, (-1251), 0, 76}, intArray0);
      assertArrayEquals(new int[] {76, (-1251), 76, (-1251), 0, 76}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) bitSet0;
      Object object0 = ArrayUtils.get(objectArray0, 611);
      assertNull(object0);
      assertEquals(8, objectArray0.length);
      
      objectArray0[1] = null;
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) (-1251);
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) 76;
      objectArray0[6] = (Object) 76;
      BitSet bitSet1 = (BitSet)ArrayUtils.get(objectArray0, (int) 76, (Object) bitSet0);
      assertArrayEquals(new byte[] {(byte)76}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(1, bitSet1.length());
      assertNotNull(bitSet1);
      assertSame(bitSet0, bitSet1);
      assertSame(bitSet1, bitSet0);
      assertEquals(1, byteArray0.length);
      assertEquals(8, objectArray0.length);
      
      // Undeclared exception!
      try { 
        bitSet1.clear(611, 48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex: 611 > toIndex: 48
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-627), 1101, 1655);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 1655;
      doubleArray0[2] = (double) 1101;
      doubleArray0[3] = (double) 1101;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1655.0, 1101.0, 1101.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      Integer integer0 = new Integer(1655);
      assertEquals(1655, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-32251);
      intArray0[1] = (int) (short) (-32251);
      intArray0[2] = 1655;
      intArray0[3] = (-758);
      intArray0[4] = 1655;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1514, (int) integer0);
      assertArrayEquals(new int[] {(-32251), (-32251), 1655, (-758), 1655, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.add((short[]) null, (short)119);
      assertArrayEquals(new short[] {(short)119}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-627), 1101, 1655);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1101;
      doubleArray0[1] = (double) (-627);
      doubleArray0[2] = (double) 1101;
      doubleArray0[3] = (double) 1101;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {1101.0, (-627.0), 1101.0, 1101.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-32251), (int) (short) (-32251));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-32251);
      intArray0[1] = (int) (short) (-32251);
      intArray0[2] = 1655;
      intArray0[3] = (-758);
      intArray0[4] = 1655;
      intArray0[5] = (-1);
      int int1 = ArrayUtils.lastIndexOf(intArray0, 1514, (-1));
      assertArrayEquals(new int[] {(-32251), (-32251), 1655, (-758), 1655, (-1)}, intArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1101.0);
      assertArrayEquals(new double[] {1101.0, (-627.0), 1101.0, 1101.0, 1101.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1101.0, (-627.0), 1101.0, 1101.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      charArray0[1] = 'u';
      charArray0[2] = 'B';
      charArray0[3] = 'x';
      charArray0[4] = 'L';
      charArray0[5] = '5';
      charArray0[6] = 'J';
      charArray0[7] = 'S';
      charArray0[8] = '9';
      ArrayUtils.reverse(charArray0, 1655, (-1));
      assertArrayEquals(new char[] {'b', 'u', 'B', 'x', 'L', '5', 'J', 'S', '9'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 3313L, 222);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 222;
      intArray0[1] = 222;
      intArray0[2] = (-753);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-753), (-2723));
      assertArrayEquals(new int[] {222, 222, (-753)}, intArray0);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Object[] objectArray0 = new Object[7];
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) 2;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, (long[]) null);
      assertArrayEquals(new long[] {2L, 2L, 2L, 0L, 2L, 2L, 2L}, longArray1);
      assertArrayEquals(new long[] {2L, 2L, 2L, 0L, 2L, 2L, 2L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)96;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)10);
      assertArrayEquals(new byte[] {(byte)48, (byte)77, (byte) (-65), (byte)43, (byte)96}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(5, byteArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false, false, false}, booleanArray0));
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(3, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 160);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[0] = null;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 160;
      longArray0[1] = (long) 160;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 160L, 160);
      assertArrayEquals(new long[] {160L, 160L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      
      Object object1 = ArrayUtils.removeAll(object0, bitSet0);
      assertArrayEquals(new long[] {160L, 160L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNull(object1);
      assertEquals(2, objectArray0.length);
      assertEquals(2, longArray0.length);
      
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      objectArray0[1] = null;
      Boolean boolean0 = new Boolean(",AC6c`NpCI");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Object object3 = ArrayUtils.get(objectArray0, (-1875), (Object) boolean0);
      assertEquals(false, object3);
      assertNotNull(object3);
      assertEquals(2, objectArray0.length);
      
      Object[] objectArray1 = new Object[8];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = null;
      objectArray1[1] = (Object) 160L;
      Float float0 = new Float((-4899.889447370298));
      assertEquals((-4899.8896F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object4 = ArrayUtils.toPrimitive((Object) float0);
      assertEquals((-4899.8896F), object4);
      assertNotNull(object4);
      
      objectArray1[2] = object4;
      objectArray1[3] = (Object) ",AC6c`NpCI";
      objectArray1[4] = null;
      objectArray1[5] = (Object) bitSet0;
      objectArray1[6] = (Object) ",AC6c`NpCI";
      Character character0 = Character.valueOf('{');
      assertEquals('{', (char)character0);
      assertNotNull(character0);
      
      Object object5 = ArrayUtils.get(objectArray0, 160, (Object) character0);
      assertEquals('{', object5);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotNull(object5);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(2, objectArray0.length);
      
      objectArray1[7] = object5;
      ArrayUtils.swap(objectArray1, 1968, 9, 160);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(8, objectArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1875);
      floatArray0[1] = (-654.1403F);
      floatArray0[2] = (float) 1968;
      floatArray0[3] = (float) (-1875);
      floatArray0[4] = (float) (-1875);
      floatArray0[5] = (float) 160L;
      int int0 = ArrayUtils.indexOf(floatArray0, (-1875.0F));
      assertArrayEquals(new float[] {(-1875.0F), (-654.1403F), 1968.0F, (-1875.0F), (-1875.0F), 160.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-2811);
      shortArray0[2] = (short)2100;
      shortArray0[3] = (short) (-2811);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-948);
      shortArray0[3] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-3085));
      assertArrayEquals(new short[] {(short)0, (short) (-2811), (short)2100, (short)0, (short)0, (short) (-948), (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(8, shortArray0.length);
      
      long[] longArray0 = new long[2];
      shortArray0[6] = (short)0;
      longArray0[1] = (long) (short)0;
      ArrayUtils.shift(longArray0, (int) (short) (-2811));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "v";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (short) (-3085);
      longArray1[1] = (-1671L);
      longArray1[2] = (long) (short)0;
      longArray1[4] = (long) (short) (-2811);
      longArray1[6] = (long) (short)2100;
      longArray1[7] = (long) (short)2100;
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertArrayEquals(new long[] {(-3085L), (-1671L), 0L, 0L, (-2811L), 0L, 2100L, 2100L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertEquals(8, longArray1.length);
      assertEquals(0, longArray2.length);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.shift((Object[]) stringArray0, (int) (short)0, (int) (short) (-948), (int) (short)0);
      assertSame(stringArray0, stringArray1);
      assertEquals(4, stringArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((short) (-2811));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray1, (Random) mockRandom0);
      assertArrayEquals(new long[] {(-1671L), 0L, 0L, (-2811L), 0L, 2100L, 2100L, (-3085L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray2));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertEquals(8, longArray1.length);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-68));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short)102;
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift((char[]) null, (int) (short)8, (-2018), 128);
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (short)8);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)8;
      floatArray0[1] = (float) (short)8;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertArrayEquals(new float[] {8.0F, 8.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 8.0F, 8.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, 110.991F, (int) (short)8);
      assertArrayEquals(new float[] {8.0F, 8.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 8.0F, 8.0F}, floatArray1, 0.01F);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(bitSet0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Short short0 = new Short((short) (-2765));
      assertEquals((short) (-2765), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)11);
      assertEquals((short)11, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[1];
      Short short3 = new Short((short) (-1065));
      assertEquals((short) (-1065), (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      
      shortArray0[0] = short3;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-1065);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 1012;
      longArray0[3] = (long) (short)11;
      longArray0[4] = (long) (short) (-1065);
      longArray0[5] = 60L;
      longArray0[6] = (long) (short)11;
      longArray0[7] = (long) (short)shortArray0[0];
      ArrayUtils.shift(longArray0, (-15));
      assertArrayEquals(new long[] {(-1065L), (-1065L), 0L, 1012L, 11L, (-1065L), 60L, 11L}, longArray0);
      assertEquals(8, longArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "v";
      stringArray0[1] = "./Aso>e9nGWZ@T";
      stringArray0[2] = "v";
      stringArray0[3] = "v";
      stringArray0[4] = "v";
      stringArray0[5] = "v";
      stringArray0[6] = "v";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)24;
      ArrayUtils.swap(byteArray0, (-81), (int) (byte)24);
      assertArrayEquals(new byte[] {(byte)88, (byte)43, (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (int) (byte)43, (int) (byte)88, 1527);
      assertArrayEquals(new byte[] {(byte)88, (byte)43, (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)43;
      longArray0[1] = (long) (byte)88;
      longArray0[2] = (long) (byte)24;
      longArray0[3] = (long) (byte)43;
      longArray0[4] = (long) (byte)24;
      longArray0[5] = (long) (byte)88;
      ArrayUtils.shift(longArray0, 84, 1527, (-2146645224));
      assertArrayEquals(new long[] {43L, 88L, 24L, 43L, 24L, 88L}, longArray0);
      assertEquals(6, longArray0.length);
      
      ArrayUtils.shift(booleanArray1, 84);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)24;
      shortArray0[1] = (short) (byte)88;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1498), 1240);
      assertArrayEquals(new short[] {(short)24, (short)88}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(2, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte)43, (byte)24}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'x';
      charArray0[2] = 'B';
      charArray0[0] = 'a';
      charArray0[4] = 'a';
      charArray0[5] = 'B';
      charArray0[6] = 'a';
      charArray0[7] = 'B';
      charArray0[8] = 'a';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'a', 'x', 'B', '\u0000', 'a', 'B', 'a', 'B', 'a'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 'B';
      objectArray0[1] = (Object) 'B';
      objectArray0[2] = (Object) 'a';
      objectArray0[3] = (Object) 'B';
      objectArray0[4] = (Object) '\u0000';
      objectArray0[5] = (Object) 'B';
      objectArray0[6] = (Object) 'B';
      objectArray0[7] = (Object) 'a';
      objectArray0[8] = (Object) 'B';
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, objectArray0.length);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-2340.137710229718));
      assertEquals((-2340.137710229718), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((-2340.137710229718), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(3, doubleArray0.length);
      
      doubleArray0[2] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2340.137710229718));
      assertArrayEquals(new double[] {(-2340.137710229718), (-2340.137710229718), (-2340.137710229718)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      char[] charArray2 = new char[1];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 'x';
      Character[] characterArray0 = ArrayUtils.toObject(charArray2);
      assertArrayEquals(new char[] {'x'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(characterArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray2.length);
      
      short[] shortArray1 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.add((short[]) null, (short) (-615));
      assertArrayEquals(new short[] {(short) (-615)}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = 'j';
      charArray0[3] = '9';
      charArray0[5] = '9';
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) (-105);
      floatArray1[1] = (float) 0;
      floatArray1[2] = (-1988.7599F);
      floatArray1[3] = (float) '9';
      floatArray1[4] = (float) '9';
      floatArray1[5] = (float) '9';
      ArrayUtils.shift(floatArray1, (int) (short)0, 3212, (-105));
      assertArrayEquals(new float[] {57.0F, 57.0F, 57.0F, (-105.0F), 0.0F, (-1988.7599F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, 57.0F, 2146742297);
      assertArrayEquals(new float[] {57.0F, 57.0F, 57.0F, (-105.0F), 0.0F, (-1988.7599F)}, floatArray1, 0.01F);
      assertEquals(2, int0);
      assertEquals(6, floatArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      int[] intArray0 = new int[5];
      intArray0[0] = 16;
      intArray0[1] = 16;
      intArray0[3] = 820;
      intArray0[4] = 820;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertArrayEquals(new int[] {16, 16, 0, 820, 820}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-50);
      intArray0[1] = 829;
      intArray0[2] = (-2880);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertArrayEquals(new int[] {(-50), 829, (-2880)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = 'N';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '~';
      charArray0[5] = '5';
      charArray0[6] = '.';
      charArray0[7] = 'w';
      boolean boolean0 = ArrayUtils.contains(charArray0, '.');
      assertArrayEquals(new char[] {'i', 'N', '@', '@', '~', '5', '.', 'w'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2836.7F;
      floatArray0[1] = 1091.27F;
      floatArray0[2] = 2837.6265F;
      floatArray0[3] = 0.0F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {2836.7F, 1091.27F, 2837.6265F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2836.7F, 1091.27F, 2837.6265F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray0, 2836.7F);
      assertArrayEquals(new float[] {2836.7F, 1091.27F, 2837.6265F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1091.27F, 2837.6265F, 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray2.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (-1), 0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.swap(objectArray0, 4, (-1), 76);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Short short0 = new Short((short) (-2765));
      assertEquals((short) (-2765), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)11);
      assertEquals((short)11, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[1];
      Short short3 = new Short((short) (-1065));
      assertEquals((short) (-1065), (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray0[0] = short3;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'X');
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-2765);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short) (-1065);
      floatArray0[3] = (float) (short)shortArray0[0];
      floatArray0[4] = (-297.0F);
      floatArray0[5] = (float) (short) (-1065);
      floatArray0[6] = (float) (short)shortArray0[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) shortArray0[0]);
      assertArrayEquals(new float[] {(-2765.0F), 0.0F, (-1065.0F), (-1065.0F), (-297.0F), (-1065.0F), (-1065.0F)}, floatArray0, 0.01F);
      assertEquals(2, int0);
      assertEquals(1, shortArray0.length);
      assertEquals(7, floatArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) classArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      char[] charArray0 = new char[28];
      charArray0[2] = '\u0080';
      charArray0[3] = 'O';
      charArray0[4] = 'O';
      charArray0[5] = 'B';
      charArray0[6] = '8';
      charArray0[7] = '>';
      charArray0[8] = '(';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(28, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1251), (-2147016729));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.reverse((long[]) null, (-2147016729), 180);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)57;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)2, (byte)17, (byte)0, (byte) (-35), (byte)57}, byteArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, byteArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-35);
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) '8';
      doubleArray0[3] = (double) '8';
      doubleArray0[4] = (double) '>';
      doubleArray0[5] = (double) 'B';
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {2.0, 56.0, 56.0, 62.0, 66.0, (-35.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '\"';
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '\u0000';
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-";
      stringArray0[1] = "-";
      stringArray0[3] = "-";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '\"';
      doubleArray0[1] = (double) (-3729);
      doubleArray0[2] = (-234.803137234);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-4596.767656041));
      assertArrayEquals(new double[] {34.0, (-3729.0), (-234.803137234)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {34.0, (-3729.0), (-234.803137234)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 3532, (-631));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 48.0, 2411, 119.7861818659173);
      assertArrayEquals(new double[] {34.0, (-3729.0), (-234.803137234)}, doubleArray0, 0.01);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences((double[]) null, 1.0);
      assertNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-963.73694F), 27);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '#';
      charArray0[2] = '/';
      char[] charArray1 = ArrayUtils.add(charArray0, 1, 'k');
      assertArrayEquals(new char[] {'-', '#', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'-', 'k', '#', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(10, charArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) 'k';
      intArray0[2] = (int) 'k';
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = (int) '#';
      intArray0[6] = 0;
      intArray0[7] = (int) '#';
      intArray0[8] = (-631);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 35, 8);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {35, 107, 107, 0, (-1), 35, 0, 35, (-631)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {35, 107, 107, 0, (-1), 35, 0, 35, (-631)}, intArray0);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 107;
      doubleArray0[1] = (double) 35;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1), 8, 35.0);
      assertArrayEquals(new double[] {107.0, 35.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences((double[]) null, (double) 107);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-497L);
      longArray0[1] = (-497L);
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = 'y';
      charArray0[2] = 'a';
      charArray0[3] = 'p';
      charArray0[4] = '6';
      charArray0[5] = ')';
      charArray0[6] = ')';
      charArray0[7] = ')';
      charArray0[8] = 'Y';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'p', 'y', 'a', 'p', '6', ')', ')', ')', 'Y'}, charArray0);
      assertArrayEquals(new char[] {'p', 'y', 'a', 'p', '6', ')', ')', ')', 'Y'}, charArray1);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)127, (int) (byte)127);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-3278);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1533);
      shortArray0[6] = (short)14;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-3278), (short)2, (short)0, (short) (-1533), (short)14, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      assertEquals(10, shortArray0.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)2, 2144971971);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-3278), (short)2, (short)0, (short) (-1533), (short)14, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      charArray0[4] = ')';
      charArray0[5] = '(';
      charArray0[6] = 'p';
      charArray0[7] = 'y';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {';', '\u0000', 'C', 'a', ')', '(', 'p', 'y'}, charArray1);
      assertArrayEquals(new char[] {';', '\u0000', 'C', 'a', ')', '(', 'p', 'y'}, charArray0);
      assertNotNull(charArray1);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray0.length);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, (int) 14);
      assertNull(object0);
      assertEquals(6, objectArray0.length);
      
      objectArray0[0] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) 'y';
      objectArray0[3] = (Object) (short)2;
      objectArray0[4] = (Object) (short)14;
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object2 = ArrayUtils.get(objectArray1, 13);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNull(object2);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      
      objectArray0[5] = null;
      Float float0 = new Float((float) (short)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) float0);
      assertFalse(boolean1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (-2308);
      shortArray0[2] = (short)76;
      shortArray0[3] = (short)2612;
      shortArray0[4] = (short)3085;
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Float float0 = new Float(175.8F);
      assertEquals(175.8F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      AbstractMap.SimpleEntry<Boolean, Float> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Boolean, Float>((Boolean) null, float0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<AbstractMap.SimpleEntry<Boolean, Float>> comparator0 = (Comparator<AbstractMap.SimpleEntry<Boolean, Float>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted((AbstractMap.SimpleEntry<Boolean, Float>[]) null, comparator0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)72);
      assertFalse(boolean0);
      
      Long long0 = new Long(69);
      assertEquals(69L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(69);
      assertEquals(69L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long1;
      longArray0[1] = long0;
      longArray0[2] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[2]);
      assertArrayEquals(new long[] {69L, 69L, 69L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 69;
      intArray0[1] = 0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-663.83), (int) (byte)72);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (byte)72;
      floatArray0[2] = (float) 69;
      floatArray0[3] = (float) (byte)72;
      ArrayUtils.shift(floatArray0, 3, 49, (-639));
      assertArrayEquals(new float[] {0.0F, 72.0F, 69.0F, 72.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      AbstractMap.SimpleEntry<Boolean, Float>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Boolean, Float>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 7);
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      AbstractMap.SimpleEntry<Boolean, Float> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Boolean, Float>(boolean1, (Float) 0.0F);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<Boolean, Float> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Boolean, Float>(abstractMap_SimpleEntry0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      Boolean boolean2 = Boolean.valueOf("");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Float float0 = new Float((double) 69.0F);
      assertEquals(69.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      AbstractMap.SimpleEntry<Boolean, Float> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Boolean, Float>(boolean2, float0);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry2);
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<Boolean, Float> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Boolean, Float>(boolean2, (Float) 72.0F);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertNotNull(abstractMap_SimpleEntry3);
      
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry3;
      AbstractMap.SimpleEntry<Boolean, Float> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Boolean, Float>(boolean1, (Float) 0.0F);
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry3));
      assertTrue(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry0));
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(abstractMap_SimpleEntry4);
      
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry4;
      Boolean boolean3 = Boolean.valueOf("?=");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Float float1 = new Float(1.0);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      AbstractMap.SimpleEntry<Boolean, Float> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<Boolean, Float>(boolean3, float1);
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry5);
      
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry5;
      Boolean boolean4 = new Boolean(false);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      AbstractMap.SimpleEntry<Boolean, Float> abstractMap_SimpleEntry6 = new AbstractMap.SimpleEntry<Boolean, Float>(boolean4, float0);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry2));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotNull(abstractMap_SimpleEntry6);
      
      abstractMap_SimpleEntryArray0[6] = abstractMap_SimpleEntry6;
      Comparator<AbstractMap.SimpleEntry<Boolean, Float>> comparator0 = (Comparator<AbstractMap.SimpleEntry<Boolean, Float>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1538), 0, (-1538), 3).when(comparator0).compare(any(java.util.AbstractMap.SimpleEntry.class) , any(java.util.AbstractMap.SimpleEntry.class));
      boolean boolean5 = ArrayUtils.isSorted(abstractMap_SimpleEntryArray0, comparator0);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean0);
      assertEquals(7, abstractMap_SimpleEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-627), 1101, 1655);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-627);
      doubleArray0[2] = (double) 1101;
      doubleArray0[3] = (double) 1101;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-627.0), 1101.0, 1101.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-32251), (int) (short) (-32251));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-32251);
      intArray0[1] = (int) (short) (-32251);
      intArray0[2] = 1655;
      intArray0[3] = (-758);
      intArray0[4] = 1655;
      intArray0[5] = (-1);
      int int1 = ArrayUtils.lastIndexOf(intArray0, 1514, (-1));
      assertArrayEquals(new int[] {(-32251), (-32251), 1655, (-758), 1655, (-1)}, intArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, (-627.0), 1101.0, 1101.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-627.0), 1101.0, 1101.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      charArray0[1] = 'u';
      charArray0[2] = 'B';
      charArray0[3] = 'x';
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      long[] longArray0 = new long[13];
      longArray0[1] = (long) (byte)1;
      longArray0[2] = (long) (byte)2;
      int[] intArray0 = new int[8];
      intArray0[0] = 2146315544;
      intArray0[1] = (int) (byte)2;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 69);
      assertArrayEquals(new int[] {2146315544, 2, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {69, 2146315544, 2, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      
      Long[] longArray1 = new Long[8];
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      longArray1[0] = long0;
      longArray1[1] = (Long) 2L;
      longArray1[2] = (Long) 2L;
      Long long1 = new Long(4340L);
      assertEquals(4340L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray1[3] = long1;
      longArray1[4] = (Long) 1L;
      longArray1[5] = (Long) 2L;
      longArray1[6] = (Long) 1L;
      longArray1[7] = (Long) 1L;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray1, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146315544, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((-2513.58));
      assertEquals((-2513.58F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1590.2765F);
      assertEquals(1590.2765F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1590.2765F);
      assertEquals(1590.2765F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(0.0);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(0.0);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(0.0);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = new Float((double) 1590.2765F);
      assertEquals(1590.2765F, (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      Float float7 = new Float((double) floatArray0[6]);
      assertEquals(1590.2765F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertEquals((float)float7, (float)float6, 0.01F);
      assertNotNull(float7);
      assertEquals(9, floatArray0.length);
      
      floatArray0[7] = float7;
      Float float8 = new Float(1089.669);
      assertEquals(1089.669F, (float)float8, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotNull(float8);
      
      floatArray0[8] = float8;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-2513.58F), 1590.2765F, 1590.2765F, 0.0F, 0.0F, 0.0F, 1590.2765F, 1590.2765F, 1089.669F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (float)floatArray0[7];
      doubleArray0[1] = (double) (float)floatArray0[4];
      doubleArray0[2] = (double) (float)floatArray0[6];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) floatArray0[2], 0);
      assertArrayEquals(new double[] {1590.2764892578125, 0.0, 1590.2764892578125}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(9, floatArray0.length);
      assertEquals(3, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1154.0247F);
      floatArray0[2] = 0.0F;
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-1));
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((short[]) null, 1630, (-4969));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-4969);
      longArray0[1] = (long) (-4969);
      longArray0[2] = 0L;
      longArray0[3] = (long) 2100;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (short) (-1);
      longArray0[6] = (long) 1630;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-4969L), (-4969L), 0L, 2100L, (-1L), (-1L), 1630L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = (-70);
      Integer integer0 = new Integer((-70));
      assertEquals((-70), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3660));
      assertEquals((-3660), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("java.lang.Double", (Integer) int0);
      assertEquals((-70), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-70));
      assertEquals((-70), (int)integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-70));
      assertEquals((-70), (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-70), (-3660), (-70), (-70), (-70)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[15];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-520), (-520), 0);
      assertEquals(15, booleanArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      int int0 = 84;
      Integer integer0 = new Integer(84);
      assertEquals(84, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-520));
      assertEquals((-520), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = (Integer) int0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(15, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = 'D';
      charArray0[2] = '~';
      charArray0[3] = '4';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'D');
      assertArrayEquals(new char[] {'\"', 'D', '~', '4'}, charArray0);
      assertArrayEquals(new char[] {'\"', '~', '4'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-38);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)72, (int) (byte) (-38));
      assertArrayEquals(new byte[] {(byte)0, (byte)76, (byte) (-42), (byte) (-81), (byte) (-81), (byte)72, (byte) (-38)}, byteArray0);
      assertEquals(5, int0);
      assertEquals(7, byteArray0.length);
      
      Byte byte0 = new Byte((byte) (-88));
      assertEquals((byte) (-88), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = ArrayUtils.removeAllOccurences((Object[]) null, (Object) byte0);
      assertNull(objectArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'D';
      longArray0[1] = 361L;
      longArray0[2] = (long) (byte) (-81);
      longArray0[3] = (long) (byte) (-81);
      longArray0[4] = (long) (byte)72;
      longArray0[5] = (long) '\"';
      longArray0[6] = (long) (byte) (-81);
      longArray0[7] = (long) '~';
      longArray0[8] = (long) (byte) (-81);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (byte) (-81));
      assertArrayEquals(new long[] {68L, 361L, (-81L), (-81L), 72L, 34L, (-81L), 126L, (-81L)}, longArray0);
      assertArrayEquals(new long[] {68L, 361L, 72L, 34L, 126L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, (-3729), 0);
      assertNull(floatArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-1010), 2);
      assertNull(charArray0);
      
      float[] floatArray1 = new float[9];
      floatArray1[0] = 1872.77F;
      floatArray1[1] = (float) 1697;
      floatArray1[2] = (float) 1697;
      floatArray1[3] = (float) (-1010);
      floatArray1[4] = (float) (-1);
      floatArray1[5] = (float) (-1010);
      floatArray1[6] = (float) '\"';
      floatArray1[7] = (float) (-1010);
      floatArray1[8] = 2070.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray1, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-11.193588670977903);
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)72);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-11.193588670977903), 69, (double) (byte)72);
      assertArrayEquals(new double[] {(-11.193588670977903), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)72;
      shortArray0[1] = (short) (byte)72;
      shortArray0[2] = (short) (byte)72;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (byte)72;
      shortArray0[5] = (short) (byte)72;
      shortArray0[6] = (short) (byte)72;
      ArrayUtils.reverse(shortArray0, 2100, (int) (short)72);
      assertArrayEquals(new short[] {(short)72, (short)72, (short)72, (short)0, (short)72, (short)72, (short)72}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)72;
      objectArray0[2] = (Object) (short)72;
      objectArray0[3] = (Object) (short)72;
      ArrayUtils.reverse(objectArray0);
      assertEquals(4, objectArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int int1 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 1279);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(4, objectArray0.length);
      
      AbstractMap.SimpleImmutableEntry<String, Long>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<String, Long>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 3);
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      AbstractMap.SimpleEntry<String, Long> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Long>("", long0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, Long> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Long>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<String, Long> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, Long>(abstractMap_SimpleEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<String, Long> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<String, Long>(abstractMap_SimpleImmutableEntry1);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<String, Long>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeAllOccurrences(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntry1);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(3, abstractMap_SimpleImmutableEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2100;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      ArrayUtils.reverse(shortArray0, (int) (short)2100, 2146837691);
      assertArrayEquals(new short[] {(short)2100, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-2142), Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)2100, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) (short)2100;
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) (short)2100;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 111L);
      assertArrayEquals(new long[] {2147483647L, 2100L, 2L, 2100L}, longArray0);
      assertArrayEquals(new long[] {111L, 2147483647L, 2100L, 2L, 2100L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = 111L;
      longArray2[1] = (long) (-1);
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      long[] longArray3 = ArrayUtils.removeElements(longArray0, longArray2);
      assertArrayEquals(new long[] {2147483647L, 2100L, 2L, 2100L}, longArray3);
      assertArrayEquals(new long[] {2147483647L, 2100L, 2L, 2100L}, longArray0);
      assertArrayEquals(new long[] {111L, (-1L), 0L}, longArray2);
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray0);
      assertEquals(4, longArray3.length);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray2.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1679);
      intArray0[1] = (-2142);
      intArray0[2] = (-1336);
      intArray0[3] = (-2142);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = 2146837691;
      intArray0[7] = (int) (short)2100;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {2100, 2146837691, (-1), (-1), (-2142), (-1336), (-2142), (-1679)}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), 7, 3872);
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)455;
      shortArray0[1] = (short)68;
      shortArray0[2] = (short)100;
      shortArray0[3] = (short)126;
      shortArray0[4] = (short)67;
      shortArray0[5] = (short)429;
      shortArray0[6] = (short) (-660);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)935);
      assertArrayEquals(new short[] {(short)455, (short)68, (short)100, (short)126, (short)67, (short)429, (short) (-660)}, shortArray0);
      assertArrayEquals(new short[] {(short)455, (short)68, (short)100, (short)126, (short)67, (short)429, (short) (-660)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'A'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)8, (int) (byte)8);
      assertArrayEquals(new byte[] {(byte)72, (byte)72}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(2147483647L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2827L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {2827L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-42);
      shortArray0[1] = (short) (byte)8;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (byte)72;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short) (-1529);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-42), (short)8, (short)0, (short)0, (short)72, (short)2, (short) (-1529)}, shortArray0);
      assertTrue(boolean0);
      assertEquals(7, shortArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)68, (-3167));
      assertArrayEquals(new short[] {(short) (-42), (short)8, (short)0, (short)0, (short)72, (short)2, (short) (-1529)}, shortArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(7, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)13);
      assertArrayEquals(new short[] {(short) (-42), (short)8, (short)0, (short)0, (short)72, (short)2, (short) (-1529)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-42), (short)8, (short)0, (short)0, (short)72, (short)2, (short) (-1529)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)72}, byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)72, (byte)72, (byte)72}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Long[] longArray2 = ArrayUtils.addAll(longArray1, longArray1);
      assertArrayEquals(new long[] {2827L}, longArray0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertEquals(2, longArray2.length);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2460.13F);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (short)72;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)72, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Object[] objectArray0 = new Object[7];
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) 2;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, (long[]) null);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L, 2L, 2L, 2L}, longArray1);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L, 2L, 2L, 2L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1154.0247F);
      floatArray0[2] = 0.0F;
      ArrayUtils.reverse(floatArray0, 0, 2);
      assertArrayEquals(new float[] {(-1154.0247F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-1));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 2;
      int[] intArray1 = ArrayUtils.add(intArray0, (-2414));
      assertArrayEquals(new int[] {(-1), 2}, intArray0);
      assertArrayEquals(new int[] {(-1), 2, (-2414)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'j';
      charArray0[2] = '&';
      charArray0[3] = '';
      charArray0[4] = 'A';
      char[] charArray1 = Character.toChars((int) 'A');
      assertArrayEquals(new char[] {'A'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray1.length);
      
      double[] doubleArray0 = new double[7];
      floatArray0[0] = (float) 2;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 2.0F;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) '&';
      doubleArray0[6] = (double) '';
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 0);
      assertArrayEquals(new double[] {0.0, (-1.0), 2.0, 2.0, 0.0, 38.0, 127.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 2.0, 2.0, 0.0, 38.0, 127.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      ArrayUtils.shift((short[]) null, (-1));
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short)102;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2, (int) (short)102);
      assertArrayEquals(new short[] {(short)8, (short)8, (short)102}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(3, shortArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = '3';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'J', (int) (short)102);
      assertArrayEquals(new char[] {'J', 'J', '3'}, charArray0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, charArray0.length);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Lj;aSHST!/p'q";
      stringArray0[1] = "";
      stringArray0[2] = "I[p($|";
      stringArray0[3] = "Z";
      stringArray0[4] = "The Array must not be null";
      ArrayUtils.swap(charArray0, (int) (short)102, 2146254005);
      assertArrayEquals(new char[] {'J', 'J', '3'}, charArray0);
      assertEquals(3, charArray0.length);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) stringArray0);
      assertNotNull(objectArray0);
      assertSame(stringArray0, objectArray0);
      assertEquals(9, objectArray0.length);
      assertEquals(9, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'J';
      floatArray0[1] = (float) (short)102;
      floatArray0[2] = (float) '3';
      floatArray0[3] = (float) 'J';
      floatArray0[4] = (float) (short)102;
      floatArray0[5] = (float) 'J';
      floatArray0[6] = (float) (short)8;
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) 2146254005);
      assertArrayEquals(new float[] {74.0F, 102.0F, 51.0F, 74.0F, 102.0F, 74.0F, 8.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-963.73694F), 27);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '/';
      char[] charArray1 = ArrayUtils.add(charArray0, 1, 'k');
      assertArrayEquals(new char[] {'-', '-', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'-', 'k', '-', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(10, charArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '-';
      intArray0[1] = (int) 'k';
      intArray0[2] = (int) 'k';
      intArray0[4] = (-1);
      intArray0[5] = (int) '-';
      intArray0[7] = (int) '-';
      intArray0[8] = (-631);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 45, 8);
      assertArrayEquals(new int[] {45, 107, 107, 0, (-1), 45, 0, 45, (-631)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray0, 'X');
      assertArrayEquals(new char[] {'X', '-', '-', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      assertArrayEquals(new char[] {'-', '-', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertEquals(10, charArray2.length);
      assertEquals(9, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short)111;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)32, (short)111}, shortArray0);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[1] = 'x';
      charArray0[5] = 'B';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'x', '\u0000', '\u0000', '\u0000', 'B', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      
      Double double0 = new Double((-2368.249728));
      assertEquals((-2368.249728), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1488.0377478646135));
      assertEquals((-1488.0377478646135), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)127, (byte)127, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)127, (byte)127, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      
      int int0 = ArrayUtils.indexOf(longArray1, (long) (byte)127);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals((-1), int0);
      assertFalse(longArray0.equals((Object)longArray2));
      assertNotSame(longArray0, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Integer integer0 = new Integer((-37));
      assertEquals((-37), (int)integer0);
      assertNotNull(integer0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((-37.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-37), (int)mutableInt0.toInteger());
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals("-37", mutableInt0.toString());
      assertEquals((-37), (int)mutableInt0.getValue());
      assertEquals((short) (-37), mutableInt0.shortValue());
      assertEquals((-37.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-37L), mutableInt0.longValue());
      assertEquals((-37), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.getValue();
      assertEquals((-37.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-37), (int)mutableInt0.toInteger());
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals("-37", mutableInt0.toString());
      assertEquals((-37), (int)mutableInt0.getValue());
      assertEquals((short) (-37), mutableInt0.shortValue());
      assertEquals((-37.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-37L), mutableInt0.longValue());
      assertEquals((-37), mutableInt0.intValue());
      assertEquals((-37), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte) (-25);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-32));
      assertArrayEquals(new byte[] {(byte) (-25), (byte) (-25), (byte) (-25), (byte) (-90), (byte) (-25), (byte) (-25), (byte) (-25)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte) (-25), (byte) (-25), (byte) (-90), (byte) (-25), (byte) (-25), (byte) (-25), (byte) (-32)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = 'x';
      charArray0[2] = 'B';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'B';
      charArray0[6] = 'k';
      charArray0[7] = 'B';
      charArray0[8] = 'k';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'k', 'x', 'B', 'k', 'k', 'B', 'k', 'B', 'k'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 'B';
      objectArray0[1] = (Object) 'B';
      objectArray0[2] = (Object) 'k';
      objectArray0[3] = (Object) 'B';
      objectArray0[4] = (Object) 'k';
      objectArray0[5] = (Object) 'B';
      objectArray0[6] = (Object) 'B';
      objectArray0[7] = (Object) 'k';
      objectArray0[8] = (Object) 'B';
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, objectArray0.length);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-2368.249728));
      assertEquals((-2368.249728), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1488.0377478646135));
      assertEquals((-1488.0377478646135), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals((-2368.249728), (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(3, doubleArray0.length);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2368.249728));
      assertArrayEquals(new double[] {(-2368.249728), (-1488.0377478646135), (-2368.249728)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-25);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-25));
      assertArrayEquals(new byte[] {(byte)127, (byte)3, (byte) (-25)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)127, (byte)3, (byte) (-25), (byte) (-25)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-3729);
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (-3729L);
      doubleArray0[3] = (double) (-3729L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-3729L);
      doubleArray0[6] = (double) (-1L);
      doubleArray0[7] = (double) (-3729L);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 120.4861818659173, 10, (-3729.0));
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-3729.0), (-3729.0), (-1.0), (-3729.0), (-1.0), (-3729.0)}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-3729.0);
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) (-1L);
      objectArray0[3] = (Object) (-1.0);
      objectArray0[4] = (Object) (-3729.0);
      objectArray0[5] = (Object) (-3729.0);
      Character character0 = new Character('3');
      assertEquals('3', (char)character0);
      assertNotNull(character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = '&';
      charArray0[14] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      Float float0 = new Float(924.3982F);
      assertEquals(924.3982F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      Long long0 = new Long((-1201L));
      assertEquals((-1201L), (long)long0);
      assertNotNull(long0);
      
      String string0 = ArrayUtils.toString((Object) float0, "java.lang.Float");
      assertEquals("924.3982", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((-2513.58));
      assertEquals((-2513.58F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1590.2765F);
      assertEquals(1590.2765F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1590.2765F);
      assertEquals(1590.2765F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(0.0);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(0.0);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(0.0);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      floatArray0[6] = floatArray0[5];
      Float float6 = new Float((double) floatArray0[6]);
      assertEquals(0.0F, (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float3, 0.01F);
      assertNotNull(float6);
      assertEquals(9, floatArray0.length);
      
      floatArray0[7] = float6;
      Float float7 = new Float((-2048.0));
      assertEquals((-2048.0F), (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotNull(float7);
      
      floatArray0[8] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-2513.58F), 1590.2765F, 1590.2765F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-2048.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)14;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)110, (byte) (-1), (byte)95, (byte)46, (byte)91, (byte)14}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 111, (float) 111);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1643.0);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-1643.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1643.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int int0 = 111;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 111, 1530.0526F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      float[] floatArray0 = new float[0];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1643.0);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-1643.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1643.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int int0 = 111;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 111, 1530.0526F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-11.193588670977903);
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)72);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-11.193588670977903), 69, (double) (byte)72);
      assertArrayEquals(new double[] {(-11.193588670977903), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (byte)72, 794);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (byte)72);
      assertArrayEquals(new short[] {(short)72}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 794;
      intArray0[1] = 1876;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (int) (byte)72;
      intArray0[5] = 794;
      ArrayUtils.swap(intArray0, (-2144739193), (-2146171391), (-296));
      assertArrayEquals(new int[] {794, 1876, (-1), (-1), 72, 794}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 2887L;
      longArray0[1] = (-3854L);
      longArray0[2] = (-935L);
      longArray0[3] = 0L;
      ArrayUtils.reverse(longArray0, 0, 0);
      assertArrayEquals(new long[] {2887L, (-3854L), (-935L), 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '=';
      charArray0[1] = '(';
      charArray0[2] = '?';
      int int0 = ArrayUtils.indexOf(charArray0, 'I', 2);
      assertArrayEquals(new char[] {'=', '(', '?'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      
      ArrayUtils.swap(longArray0, (-2146888409), (-2146888409));
      assertArrayEquals(new long[] {2887L, (-3854L), (-935L), 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-1004));
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      int int1 = ArrayUtils.indexOf((short[]) null, (short) (-1004));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'U';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (short) (-1004);
      longArray0[3] = (-2168L);
      longArray0[4] = (long) (-1);
      ArrayUtils.shift(longArray0, (-1));
      assertArrayEquals(new long[] {(-1L), (-1004L), (-2168L), (-1L), 85L}, longArray0);
      assertEquals(5, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1004L), (-2168L), (-1L), 85L}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1671L);
      longArray1[1] = (long) 'U';
      longArray1[2] = (long) (-1);
      longArray1[3] = (-2168L);
      longArray1[4] = (-2168L);
      longArray1[5] = (-2168L);
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {(-1671L), 85L, (-1L), (-2168L), (-2168L), (-2168L)}, longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(6, longArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((-1060L));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(longArray1, (Random) mockRandom1);
      assertArrayEquals(new long[] {85L, (-1L), (-2168L), (-2168L), (-2168L), (-1671L)}, longArray1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray2));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2811);
      shortArray0[1] = (short) (-2811);
      shortArray0[2] = (short)2100;
      shortArray0[3] = (short) (-2811);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-948);
      shortArray0[3] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-3085));
      assertArrayEquals(new short[] {(short) (-2811), (short) (-2811), (short)2100, (short)0, (short)0, (short) (-948), (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(8, shortArray0.length);
      
      long[] longArray0 = new long[2];
      shortArray0[6] = (short)0;
      longArray0[1] = (long) (short)0;
      ArrayUtils.shift(longArray0, (int) (short) (-2811));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "v";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (short) (-3085);
      longArray1[1] = (-1671L);
      longArray1[2] = (long) (short)0;
      longArray1[4] = (long) (short) (-2811);
      longArray1[5] = (long) (short)1043;
      longArray1[6] = (long) (short)2100;
      longArray1[7] = (long) (short)2100;
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertArrayEquals(new long[] {(-3085L), (-1671L), 0L, 0L, (-2811L), 1043L, 2100L, 2100L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(0, longArray2.length);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.shift((Object[]) stringArray0, (int) (short) (-2811), (int) (short) (-948), (int) (short)0);
      assertSame(stringArray0, stringArray1);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (-3634));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3634);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0.0F, (-3634));
      assertArrayEquals(new double[] {(-3634.0)}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)18688;
      shortArray0[2] = (short) (-816);
      shortArray0[3] = (short) (-816);
      shortArray0[4] = (short) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)18688, (short) (-816), (short) (-816), (short) (-1)}, shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)18688;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 0);
      assertArrayEquals(new int[] {18688, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {18688}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(1, intArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = ArrayUtils.addFirst((String[]) null, "D");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)19);
      assertNull(byteArray0);
      
      int int2 = ArrayUtils.indexOf((char[]) null, ':', 1417);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 18688}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)72);
      assertFalse(boolean0);
      
      Long long0 = new Long(69);
      assertEquals(69L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(69);
      assertEquals(69L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long1;
      longArray0[1] = long0;
      longArray0[2] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[2]);
      assertArrayEquals(new long[] {69L, 69L, 69L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 69;
      intArray0[1] = 0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-663.83), (int) (byte)72);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (byte)72;
      floatArray0[2] = (float) 69;
      floatArray0[3] = (float) (byte)72;
      ArrayUtils.shift(floatArray0, 3, 49, (-639));
      assertArrayEquals(new float[] {0.0F, 72.0F, 69.0F, 72.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      AbstractMap.SimpleEntry<Boolean, Float>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Boolean, Float>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 7);
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      AbstractMap.SimpleEntry<Boolean, Float> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Boolean, Float>(boolean1, (Float) 0.0F);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<Boolean, Float> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Boolean, Float>(abstractMap_SimpleEntry0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      Boolean boolean2 = Boolean.valueOf("");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Float float0 = new Float((double) 69.0F);
      assertEquals(69.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      AbstractMap.SimpleEntry<Boolean, Float> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Boolean, Float>(boolean2, float0);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry2);
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<Boolean, Float> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Boolean, Float>(boolean2, (Float) 72.0F);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertNotNull(abstractMap_SimpleEntry3);
      
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry3;
      AbstractMap.SimpleEntry<Boolean, Float> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Boolean, Float>(boolean1, (Float) 0.0F);
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry3));
      assertTrue(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry0));
      assertTrue(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(abstractMap_SimpleEntry4);
      
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry4;
      Boolean boolean3 = Boolean.valueOf("?=");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Float float1 = new Float(1.0);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      AbstractMap.SimpleEntry<Boolean, Float> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<Boolean, Float>(boolean3, float1);
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry4));
      assertNotNull(abstractMap_SimpleEntry5);
      
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry5;
      Boolean boolean4 = new Boolean(false);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      AbstractMap.SimpleEntry<Boolean, Float> abstractMap_SimpleEntry6 = new AbstractMap.SimpleEntry<Boolean, Float>(boolean4, float0);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry0));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotNull(abstractMap_SimpleEntry6);
      
      abstractMap_SimpleEntryArray0[6] = abstractMap_SimpleEntry6;
      Comparator<AbstractMap.SimpleEntry<Boolean, Float>> comparator0 = (Comparator<AbstractMap.SimpleEntry<Boolean, Float>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(java.util.AbstractMap.SimpleEntry.class) , any(java.util.AbstractMap.SimpleEntry.class));
      boolean boolean5 = ArrayUtils.isSorted(abstractMap_SimpleEntryArray0, comparator0);
      assertTrue(boolean5);
      assertFalse(boolean5 == boolean0);
      assertEquals(7, abstractMap_SimpleEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2809.3884F;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(6, booleanArray0.length);
      
      ArrayUtils.swap((short[]) null, (int) (byte) (-34), 2, (int) (short)605);
      int[] intArray0 = new int[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertArrayEquals(new float[] {2809.3884F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {2809.3884F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, (-621), (-1087));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-3278);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1533);
      shortArray0[6] = (short)14;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-3278), (short)2, (short)0, (short) (-1533), (short)14, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      assertEquals(10, shortArray0.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)2, 2144971971);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-3278), (short)2, (short)0, (short) (-1533), (short)14, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) (short) (-1533);
      doubleArray0[2] = (double) (short)14;
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = 0.7;
      doubleArray0[5] = (double) (short)2;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {2.0, (-1533.0), 14.0, 2.0, 0.7, 2.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0, (-1533.0), 14.0, 2.0, 0.7, 2.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-3278);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1533);
      shortArray0[6] = (short)14;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-3278), (short)2, (short)0, (short) (-1533), (short)14, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      assertEquals(10, shortArray0.length);
      
      ArrayUtils.swap(shortArray0, (int) (short)2, 2144971971);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-3278), (short)2, (short)0, (short) (-1533), (short)14, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = '8';
      charArray0[2] = 'C';
      charArray0[3] = 'a';
      charArray0[4] = ')';
      charArray0[5] = '(';
      charArray0[6] = 'p';
      charArray0[7] = 'y';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {';', '8', 'C', 'a', ')', '(', 'p', 'y'}, charArray1);
      assertArrayEquals(new char[] {';', '8', 'C', 'a', ')', '(', 'p', 'y'}, charArray0);
      assertNotNull(charArray1);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-11.193588670977903);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 3;
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) (-639);
      ArrayUtils.shift(floatArray0, (-639), 1, 11);
      assertArrayEquals(new float[] {3.0F, 3.0F, (-639.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "hR/l;jx.'B#3bXh";
      stringArray1[1] = "len must be > 0";
      stringArray1[2] = "1zc-lwcsT";
      stringArray1[3] = "HL8aC";
      stringArray1[4] = "%@s!";
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1506), stringArray0, stringArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1506, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (-1235.9F);
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1807), 2923);
      assertArrayEquals(new float[] {0.0F, (-1235.9F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1235.9F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-1807));
      assertEquals((-1807L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1807), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1807, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-497L);
      longArray0[1] = (-497L);
      ArrayUtils.swap(longArray0, (-1), 1492);
      assertArrayEquals(new long[] {(-497L), (-497L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[1] = 'l';
      charArray0[2] = 'b';
      charArray0[3] = 'x';
      charArray0[4] = 'J';
      Short short0 = new Short((short) (-1406));
      assertEquals((short) (-1406), (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.insert(2112, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      short[] shortArray2 = new short[1];
      shortArray2[0] = (short) (-1406);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2112, shortArray2, shortArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2112, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Integer integer0 = new Integer((-37));
      assertEquals((-37), (int)integer0);
      assertNotNull(integer0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((-37L), mutableInt0.longValue());
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals((-37), (int)mutableInt0.toInteger());
      assertEquals((short) (-37), mutableInt0.shortValue());
      assertEquals("-37", mutableInt0.toString());
      assertEquals((-37), (int)mutableInt0.getValue());
      assertEquals((-37.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-37.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-37), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.getValue();
      assertEquals((-37L), mutableInt0.longValue());
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals((-37), (int)mutableInt0.toInteger());
      assertEquals((short) (-37), mutableInt0.shortValue());
      assertEquals("-37", mutableInt0.toString());
      assertEquals((-37), (int)mutableInt0.getValue());
      assertEquals((-37.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-37.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-37), mutableInt0.intValue());
      assertEquals((-37), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer2;
      objectArray0[1] = (Object) mutableInt0;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer0, (-1));
      assertEquals((-1), int0);
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertEquals(2, objectArray0.length);
      
      int int1 = mutableInt0.addAndGet((Number) (-1));
      assertEquals((-38.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-38L), mutableInt0.longValue());
      assertEquals((short) (-38), mutableInt0.shortValue());
      assertEquals("-38", mutableInt0.toString());
      assertEquals((-38), (int)mutableInt0.getValue());
      assertEquals((byte) (-38), mutableInt0.byteValue());
      assertEquals((-38), (int)mutableInt0.toInteger());
      assertEquals((-38), mutableInt0.intValue());
      assertEquals((-38.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-38), int1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(int1 == int0);
      
      mutableInt0.setValue((Number) integer2);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)int0));
      
      Integer integer3 = new Integer(5);
      assertEquals(5, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      Integer integer4 = mutableInt0.getValue();
      assertEquals("-1", mutableInt0.toString());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)integer4);
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int1));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(5);
      assertEquals(5, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)93;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)12, (byte)15, (byte)76, (byte)36, (byte)93}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short)13);
      assertEquals((short)13, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte)36);
      assertEquals((short)36, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((byte)76);
      assertEquals((short)76, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((byte)93);
      assertEquals((short)93, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)1);
      assertEquals((short)1, (short)short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((byte)36);
      assertEquals((short)36, (short)short5);
      assertFalse(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short) (-1406));
      assertEquals((short) (-1406), (short)short6);
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) 76, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 76, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1634.481071;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 853, 853, 853);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Float float0 = new Float((float) 853);
      assertEquals(853.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-7);
      longArray0[1] = (long) 853;
      Short short0 = new Short((byte) (-7));
      assertEquals((short) (-7), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)98);
      assertEquals((short)98, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)1626);
      assertEquals((short)1626, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short short3 = new Short((short)20);
      assertEquals((short)20, (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      Short[] shortArray0 = new Short[15];
      shortArray0[0] = short1;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(449, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 449, Length: 15
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      int int0 = (-712);
      int int1 = (-2143718813);
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-712), (-2143718813));
      assertNull(booleanArray0);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("^o.oow#N@", long0);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) long1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2416);
      shortArray0[1] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) (short)0);
      assertNotNull(doubleStream0);
      
      mockRandom0.setSeed((-430));
      Object[] objectArray0 = new Object[26];
      objectArray0[0] = (Object) (short) (-2416);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short) (-2416), (-1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.reverse((long[]) null, 1782, 2);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 216, 216);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 216;
      floatArray0[1] = (float) 216;
      floatArray0[2] = (float) 216;
      floatArray0[3] = (float) 216;
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2404.3931;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2404.3931;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 165.79694785933;
      doubleArray0[7] = 361.209704095;
      doubleArray0[8] = (-990.0);
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1726, 1726, 1726);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.shift(doubleArray0, 1726);
      assertArrayEquals(new double[] {0.0, 2404.3931, 0.0, 0.0, 165.79694785933, 361.209704095, (-990.0), 2404.3931, 1.5}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-4596.767656041));
      assertArrayEquals(new double[] {0.0, 2404.3931, 0.0, 0.0, 165.79694785933, 361.209704095, (-990.0), 2404.3931, 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2404.3931, 0.0, 0.0, 165.79694785933, 361.209704095, (-990.0), 2404.3931, 1.5}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray0, (-144.107800808929));
      assertArrayEquals(new double[] {0.0, 2404.3931, 0.0, 0.0, 165.79694785933, 361.209704095, (-990.0), 2404.3931, 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2404.3931, 0.0, 0.0, 165.79694785933, 361.209704095, (-990.0), 2404.3931, 1.5}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) boolean0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-856);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1836;
      shortArray0[3] = (short)57;
      shortArray0[4] = (short)2076;
      shortArray0[5] = (short) (-1679);
      shortArray0[6] = (short)6;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)1);
      assertArrayEquals(new short[] {(short) (-856), (short)1, (short)1836, (short)57, (short)2076, (short) (-1679), (short)6}, shortArray0);
      assertArrayEquals(new short[] {(short) (-856), (short)1836, (short)57, (short)2076, (short) (-1679), (short)6}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)57;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {57}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      char char0 = '@';
      char[] charArray0 = new char[8];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((-2513.58));
      assertEquals((-2513.58F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1590.2765F);
      assertEquals(1590.2765F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1590.2765F);
      assertEquals(1590.2765F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(0.0);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(0.0);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(0.0);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = new Float(810.78616);
      assertEquals(810.78613F, (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      Float float7 = new Float((double) floatArray0[6]);
      assertEquals(810.78613F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotNull(float7);
      assertEquals(9, floatArray0.length);
      
      floatArray0[7] = float7;
      Float float8 = new Float(1089.669);
      assertEquals(1089.669F, (float)float8, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotNull(float8);
      
      floatArray0[8] = float8;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-2513.58F), 1590.2765F, 1590.2765F, 0.0F, 0.0F, 0.0F, 810.78613F, 810.78613F, 1089.669F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = 'b';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 7, (-1));
      assertArrayEquals(new char[] {'\"', '$', '$', 'b'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 7;
      floatArray0[1] = (float) 'b';
      floatArray0[2] = (float) '$';
      floatArray0[3] = (float) 7;
      floatArray0[4] = (float) 'b';
      floatArray0[5] = (float) '\"';
      floatArray0[6] = (float) 'b';
      floatArray0[7] = (float) '\"';
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 7);
      assertArrayEquals(new float[] {7.0F, 98.0F, 36.0F, 7.0F, 98.0F, 34.0F, 98.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {7.0F, 98.0F, 36.0F, 7.0F, 98.0F, 34.0F, 98.0F, 34.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(8, floatArray0.length);
      
      float[] floatArray2 = ArrayUtils.removeAll(floatArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {7.0F, 98.0F, 36.0F, 7.0F, 98.0F, 34.0F, 98.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {7.0F, 98.0F, 36.0F, 7.0F, 98.0F, 34.0F, 98.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {7.0F, 98.0F, 36.0F, 7.0F, 98.0F, 34.0F, 98.0F, 34.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertEquals(0, intArray0.length);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray2.length);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Short[] shortArray0 = new Short[3];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short)3466);
      assertEquals((short)3466, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      short[] shortArray1 = new short[6];
      shortArray1[4] = (short)3466;
      shortArray1[1] = (short) shortArray0[2];
      shortArray1[2] = (short) shortArray0[2];
      shortArray1[3] = short0;
      shortArray1[4] = (short)3466;
      shortArray1[5] = short0;
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) shortArray0[2]);
      assertArrayEquals(new short[] {(short)0, (short)3466, (short)3466, (short)0, (short)3466, (short)0}, shortArray1);
      assertEquals(4, int0);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      ArrayUtils.shift(booleanArray0, 4, 3353, 3353);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.reverse(shortArray1, 71, (-1680));
      assertArrayEquals(new short[] {(short)0, (short)3466, (short)3466, (short)0, (short)3466, (short)0}, shortArray1);
      assertEquals(6, shortArray1.length);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences((long[]) null, 60L);
      assertNull(longArray1);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      ArrayUtils.shift(charArray0, (int) (short)3466, (int) (short)3466, (int) short0);
      assertArrayEquals(new char[] {'i'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2117237398);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-2117237398));
      assertArrayEquals(new int[] {(-2117237398)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)85;
      shortArray0[1] = (short)945;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)557;
      shortArray0[4] = (short) (-1869);
      shortArray0[5] = (short) (-361);
      shortArray0[6] = (short)59;
      shortArray0[7] = (short)34;
      shortArray0[8] = (short)1212;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)59, 50);
      assertArrayEquals(new short[] {(short)85, (short)945, (short)0, (short)557, (short) (-1869), (short) (-361), (short)59, (short)34, (short)1212}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 635L;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)85;
      longArray0[3] = (long) (-2117237398);
      longArray0[4] = (long) (-2117237398);
      boolean boolean0 = ArrayUtils.contains(longArray0, 5369L);
      assertArrayEquals(new long[] {635L, 0L, 85L, (-2117237398L), (-2117237398L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {635L, 0L, 85L, (-2117237398L), (-2117237398L)}, longArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 99, (double) (short)34);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1800L);
      longArray0[1] = 0L;
      longArray0[2] = (-402L);
      longArray0[3] = (-2439L);
      longArray0[4] = 348L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-1800L), 0L, (-402L), (-2439L), 348L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-402L);
      doubleArray0[1] = (double) (-1800L);
      doubleArray0[2] = (double) (-402L);
      doubleArray0[3] = (-2342.7);
      doubleArray0[4] = (double) (-402L);
      doubleArray0[5] = (double) (-402L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-402.0), 2, 100.0);
      assertArrayEquals(new double[] {(-402.0), (-1800.0), (-402.0), (-2342.7), (-402.0), (-402.0)}, doubleArray0, 0.01);
      assertEquals(2, int0);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-3729.642533851));
      assertArrayEquals(new double[] {(-402.0), (-1800.0), (-402.0), (-2342.7), (-402.0), (-402.0), (-3729.642533851)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-402.0), (-1800.0), (-402.0), (-2342.7), (-402.0), (-402.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('^');
      assertEquals('^', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('E');
      assertEquals('E', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) character1);
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character2));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(2, characterArray1.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (char)character1;
      floatArray0[1] = (float) (char)character2;
      floatArray0[2] = (float) (char)character2;
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), 2);
      assertArrayEquals(new float[] {94.0F, 69.0F, 69.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3486);
      shortArray0[1] = (short)1212;
      shortArray0[2] = (short)219;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)794, (-1974));
      assertArrayEquals(new short[] {(short) (-3486), (short)1212, (short)219}, shortArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(3, shortArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (char)character2;
      doubleArray0[1] = (double) (short)219;
      doubleArray0[2] = (double) (short)1212;
      doubleArray0[3] = (-115.7874240452);
      doubleArray0[4] = (double) (short)794;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (short)1212;
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 1496.5305731, (-1461), (double) (short) (-3486));
      assertArrayEquals(new double[] {69.0, 219.0, 1212.0, (-115.7874240452), 794.0, (-1.0), 1212.0}, doubleArray0, 0.01);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2811);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[2] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)18;
      intArray0[4] = 8;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (-2378);
      intArray0[7] = (int) (short) (-2811);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)0, 0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 18, 8, 0, (-2378), (-2811)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 18, 8, 0, (-2378), (-2811)}, intArray0);
      assertTrue(boolean0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-46.0), (-2419), (double) (-2811));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (-46.0));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = new char[0];
      int int1 = 22;
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 22, 'U');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 22, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2416);
      shortArray0[1] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      mockRandom0.setSeed((short)0);
      Object[] objectArray0 = new Object[28];
      objectArray0[0] = (Object) (short) (-2416);
      objectArray0[1] = (Object) (short)0;
      ArrayUtils.shift((byte[]) null, (-374), (int) (short) (-2416), (-1014));
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.reverse(shortArray0, (int) (short)0, (int) (short) (-176));
      assertArrayEquals(new short[] {(short) (-2416), (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-3451), (-75));
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-2416), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.swap(booleanArray0, 1317, (-1), 14);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 976);
      assertNull(intArray0);
      
      MockRandom mockRandom0 = new MockRandom(88L);
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3648;
      shortArray0[1] = (short)3648;
      shortArray0[2] = (short)3648;
      shortArray0[3] = (short)3648;
      ArrayUtils.shift(shortArray0, (int) (short)3648);
      assertArrayEquals(new short[] {(short)3648, (short)3648, (short)3648, (short)3648}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-85);
      ArrayUtils.swap((boolean[]) null, (int) (byte)102, 13, 562);
      Double double0 = new Double((byte) (-85));
      assertEquals((-85.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      MutableInt mutableInt0 = new MutableInt((int) (byte) (-85));
      assertEquals((-85), (int)mutableInt0.getValue());
      assertEquals((-85.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-85.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-85", mutableInt0.toString());
      assertEquals((-85), (int)mutableInt0.toInteger());
      assertEquals((byte) (-85), mutableInt0.byteValue());
      assertEquals((-85L), mutableInt0.longValue());
      assertEquals((-85), mutableInt0.intValue());
      assertEquals((short) (-85), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals((-85), (int)mutableInt0.getValue());
      assertEquals((-85.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-85.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-85", mutableInt0.toString());
      assertEquals((-85), (int)mutableInt0.toInteger());
      assertEquals((byte) (-85), mutableInt0.byteValue());
      assertEquals((-85L), mutableInt0.longValue());
      assertEquals((-85), mutableInt0.intValue());
      assertEquals((short) (-85), mutableInt0.shortValue());
      assertEquals((short) (-85), mutableInt1.shortValue());
      assertEquals((-85), (int)mutableInt1.getValue());
      assertEquals((-85), (int)mutableInt1.toInteger());
      assertEquals((byte) (-85), mutableInt1.byteValue());
      assertEquals((-85L), mutableInt1.longValue());
      assertEquals("-85", mutableInt1.toString());
      assertEquals((-85.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-85), mutableInt1.intValue());
      assertEquals((-85.0), mutableInt1.doubleValue(), 0.01);
      assertNotNull(mutableInt1);
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mutableInt1;
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) double0;
      objectArray0[4] = (Object) mutableInt1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[3]);
      assertEquals(3, int0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1634.481071;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 853, 853, 853);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Float float0 = new Float((float) 853);
      assertEquals(853.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-7);
      longArray0[1] = (long) 853;
      longArray0[2] = (long) 853;
      longArray0[3] = (long) 3353;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1.0), 0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(bitSet0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1154.0247F);
      floatArray0[2] = 0.0F;
      ArrayUtils.reverse(floatArray0, 0, 0);
      assertArrayEquals(new float[] {0.0F, (-1154.0247F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-1));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, (-2414));
      assertArrayEquals(new int[] {(-1), 0}, intArray0);
      assertArrayEquals(new int[] {(-1), 0, (-2414)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'j';
      charArray0[2] = '&';
      charArray0[3] = '';
      charArray0[4] = 'A';
      int int1 = ArrayUtils.indexOf(intArray1, 0);
      assertArrayEquals(new int[] {(-1), 0}, intArray0);
      assertArrayEquals(new int[] {(-1), 0, (-2414)}, intArray1);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      short short0 = (short)0;
      Short short1 = new Short((short) (-2765));
      assertEquals((short) (-2765), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[1];
      Short short3 = new Short((short)0);
      assertEquals((short)0, (short)short3);
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[0] = short3;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) short0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 0, (long) 937);
      assertArrayEquals(new long[] {937L}, longArray0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      
      int int0 = ArrayUtils.indexOf(intArray0, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertEquals(7, intArray0.length);
      
      float[] floatArray1 = ArrayUtils.subarray((float[]) null, 0, Integer.MAX_VALUE);
      assertNull(floatArray1);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 0, (long) (-1));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(147);
      assertEquals(147, mutableInt0.intValue());
      assertEquals(147.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("147", mutableInt0.toString());
      assertEquals(147L, mutableInt0.longValue());
      assertEquals((short)147, mutableInt0.shortValue());
      assertEquals(147, (int)mutableInt0.toInteger());
      assertEquals(147.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(147, (int)mutableInt0.getValue());
      assertEquals((byte) (-109), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      int[] intArray0 = new int[22];
      intArray0[0] = 147;
      intArray0[1] = (-14);
      intArray0[2] = (-14);
      intArray0[3] = 147;
      intArray0[4] = 147;
      intArray0[5] = (-14);
      intArray0[6] = 147;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(22, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 147);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-32));
      assertEquals((byte) (-32), (byte)byte0);
      assertNotNull(byte0);
      
      Character character0 = new Character('X');
      assertEquals('X', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character[] characterArray1 = ArrayUtils.addAll(characterArray0, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertEquals(4, characterArray1.length);
      assertEquals(2, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3085);
      intArray0[1] = (-14);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertArrayEquals(new int[] {(-3085), (-14)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'W';
      charArray0[1] = '\\';
      charArray0[2] = '\"';
      charArray0[3] = 'V';
      charArray0[4] = 'D';
      charArray0[5] = 'k';
      charArray0[6] = 'X';
      charArray0[7] = 'B';
      charArray0[8] = '[';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'W', '\\', '\"', 'V', 'D', 'k', 'X', 'B', '['}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      int int0 = (-537);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-537);
      doubleArray0[1] = (double) (-537);
      doubleArray0[2] = (double) (-537);
      doubleArray0[3] = (double) (-537);
      doubleArray0[4] = (double) (-537);
      doubleArray0[5] = (double) (-537);
      doubleArray0[6] = (double) (-537);
      doubleArray0[7] = (double) (-537);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-537), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -537, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)3648;
      floatArray0[1] = (float) (short)3648;
      floatArray0[2] = (float) (short)3648;
      floatArray0[3] = (float) (short)3648;
      floatArray0[4] = (float) (short)3648;
      floatArray0[5] = (float) (short)3648;
      floatArray0[6] = (float) (short)3648;
      floatArray0[7] = (float) (short)3648;
      floatArray0[8] = (float) (short)3648;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {3648.0F, 3648.0F, 3648.0F, 3648.0F, 3648.0F, 3648.0F, 3648.0F, 3648.0F, 3648.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      Long long0 = new Long(296L);
      assertEquals(296L, (long)long0);
      assertNotNull(long0);
      
      String string0 = ArrayUtils.toString((Object) long0, "java.lang.Float");
      assertEquals("296", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      float[] floatArray0 = new float[1];
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '#';
      Short short0 = new Short((short)622);
      assertEquals((short)622, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-196));
      assertEquals((short) (-196), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertNotNull(short3);
      
      Short short4 = new Short((short) (-1708));
      assertEquals((short) (-1708), (short)short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short3;
      Integer integer0 = new Integer((short) (-1642));
      assertEquals((-1642), (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("-1642", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-1L));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)93;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 639, (int) (byte)93);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-7), (byte)93}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-7), (byte)93}, byteArray0);
      assertFalse(boolean1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(3, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '6');
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.insert((-1), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((short)4673);
      assertEquals((short)4673, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)110);
      assertEquals((short)110, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertEquals((short)4673, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals(8, shortArray0.length);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)3914);
      assertEquals((short)3914, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)3914);
      assertEquals((short)3914, (short)short4);
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      short short5 = (short) (-1);
      Short short6 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short6);
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short1));
      assertTrue(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short0));
      assertNotNull(short6);
      
      shortArray0[5] = short6;
      Short short7 = new Short((short) shortArray0[3]);
      assertEquals((short)3914, (short)short7);
      assertTrue(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short5));
      assertTrue(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short1));
      assertNotNull(short7);
      assertEquals(8, shortArray0.length);
      
      shortArray0[6] = short7;
      Short short8 = new Short((short)7);
      assertEquals((short)7, (short)short8);
      assertFalse(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short4));
      assertFalse(short8.equals((Object)short5));
      assertFalse(short8.equals((Object)short6));
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short0));
      assertNotNull(short8);
      
      shortArray0[7] = short8;
      Short short9 = ArrayUtils.get(shortArray0, (int) short5, short6);
      assertEquals((short) (-1), (short)short9);
      assertFalse(short9.equals((Object)short8));
      assertFalse(short9.equals((Object)short2));
      assertFalse(short9.equals((Object)short3));
      assertFalse(short9.equals((Object)short0));
      assertTrue(short9.equals((Object)short5));
      assertFalse(short9.equals((Object)short7));
      assertFalse(short9.equals((Object)short1));
      assertFalse(short9.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short7));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short8));
      assertTrue(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short0));
      assertNotNull(short9);
      assertEquals(8, shortArray0.length);
      
      String string0 = ArrayUtils.toString((Object) short9);
      assertEquals("-1", string0);
      assertFalse(short9.equals((Object)short8));
      assertFalse(short9.equals((Object)short2));
      assertFalse(short9.equals((Object)short3));
      assertFalse(short9.equals((Object)short0));
      assertTrue(short9.equals((Object)short5));
      assertFalse(short9.equals((Object)short7));
      assertFalse(short9.equals((Object)short1));
      assertFalse(short9.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short7));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short8));
      assertTrue(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short0));
      assertNotNull(string0);
      assertEquals(8, shortArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)110;
      doubleArray0[1] = (double) (short)shortArray0[0];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-1), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '=';
      charArray0[2] = 't';
      charArray0[3] = 'O';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'/', '=', 't', 'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertTrue(boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray1.length);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1200.5937017773));
      assertEquals((-1200.5937017773), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      AbstractMap.SimpleImmutableEntry<Double, Short>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Double, Short>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      Short short0 = new Short((short) (-1910));
      assertEquals((short) (-1910), (short)short0);
      assertNotNull(short0);
      
      AbstractMap.SimpleEntry<Double, Short> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Double, Short>(doubleArray0[0], short0);
      assertNotNull(abstractMap_SimpleEntry0);
      assertEquals(1, doubleArray0.length);
      
      AbstractMap.SimpleEntry<Double, Short> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Double, Short>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      assertEquals(1, doubleArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Double, Short> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Short>(abstractMap_SimpleEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertEquals(1, doubleArray0.length);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Double, Short> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Double, Short>(abstractMap_SimpleEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertEquals(1, doubleArray0.length);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(abstractMap_SimpleImmutableEntryArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      char[] charArray0 = new char[20];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(20, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 48);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)691);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('F');
      assertEquals('F', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'n');
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      objectArray0[3] = (Object) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) 2;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, (long[]) null);
      assertArrayEquals(new long[] {2L, 2L, 2L, 0L, 2L, 2L, 2L}, longArray1);
      assertArrayEquals(new long[] {2L, 2L, 2L, 0L, 2L, 2L, 2L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-14);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertArrayEquals(new int[] {(-14), 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-14);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-14.0);
      objectArray0[1] = (Object) (-14.0);
      objectArray0[2] = (Object) (-14.0);
      objectArray0[3] = (Object) (-14);
      objectArray0[4] = (Object) (-14.0);
      ArrayUtils.reverse(objectArray0, (-14), (-14));
      assertEquals(5, objectArray0.length);
      
      Float float0 = new Float(100.0);
      assertEquals(100.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 4711.66F);
      assertArrayEquals(new float[] {100.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Short short0 = new Short((short) (-2765));
      assertEquals((short) (-2765), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray0 = new Short[1];
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[0] = short2;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'X');
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2100;
      shortArray0[1] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((-430), 0);
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)2100}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      char[] charArray0 = new char[17];
      charArray0[0] = 'H';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(17, charArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-430);
      intArray0[1] = (-430);
      intArray0[2] = (int) '\u0000';
      intArray0[3] = (int) (short)0;
      ArrayUtils.reverse(charArray0, (int) (short)0, 111);
      assertEquals(17, charArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.removeElements((Double[]) null, (Double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)2100;
      long[] longArray1 = ArrayUtils.remove(longArray0, (int) (short)0);
      assertArrayEquals(new long[] {2100L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2107;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      ArrayUtils.reverse(shortArray0, (int) (short)2107, 2146837691);
      assertArrayEquals(new short[] {(short)2107, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-2142), Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)2107, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) (short)2107;
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) (short)2107;
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'g', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      
      Float float0 = new Float((-285.0F));
      assertEquals((-285.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object0);
      
      int int1 = new Character('g');
      assertEquals('g', int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, 0, 0, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 429;
      intArray0[3] = 429;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[6] = 429;
      intArray0[7] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertArrayEquals(new int[] {(-1), 429, 0, 429, 0, (-1), 429, (-1)}, intArray0);
      assertArrayEquals(new int[] {429, 0, 429, 0, (-1), 429, (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(429);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = '2';
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)3648;
      shortArray0[1] = (short)3648;
      shortArray0[2] = (short)3648;
      shortArray0[3] = (short)3648;
      shortArray0[4] = (short) (-2018);
      shortArray0[5] = (short)3648;
      shortArray0[6] = (short)3648;
      shortArray0[7] = (short)3648;
      ArrayUtils.shift(shortArray0, 167);
      assertArrayEquals(new short[] {(short)3648, (short)3648, (short)3648, (short) (-2018), (short)3648, (short)3648, (short)3648, (short)3648}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2887L;
      longArray0[1] = (-3854L);
      longArray0[2] = (-935L);
      longArray0[3] = (-24L);
      longArray0[4] = (-3854L);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-37));
      assertEquals((byte) (-37), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte) (-37);
      floatArray0[2] = (float) 0;
      floatArray0[3] = 1933.0F;
      floatArray0[4] = (float) 0;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-37.0F), 0.0F, 1933.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (-1267);
      shortArray0[2] = (short) (byte) (-107);
      shortArray0[3] = (short) (byte) (-37);
      shortArray0[4] = (short) (byte) (-107);
      shortArray0[5] = (short) (-3383);
      shortArray0[6] = (short) (byte) (-107);
      ArrayUtils.shift(shortArray0, 17, 2136539038, (int) (short) (-107));
      assertArrayEquals(new short[] {(short) (-1), (short) (-1267), (short) (-107), (short) (-37), (short) (-107), (short) (-3383), (short) (-107)}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Float float0 = new Float(2.133538948E9);
      assertEquals(2.13353894E9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-394);
      shortArray0[1] = (short)3648;
      shortArray0[2] = (short)3648;
      ArrayUtils.shift(shortArray0, (-1440));
      assertArrayEquals(new short[] {(short) (-394), (short)3648, (short)3648}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2887L;
      longArray0[1] = (-3854L);
      longArray0[2] = (-935L);
      longArray0[3] = (-24L);
      longArray0[4] = (-3854L);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-37));
      assertEquals((byte) (-37), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = Byte.valueOf((byte)2);
      assertEquals((byte)2, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-107);
      floatArray0[1] = (float) (byte) (-37);
      floatArray0[2] = (float) 0;
      floatArray0[3] = 1933.0F;
      floatArray0[4] = (float) 0;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-107.0F), (-37.0F), 0.0F, 1933.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (-1267);
      shortArray0[2] = (short) (byte) (-107);
      shortArray0[3] = (short) (byte) (-37);
      shortArray0[4] = (short) (byte) (-107);
      shortArray0[5] = (short) (-3396);
      shortArray0[6] = (short) (byte) (-107);
      ArrayUtils.shift(shortArray0, 1, 2136539038, (int) (short) (-37));
      assertArrayEquals(new short[] {(short) (-1), (short) (-107), (short) (-37), (short) (-107), (short) (-3396), (short) (-107), (short) (-1267)}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-85);
      Long long0 = new Long(60L);
      assertEquals(60L, (long)long0);
      assertNotNull(long0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte)102;
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte)102;
      floatArray0[4] = (float) 60L;
      ArrayUtils.shift(floatArray0, 57);
      assertArrayEquals(new float[] {102.0F, 60.0F, (-1.0F), 102.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, 1);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L}, longArray0);
      assertTrue(boolean0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      short[] shortArray0 = new short[19];
      shortArray0[8] = (short)0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-93));
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-93), (byte) (-93)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-93), 0, (-437));
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-93), (byte) (-93)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-437);
      intArray0[3] = (-437);
      intArray0[4] = (int) 'm';
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {2, 0, (-437), (-437), 109, 2, 0, (-437), (-437), 109}, intArray1);
      assertArrayEquals(new int[] {2, 0, (-437), (-437), 109}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(10, intArray1.length);
      assertEquals(5, intArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), 1979);
      assertArrayEquals(new char[] {'m'}, charArray1);
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('^');
      assertEquals('^', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('^');
      assertEquals('^', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character2));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(2, characterArray1.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)24;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)24, (byte)0, (byte)24, (byte)24, (byte)24}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Long long0 = new Long((byte)24);
      assertEquals(24L, (long)long0);
      assertNotNull(long0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (char)character0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {94L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(7, longArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (int) character1, 12);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character2));
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (int) (byte)24, 12);
      assertNull(charArray0);
      
      ArrayUtils.shift((Object[]) characterArray1, (int) (byte)0);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character2));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(2, characterArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray1, (Object) null, (int) character0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character2));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(bitSet0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(2, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)109;
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      charArray0[5] = 'T';
      charArray0[6] = 'T';
      charArray0[7] = 'T';
      charArray0[8] = 'T';
      ArrayUtils.swap(charArray0, (int) (byte) (-85), (int) (byte) (-1));
      assertArrayEquals(new char[] {'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T'}, charArray0);
      assertEquals(9, charArray0.length);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((boolean[]) null, 128, 1662);
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[3] = 'E';
      charArray0[4] = 'd';
      charArray0[2] = 'm';
      charArray0[6] = 'i';
      charArray0[7] = '#';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'm', 'E', 'd', '\u0000', 'i', '#'}, charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'm', 'E', 'd', '\u0000', 'i', '#'}, charArray1);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'i';
      doubleArray0[2] = (double) 'i';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 14.786181865917303, 105.0);
      assertArrayEquals(new double[] {105.0, 0.0, 105.0}, doubleArray0, 0.01);
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.swap(doubleArray1, 2, 2, 2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray1.length);
      
      ArrayUtils.swap(doubleArray0, 2, 16, 16);
      assertArrayEquals(new double[] {105.0, 0.0, 105.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray2 = new char[4];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 'm';
      charArray2[1] = 'd';
      charArray2[2] = 'Q';
      charArray2[3] = 'm';
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = (int) 'd';
      intArray0[2] = (int) 'Q';
      intArray0[3] = (int) '#';
      intArray0[4] = (int) 'Q';
      intArray0[5] = (int) 'i';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 105, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-11.193588670977903);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 3;
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) (-639);
      ArrayUtils.shift(floatArray0, (-639), 1, 11);
      assertArrayEquals(new float[] {3.0F, 3.0F, (-639.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.swap(doubleArray0, (-1403), 11, 353);
      assertArrayEquals(new double[] {(-11.193588670977903), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-11.193588670977903), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-17L);
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-17L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[2] = 'e';
      charArray0[3] = 'E';
      charArray0[4] = 'c';
      charArray0[5] = 'm';
      charArray0[6] = 'i';
      charArray0[7] = '7';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'e', 'E', 'c', 'm', 'i', '7'}, charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'e', 'E', 'c', 'm', 'i', '7'}, charArray1);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'i';
      doubleArray0[2] = (double) 'i';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 14.786181865917303, 105.0);
      assertArrayEquals(new double[] {105.0, 0.0, 105.0}, doubleArray0, 0.01);
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray1);
      assertArrayEquals(new char[] {'Q', '\u0000', 'e', 'E', 'c', 'm', 'i', '7'}, charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'e', 'E', 'c', 'm', 'i', '7'}, charArray1);
      assertFalse(boolean0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-17L);
      doubleArray1[1] = (double) 'e';
      ArrayUtils.swap(doubleArray1, 2, 2, 2);
      assertArrayEquals(new double[] {(-17.0), 101.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray1.length);
      
      ArrayUtils.swap(doubleArray0, 2, 16, 16);
      assertArrayEquals(new double[] {105.0, 0.0, 105.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-17L)}, longArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray2 = new char[4];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 'm';
      charArray2[1] = 'c';
      charArray2[2] = 'Q';
      charArray2[3] = 'E';
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = (int) 'c';
      intArray0[2] = (int) 'Q';
      intArray0[3] = (int) 'E';
      intArray0[4] = (int) 'Q';
      intArray0[5] = (int) 'i';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 105, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      char[] charArray0 = new char[0];
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-631);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1611), 515);
      assertArrayEquals(new int[] {1, (-631), 0}, intArray0);
      assertArrayEquals(new int[] {1, (-631), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      ArrayUtils.swap(booleanArray0, 57, Integer.MAX_VALUE, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      ArrayUtils.shift(floatArray0, (-514));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 57;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (double) (-514);
      doubleArray1[3] = (double) 57;
      doubleArray1[4] = (-2934.720073137);
      doubleArray1[5] = (double) Integer.MAX_VALUE;
      doubleArray1[6] = (double) 2;
      doubleArray1[7] = (double) (-514);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, 57.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, (-1.0), (-514.0), 57.0, (-2934.720073137), 2.147483647E9, 2.0, (-514.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(2, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-844.407F);
      floatArray0[1] = 1066.445F;
      floatArray0[2] = (-2858.6345F);
      floatArray0[3] = (-2595.06F);
      floatArray0[4] = 1120.0F;
      floatArray0[5] = (-1988.7599F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2858.6345F), 1);
      assertArrayEquals(new float[] {(-844.407F), 1066.445F, (-2858.6345F), (-2595.06F), 1120.0F, (-1988.7599F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(6, floatArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-2858.6345F);
      objectArray0[1] = (Object) 1066.445F;
      objectArray0[2] = (Object) (-844.407F);
      objectArray0[3] = (Object) (-1988.7599F);
      objectArray0[4] = (Object) (-2595.06F);
      objectArray0[5] = (Object) (-2595.06F);
      objectArray0[6] = (Object) (-2858.6345F);
      objectArray0[7] = (Object) (-2858.6345F);
      objectArray0[8] = (Object) 1120.0F;
      Boolean[] booleanArray0 = new Boolean[3];
      boolean[] booleanArray1 = new boolean[9];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = true;
      booleanArray1[5] = false;
      booleanArray1[6] = false;
      booleanArray1[7] = false;
      booleanArray1[8] = true;
      ArrayUtils.reverse(booleanArray1, 1, 1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, false, true}, booleanArray1));
      assertEquals(9, booleanArray1.length);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("l");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("l");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 1);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1613);
      intArray0[1] = (-1613);
      intArray0[2] = (-2181);
      boolean[] booleanArray0 = new boolean[2];
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2181);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1613), 1579, (-922.22258));
      assertArrayEquals(new double[] {(-2181.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, (double) (-2181));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2181.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      int int1 = 565;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(565, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 565, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[8];
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = 'F';
      charArray0[2] = 'p';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'', 'F', 'p'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = (Character) 'p';
      characterArray0[1] = (Character) '';
      characterArray0[2] = (Character) '';
      characterArray0[3] = (Character) 'F';
      characterArray0[4] = (Character) 'p';
      characterArray0[5] = (Character) 'F';
      characterArray0[6] = (Character) '';
      characterArray0[7] = (Character) '';
      characterArray0[8] = (Character) 'p';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertEquals(9, characterArray1.length);
      assertEquals(9, characterArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, ", Length: 0");
      assertNull(stringArray0);
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray1, 7, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2100;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      ArrayUtils.reverse(shortArray0, (int) (short)2100, 2146837691);
      assertArrayEquals(new short[] {(short)2100, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-2142), Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)2100, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) (short)2100;
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) (short)2100;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 111L);
      assertArrayEquals(new long[] {2147483647L, 2100L, 2L, 2100L}, longArray0);
      assertArrayEquals(new long[] {111L, 2147483647L, 2100L, 2L, 2100L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = 111L;
      longArray2[1] = (long) (-1);
      longArray2[2] = (-338L);
      long[] longArray3 = ArrayUtils.subarray(longArray2, 2146837691, 1240);
      assertArrayEquals(new long[] {}, longArray3);
      assertArrayEquals(new long[] {111L, (-1L), (-338L)}, longArray2);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray3.length);
      assertEquals(3, longArray2.length);
      
      Short[] shortArray2 = new Short[0];
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertArrayEquals(new short[] {}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertNotNull(shortArray3);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      
      Long long0 = new Long(314L);
      assertEquals(314L, (long)long0);
      assertNotNull(long0);
      
      int int1 = ArrayUtils.indexOf((Object[]) shortArray2, (Object) long0, 1839);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(0, shortArray2.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, (int) (byte)2, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = 'P';
      charArray0[2] = '9';
      charArray0[3] = 'M';
      charArray0[4] = 'g';
      charArray0[5] = 'r';
      charArray0[6] = '-';
      int int0 = ArrayUtils.indexOf(charArray0, 'g');
      assertArrayEquals(new char[] {'', 'P', '9', 'M', 'g', 'r', '-'}, charArray0);
      assertEquals(4, int0);
      assertEquals(7, charArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'', 'P', '9', 'M', 'g', 'r', '-'}, charArray0);
      assertTrue(boolean0);
      assertEquals(7, charArray0.length);
      
      Float float0 = new Float(1885.493F);
      assertEquals(1885.493F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) float0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(81.0);
      assertEquals(81.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(81.0);
      assertEquals(81.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(81.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertEquals(81.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      ArrayUtils.swap((boolean[]) null, 0, 0);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '81.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2836.7F;
      floatArray0[1] = 1091.27F;
      floatArray0[2] = 2837.6265F;
      floatArray0[3] = 0.0F;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray0, 2836.7F);
      assertArrayEquals(new float[] {2836.7F, 1091.27F, 2837.6265F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1091.27F, 2837.6265F, 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray2.length);
      
      int[] intArray0 = new int[2];
      floatArray0[3] = (float) 0;
      intArray0[1] = 0;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (-1), 0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)24);
      assertEquals((short)24, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = Short.valueOf((short)0);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)24, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      short[] shortArray0 = new short[2];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ArrayUtils.reverse(shortArray0, (int) (short)2100, 2146837691);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 2146837691, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) (byte)2;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 145L);
      assertArrayEquals(new long[] {2147483647L, 0L, 2L, 0L}, longArray0);
      assertArrayEquals(new long[] {145L, 2147483647L, 0L, 2L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      
      long[] longArray2 = ArrayUtils.subarray(longArray0, 2146837691, 1240);
      assertArrayEquals(new long[] {2147483647L, 0L, 2L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray2.length);
      
      Short[] shortArray2 = new Short[0];
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertArrayEquals(new short[] {}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertNotNull(shortArray3);
      assertNotSame(shortArray3, shortArray0);
      assertSame(shortArray3, shortArray1);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      
      Long long0 = new Long(314L);
      assertEquals(314L, (long)long0);
      assertNotNull(long0);
      
      int int1 = ArrayUtils.indexOf((Object[]) shortArray2, (Object) long0, 1839);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-39));
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-39);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-39.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-39);
      floatArray0[1] = (float) (byte) (-39);
      floatArray0[2] = (float) (byte) (-39);
      floatArray0[3] = (float) (byte) (-39);
      floatArray0[4] = (float) (byte) (-39);
      floatArray0[5] = (float) (byte) (-39);
      floatArray0[6] = (float) (byte) (-39);
      floatArray0[7] = (float) (byte) (-39);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-39.0F));
      assertArrayEquals(new float[] {(-39.0F), (-39.0F), (-39.0F), (-39.0F), (-39.0F), (-39.0F), (-39.0F), (-39.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = 'F';
      charArray0[2] = 'p';
      ArrayUtils.swap(charArray0, 216, 50, (int) (byte) (-39));
      assertArrayEquals(new char[] {'', 'F', 'p'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'', 'F', 'p'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = (Character) 'p';
      characterArray0[1] = (Character) '';
      characterArray0[2] = (Character) '';
      characterArray0[3] = (Character) 'F';
      characterArray0[4] = (Character) 'p';
      characterArray0[5] = (Character) 'F';
      characterArray0[6] = (Character) '';
      characterArray0[7] = (Character) '';
      characterArray0[8] = (Character) 'p';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, characterArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray1);
      assertArrayEquals(new float[] {(-39.0F), (-39.0F), (-39.0F), (-39.0F), (-39.0F), (-39.0F), (-39.0F), (-39.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertTrue(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-17L);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2100;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      ArrayUtils.reverse(shortArray0, (int) (short)2100, 2146837691);
      assertArrayEquals(new short[] {(short)2100, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-2142), Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)2100, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) (short)2100;
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) (short)2100;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 111L);
      assertArrayEquals(new long[] {2147483647L, 2100L, 2L, 2100L}, longArray0);
      assertArrayEquals(new long[] {111L, 2147483647L, 2100L, 2L, 2100L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 2L;
      Object object0 = ArrayUtils.get(objectArray0, 2146837691);
      assertNull(object0);
      assertEquals(8, objectArray0.length);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) 2L;
      objectArray0[3] = (Object) 2100L;
      objectArray0[4] = (Object) (byte)2;
      objectArray0[5] = (Object) (byte)2;
      objectArray0[6] = (Object) 2100L;
      objectArray0[7] = (Object) (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[2]);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Short[] shortArray0 = new Short[3];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short)3466);
      assertEquals((short)3466, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short)3466;
      shortArray1[1] = (short) shortArray0[2];
      shortArray1[2] = (short) shortArray0[2];
      shortArray1[3] = short0;
      shortArray1[4] = (short)3466;
      shortArray1[5] = short0;
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) shortArray0[2]);
      assertArrayEquals(new short[] {(short)3466, (short)3466, (short)3466, (short)0, (short)3466, (short)0}, shortArray1);
      assertEquals(4, int0);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      ArrayUtils.shift(booleanArray0, 4, 3353, 3353);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.reverse(shortArray1, 71, (-1680));
      assertArrayEquals(new short[] {(short)3466, (short)3466, (short)3466, (short)0, (short)3466, (short)0}, shortArray1);
      assertEquals(6, shortArray1.length);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences((long[]) null, 60L);
      assertNull(longArray1);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      short[] shortArray2 = new short[5];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = short0;
      shortArray2[1] = short0;
      shortArray2[2] = short0;
      shortArray2[3] = (short)3466;
      shortArray2[4] = (short)3466;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray2, (short) (-68), (int) (short)3466);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)3466, (short)3466}, shortArray2);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(bitSet0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(5, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 'j', 2146742297);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 365.3596;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {818.0, 0.0, 365.3596}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)2070;
      floatArray0[2] = (float) (short)2070;
      floatArray0[3] = (-1959.0961F);
      floatArray0[4] = (float) (short) (-583);
      floatArray0[5] = (float) (short)676;
      floatArray0[6] = (float) (short) (-1139);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-611.7F));
      assertArrayEquals(new float[] {0.0F, 2070.0F, 2070.0F, (-1959.0961F), (-583.0F), 676.0F, (-1139.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 2070.0F, 2070.0F, (-1959.0961F), (-583.0F), 676.0F, (-1139.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)314;
      shortArray0[1] = (short)3039;
      shortArray0[2] = (short)5775;
      shortArray0[3] = (short) (-654);
      shortArray0[4] = (short)1987;
      shortArray0[5] = (short)3422;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)3422, (short)1987, (short) (-654), (short)5775, (short)3039, (short)314}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)314;
      longArray0[1] = (long) (short) (-654);
      longArray0[2] = (long) (short)3039;
      longArray0[3] = (long) (short)5775;
      longArray0[4] = (long) (short)314;
      int int0 = ArrayUtils.indexOf(longArray0, (-24L));
      assertArrayEquals(new long[] {314L, (-654L), 3039L, 5775L, 314L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = '\'';
      charArray0[2] = 'G';
      charArray0[3] = 'y';
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'y';
      intArray0[1] = (int) (short)5775;
      intArray0[2] = (int) '\'';
      shortArray0[3] = (short)3422;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {121, 5775, 39, 0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)2224);
      assertArrayEquals(new short[] {(short)3422, (short)1987, (short) (-654), (short)3422, (short)3039, (short)314}, shortArray0);
      assertArrayEquals(new short[] {(short)3422, (short)1987, (short) (-654), (short)3422, (short)3039, (short)314, (short)2224}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-844.407F);
      floatArray0[1] = (-844.407F);
      floatArray0[2] = (-2858.6345F);
      floatArray0[3] = (-2595.06F);
      floatArray0[4] = 1120.0F;
      floatArray0[5] = (-1988.7599F);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-2858.6345F);
      objectArray0[1] = (Object) (-844.407F);
      objectArray0[2] = (Object) (-844.407F);
      objectArray0[3] = (Object) (-1988.7599F);
      objectArray0[4] = (Object) (-2595.06F);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1154.0247F);
      floatArray0[2] = 0.0F;
      ArrayUtils.reverse(floatArray0, 0, 0);
      assertArrayEquals(new float[] {0.0F, (-1154.0247F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-1));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, (-2414));
      assertArrayEquals(new int[] {(-1), 0}, intArray0);
      assertArrayEquals(new int[] {(-1), 0, (-2414)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short) (byte)0, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)279);
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(14, byteArray1.length);
      assertEquals(7, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      int int2 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true, false}, booleanArray0));
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1135);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (-1135), 1.0);
      assertArrayEquals(new double[] {(-1135.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-809.01437));
      assertArrayEquals(new double[] {(-1135.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1135.0), 0.0, 0.0, (-809.01437)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)7);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1135.0);
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) (-1135.0);
      objectArray0[3] = (Object) true;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)3466);
      assertEquals((short)3466, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short)3466;
      short[] shortArray2 = new short[4];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)32;
      shortArray2[1] = (short) (-1045);
      shortArray2[2] = (short)1716;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)32, shortArray1, shortArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = 'e';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = '(';
      charArray0[5] = '*';
      charArray0[6] = '>';
      charArray0[7] = 'B';
      charArray0[8] = '(';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'>', 'e', 'B', 'B', '(', '*', '>', 'B', '('}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1961);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(193, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 193, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = (-3871L);
      longArray0[2] = (-935L);
      short[] shortArray0 = new short[9];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1009));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      ArrayUtils.shift(booleanArray0, (-2146798287), (-2146798287), (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true, true, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      ArrayUtils.reverse(shortArray0, 37, 3);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, (-3871L), (-935L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = ArrayUtils.removeAllOccurences(longArray0, 2728L);
      assertArrayEquals(new long[] {0L, (-3871L), (-935L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-3871L), (-935L), 0L, 0L}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)76;
      shortArray0[0] = (short)2612;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-892), (-114));
      assertArrayEquals(new short[] {(short)2612, (short)0, (short)76, (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(5, shortArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0, (int) (short)1);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = (long) (short) (-856);
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'X');
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-438.0);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-230.24608392611);
      ArrayUtils.reverse(doubleArray0, 0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, 0.0, (-438.0), 0.0, 0.0, (-230.24608392611)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'I', 0);
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      ArrayUtils.reverse(doubleArray0, (-229), (-229));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, 0.0, (-438.0), 0.0, 0.0, (-230.24608392611)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf((int[]) null, 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, '.');
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Double double0 = new Double((-556.0210294308));
      assertEquals((-556.0210294308), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-556.0210294308));
      assertEquals((-556.0210294308), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(1.5);
      assertEquals(1.5, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(1.5);
      assertEquals(1.5, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(0.0);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 1.0);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'V');
      assertNull(charArray0);
      
      short short0 = (short)77;
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)77;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short)77, (short)77);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 77, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-89), (int) (byte) (-89));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (byte) (-89);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (byte) (-89);
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-89);
      longArray0[1] = (long) (byte) (-89);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (byte) (-89);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (byte) (-89));
      assertArrayEquals(new long[] {(-89L), (-89L), (-89L), (-1L), (-1L), (-89L), (-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {(-89L), (-89L), (-1L), (-1L), (-89L), (-1L), (-1L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(7, longArray0.length);
      
      ArrayUtils.swap(longArray0, (-1), 321, (int) (byte) (-89));
      assertArrayEquals(new long[] {(-89L), (-89L), (-1L), (-1L), (-89L), (-1L), (-1L)}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 365.3596;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {818.0, 0.0, 365.3596}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, 1488, (byte)117);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1488, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '\"';
      objectArray0[1] = (Object) '\"';
      objectArray0[2] = (Object) '\"';
      objectArray0[3] = (Object) '\"';
      objectArray0[4] = (Object) '\"';
      objectArray0[5] = (Object) '\"';
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, stringArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '\"';
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) 7;
      longArray0[3] = (long) '\"';
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) '\"';
      longArray1[1] = (long) '\"';
      longArray1[2] = (long) (-3729);
      longArray1[3] = (long) (-1);
      longArray1[4] = (long) '\"';
      longArray1[5] = (long) 7;
      longArray1[6] = (long) '\"';
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertArrayEquals(new long[] {34L, 34L, (-3729L), (-1L), 34L, 7L, 34L}, longArray1);
      assertArrayEquals(new long[] {34L, (-3729L), 7L, 34L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(11, longArray2.length);
      assertEquals(4, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = '8';
      charArray0[2] = 't';
      charArray0[3] = '1';
      charArray0[4] = 'J';
      charArray0[5] = '5';
      charArray0[6] = 'R';
      charArray0[7] = ':';
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertArrayEquals(new char[] {'r', '8', 't', '1', 'J', '5', 'R', ':'}, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'r', '8', 't', '1', 'J', '5', 'R', ':'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(8, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '\"';
      objectArray0[1] = (Object) '\"';
      objectArray0[1] = (Object) '\"';
      objectArray0[4] = (Object) '\"';
      objectArray0[5] = (Object) '\"';
      long[] longArray0 = new long[4];
      longArray0[3] = (long) '\"';
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) '\"';
      longArray1[1] = (long) '\"';
      longArray1[4] = (long) '\"';
      longArray1[6] = (long) '\"';
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 34L}, longArray0);
      assertArrayEquals(new long[] {34L, 34L, 0L, 0L, 34L, 0L, 34L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(7, longArray1.length);
      assertEquals(11, longArray2.length);
      
      objectArray0[4] = (Object) false;
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'\"', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\"', '\u0000', '\u0000', '\u0000', '\"', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-11.193588670977903);
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)72);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-11.193588670977903), 69, (double) (byte)72);
      assertArrayEquals(new double[] {(-11.193588670977903), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (byte)72, 794);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Short short0 = new Short((short) (-568));
      assertEquals((short) (-568), (short)short0);
      assertNotNull(short0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) null, (Object) short0);
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.indexOf(charArray0, '(', (int) (short) (-568));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 2133538948);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-1807), (-1807));
      assertNull(floatArray0);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[2] = (-2181);
      boolean[] booleanArray0 = new boolean[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 57, (-2181));
      assertArrayEquals(new int[] {0, 0, (-2181)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(2, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 8.0, (-262));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-963.73694F), 27);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '#';
      charArray0[2] = '/';
      char[] charArray1 = ArrayUtils.add(charArray0, 1, 'k');
      assertArrayEquals(new char[] {'-', '#', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'-', 'k', '#', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(10, charArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) 'k';
      intArray0[2] = (int) 'k';
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = (int) '#';
      intArray0[6] = 0;
      intArray0[7] = (int) '#';
      intArray0[8] = (-631);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 35, 8);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {35, 107, 107, 0, (-1), 35, 0, 35, (-631)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray0, 'X');
      assertArrayEquals(new char[] {'X', '-', '#', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      assertArrayEquals(new char[] {'-', '#', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertEquals(10, charArray2.length);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Float float0 = new Float((-2110.15F));
      assertEquals((-2110.15F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 70);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (-2794));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(bitSet0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = ArrayUtils.subarray(intArray0, 70, 88);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-963.73694F), 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '#';
      charArray0[2] = '/';
      charArray0[3] = '&';
      charArray0[4] = 'G';
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) '/';
      objectArray0[1] = (Object) '#';
      objectArray0[2] = (Object) 'G';
      objectArray0[3] = (Object) '-';
      objectArray0[4] = (Object) '-';
      objectArray0[5] = (Object) '&';
      objectArray0[6] = (Object) 'G';
      ArrayUtils.shift(objectArray0, 1726, (-285), (-1));
      assertEquals(7, objectArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-285));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-533.6068953386651));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-1);
      ArrayUtils.swap((boolean[]) null, (-3013), 13, 562);
      Double double0 = new Double((-3013));
      assertEquals((-3013.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      MutableInt mutableInt0 = new MutableInt((-3013));
      assertEquals((-3013), (int)mutableInt0.getValue());
      assertEquals((short) (-3013), mutableInt0.shortValue());
      assertEquals((-3013), mutableInt0.intValue());
      assertEquals("-3013", mutableInt0.toString());
      assertEquals((-3013.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3013L), mutableInt0.longValue());
      assertEquals((-3013.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)59, mutableInt0.byteValue());
      assertEquals((-3013), (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals((-3013), (int)mutableInt0.getValue());
      assertEquals((short) (-3013), mutableInt0.shortValue());
      assertEquals((-3013), mutableInt0.intValue());
      assertEquals("-3013", mutableInt0.toString());
      assertEquals((-3013.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3013L), mutableInt0.longValue());
      assertEquals((-3013.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)59, mutableInt0.byteValue());
      assertEquals((-3013), (int)mutableInt0.toInteger());
      assertEquals((-3013.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-3013.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((short) (-3013), mutableInt1.shortValue());
      assertEquals((byte)59, mutableInt1.byteValue());
      assertEquals("-3013", mutableInt1.toString());
      assertEquals((-3013), (int)mutableInt1.getValue());
      assertEquals((-3013), (int)mutableInt1.toInteger());
      assertEquals((-3013L), mutableInt1.longValue());
      assertEquals((-3013), mutableInt1.intValue());
      assertNotNull(mutableInt1);
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mutableInt1;
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) double0;
      objectArray0[3] = (Object) "e$^Me~vYXrQ*w+";
      objectArray0[4] = (Object) mutableInt1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[3]);
      assertEquals(3, int0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = new Integer((-3729));
      assertEquals((-3729), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) (-3729);
      longArray0[3] = (long) (-3729);
      longArray0[4] = (long) (-3729);
      longArray0[5] = (long) (-3729);
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)102;
      shortArray0[1] = (short) (byte)102;
      shortArray0[2] = (short) (byte)102;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1015));
      assertArrayEquals(new short[] {(short)102, (short)102, (short)102}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)102;
      shortArray0[1] = (short) (byte)102;
      shortArray0[2] = (short) (byte)102;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1015));
      assertArrayEquals(new short[] {(short)102, (short)102, (short)102, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-37));
      assertEquals((-37), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((-37.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-37), mutableInt0.shortValue());
      assertEquals("-37", mutableInt0.toString());
      assertEquals((-37.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals((-37L), mutableInt0.longValue());
      assertEquals((-37), mutableInt0.intValue());
      assertEquals((-37), (int)mutableInt0.toInteger());
      assertEquals((-37), (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.getValue();
      assertEquals((-37.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-37), mutableInt0.shortValue());
      assertEquals("-37", mutableInt0.toString());
      assertEquals((-37.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals((-37L), mutableInt0.longValue());
      assertEquals((-37), mutableInt0.intValue());
      assertEquals((-37), (int)mutableInt0.toInteger());
      assertEquals((-37), (int)mutableInt0.getValue());
      assertEquals((-37), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int int0 = (-1);
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      int int1 = 5;
      mutableInt0.setValue((Number) integer2);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1), mutableInt0.intValue());
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(5);
      assertEquals(5, (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = mutableInt0.getValue();
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1), (int)integer4);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = Integer.getInteger("6", (Integer) int0);
      assertEquals((-1), (int)integer5);
      assertFalse(int0 == int1);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int1));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(5);
      assertEquals(5, (int)integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)int1));
      assertTrue(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int1);
      assertEquals(5, (int)integer7);
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(int1 == int0);
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(16, integerArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)93;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)12, (byte)15, (byte)76, (byte)36, (byte)93}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-28.00506386210664);
      doubleArray0[1] = (-28.00506386210664);
      doubleArray0[2] = (-28.00506386210664);
      doubleArray0[3] = 1183.644;
      char[] charArray0 = new char[2];
      int[] intArray0 = new int[1];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, charArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)97;
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[17];
      charArray0[0] = 'H';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(17, charArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-430);
      intArray0[1] = (-430);
      intArray0[2] = (int) '\u0000';
      intArray0[4] = (int) '\u0000';
      intArray0[0] = (-430);
      intArray0[6] = (-430);
      intArray0[7] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -430, Length: 17
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2404.3931;
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, 2741, 111L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2741, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = '\'';
      Character character0 = Character.valueOf('\'');
      assertEquals('\'', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Character character1 = Character.valueOf('\'');
      assertEquals('\'', (char)character1);
      assertNotNull(character1);
      
      AbstractMap.SimpleEntry<Boolean, Character> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Boolean, Character>(boolean0, character1);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Boolean, Character> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Boolean, Character>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Boolean, Character> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Boolean, Character>(boolean0, (Character) char0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Boolean, Character>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.addFirst((AbstractMap.SimpleImmutableEntry<Boolean, Character>[]) null, abstractMap_SimpleImmutableEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntryArray0);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) char0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 39.0);
      assertArrayEquals(new double[] {39.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {39.0, 39.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      Long long0 = new Long((-602L));
      assertEquals((-602L), (long)long0);
      assertNotNull(long0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-192.6F);
      floatArray0[1] = (-2457.5095F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2110.15F));
      assertArrayEquals(new float[] {(-192.6F), (-2457.5095F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)24;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)24}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) (-1L);
      longArray1[1] = (Long) (-1L);
      Long long0 = new Long((byte)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.swap(floatArray0, (int) (byte)24, (-1));
      assertArrayEquals(new float[] {(-192.6F), (-2457.5095F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)24;
      intArray0[1] = (int) (byte)24;
      intArray0[2] = 3212;
      intArray0[3] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3212, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1614);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      ArrayUtils.reverse(byteArray0, 2, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)124}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)124;
      objectArray0[1] = (Object) (byte)124;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte)124;
      objectArray0[5] = (Object) (byte)0;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(6, objectArray0.length);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = Character.valueOf('4');
      assertEquals('4', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('4');
      assertEquals('4', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertEquals('4', (char)character2);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2811);
      shortArray0[1] = (short) (-2811);
      shortArray0[2] = (short)2100;
      shortArray0[3] = (short) (-2537);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-948);
      shortArray0[6] = (short)1043;
      shortArray0[3] = (short)1043;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-3085));
      assertArrayEquals(new short[] {(short) (-2811), (short) (-2811), (short)2100, (short)1043, (short)0, (short) (-948), (short)1043, (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(8, shortArray0.length);
      
      long[] longArray0 = new long[2];
      shortArray0[6] = (short)0;
      longArray0[1] = (long) (short)0;
      ArrayUtils.shift(longArray0, 1012);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "v";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(4, stringArray1.length);
      assertEquals(4, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (short) (-3085);
      longArray1[1] = (-1671L);
      longArray1[2] = (long) (short)0;
      longArray1[3] = (long) (short)0;
      longArray1[4] = (long) (short) (-2811);
      longArray1[5] = (long) (short)1043;
      longArray1[6] = (long) (short) (-2537);
      longArray1[7] = (long) (short)2100;
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertArrayEquals(new long[] {(-3085L), (-1671L), 0L, 0L, (-2811L), 1043L, (-2537L), 2100L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, (-3729), 0);
      assertNull(floatArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift((char[]) null, 1697, (-2018), (-1));
      boolean boolean1 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      charArray0[1] = 'J';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'_', 'J'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)4673;
      doubleArray0[1] = (double) '_';
      doubleArray0[3] = (double) '_';
      doubleArray0[4] = (double) 'J';
      doubleArray0[5] = (double) '_';
      doubleArray0[6] = (double) '_';
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1301.1));
      assertArrayEquals(new double[] {4673.0, 95.0, 0.0, 95.0, 74.0, 95.0, 95.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1301.1), 4673.0, 95.0, 0.0, 95.0, 74.0, 95.0, 95.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)314;
      shortArray0[1] = (short)3039;
      shortArray0[2] = (short)5775;
      shortArray0[3] = (short) (-654);
      shortArray0[4] = (short)1987;
      shortArray0[5] = (short)3422;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)3422, (short)1987, (short) (-654), (short)5775, (short)3039, (short)314}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)314;
      longArray0[1] = (long) (short) (-654);
      longArray0[2] = (long) (short)3039;
      longArray0[3] = (long) (short)5775;
      longArray0[4] = (long) (short)314;
      int int0 = ArrayUtils.indexOf(longArray0, (-24L));
      assertArrayEquals(new long[] {314L, (-654L), 3039L, 5775L, 314L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1624, 1349);
      assertArrayEquals(new short[] {(short)3422, (short)1987, (short) (-654), (short)5775, (short)3039, (short)314}, shortArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(6, shortArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = '\'';
      charArray0[2] = 'G';
      charArray0[3] = 'y';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'A', '\'', 'G', 'y'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'y';
      intArray0[1] = (-1);
      intArray0[2] = (int) '\'';
      intArray0[3] = (int) (short)3422;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {121, (-1), 39, 3422}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[2] = ']';
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) (-105);
      floatArray0[2] = (-1988.7599F);
      floatArray0[3] = (float) '\u0000';
      floatArray0[4] = (float) ']';
      floatArray0[5] = (float) '\u0000';
      ArrayUtils.shift(floatArray0, (int) (short)0, 3212, (-105));
      assertArrayEquals(new float[] {0.0F, 93.0F, 0.0F, 0.0F, (-105.0F), (-1988.7599F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 2146742297);
      assertArrayEquals(new float[] {0.0F, 93.0F, 0.0F, 0.0F, (-105.0F), (-1988.7599F)}, floatArray0, 0.01F);
      assertEquals(3, int0);
      assertEquals(6, floatArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean0);
      assertEquals(true, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-277));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true, true}, booleanArray0));
      assertEquals(6, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals("{0, 1, 2, 5, 6, 7}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(8, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-277));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short)3085;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (int) (short)3085);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3085, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-39));
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-39);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-39.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-39);
      floatArray0[1] = (float) (byte) (-39);
      floatArray0[2] = (float) (byte) (-39);
      floatArray0[3] = (float) (byte) (-39);
      floatArray0[4] = (float) (byte) (-39);
      floatArray0[5] = (float) (byte) (-39);
      floatArray0[6] = (float) (byte) (-39);
      floatArray0[7] = (float) (byte) (-39);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-39.0F));
      assertArrayEquals(new float[] {(-39.0F), (-39.0F), (-39.0F), (-39.0F), (-39.0F), (-39.0F), (-39.0F), (-39.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = 'F';
      charArray0[2] = 'p';
      ArrayUtils.swap(charArray0, 216, 50, (int) (byte) (-39));
      assertArrayEquals(new char[] {'', 'F', 'p'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'', 'F', 'p'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2012.444872245), 922.275200892);
      assertArrayEquals(new double[] {(-39.0)}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(bitSet0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'W';
      charArray0[2] = 'l';
      charArray0[3] = '8';
      charArray0[4] = '(';
      charArray0[5] = '<';
      charArray0[6] = '@';
      int int0 = ArrayUtils.indexOf(charArray0, '(');
      assertArrayEquals(new char[] {'0', 'W', 'l', '8', '(', '<', '@'}, charArray0);
      assertEquals(4, int0);
      assertEquals(7, charArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '(';
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 4);
      assertArrayEquals(new long[] {40L}, longArray0);
      assertArrayEquals(new long[] {40L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'W';
      floatArray0[1] = (float) '8';
      floatArray0[2] = (float) 'W';
      floatArray0[3] = (float) 'l';
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 56.0F);
      assertArrayEquals(new float[] {87.0F, 87.0F, 108.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {87.0F, 56.0F, 87.0F, 108.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2612;
      shortArray0[4] = (short)3085;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)2612, (short)0, (short)0, (short)0, (short)3085}, shortArray0);
      assertArrayEquals(new short[] {(short)2612, (short)0, (short)0, (short)0, (short)3085, (short)2612, (short)0, (short)0, (short)0, (short)3085}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)2612;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 457.1082, (int) (short)3085);
      assertArrayEquals(new double[] {2612.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2612.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2185;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)126;
      shortArray0[3] = (short) (-1879);
      shortArray0[4] = (short)1195;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)1544;
      shortArray0[7] = (short) (-3073);
      shortArray0[8] = (short) (-2297);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)2185, (short) (-1), (short)126, (short) (-1879), (short)1195, (short) (-1), (short)1544, (short) (-3073), (short) (-2297)}, shortArray0);
      assertTrue(boolean0);
      assertEquals(9, shortArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)1544;
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1879);
      doubleArray0[3] = (double) (short) (-3073);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = (double) (short)1195;
      doubleArray0[7] = (double) (short) (-1);
      doubleArray0[8] = (double) (short) (-3073);
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1544.0, (-1.0), (-1879.0), (-3073.0), 0.0, (-1.0), 1195.0, (-1.0), (-3073.0)}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, doubleArray0.length);
      
      ArrayUtils.swap((int[]) null, (-105), Integer.MAX_VALUE);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)2185;
      longArray0[1] = (long) (short) (-1879);
      longArray0[2] = (long) (short)1195;
      longArray0[3] = (long) (short)1195;
      longArray0[4] = (-303L);
      longArray0[5] = (long) Integer.MAX_VALUE;
      longArray0[6] = (long) (short)126;
      longArray0[7] = (long) (short)1195;
      longArray0[8] = (long) (short)126;
      ArrayUtils.swap(longArray0, 51, (int) (short) (-2297));
      assertArrayEquals(new long[] {2185L, (-1879L), 1195L, 1195L, (-303L), 2147483647L, 126L, 1195L, 126L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      ArrayUtils.hashCode((Object) ", Length: 0");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-233.0);
      doubleArray0[1] = (-1141.3676360183);
      doubleArray0[2] = 81.0;
      doubleArray0[3] = 81.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-133.706902779382);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, Double.NaN);
      assertArrayEquals(new double[] {(-233.0), (-1141.3676360183), 81.0, 81.0, Double.NaN, (-133.706902779382)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-233.0), (-1141.3676360183), 81.0, 81.0, (-133.706902779382)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1921L;
      longArray0[1] = (-2147483648L);
      longArray0[2] = (-274L);
      longArray0[3] = 299L;
      longArray0[4] = 323L;
      longArray0[5] = 0L;
      longArray0[1] = 3669L;
      longArray0[7] = (-1160L);
      longArray0[8] = (-1140L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {1921L, 3669L, (-274L), 299L, 323L, 0L, 0L, (-1160L), (-1140L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 818.0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1492;
      longArray0[1] = (long) 1492;
      longArray0[2] = (long) 1492;
      longArray0[3] = (long) 1492;
      longArray0[4] = (long) 1492;
      ArrayUtils.swap(longArray0, 533, 1492);
      assertArrayEquals(new long[] {1492L, 1492L, 1492L, 1492L, 1492L}, longArray0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'l';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {1492L, 1492L, 1492L, 1492L, 1492L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (-3634));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3634);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0.0F, (-3634));
      assertArrayEquals(new double[] {(-3634.0)}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)902;
      shortArray0[1] = (short)18688;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, (int) (short)902, (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)124;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {124L}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '!';
      charArray0[2] = '~';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'v');
      assertArrayEquals(new char[] {'[', '!', '~'}, charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)72);
      assertFalse(boolean0);
      
      Long long0 = new Long(69);
      assertEquals(69L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(69);
      assertEquals(69L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long1;
      longArray0[1] = long0;
      longArray0[2] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[2]);
      assertArrayEquals(new long[] {69L, 69L, 69L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 69;
      intArray0[1] = 0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-663.83), (int) (byte)72);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (byte)72;
      floatArray0[2] = (float) 69;
      floatArray0[3] = (float) (byte)72;
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.reverse(doubleArray0, (-962), 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, (-1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.shift((byte[]) null, 0, 0, 67);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) (-1135);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) (-1135);
      doubleArray0[7] = (double) (-1135);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1135.0), 4, 692.7);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, (-1135.0), 1.0, (-1135.0), (-1135.0)}, doubleArray0, 0.01);
      assertEquals(4, int0);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1.0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, (-1135.0), 1.0, (-1135.0), (-1135.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, (-1135.0), 1.0, (-1135.0), (-1135.0), 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)7);
      assertNull(shortArray0);
      
      ArrayUtils.swap((short[]) null, 4, (-9), 4);
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 818.0;
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1, 1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 5375.4047181427;
      doubleArray0[3] = 5375.4047181427;
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 5375.4047181427;
      ArrayUtils.shift(objectArray0, (-285), 1760, (-285));
      assertEquals(4, objectArray0.length);
      
      ArrayUtils.shift(doubleArray0, 1760);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5375.4047181427, 5375.4047181427}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      ArrayUtils.swap(doubleArray0, 1760, 1760);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5375.4047181427, 5375.4047181427}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      ArrayUtils.swap((double[]) null, 805, 2048, 2048);
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(805);
      assertEquals(805.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(805.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(805);
      assertEquals(805.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1633.0));
      assertEquals((-1633.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(2048);
      assertEquals(2048.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-452.25212267204));
      assertEquals((-452.25212267204), (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(1.0);
      assertEquals(1.0, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-17L);
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-17L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[2] = 'e';
      charArray0[3] = 'E';
      charArray0[4] = 'c';
      charArray0[5] = 'm';
      charArray0[6] = 'i';
      charArray0[7] = '7';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'e', 'E', 'c', 'm', 'i', '7'}, charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'e', 'E', 'c', 'm', 'i', '7'}, charArray1);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'i';
      doubleArray0[1] = (double) 'Q';
      doubleArray0[2] = (double) 'i';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 14.786181865917303, 105.0);
      assertArrayEquals(new double[] {105.0, 81.0, 105.0}, doubleArray0, 0.01);
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray1);
      assertArrayEquals(new char[] {'Q', '\u0000', 'e', 'E', 'c', 'm', 'i', '7'}, charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'e', 'E', 'c', 'm', 'i', '7'}, charArray1);
      assertFalse(boolean0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-17L);
      doubleArray1[1] = (double) 'e';
      ArrayUtils.swap(doubleArray1, 2, 2, 2);
      assertArrayEquals(new double[] {(-17.0), 101.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      ArrayUtils.hashCode((Object) ", Length: 0");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-233.0);
      doubleArray0[1] = (-1141.3676360183);
      doubleArray0[2] = 81.0;
      doubleArray0[3] = 81.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-133.706902779382);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, Double.NaN);
      assertArrayEquals(new double[] {(-233.0), (-1141.3676360183), 81.0, 81.0, Double.NaN, (-133.706902779382)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-233.0), (-1141.3676360183), 81.0, 81.0, (-133.706902779382)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1921L;
      longArray0[1] = (-2147483648L);
      longArray0[2] = (-274L);
      longArray0[3] = 299L;
      longArray0[4] = 323L;
      longArray0[5] = 0L;
      longArray0[6] = 3669L;
      longArray0[7] = (-1160L);
      longArray0[8] = (-1140L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {1921L, (-2147483648L), (-274L), 299L, 323L, 0L, 3669L, (-1160L), (-1140L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(9, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (double) (-1140L), (-81));
      assertArrayEquals(new double[] {(-233.0), (-1141.3676360183), 81.0, 81.0, Double.NaN, (-133.706902779382)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-233.0), (-1141.3676360183), 81.0, 81.0, (-133.706902779382)}, doubleArray1, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(bitSet0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      short[] shortArray0 = new short[19];
      shortArray0[8] = (short)0;
      shortArray0[1] = (short)10;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)488);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(19, shortArray0.length);
      assertEquals(20, shortArray1.length);
      
      int[] intArray0 = new int[12];
      ArrayUtils.shuffle(intArray0);
      assertEquals(12, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(12, intArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)10;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (short)10;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1653.50112442, 1653.50112442);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 10.0, 0.0, 10.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (-1390));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 10.0, 0.0, 10.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      ArrayUtils.swap(byteArray0, 36, 2);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-963.73694F), 0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '\'';
      charArray0[2] = '/';
      char[] charArray1 = ArrayUtils.add(charArray0, 1, 'k');
      assertArrayEquals(new char[] {'-', '\'', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'-', 'k', '\'', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(10, charArray1.length);
      
      int[] intArray0 = new int[8];
      Float float0 = new Float((-963.73694F));
      assertEquals((-963.73694F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-2691.0));
      assertEquals((-2691.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      ArrayUtils.shift(charArray0, (-710));
      assertArrayEquals(new char[] {'\u0000', '-', '\'', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-963.73694F), 0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '\'';
      charArray0[2] = '/';
      char[] charArray1 = ArrayUtils.add(charArray0, 1, '-');
      assertArrayEquals(new char[] {'-', '\'', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'-', '-', '\'', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(10, charArray1.length);
      
      int[] intArray0 = new int[8];
      Float float0 = new Float((-963.73694F));
      assertEquals((-963.73694F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-2691.0));
      assertEquals((-2691.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      ArrayUtils.shift(charArray0, (-658));
      assertArrayEquals(new char[] {'\'', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '-'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'P';
      charArray0[2] = 'j';
      charArray0[3] = '9';
      charArray0[4] = 'P';
      charArray0[5] = '9';
      charArray0[6] = '9';
      charArray0[7] = 'P';
      charArray0[8] = 'P';
      ArrayUtils.shift(charArray0, (int) (short)0, 1697, (-1116));
      assertArrayEquals(new char[] {'9', 'P', 'j', '9', 'P', '9', '9', 'P', 'P'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1135);
      doubleArray0[1] = 103.5;
      doubleArray0[2] = (double) (-1135);
      ArrayUtils.shift(doubleArray0, (-443));
      assertArrayEquals(new double[] {(-1135.0), (-1135.0), 103.5}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      MutableInt mutableInt0 = new MutableInt((-1241));
      assertEquals((-1241L), mutableInt0.longValue());
      assertEquals((-1241), mutableInt0.intValue());
      assertEquals((-1241.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1241), mutableInt0.shortValue());
      assertEquals("-1241", mutableInt0.toString());
      assertEquals((-1241), (int)mutableInt0.toInteger());
      assertEquals((-1241.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1241), (int)mutableInt0.getValue());
      assertEquals((byte)39, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((-1135.0));
      assertEquals((-1135.0), mutableInt1.doubleValue(), 0.01);
      assertEquals("-1135", mutableInt1.toString());
      assertEquals((-1135L), mutableInt1.longValue());
      assertEquals((-1135), mutableInt1.intValue());
      assertEquals((short) (-1135), mutableInt1.shortValue());
      assertEquals((-1135.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((byte) (-111), mutableInt1.byteValue());
      assertEquals((-1135), (int)mutableInt1.getValue());
      assertEquals((-1135), (int)mutableInt1.toInteger());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      MutableInt mutableInt2 = new MutableInt(7);
      assertEquals(7L, mutableInt2.longValue());
      assertEquals("7", mutableInt2.toString());
      assertEquals(7, mutableInt2.intValue());
      assertEquals(7.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(7.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(7, (int)mutableInt2.getValue());
      assertEquals((byte)7, mutableInt2.byteValue());
      assertEquals(7, (int)mutableInt2.toInteger());
      assertEquals((short)7, mutableInt2.shortValue());
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertNotNull(mutableInt2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(mutableIntArray0, 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2811);
      shortArray0[1] = (short) (-2811);
      shortArray0[2] = (short)2100;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.swap(booleanArray0, (int) (short) (-2811), 126, 711);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      ArrayUtils.shift(floatArray0, (int) (short) (-2811));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-695));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -695, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-3729);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-3729);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1614);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      ArrayUtils.reverse(byteArray0, 2, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)124}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-3729L), (-1L), (-3729L), (-1L), (-3729L), (-3729L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = '^';
      charArray0[2] = '@';
      charArray0[3] = '~';
      boolean boolean0 = ArrayUtils.contains(charArray0, '!');
      assertArrayEquals(new char[] {'[', '^', '@', '~'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      long[] longArray0 = new long[16];
      longArray0[0] = (-1801L);
      longArray0[1] = 0L;
      longArray0[2] = (-402L);
      longArray0[3] = (-2439L);
      longArray0[4] = 348L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(16, longArray0.length);
      assertEquals(16, longArray1.length);
      
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Double double0 = new Double((-2439L));
      assertEquals((-2439.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean1 = ArrayUtils.isSameType(bitSet0, double0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)109;
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.toArray(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      Float[] floatArray0 = new Float[4];
      try { 
        Float.valueOf("SBZ0$&S<sb!?cL:BH2H");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)3271;
      shortArray0[2] = (short)102;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2, (int) (short)102);
      assertArrayEquals(new short[] {(short)8, (short)3271, (short)102}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(3, shortArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'P';
      charArray0[2] = '3';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'J', (int) (short)102);
      assertArrayEquals(new char[] {'J', 'P', '3'}, charArray0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, charArray0.length);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Lj;aSHST!/p'q";
      stringArray0[1] = "";
      stringArray0[2] = "I[p($|";
      stringArray0[3] = "Z";
      stringArray0[4] = "The Array must not be null";
      stringArray0[5] = "";
      stringArray0[6] = "\"EC&/lqjGh^ml~03I";
      stringArray0[7] = "cO";
      stringArray0[8] = "rP,FY6~-~1,F1E";
      String[] stringArray1 = ArrayUtils.toArray(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 0.0F);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) boolean0;
      int[] intArray0 = new int[1];
      ArrayUtils.shift(intArray0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-116);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)119;
      doubleArray0[1] = (double) (byte) (-116);
      doubleArray0[2] = (double) (byte) (-85);
      doubleArray0[3] = (double) (byte) (-85);
      doubleArray0[4] = (double) (byte)119;
      doubleArray0[5] = (double) (byte) (-116);
      Double[] doubleArray1 = new Double[0];
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 5181, 'e');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5181, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)24;
      ArrayUtils.swap(byteArray0, (-81), (int) (byte)24);
      assertArrayEquals(new byte[] {(byte)119, (byte)119, (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)24;
      intArray0[1] = (int) (byte)24;
      intArray0[2] = (int) (byte)24;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 24);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 24, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 3914);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      
      Short short0 = new Short((short)101);
      assertEquals((short)101, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = ArrayUtils.isEquals("T/h'EF~F7]vSK", short0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'R', '\u0000'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(76.0);
      assertEquals(76.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(1.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(4, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(872.83457862);
      assertEquals(872.83457862, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[6];
      double[] doubleArray2 = new double[0];
      int int1 = ArrayUtils.indexOf(doubleArray2, (double) doubleArray0[3], (double) doubleArray0[1]);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(doubleArray0[3]);
      assertEquals(872L, mutableInt1.longValue());
      assertEquals(872.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(872, mutableInt1.intValue());
      assertEquals("872", mutableInt1.toString());
      assertEquals(872.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)104, mutableInt1.byteValue());
      assertEquals(872, (int)mutableInt1.getValue());
      assertEquals(872, (int)mutableInt1.toInteger());
      assertEquals((short)872, mutableInt1.shortValue());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals(4, doubleArray0.length);
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(double1);
      assertEquals("76", mutableInt2.toString());
      assertEquals(76, mutableInt2.intValue());
      assertEquals(76L, mutableInt2.longValue());
      assertEquals(76.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(76.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(76, (int)mutableInt2.toInteger());
      assertEquals(76, (int)mutableInt2.getValue());
      assertEquals((byte)76, mutableInt2.byteValue());
      assertEquals((short)76, mutableInt2.shortValue());
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertNotEquals((double)double1, (double)double3, 0.01);
      assertNotNull(mutableInt2);
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(3914);
      assertEquals(3914.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(3914L, mutableInt3.longValue());
      assertEquals((short)3914, mutableInt3.shortValue());
      assertEquals("3914", mutableInt3.toString());
      assertEquals(3914, mutableInt3.intValue());
      assertEquals(3914, (int)mutableInt3.toInteger());
      assertEquals(3914.0, mutableInt3.doubleValue(), 0.01);
      assertEquals((byte)74, mutableInt3.byteValue());
      assertEquals(3914, (int)mutableInt3.getValue());
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertNotNull(mutableInt3);
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt((-1));
      assertEquals((-1), (int)mutableInt4.getValue());
      assertEquals((byte) (-1), mutableInt4.byteValue());
      assertEquals((-1), (int)mutableInt4.toInteger());
      assertEquals((-1L), mutableInt4.longValue());
      assertEquals((-1.0), mutableInt4.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt4.floatValue(), 0.01F);
      assertEquals((-1), mutableInt4.intValue());
      assertEquals((short) (-1), mutableInt4.shortValue());
      assertEquals("-1", mutableInt4.toString());
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertTrue(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertNotNull(mutableInt4);
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt(mutableInt1);
      assertEquals(872L, mutableInt1.longValue());
      assertEquals(872.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(872, mutableInt1.intValue());
      assertEquals("872", mutableInt1.toString());
      assertEquals(872.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)104, mutableInt1.byteValue());
      assertEquals(872, (int)mutableInt1.getValue());
      assertEquals(872, (int)mutableInt1.toInteger());
      assertEquals((short)872, mutableInt1.shortValue());
      assertEquals(872L, mutableInt5.longValue());
      assertEquals("872", mutableInt5.toString());
      assertEquals(872, (int)mutableInt5.toInteger());
      assertEquals(872, (int)mutableInt5.getValue());
      assertEquals(872.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals((byte)104, mutableInt5.byteValue());
      assertEquals((short)872, mutableInt5.shortValue());
      assertEquals(872, mutableInt5.intValue());
      assertEquals(872.0, mutableInt5.doubleValue(), 0.01);
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt4));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertTrue(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertNotNull(mutableInt5);
      assertEquals(4, doubleArray0.length);
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertEquals(0, mutableIntArray1.length);
      assertEquals(6, mutableIntArray0.length);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = '}';
      charArray0[2] = '*';
      charArray0[3] = 'V';
      charArray0[4] = 'A';
      charArray0[5] = ':';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ':', (-1103));
      assertArrayEquals(new char[] {'k', '}', '*', 'V', 'A', ':'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)3466);
      assertEquals((short)3466, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3466;
      shortArray0[4] = (short)3466;
      ArrayUtils.reverse(shortArray0, 71, (-1680));
      assertArrayEquals(new short[] {(short)3466, (short)0, (short)0, (short)0, (short)3466, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences((long[]) null, 60L);
      assertNull(longArray1);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)3466;
      shortArray1[1] = (short)0;
      shortArray1[2] = (short)0;
      shortArray1[3] = (short)3466;
      shortArray1[4] = (short)3466;
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)3466, (short)0, (short)0, (short)3466, (short)3466}, shortArray1);
      assertArrayEquals(new short[] {(short)3466, (short)0, (short)0, (short)0, (short)3466, (short)0}, shortArray0);
      assertFalse(boolean2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      boolean boolean3 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertTrue(boolean3);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short) (-2011));
      assertArrayEquals(new short[] {(short) (-2011)}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-963.73694F), 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '#';
      charArray0[2] = '/';
      charArray0[3] = '&';
      charArray0[4] = 'G';
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) '/';
      objectArray0[1] = (Object) '#';
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 712);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)72);
      assertFalse(boolean0);
      
      Long long0 = new Long((-2147483648L));
      assertEquals((-2147483648L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-2147483648L));
      assertEquals((-2147483648L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long1;
      longArray0[1] = long0;
      longArray0[2] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[2]);
      assertArrayEquals(new long[] {(-2147483648L), (-2147483648L), (-2147483648L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 69;
      intArray0[1] = 0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-663.83), (int) (byte)72);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-2147483648L);
      floatArray0[2] = (float) (-2147483648L);
      floatArray0[3] = (float) (-2147483648L);
      ArrayUtils.shift(floatArray0, 3, 49, (-639));
      assertArrayEquals(new float[] {0.0F, (-2.14748365E9F), (-2.14748365E9F), (-2.14748365E9F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 5375.4047181427;
      doubleArray0[3] = 1183.644;
      doubleArray0[4] = (-659.6599684696);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3550.3);
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1, (-2750.4));
      assertArrayEquals(new double[] {0.0, 0.0, 5375.4047181427, 1183.644, (-659.6599684696), 0.0, (-3550.3), (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2750.4), 0.0, 5375.4047181427, 1183.644, (-659.6599684696), 0.0, (-3550.3), (-1.0), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(1);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      longArray0[1] = long0;
      Long long1 = new Long(1);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[2] = long1;
      longArray0[3] = longArray0[1];
      Long long2 = new Long((-1L));
      assertEquals((-1L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) (long)longArray0[2];
      floatArray0[4] = (float) 1;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F, (-1.0F), 1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, (-1.0F), 1.0F, 1.0F, 0.0F, 1.0F, (-1.0F), 1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[2] = '5';
      Float float0 = new Float((float) '5');
      assertEquals(53.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'&', '&', '5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0, 701.4F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      
      float[] floatArray3 = ArrayUtils.addAll(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertNotNull(floatArray3);
      assertNotSame(floatArray1, floatArray3);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-37));
      assertEquals((-37), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((-37.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-37.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-37), mutableInt0.shortValue());
      assertEquals((-37), mutableInt0.intValue());
      assertEquals((-37L), mutableInt0.longValue());
      assertEquals((-37), (int)mutableInt0.getValue());
      assertEquals((-37), (int)mutableInt0.toInteger());
      assertEquals("-37", mutableInt0.toString());
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.getValue();
      assertEquals((-37.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-37.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-37), mutableInt0.shortValue());
      assertEquals((-37), mutableInt0.intValue());
      assertEquals((-37L), mutableInt0.longValue());
      assertEquals((-37), (int)mutableInt0.getValue());
      assertEquals((-37), (int)mutableInt0.toInteger());
      assertEquals("-37", mutableInt0.toString());
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals((-37), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int int0 = (-1);
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      int int1 = mutableInt0.incrementAndGet();
      assertEquals((-36.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-36), mutableInt0.intValue());
      assertEquals((short) (-36), mutableInt0.shortValue());
      assertEquals((-36.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-36", mutableInt0.toString());
      assertEquals((-36L), mutableInt0.longValue());
      assertEquals((byte) (-36), mutableInt0.byteValue());
      assertEquals((-36), (int)mutableInt0.getValue());
      assertEquals((-36), (int)mutableInt0.toInteger());
      assertEquals((-36), int1);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(int1 == int0);
      
      int int2 = 5;
      Integer integer3 = new Integer(5);
      assertEquals(5, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = mutableInt0.getValue();
      assertEquals((-36.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-36), mutableInt0.intValue());
      assertEquals((short) (-36), mutableInt0.shortValue());
      assertEquals((-36.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-36", mutableInt0.toString());
      assertEquals((-36L), mutableInt0.longValue());
      assertEquals((byte) (-36), mutableInt0.byteValue());
      assertEquals((-36), (int)mutableInt0.getValue());
      assertEquals((-36), (int)mutableInt0.toInteger());
      assertEquals((-36), (int)integer4);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = Integer.getInteger("6", (Integer) int0);
      assertEquals((-1), (int)integer5);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(5);
      assertEquals(5, (int)integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)int2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int2);
      assertEquals(5, (int)integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)int2));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(16, integerArray1.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-963.73694F), 27);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '#';
      charArray0[2] = '/';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) 'k';
      intArray0[2] = (int) 'k';
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = (int) '#';
      intArray0[6] = 0;
      intArray0[7] = (int) '#';
      intArray0[8] = (-631);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 35, 8);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {35, 107, 107, 0, (-1), 35, 0, 35, (-631)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {35, 107, 107, 0, (-1), 35, 0, 35, (-631)}, intArray0);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 107;
      doubleArray0[1] = (double) 35;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1), 8, 35.0);
      assertArrayEquals(new double[] {107.0, 35.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) 107);
      assertArrayEquals(new double[] {107.0, 35.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {35.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'-', '#', '/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(charArray0, charArray1);
      assertEquals(9, charArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(intArray0, 107);
      assertArrayEquals(new int[] {35, 107, 107, 0, (-1), 35, 0, 35, (-631)}, intArray0);
      assertTrue(boolean2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(intArray0, intArray1);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = '~';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'D');
      assertArrayEquals(new char[] {'M', 'M', '~', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'M', 'M', '~', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)113);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2145659106);
      doubleArray0[1] = (double) (short)113;
      doubleArray0[2] = (double) 'M';
      doubleArray0[3] = (double) '~';
      doubleArray0[4] = (double) 'M';
      doubleArray0[5] = (double) '~';
      doubleArray0[6] = (double) '~';
      doubleArray0[7] = (double) '~';
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 126.0);
      assertArrayEquals(new double[] {(-2.145659106E9), 113.0, 77.0, 126.0, 77.0, 126.0, 126.0, 126.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.145659106E9), 113.0, 77.0, 77.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      ArrayUtils.shift((float[]) null, (int) (short)113, 1481, 1024);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 1024);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)72);
      assertFalse(boolean0);
      
      Long long0 = new Long(69);
      assertEquals(69L, (long)long0);
      assertNotNull(long0);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)45);
      assertArrayEquals(new short[] {(short)45}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = 69;
      ArrayUtils.swap(intArray0, (-1634), 1918, 1918);
      assertArrayEquals(new int[] {(-1), 69}, intArray0);
      assertEquals(2, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (byte)72, (-850));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      ArrayUtils.shift((boolean[]) null, (-144));
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-686.2384262);
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = '6';
      charArray0[2] = 't';
      charArray0[3] = ',';
      charArray0[4] = '_';
      charArray0[5] = 't';
      charArray0[6] = ')';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'd');
      assertArrayEquals(new char[] {'d', '6', 't', ',', '_', 't', ')'}, charArray0);
      assertArrayEquals(new char[] {'d', 'd', '6', 't', ',', '_', 't', ')'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      
      ArrayUtils.reverse((byte[]) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 't';
      objectArray0[1] = (Object) 't';
      objectArray0[2] = (Object) 'd';
      objectArray0[3] = (Object) ',';
      objectArray0[4] = (Object) '_';
      Double double0 = new Double(2276.504);
      assertEquals(2276.504, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertEquals(2276.504, object0);
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "The Array must not be null");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      charArray0[4] = '&';
      charArray0[2] = '5';
      charArray0[6] = 'e';
      charArray0[7] = '@';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'e');
      assertArrayEquals(new char[] {'&', '&', '5', 'e', '&', '\u0000', 'e', '@'}, charArray0);
      assertArrayEquals(new char[] {'e', '&', '&', '5', 'e', '&', '\u0000', 'e', '@'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'e';
      doubleArray0[1] = (double) '5';
      doubleArray0[2] = (double) 'e';
      doubleArray0[3] = 1.5;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {101.0, 53.0, 101.0, 1.5}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '&';
      longArray0[1] = (long) '&';
      longArray0[2] = (long) '5';
      longArray0[3] = (long) '@';
      longArray0[4] = (long) '&';
      longArray0[5] = (long) '@';
      longArray0[6] = (long) '5';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 38L, (-277));
      assertArrayEquals(new long[] {38L, 38L, 53L, 64L, 38L, 64L, 53L}, longArray0);
      assertEquals("{0, 1, 4}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(7, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '&';
      intArray0[1] = (-2463);
      ArrayUtils.swap(intArray0, 719, 2103, 2103);
      assertArrayEquals(new int[] {38, (-2463), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 101.0);
      assertArrayEquals(new double[] {101.0, 53.0, 101.0, 1.5}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1335);
      shortArray0[1] = (short) (-41);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)6;
      shortArray0[4] = (short) (-1975);
      shortArray0[5] = (short)25;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-1963);
      shortArray0[8] = (short) (-1);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1335), (short) (-41), (short)0, (short)6, (short) (-1975), (short)25, (short) (-1), (short) (-1963), (short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1335), (short) (-41), (short)0, (short)6, (short) (-1975), (short)25, (short) (-1), (short) (-1963), (short) (-1)}, shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 853, 853, 853);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-98);
      shortArray0[1] = (short) (-176);
      shortArray0[2] = (short) (-389);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      ArrayUtils.reverse(shortArray0, 279, (int) (short) (-389));
      assertArrayEquals(new short[] {(short) (-98), (short) (-176), (short) (-389)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, Integer.MAX_VALUE, 1);
      assertEquals((-1), int0);
      
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-176);
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray1);
      assertArrayEquals(new short[] {(short) (-176)}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      ArrayUtils.reverse(byteArray0, 2, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)124}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)124;
      Short short0 = new Short((short)1053);
      assertEquals((short)1053, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte)124);
      assertEquals((short)124, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Short short2 = new Short((short)1329);
      assertEquals((short)1329, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) integerArray0, (Object) short2);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean1);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 818.0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1492;
      longArray0[1] = (long) 1492;
      longArray0[2] = (long) 1492;
      longArray0[3] = (long) 1492;
      longArray0[4] = (long) 1492;
      ArrayUtils.swap(longArray0, 216, 1492);
      assertArrayEquals(new long[] {1492L, 1492L, 1492L, 1492L, 1492L}, longArray0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'l';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'t', 'l'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-2287L), 6);
      assertArrayEquals(new long[] {1492L, 1492L, 1492L, 1492L, 1492L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1492L;
      objectArray0[1] = (Object) 1492L;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) boolean1, 216);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(bitSet0);
      assertEquals(2, objectArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      boolean boolean2 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 6);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 6;
      intArray0[1] = 1492;
      intArray0[2] = (int) 't';
      intArray0[3] = (int) 'l';
      intArray0[4] = 6;
      intArray0[5] = 1492;
      intArray0[6] = (int) 'l';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {6, 1492, 116, 108, 6, 1492, 108}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short) (-394);
      shortArray0[1] = (short)3648;
      shortArray0[2] = (short)3648;
      ArrayUtils.shift(shortArray0, (-1440));
      assertEquals(11, shortArray0.length);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((String) null);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean0);
      assertFalse(boolean4);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean5);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean4));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean4));
      assertNotNull(boolean6);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 16, (int) (byte)0);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1463);
      shortArray0[1] = (short)766;
      shortArray0[2] = (short) (-580);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-322);
      shortArray0[6] = (short)233;
      shortArray0[7] = (short) (-1);
      shortArray0[8] = (short)2000;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)2000, (short) (-1), (short)233, (short)0, (short) (-322), (short) (-1), (short) (-580), (short)766, (short) (-1463)}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)233;
      doubleArray0[1] = (double) (short)766;
      doubleArray0[2] = (double) (short)233;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) (short)766;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, Double.NaN);
      assertArrayEquals(new double[] {233.0, 766.0, 233.0, Double.NaN, 766.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short) (-1463);
      floatArray0[2] = (float) (short)233;
      floatArray0[3] = (float) (short) (-322);
      floatArray0[4] = (float) (short) (-580);
      floatArray0[5] = (float) (short)766;
      ArrayUtils.shift(floatArray0, 4853);
      assertArrayEquals(new float[] {(-1463.0F), 233.0F, (-322.0F), (-580.0F), 766.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-580);
      int int1 = ArrayUtils.indexOf(longArray0, (long) (short) (-1463), (-1437));
      assertArrayEquals(new long[] {(-580L)}, longArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2811);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 849;
      intArray0[1] = (int) (short) (-2811);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (short) (-2811);
      intArray0[5] = (int) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 849, (int) (byte)0);
      assertArrayEquals(new int[] {849, (-2811), 0, 0, (-2811), 0}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)8, (int) (byte)8);
      assertArrayEquals(new byte[] {(byte)72, (byte)72}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(2147483647L);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-38);
      floatArray0[1] = (float) (byte)76;
      floatArray0[2] = (float) (byte)76;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) 2147483647L;
      floatArray0[5] = (float) (byte) (-42);
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {76.0F, 76.0F, 0.0F, 2.14748365E9F, (-42.0F), (-38.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = '~';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'D');
      assertArrayEquals(new char[] {'M', 'M', '~', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'M', 'M', '~', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      short short0 = (short)113;
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, (-2145659106), (short)113);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2145659106, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)8;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-37));
      assertArrayEquals(new byte[] {(byte)8, (byte) (-1), (byte)78, (byte)1, (byte)78, (byte)8}, byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-1), (byte)78, (byte)1, (byte)78, (byte)8}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)1;
      objectArray0[1] = (Object) (byte)78;
      objectArray0[2] = (Object) (byte)1;
      objectArray0[3] = (Object) (byte) (-1);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-2180), (int) (byte) (-37));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.swap(booleanArray0, (int) (byte) (-1), (-2180), (int) (byte)1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 429);
      assertNull(intArray0);
      
      MockRandom mockRandom0 = new MockRandom(1615L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) stringArray0, (Random) mockRandom0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, 0, 0, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 429;
      intArray0[2] = 0;
      intArray0[3] = 429;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[6] = 429;
      intArray0[7] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertArrayEquals(new int[] {(-1), 429, 0, 429, 0, (-1), 429, (-1)}, intArray0);
      assertArrayEquals(new int[] {429, 0, 429, 0, (-1), 429, (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(493L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = '2';
      charArray0[2] = 'Y';
      charArray0[3] = '9';
      charArray0[4] = 'P';
      charArray0[5] = ']';
      ArrayUtils.shift(charArray0, (-1), (-1), 1697);
      assertArrayEquals(new char[] {'\\', '2', 'Y', '9', 'P', ']'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-2811);
      shortArray0[2] = (short)2100;
      shortArray0[3] = (short) (-2811);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-948);
      shortArray0[3] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-3085));
      assertArrayEquals(new short[] {(short)0, (short) (-2811), (short)2100, (short)0, (short)0, (short) (-948), (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(8, shortArray0.length);
      
      long[] longArray0 = new long[2];
      shortArray0[6] = (short)0;
      longArray0[1] = (long) (short)0;
      ArrayUtils.shift(longArray0, (int) (short) (-2811));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (short) (-3085);
      longArray1[1] = (-1671L);
      longArray1[2] = (long) (short)0;
      longArray1[6] = (long) (short)2100;
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-3085L), (-1671L), 0L, 0L, 0L, 0L, 2100L, 0L}, longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray2.length);
      assertEquals(2, longArray0.length);
      assertEquals(8, longArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((short) (-2811));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray1, (Random) mockRandom0);
      assertArrayEquals(new long[] {(-1671L), 0L, 0L, 0L, 0L, 2100L, 0L, (-3085L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('^');
      assertEquals('^', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('E');
      assertEquals('E', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) character1);
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character2));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(2, characterArray1.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)24;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)24, (byte)24, (byte)24}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Long long0 = new Long((byte)24);
      assertEquals(24L, (long)long0);
      assertNotNull(long0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'E';
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {69L}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (int) character1, 12);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character2));
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (int) (byte)24, 12);
      assertNull(charArray0);
      
      ArrayUtils.shift((Object[]) characterArray1, (int) (byte)24);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character2));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(2, characterArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray1, (Object) null, (int) character0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character2));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(bitSet0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(2, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Short short0 = new Short((short) (-2765));
      assertEquals((short) (-2765), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray0 = new Short[1];
      Short short2 = new Short((short) (-1061));
      assertEquals((short) (-1061), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[0] = short2;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'X');
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short) (-1061));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)13;
      ArrayUtils.swap(byteArray0, (int) (byte) (-41), 1471, 1097);
      assertArrayEquals(new byte[] {(byte) (-41), (byte)13}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-192.6F);
      floatArray0[1] = (-2457.5095F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2110.15F));
      assertArrayEquals(new float[] {(-192.6F), (-2457.5095F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (-2370L));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(4, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = '$';
      charArray0[2] = 'j';
      charArray0[3] = '1';
      charArray0[4] = 'Z';
      charArray0[5] = 'P';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)24;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)18, (byte)24}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) (-1L);
      longArray1[1] = (Long) (-1L);
      Long long0 = new Long((byte)18);
      assertEquals(18L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray2 = ArrayUtils.removeAllOccurences(longArray1, long0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.swap(floatArray0, (int) (byte)24, (-1));
      assertArrayEquals(new float[] {(-192.6F), (-2457.5095F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-264.818F);
      floatArray0[1] = (-264.818F);
      floatArray0[2] = (-264.818F);
      floatArray0[3] = (-264.818F);
      floatArray0[4] = (-264.818F);
      floatArray0[5] = (-264.818F);
      floatArray0[6] = (-264.818F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-264.818F), (-3169));
      assertArrayEquals(new float[] {(-264.818F), (-264.818F), (-264.818F), (-264.818F), (-264.818F), (-264.818F), (-264.818F)}, floatArray0, 0.01F);
      assertEquals(7, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-277));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true, false}, booleanArray0));
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 5, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(8, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-277);
      floatArray0[1] = (float) (-277);
      floatArray0[2] = (-2110.15F);
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, (-1918.09F), (-147));
      assertArrayEquals(new float[] {(-277.0F), (-277.0F), (-2110.15F)}, floatArray0, 0.01F);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, floatArray0.length);
      
      bitSet0.andNot(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true, false}, booleanArray0));
      assertArrayEquals(new float[] {(-277.0F), (-277.0F), (-2110.15F)}, floatArray0, 0.01F);
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 5, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(8, booleanArray0.length);
      assertEquals(3, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) double0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 2042.800134712;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 924.7283338535548;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-480.4197647);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2154.9762927539, (-977.388097921361));
      assertArrayEquals(new double[] {1.5, 2042.800134712, (-1.0), 924.7283338535548, 0.0, (-1.0), (-480.4197647)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)16);
      assertArrayEquals(new byte[] {(byte)111, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(9, byteArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean("Index: ");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean2);
      assertFalse(boolean3);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = ArrayUtils.get(booleanArray0, (int) 16);
      assertNull(boolean4);
      assertEquals(3, booleanArray0.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, (-1), 110);
      assertEquals(0, objectArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)16);
      assertArrayEquals(new byte[] {(byte)111, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(9, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (byte)111;
      longArray0[3] = (long) 110;
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = (long) (byte)111;
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      longArray0[8] = (long) (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 64L);
      assertArrayEquals(new long[] {(-1L), (-1L), 111L, 110L, (-1L), 111L, (-1L), (-1L), (-1L)}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-497L);
      long long0 = 0L;
      longArray0[1] = 0L;
      int int0 = (-1);
      int int1 = 1492;
      ArrayUtils.swap(longArray0, (-1), 1492);
      assertArrayEquals(new long[] {(-497L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[1] = 'l';
      charArray0[2] = 'b';
      charArray0[3] = 'x';
      charArray0[4] = 'J';
      char char0 = 't';
      charArray0[5] = 't';
      charArray0[6] = 'c';
      charArray0[7] = 'O';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'l', 'b', 'x', 'J', 't', 'c', 'O'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      
      int int2 = ArrayUtils.indexOf(longArray0, (-265L), 1492);
      assertArrayEquals(new long[] {(-497L), 0L}, longArray0);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2, longArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 'l';
      objectArray0[1] = (Object) 'c';
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 'x';
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) 'c';
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) boolean1, (-1));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(bitSet0);
      assertEquals(6, objectArray0.length);
      
      Object[] objectArray1 = new Object[1];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[4]);
      assertEquals(0L, object0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertTrue(object0.equals((Object)long0));
      assertNotNull(object0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(6, objectArray0.length);
      
      objectArray1[0] = object0;
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(objectArray0[5], object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(81.0);
      assertEquals(81.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(81.0);
      assertEquals(81.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(81.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertEquals(81.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(81.0);
      assertEquals(81.0, (double)double4, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-508.0));
      assertEquals((-508.0), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[2]);
      assertEquals(81.0, (double)double6, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotNull(double6);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[5]);
      assertEquals((-508.0), (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotNull(double7);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[7] = double7;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)15;
      shortArray0[1] = (short)1488;
      shortArray0[2] = (short)3309;
      shortArray0[3] = (short)3353;
      shortArray0[4] = (short) (-706);
      shortArray0[5] = (short)34;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)726);
      assertArrayEquals(new short[] {(short)15, (short)1488, (short)3309, (short)3353, (short) (-706), (short)34}, shortArray0);
      assertArrayEquals(new short[] {(short)726, (short)15, (short)1488, (short)3309, (short)3353, (short) (-706), (short)34}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2607);
      intArray0[1] = (-1727);
      intArray0[3] = 0;
      intArray0[5] = (-2434);
      intArray0[6] = 2735;
      ArrayUtils.swap(intArray0, (-4295), (-3887));
      assertArrayEquals(new int[] {(-2607), (-1727), 0, 0, 0, (-2434), 2735, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[1] = integer0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 2841L);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-873), (-823));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2145659106);
      intArray0[1] = (-873);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {(-2145659106), (-873)}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, (-2145659106), (-873)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 0L;
      longArray0[2] = (-402L);
      longArray0[3] = (-2439L);
      longArray0[4] = 348L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-402L), (-2439L), 348L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1529);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1529)}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[12];
      intArray0[0] = (int) (short) (-1529);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1529), (int) (short)0);
      assertArrayEquals(new short[] {(short) (-1529)}, shortArray0);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {(short) (-1529)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1529)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-266L));
      assertArrayEquals(new long[] {0L, 0L, (-402L), (-2439L), 348L}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(5, longArray0.length);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(12, intArray1.length);
      assertEquals(12, intArray0.length);
      
      int int1 = ArrayUtils.hashCode((Object) bitSet0);
      assertArrayEquals(new long[] {0L, 0L, (-402L), (-2439L), 348L}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertFalse(int1 == int0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-128));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-128);
      shortArray0[1] = (short) (byte) (-128);
      shortArray0[2] = (short) (byte) (-128);
      shortArray0[3] = (short) (byte) (-128);
      shortArray0[4] = (short) (byte) (-128);
      shortArray0[5] = (short) (byte) (-128);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-128), (short) (-128), (short) (-128), (short) (-128), (short) (-128), (short) (-128)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-128);
      int int0 = ArrayUtils.indexOf(longArray0, (-1304L));
      assertArrayEquals(new long[] {0L, (-128L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(2, longArray0.length);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-128), 399);
      assertArrayEquals(new short[] {(short)0, (short) (-128), (short) (-128), (short) (-128), (short) (-128), (short) (-128), (short) (-128)}, shortArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1463);
      shortArray0[1] = (short)766;
      shortArray0[2] = (short) (-580);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-322);
      shortArray0[5] = (short)7;
      shortArray0[6] = (short)233;
      shortArray0[7] = (short) (-1);
      shortArray0[8] = (short)2000;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)2000, (short) (-1), (short)233, (short)7, (short) (-322), (short) (-1), (short) (-580), (short)766, (short) (-1463)}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Uz1zIp-{:PJ";
      stringArray0[1] = "d>)E*Unl5`r2fQ(yne";
      stringArray0[2] = "Array and element cannot both be null";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "0>0Sr";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "0>0Sr");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      Float float0 = new Float((-2110.15F));
      assertEquals((-2110.15F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = ArrayUtils.indexOf((Object[]) stringArray1, (Object) float0);
      assertEquals((-1), int0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 70);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-128));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (byte) (-128);
      shortArray0[0] = (short) (byte) (-128);
      shortArray0[3] = (short) (byte) (-128);
      shortArray0[4] = (short) (byte) (-128);
      shortArray0[5] = (short) (byte) (-128);
      shortArray0[6] = (short) (byte) (-128);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-128), (short) (-128), (short)0, (short) (-128), (short) (-128), (short) (-128), (short) (-128)}, shortArray0);
      assertFalse(boolean0);
      assertEquals(7, shortArray0.length);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short) (-128);
      doubleArray0[3] = (double) (short) (-128);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short) (-128);
      objectArray0[1] = (Object) (short) (-128);
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) (short) (-128);
      objectArray0[4] = (Object) (short) (-128);
      objectArray0[5] = (Object) (short) (-128);
      objectArray0[6] = (Object) 0.0;
      objectArray0[7] = (Object) (short)0;
      objectArray0[8] = (Object) (short) (-128);
      ArrayUtils.shift(objectArray0, 5765, (int) (short) (-128), 1760);
      assertEquals(9, objectArray0.length);
      
      ArrayUtils.shift(doubleArray0, (int) (short) (-128));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-128.0), 0.0, (-128.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, false}, booleanArray0));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-128));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-128);
      shortArray0[1] = (short) (byte) (-128);
      shortArray0[0] = (short) (byte) (-128);
      shortArray0[3] = (short) (byte) (-128);
      shortArray0[4] = (short) (byte) (-128);
      shortArray0[5] = (short) (byte) (-128);
      shortArray0[6] = (short) (byte) (-128);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-128), (short) (-128), (short)0, (short) (-128), (short) (-128), (short) (-128), (short) (-128)}, shortArray0);
      assertFalse(boolean0);
      assertEquals(7, shortArray0.length);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short) (-128);
      doubleArray0[3] = (double) (short) (-128);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short) (-128);
      objectArray0[1] = (Object) (short) (-128);
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) (short) (-128);
      objectArray0[4] = (Object) (short) (-128);
      objectArray0[5] = (Object) (short) (-128);
      objectArray0[6] = (Object) 0.0;
      objectArray0[7] = (Object) (short)0;
      objectArray0[8] = (Object) (short) (-128);
      ArrayUtils.shift(objectArray0, 5765, (int) (short) (-128), 1760);
      assertEquals(9, objectArray0.length);
      
      ArrayUtils.shift(doubleArray0, 777);
      assertArrayEquals(new double[] {(-128.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-128.0), 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, false}, booleanArray0));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      ArrayUtils.swap(longArray0, (-3729), 356, 7);
      assertArrayEquals(new long[] {(-3729L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = '$';
      charArray0[2] = '?';
      charArray0[3] = 'b';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 7, (-1));
      assertArrayEquals(new char[] {'\"', '$', '?', 'b'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1607), (-1607));
      assertArrayEquals(new char[] {'M', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 774);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-1);
      ArrayUtils.swap((boolean[]) null, (-3013), 13, 562);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2122.0F);
      floatArray0[1] = (float) 13;
      floatArray0[2] = (float) 13;
      floatArray0[3] = (float) (byte) (-85);
      ArrayUtils.shift(floatArray0, 562);
      assertArrayEquals(new float[] {13.0F, (-85.0F), (-2122.0F), 13.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 476, 3375.6743F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 476, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 5375.4047181427;
      doubleArray0[3] = 1183.644;
      doubleArray0[4] = (-659.6599684696);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3550.3);
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1, (-2750.4));
      assertArrayEquals(new double[] {0.0, 0.0, 5375.4047181427, 1183.644, (-659.6599684696), 0.0, (-3550.3), (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2750.4), 0.0, 5375.4047181427, 1183.644, (-659.6599684696), 0.0, (-3550.3), (-1.0), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(1);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      longArray0[1] = long0;
      Long long1 = new Long(1);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[2] = long1;
      longArray0[3] = longArray0[1];
      Long long2 = new Long((long) longArray0[2]);
      assertEquals(1L, (long)long2);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(7, longArray0.length);
      
      longArray0[4] = long2;
      Long long3 = new Long(1);
      assertEquals(1L, (long)long3);
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertNotNull(long3);
      
      longArray0[5] = long3;
      long long4 = 0L;
      Long long5 = new Long(0L);
      assertEquals(0L, (long)long5);
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long4));
      assertNotNull(long5);
      
      longArray0[6] = long5;
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 5375.4047181427, 1183.644, (-659.6599684696), 0.0, (-3550.3), (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2750.4), 0.0, 5375.4047181427, 1183.644, (-659.6599684696), 0.0, (-3550.3), (-1.0), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(19, doubleArray2.length);
      assertEquals(10, doubleArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (long)longArray0[2];
      floatArray0[1] = (float) long4;
      floatArray0[2] = (float) (long)longArray0[4];
      floatArray0[3] = (-2184.4F);
      floatArray0[4] = (float) (long)longArray0[2];
      ArrayUtils.shift(floatArray0, 511);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, 1.0F, (-2184.4F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)8, (int) (byte)8);
      assertArrayEquals(new byte[] {(byte)72, (byte)72}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(2147483647L);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)72;
      floatArray0[1] = (float) (byte)76;
      floatArray0[2] = (float) (byte)76;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) 2147483647L;
      floatArray0[5] = (float) (byte) (-42);
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {76.0F, 76.0F, 0.0F, 2.14748365E9F, (-42.0F), 72.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-128));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-128);
      shortArray0[1] = (short) (byte) (-128);
      shortArray0[2] = (short) (byte) (-128);
      shortArray0[3] = (short) (byte) (-128);
      shortArray0[4] = (short) (byte) (-128);
      shortArray0[5] = (short) (byte) (-128);
      shortArray0[6] = (short) (byte) (-128);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-128), (short) (-128), (short) (-128), (short) (-128), (short) (-128), (short) (-128), (short) (-128)}, shortArray0);
      assertTrue(boolean0);
      assertEquals(7, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short) (-128);
      doubleArray0[3] = (double) (short) (-128);
      doubleArray0[4] = (double) (short) (-128);
      ArrayUtils.reverse(doubleArray0, (int) (byte) (-128), 2829);
      assertArrayEquals(new double[] {(-128.0), (-128.0), 0.0, (-128.0), 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short) (-128), 16);
      assertArrayEquals(new double[] {(-128.0), (-128.0), 0.0, (-128.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-128.0), (-128.0), 0.0, (-128.0), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-128));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-128);
      shortArray0[1] = (short) (byte) (-128);
      shortArray0[2] = (short) (byte) (-128);
      shortArray0[3] = (short) (byte) (-128);
      shortArray0[4] = (short) (byte) (-128);
      shortArray0[5] = (short) (byte) (-128);
      shortArray0[6] = (short) (byte) (-128);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-128), (short) (-128), (short) (-128), (short) (-128), (short) (-128), (short) (-128), (short) (-128)}, shortArray0);
      assertTrue(boolean0);
      assertEquals(7, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-128);
      doubleArray0[1] = (double) (short) (-128);
      doubleArray0[3] = (double) (short) (-128);
      doubleArray0[4] = (double) (short) (-128);
      ArrayUtils.reverse(doubleArray0, (int) (byte) (-128), 2829);
      assertArrayEquals(new double[] {(-128.0), (-128.0), 0.0, (-128.0), (-128.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short) (-128), 16);
      assertArrayEquals(new double[] {(-128.0), (-128.0), 0.0, (-128.0), (-128.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-128.0), (-128.0), 0.0, (-128.0), (-128.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = '~';
      charArray0[3] = '4';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'D');
      assertArrayEquals(new char[] {'M', 'M', '~', '4'}, charArray0);
      assertArrayEquals(new char[] {'M', 'M', '~', '4'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-81);
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)72, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)76, (byte) (-42), (byte) (-81), (byte)0, (byte)72, (byte)0}, byteArray0);
      assertEquals(5, int0);
      assertEquals(7, byteArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) 'D';
      MockRandom mockRandom0 = new MockRandom((byte)76);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {68.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = '~';
      charArray0[3] = '4';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'D');
      assertArrayEquals(new char[] {'M', 'M', '~', '4'}, charArray0);
      assertArrayEquals(new char[] {'M', 'M', '~', '4'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-42);
      MockRandom mockRandom0 = new MockRandom(1190L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 818.0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1492;
      longArray0[1] = (long) 1492;
      longArray0[2] = (long) 1492;
      longArray0[3] = (long) 1492;
      longArray0[4] = (long) 1492;
      ArrayUtils.swap(longArray0, 216, 1492);
      assertArrayEquals(new long[] {1492L, 1492L, 1492L, 1492L, 1492L}, longArray0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'l';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'t', 'l'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1492L;
      objectArray0[1] = (Object) 1492L;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 1492);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-75);
      intArray0[1] = (-75);
      int int0 = ArrayUtils.indexOf(intArray0, (-1184), (-75));
      assertArrayEquals(new int[] {(-75), (-75)}, intArray0);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-334);
      shortArray0[1] = (short)8495;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-334), (short)8495}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-75);
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (-75), (int) (short) (-334), (-78.1618581461755));
      assertArrayEquals(new double[] {(-75.0)}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-127);
      byte[] byteArray1 = ArrayUtils.insert(7, byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)100, (byte)53, (byte)102, (byte) (-1), (byte)0, (byte) (-77), (byte) (-127)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(16, byteArray1.length);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1643);
      intArray0[1] = (-1643);
      intArray0[2] = (-2181);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)91;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte) (-52), (byte)4, (byte)76, (byte) (-70), (byte)91}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, byteArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)4;
      doubleArray0[1] = (double) (byte)76;
      doubleArray0[2] = (double) (-1643);
      doubleArray0[3] = (double) (byte) (-70);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 105.0, (int) (byte) (-52), 1.5);
      assertArrayEquals(new double[] {4.0, 76.0, (-1643.0), (-70.0)}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1135);
      doubleArray0[1] = 103.5;
      doubleArray0[2] = (double) (-1135);
      ArrayUtils.shift(doubleArray0, (-443));
      assertArrayEquals(new double[] {(-1135.0), (-1135.0), 103.5}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      MutableInt mutableInt0 = new MutableInt((-1241));
      assertEquals((-1241.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1241), mutableInt0.shortValue());
      assertEquals((-1241.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1241L), mutableInt0.longValue());
      assertEquals((-1241), mutableInt0.intValue());
      assertEquals("-1241", mutableInt0.toString());
      assertEquals((-1241), (int)mutableInt0.getValue());
      assertEquals((byte)39, mutableInt0.byteValue());
      assertEquals((-1241), (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((-1135.0));
      assertEquals((-1135.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((byte) (-111), mutableInt1.byteValue());
      assertEquals((-1135), (int)mutableInt1.toInteger());
      assertEquals((-1135), (int)mutableInt1.getValue());
      assertEquals((short) (-1135), mutableInt1.shortValue());
      assertEquals("-1135", mutableInt1.toString());
      assertEquals((-1135.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1135L), mutableInt1.longValue());
      assertEquals((-1135), mutableInt1.intValue());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      MutableInt mutableInt2 = new MutableInt(7);
      assertEquals(7, (int)mutableInt2.getValue());
      assertEquals((byte)7, mutableInt2.byteValue());
      assertEquals(7, (int)mutableInt2.toInteger());
      assertEquals(7.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)7, mutableInt2.shortValue());
      assertEquals(7L, mutableInt2.longValue());
      assertEquals(7, mutableInt2.intValue());
      assertEquals("7", mutableInt2.toString());
      assertEquals(7.0F, mutableInt2.floatValue(), 0.01F);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertNotNull(mutableInt2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (-1135), (-1443), 1376.7880724129097);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-520), (-520), 0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      int int0 = 84;
      Integer integer0 = new Integer(84);
      assertEquals(84, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-685));
      assertEquals((-685), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2070.0F;
      floatArray0[1] = (float) (-685);
      floatArray0[2] = (-4756.83F);
      floatArray0[3] = (float) (-520);
      floatArray0[4] = (float) (int)integerArray0[1];
      floatArray0[5] = (float) int0;
      floatArray0[6] = (float) (int)integerArray0[1];
      floatArray0[7] = (float) int0;
      floatArray0[8] = (float) (-685);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-685.0F), 84.0F, (-685.0F), 84.0F, (-685.0F), (-520.0F), (-4756.83F), (-685.0F), 2070.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray1);
      assertArrayEquals(new int[] {84, (-685)}, intArray0);
      assertNotNull(intArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '\"';
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '\u0000';
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 2166.48927);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2166.48927}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)74, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, true, 7);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)1, 12);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2887L;
      longArray0[1] = (-3854L);
      longArray0[2] = (-935L);
      longArray0[3] = 0L;
      longArray0[4] = (-3854L);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {2887L, (-3854L), (-935L), 0L, (-3854L)}, longArray0);
      assertTrue(boolean0);
      assertEquals(5, longArray0.length);
      
      ArrayUtils.reverse((float[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte) (-80);
      byteArray0[8] = (byte) (-78);
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)103, (byte)46, (byte) (-41), (byte)48, (byte)64, (byte)31, (byte) (-80), (byte) (-78)}, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Float float0 = new Float(2.133538948E9);
      assertEquals(2.13353894E9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-394);
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("org.apache.commons.lang3.StringUtils");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)3648;
      longArray0[1] = (long) (short)3648;
      longArray0[2] = (long) (short)3648;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 3648L);
      assertArrayEquals(new long[] {3648L, 3648L, 3648L}, longArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(3, longArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-394);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 3313L, 222);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 635.937668;
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = (long) (-2147009011);
      longArray0[2] = (long) (-2147009011);
      longArray0[3] = 1L;
      longArray0[4] = (long) (-2147009011);
      longArray0[5] = (long) (-2147009011);
      longArray0[6] = 1L;
      int int0 = ArrayUtils.indexOf(longArray0, (-81L), (-1770));
      assertArrayEquals(new long[] {1L, (-2147009011L), (-2147009011L), 1L, (-2147009011L), (-2147009011L), 1L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-37));
      assertEquals((-37), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((-37.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-37L), mutableInt0.longValue());
      assertEquals((-37), mutableInt0.intValue());
      assertEquals((short) (-37), mutableInt0.shortValue());
      assertEquals((-37), (int)mutableInt0.getValue());
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals("-37", mutableInt0.toString());
      assertEquals((-37.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-37), (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.getValue();
      assertEquals((-37.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-37L), mutableInt0.longValue());
      assertEquals((-37), mutableInt0.intValue());
      assertEquals((short) (-37), mutableInt0.shortValue());
      assertEquals((-37), (int)mutableInt0.getValue());
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals("-37", mutableInt0.toString());
      assertEquals((-37.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-37), (int)mutableInt0.toInteger());
      assertEquals((-37), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int int0 = (-1);
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals((-1), (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = mutableInt0.getValue();
      assertEquals((-37.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-37L), mutableInt0.longValue());
      assertEquals((-37), mutableInt0.intValue());
      assertEquals((short) (-37), mutableInt0.shortValue());
      assertEquals((-37), (int)mutableInt0.getValue());
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals("-37", mutableInt0.toString());
      assertEquals((-37.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-37), (int)mutableInt0.toInteger());
      assertEquals((-37), (int)integer4);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-55);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-55));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-24), (byte) (-106), (byte) (-46), (byte) (-55), (byte)80, (byte)11, (byte) (-1), (byte) (-55)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'y');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'y'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)90;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)90);
      assertArrayEquals(new byte[] {(byte)28, (byte)90}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 0L;
      longArray0[2] = (-402L);
      longArray0[3] = (-2439L);
      longArray0[4] = 348L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-402L), (-2439L), 348L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1529);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1529)}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-1529);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1529), (int) (short)0);
      assertArrayEquals(new short[] {(short) (-1529)}, shortArray0);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {(short) (-1529)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1529)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 3914);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'R', '\u0000'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'R', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'R', '\u0000', 'R', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 3914);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      
      Short short0 = new Short((short)101);
      assertEquals((short)101, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = ArrayUtils.isEquals("T/h'EF~F7]vSK", short0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'R', '\u0000'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 3914);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      
      Short short0 = new Short((short)101);
      assertEquals((short)101, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = ArrayUtils.isEquals("T/h'EF~F7]vSK", short0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = '*';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'R', '*'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 56);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-37));
      assertEquals((-37), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((-37), (int)mutableInt0.getValue());
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals("-37", mutableInt0.toString());
      assertEquals((-37.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-37), (int)mutableInt0.toInteger());
      assertEquals((-37.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-37L), mutableInt0.longValue());
      assertEquals((-37), mutableInt0.intValue());
      assertEquals((short) (-37), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.getValue();
      assertEquals((-37), (int)mutableInt0.getValue());
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals("-37", mutableInt0.toString());
      assertEquals((-37.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-37), (int)mutableInt0.toInteger());
      assertEquals((-37.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-37L), mutableInt0.longValue());
      assertEquals((-37), mutableInt0.intValue());
      assertEquals((short) (-37), mutableInt0.shortValue());
      assertEquals((-37), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int int0 = (-1);
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      int int1 = 5;
      Integer integer3 = new Integer(5);
      assertEquals(5, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = mutableInt0.getValue();
      assertEquals((-37), (int)mutableInt0.getValue());
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals("-37", mutableInt0.toString());
      assertEquals((-37.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-37), (int)mutableInt0.toInteger());
      assertEquals((-37.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-37L), mutableInt0.longValue());
      assertEquals((-37), mutableInt0.intValue());
      assertEquals((short) (-37), mutableInt0.shortValue());
      assertEquals((-37), (int)integer4);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)int1));
      assertTrue(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = Integer.getInteger("6", (Integer) int0);
      assertEquals((-1), (int)integer5);
      assertFalse(int0 == int1);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int1));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(5);
      assertEquals(5, (int)integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int1);
      assertEquals(5, (int)integer7);
      assertTrue(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(int1 == int0);
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(16, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      Float float0 = new Float(2.133538948E9);
      assertEquals(2.13353894E9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short) (-394);
      shortArray0[1] = (short)3648;
      shortArray0[2] = (short)3648;
      ArrayUtils.shift(shortArray0, (-1440));
      assertEquals(11, shortArray0.length);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[4];
      intArray0[0] = 100;
      int int0 = (-623);
      intArray0[1] = (-623);
      int int1 = (-37);
      intArray0[2] = (-37);
      intArray0[3] = 3119;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3119, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-37));
      assertArrayEquals(new byte[] {(byte)8, (byte) (-1), (byte)78, (byte)1, (byte)11, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-1), (byte)78, (byte)1, (byte)11, (byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)1;
      objectArray0[1] = (Object) (byte)11;
      objectArray0[2] = (Object) (byte)1;
      objectArray0[3] = (Object) (byte) (-1);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-2180), (int) (byte) (-37));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.swap(booleanArray0, (int) (byte) (-1), (-2180), 0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 429);
      assertNull(intArray0);
      
      MockRandom mockRandom0 = new MockRandom(1615L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) stringArray0, (Random) mockRandom0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      ArrayUtils.reverse(byteArray0, 2, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)124}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)124;
      objectArray0[1] = (Object) (byte)124;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte)124;
      objectArray0[5] = (Object) (byte)0;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(6, objectArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, 68, (-992));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4596.0;
      doubleArray0[3] = 404.86;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)19;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, 4596.0, 404.86, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-77);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)82;
      byteArray1[3] = (byte)110;
      byteArray1[4] = (byte)88;
      byteArray1[5] = (byte)24;
      byteArray1[6] = (byte)43;
      ArrayUtils.swap(byteArray1, (-1413), (int) (byte)88);
      assertArrayEquals(new byte[] {(byte) (-77), (byte)0, (byte)82, (byte)110, (byte)88, (byte)24, (byte)43}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (-2308);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (double) 'N';
      doubleArray0[2] = (double) 'b';
      doubleArray0[4] = (double) 'z';
      doubleArray0[5] = (double) 'z';
      doubleArray0[6] = (double) 'b';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {1.5, 78.0, 98.0, 0.0, 122.0, 122.0, 98.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      charArray0[4] = '&';
      charArray0[2] = '5';
      charArray0[6] = 'e';
      charArray0[7] = '@';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'e');
      assertArrayEquals(new char[] {'&', '&', '5', 'e', '&', '\u0000', 'e', '@'}, charArray0);
      assertArrayEquals(new char[] {'e', '&', '&', '5', 'e', '&', '\u0000', 'e', '@'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'e';
      doubleArray0[1] = (double) '5';
      doubleArray0[2] = (double) 'e';
      doubleArray0[3] = 1.5;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {101.0, 53.0, 101.0, 1.5}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-686.2384262);
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = '6';
      charArray0[2] = 't';
      charArray0[3] = ',';
      charArray0[4] = '_';
      charArray0[5] = 't';
      charArray0[6] = ')';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'd');
      assertArrayEquals(new char[] {'d', '6', 't', ',', '_', 't', ')'}, charArray0);
      assertArrayEquals(new char[] {'d', 'd', '6', 't', ',', '_', 't', ')'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-686.2384262);
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = '6';
      charArray0[2] = 't';
      charArray0[3] = ',';
      charArray0[4] = '6';
      charArray0[5] = 't';
      charArray0[6] = ')';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'd');
      assertArrayEquals(new char[] {'d', '6', 't', ',', '6', 't', ')'}, charArray0);
      assertArrayEquals(new char[] {'d', 'd', '6', 't', ',', '6', 't', ')'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      int[] intArray0 = new int[3];
      intArray0[0] = (-1639);
      intArray0[2] = (-2181);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray1);
      
      char[] charArray0 = new char[2];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '+', (int) (byte) (-52));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-1639));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1639, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2811);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2100;
      shortArray0[3] = (short) (-2537);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-948);
      shortArray0[6] = (short)1043;
      shortArray0[7] = (short) (-3085);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-3085));
      assertArrayEquals(new short[] {(short) (-2811), (short)0, (short)2100, (short) (-2537), (short)0, (short) (-948), (short)1043, (short) (-3085), (short)0}, shortArray0);
      assertEquals(7, int0);
      assertEquals(9, shortArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-3085);
      longArray0[1] = (long) (short)0;
      ArrayUtils.shift(longArray0, 1012);
      assertArrayEquals(new long[] {(-3085L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)10;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1826);
      assertArrayEquals(new short[] {(short)0, (short)10}, shortArray0);
      assertArrayEquals(new short[] {(short)1826, (short)0, (short)10}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 56;
      intArray0[1] = (int) (short)10;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)10;
      intArray0[4] = (int) (short)10;
      intArray0[5] = (int) (short)10;
      intArray0[6] = (int) (short)10;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) 10;
      longArray0[2] = (long) 10;
      longArray0[3] = (long) 0;
      ArrayUtils.reverse(longArray0, 4, (int) (short)1826);
      assertArrayEquals(new long[] {0L, 10L, 10L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      short[] shortArray2 = new short[0];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      short[] shortArray3 = ArrayUtils.insert(126, shortArray2, shortArray2);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray3);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertNotNull(shortArray3);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 56, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      char char0 = '^';
      Character character0 = Character.valueOf('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      characterArray0[1] = character0;
      characterArray0[2] = (Character) char0;
      Character[] characterArray1 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) char0;
      longArray0[1] = (long) char0;
      longArray0[2] = (long) '^';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '^';
      intArray0[1] = (int) char0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 94, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-963.73694F), 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '#';
      charArray0[2] = '/';
      charArray0[3] = '&';
      charArray0[4] = 'G';
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) '/';
      objectArray0[1] = (Object) '#';
      objectArray0[2] = (Object) 'G';
      objectArray0[3] = (Object) '-';
      objectArray0[4] = (Object) '-';
      objectArray0[5] = (Object) '&';
      objectArray0[6] = (Object) 'G';
      ArrayUtils.shift(objectArray0, 1760, (-285), (-1));
      assertEquals(7, objectArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-285));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)10;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1826);
      assertArrayEquals(new short[] {(short)0, (short)10}, shortArray0);
      assertArrayEquals(new short[] {(short)1826, (short)0, (short)10}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 56;
      intArray0[1] = (int) (short)10;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)10;
      intArray0[4] = (int) (short)10;
      intArray0[5] = (int) (short)10;
      intArray0[6] = (int) (short)10;
      intArray0[7] = 654;
      intArray0[8] = (int) (short)10;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 0);
      assertArrayEquals(new int[] {56, 10, 0, 10, 10, 10, 10, 654, 10}, intArray0);
      assertArrayEquals(new int[] {56, 10, 10, 10, 10, 10, 654, 10}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 10;
      objectArray0[1] = (Object) 10;
      objectArray0[2] = (Object) 10;
      objectArray0[3] = (Object) (short)0;
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)88);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      int int0 = ArrayUtils.indexOf(charArray0, 'S', 10);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2887L;
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2887L);
      assertEquals(2887.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(1770.0);
      assertEquals(1770.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double((-990.0));
      assertEquals((-990.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 977.7996930905947);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      charArray0[4] = '&';
      charArray0[5] = '5';
      charArray0[6] = 'e';
      charArray0[7] = '@';
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1.5);
      assertEquals(1.5, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1770.0);
      assertEquals(1770.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.5);
      assertEquals(1.5, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[1]);
      assertEquals(1.5, (double)double4, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals(6, doubleArray0.length);
      
      Double double5 = new Double((-990.0));
      assertEquals((-990.0), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 977.7996930905947);
      assertArrayEquals(new double[] {1.5, 1.5, 1770.0, 1.5, 977.7996930905947, (-990.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Short short0 = new Short((short) (-2765));
      assertEquals((short) (-2765), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray0 = new Short[1];
      Short short2 = new Short((short) (-1065));
      assertEquals((short) (-1065), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[0] = short2;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'X');
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short) (-1065));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      charArray0[4] = '&';
      charArray0[5] = '5';
      charArray0[6] = 'e';
      charArray0[7] = '@';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'e');
      assertArrayEquals(new char[] {'&', '&', '@', 'e', '&', '5', 'e', '@'}, charArray0);
      assertArrayEquals(new char[] {'e', '&', '&', '@', 'e', '&', '5', 'e', '@'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1.5);
      assertEquals(1.5, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1770.0);
      assertEquals(1770.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.5);
      assertEquals(1.5, (double)double3, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[1]);
      assertEquals(1.5, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-990.0));
      assertEquals((-990.0), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 977.7996930905947);
      assertArrayEquals(new double[] {1.5, 1.5, 1770.0, 1.5, 1.5, (-990.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-4526.39F);
      floatArray0[1] = 1091.27F;
      floatArray0[2] = 2836.7F;
      floatArray0[3] = 0.0F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {(-4526.39F), 1091.27F, 2836.7F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-4526.39F), 1091.27F, 2836.7F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray0, (-4526.39F));
      assertArrayEquals(new float[] {(-4526.39F), 1091.27F, 2836.7F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1091.27F, 2836.7F, 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray2.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, (-1), 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)125;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)125);
      assertArrayEquals(new byte[] {(byte)103, (byte) (-18), (byte)113, (byte)96, (byte) (-110), (byte) (-65), (byte)125}, byteArray0);
      assertEquals(6, int0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Float float0 = new Float(2.133538948E9);
      assertEquals(2.13353894E9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-394);
      shortArray0[1] = (short)3648;
      shortArray0[2] = (short)3648;
      ArrayUtils.shift(shortArray0, (int) (short)3648);
      assertArrayEquals(new short[] {(short) (-394), (short)3648, (short)3648}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[2] = 'e';
      charArray0[3] = 'I';
      charArray0[4] = 'c';
      charArray0[5] = 'd';
      charArray0[6] = 'i';
      charArray0[7] = '7';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'e', 'I', 'c', 'd', 'i', '7'}, charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'e', 'I', 'c', 'd', 'i', '7'}, charArray1);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'i';
      doubleArray0[1] = (double) 'Q';
      doubleArray0[2] = (double) 'i';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 105.0);
      assertArrayEquals(new double[] {105.0, 81.0, 105.0}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'd';
      intArray0[1] = (int) 'i';
      intArray0[2] = (-133);
      intArray0[3] = (int) 'i';
      int int0 = ArrayUtils.indexOf(intArray0, 2141365111);
      assertArrayEquals(new int[] {100, 105, (-133), 105}, intArray0);
      assertEquals((-1), int0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-28.00506386210664);
      doubleArray0[1] = (-28.00506386210664);
      doubleArray0[2] = (-28.00506386210664);
      doubleArray0[3] = 1183.644;
      char[] charArray0 = new char[2];
      charArray0[1] = '&';
      int[] intArray0 = new int[1];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertArrayEquals(new char[] {'\u0000', '&'}, charArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, charArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)97;
      short short0 = (short)84;
      shortArray0[2] = (short) (-1421);
      shortArray0[3] = (short)1543;
      short short1 = (short) (-848);
      shortArray0[4] = (short) (-848);
      shortArray0[5] = (short)98;
      int int0 = (-2175);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-2175));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2175, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)10;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1826);
      assertArrayEquals(new short[] {(short)0, (short)10}, shortArray0);
      assertArrayEquals(new short[] {(short)1826, (short)0, (short)10}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 56;
      intArray0[1] = (int) (short)10;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)10;
      intArray0[4] = (int) (short)10;
      intArray0[5] = (int) (short)10;
      intArray0[6] = (int) (short)10;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) 10;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 10);
      assertArrayEquals(new int[] {56, 10, 0, 10, 10, 10, 10, 0, 0}, intArray0);
      assertArrayEquals(new int[] {56, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(4, intArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 10L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray1, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2887L;
      longArray0[1] = (-3854L);
      longArray0[2] = (-935L);
      ArrayUtils.reverse(longArray0, 16, (-2146798287));
      assertArrayEquals(new long[] {2887L, (-3854L), (-935L), 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-3081);
      shortArray0[1] = (short) (-722);
      shortArray0[2] = (short)32;
      shortArray0[3] = (short)7;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)88;
      shortArray0[6] = (short)1716;
      shortArray0[7] = (short) (-37);
      shortArray0[8] = (short) (-1045);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-168), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -168, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1235);
      shortArray0[1] = (short)78;
      shortArray0[2] = (short)19;
      shortArray0[3] = (short)1697;
      shortArray0[4] = (short)13;
      shortArray0[5] = (short)1988;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1796), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1796, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      ArrayUtils.hashCode((Object) ", Length: 0");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-233.0);
      doubleArray0[1] = (-1141.3676360183);
      doubleArray0[2] = 81.0;
      doubleArray0[3] = 81.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-133.706902779382);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, Double.NaN);
      assertArrayEquals(new double[] {(-233.0), (-1141.3676360183), 81.0, 81.0, Double.NaN, (-133.706902779382)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-233.0), (-1141.3676360183), 81.0, 81.0, (-133.706902779382)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1921L;
      longArray0[1] = (-2147483648L);
      longArray0[2] = (-274L);
      longArray0[3] = 299L;
      longArray0[4] = 323L;
      longArray0[5] = 0L;
      longArray0[6] = 3669L;
      longArray0[7] = (-1160L);
      longArray0[8] = (-1140L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {1921L, (-2147483648L), (-274L), 299L, 323L, 0L, 3669L, (-1160L), (-1140L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(9, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = '+';
      charArray0[2] = 'N';
      charArray0[3] = '8';
      charArray0[4] = 'W';
      charArray0[5] = 'i';
      charArray0[6] = 'R';
      charArray0[7] = 'O';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'+', 'N', '8', 'W', 'i', 'R', 'O', 'i'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), 7, 3872);
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-3729L);
      floatArray0[1] = (float) (-3729L);
      floatArray0[2] = (float) 3872;
      floatArray0[3] = (float) 3872;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 7, 3872);
      assertArrayEquals(new float[] {(-3729.0F), (-3729.0F), 3872.0F, 3872.0F}, floatArray0, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(4, floatArray0.length);
      
      ArrayUtils.shift((char[]) null, 3872, 1, 7);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1800L);
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      charArray0[5] = 'm';
      ArrayUtils.shift(charArray0, 97, 9, 9);
      assertArrayEquals(new char[] {'m', 'm', 'm', 'm', 'm', 'm'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '|';
      charArray0[0] = '|';
      int int0 = Integer.MAX_VALUE;
      int int1 = (-1);
      ArrayUtils.shift(charArray0, Integer.MAX_VALUE, (-1), (-1));
      assertArrayEquals(new char[] {'|'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      try { 
        Short.valueOf(";");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      int int0 = (-1013);
      Object[] objectArray0 = new Object[2];
      MutableInt mutableInt0 = new MutableInt(2);
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals("2", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.getValue();
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-1013), (Object) integer0);
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[0] = object0;
      int[] intArray0 = new int[5];
      intArray0[3] = (-1013);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)118;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte) (-85), (byte) (-1), (byte)109, (byte)118}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1927L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)109);
      assertArrayEquals(new long[] {1927L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2670;
      shortArray0[1] = (short) (-2308);
      shortArray0[2] = (short)76;
      shortArray0[3] = (short)2612;
      shortArray0[4] = (short)3085;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)2670, (short) (-2308), (short)76, (short)2612, (short)3085}, shortArray0);
      assertArrayEquals(new short[] {(short)2670, (short) (-2308), (short)76, (short)2612, (short)3085, (short)2670, (short) (-2308), (short)76, (short)2612, (short)3085}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 1066.445F);
      assertArrayEquals(new float[] {1066.445F}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-61));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(16, byteArray0.length);
      assertEquals(17, byteArray1.length);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ZgQ";
      stringArray0[1] = ", Length: ";
      stringArray0[2] = "V-+/3C;AlCt;$76";
      stringArray0[3] = "=v^";
      stringArray0[1] = "i+L3eix<i6u u4aVml";
      stringArray0[5] = "'=._gFp5_QB?I";
      stringArray0[6] = "";
      stringArray0[7] = "!,EVBK\u0002]qW";
      String[] stringArray1 = ArrayUtils.clone(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '>');
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte) (-1);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (byte) (-1));
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      String[] stringArray2 = ArrayUtils.nullToEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 635.937668;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1197.95868123;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {635.937668, 0.0, 1197.95868123, 0.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-6);
      shortArray0[1] = (short) (byte)65;
      shortArray0[5] = (short) (byte) (-47);
      shortArray0[6] = (short)54;
      shortArray0[7] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-6), (short)65, (short)0, (short)0, (short)0, (short) (-47), (short)54, (short) (-1)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(16, shortArray1.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short) (-1);
      objectArray0[1] = (Object) (short) (-6);
      objectArray0[3] = (Object) (short)65;
      objectArray0[4] = (Object) 0.0;
      Object object0 = ArrayUtils.get(objectArray0, 1423, (Object) "<");
      assertEquals("<", object0);
      assertNotNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[5] = (Object) "<";
      objectArray0[6] = (Object) 0.0;
      ArrayUtils.shift(objectArray0, (-1), (int) (short)0, (int) (byte)65);
      assertEquals(7, objectArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte)65;
      intArray0[2] = (int) (byte) (-6);
      intArray0[3] = (int) (byte)6;
      intArray0[4] = 1423;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte) (-47));
      assertArrayEquals(new int[] {(-1), 65, (-6), 6, 1423}, intArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 3440L;
      longArray0[3] = (-3536L);
      longArray0[4] = 770L;
      longArray0[5] = 1142L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 3781);
      assertArrayEquals(new long[] {0L, 0L, 3440L, (-3536L), 770L, 1142L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 3440L, (-3536L), 770L, 1142L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-3536L);
      floatArray0[1] = (float) 1142L;
      ArrayUtils.swap(floatArray0, 2394, 0, 1);
      assertArrayEquals(new float[] {(-3536.0F), 1142.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 1573, 1988);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-858), 11, 11);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[0];
      int[] intArray0 = new int[2];
      intArray0[0] = (-2145659106);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {(-2145659106), 0}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, (-2145659106), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      char[] charArray0 = new char[8];
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 1344);
      assertArrayEquals(new int[] {1344}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'e');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      
      Object[] objectArray0 = new Object[3];
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '&';
      longArray0[1] = (long) 1344;
      longArray0[2] = 40L;
      longArray0[3] = (long) '5';
      longArray0[4] = (long) 'e';
      longArray0[5] = (long) 1344;
      int int0 = ArrayUtils.indexOf(longArray0, 40L, 747);
      assertArrayEquals(new long[] {38L, 1344L, 40L, 53L, 101L, 1344L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), object0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(object0.equals((Object)int0));
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      assertArrayEquals(new long[] {38L, 1344L, 40L, 53L, 101L, 1344L}, longArray0);
      assertEquals(331, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(19, bitSet0.cardinality());
      assertEquals("{1, 2, 5, 70, 72, 74, 131, 133, 192, 194, 196, 197, 256, 258, 261, 262, 326, 328, 330}", bitSet0.toString());
      assertEquals(384, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(6, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-335.0F);
      floatArray0[1] = (-2745.826F);
      floatArray0[2] = 151.527F;
      floatArray0[3] = (-3.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 886.68F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      ArrayUtils.swap(floatArray0, (-622), (-622), 2);
      assertArrayEquals(new float[] {(-335.0F), (-2745.826F), 151.527F, (-3.0F), (-1.0F), 886.68F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, true, true, true}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(8, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = (-622);
      intArray0[2] = (-622);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-622));
      assertArrayEquals(new int[] {2, (-622), (-622)}, intArray0);
      assertArrayEquals(new int[] {(-622), 2, (-622), (-622)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-28.00506386210664);
      doubleArray0[1] = (-28.00506386210664);
      doubleArray0[2] = (-28.00506386210664);
      doubleArray0[3] = 1183.644;
      char[] charArray0 = new char[2];
      charArray0[1] = '&';
      int[] intArray0 = new int[1];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertArrayEquals(new char[] {'\u0000', '&'}, charArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, charArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)97;
      short short0 = (short)84;
      shortArray0[1] = (short)84;
      shortArray0[2] = (short) (-1421);
      shortArray0[3] = (short)1543;
      short short1 = (short) (-848);
      shortArray0[4] = (short) (-848);
      shortArray0[5] = (short)98;
      int int0 = (-2175);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-2175));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2175, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      int int0 = (-615);
      Object object0 = ArrayUtils.get(objectArray0, (-615), (Object) "array");
      assertEquals("array", object0);
      assertNotNull(object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[0] = (Object) "array";
      Object object1 = ArrayUtils.toPrimitive((Object) "array");
      assertEquals("array", object1);
      assertTrue(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = (Object) "array";
      Object object2 = new Object();
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = ArrayUtils.get(objectArray0, (-615));
      assertNull(object3);
      assertEquals(5, objectArray0.length);
      
      objectArray0[3] = null;
      Long long0 = new Long((-615));
      assertEquals((-615L), (long)long0);
      assertNotNull(long0);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2887L;
      longArray0[1] = (-3854L);
      longArray0[2] = (-935L);
      longArray0[3] = 0L;
      longArray0[4] = (-3854L);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte) (-107);
      Byte byte1 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-37));
      assertEquals((byte) (-37), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      byte byte4 = (byte)0;
      Byte byte5 = Byte.valueOf((byte)0);
      assertEquals((byte)0, (byte)byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = ArrayUtils.get(byteArray0, (int) byte0);
      assertFalse(byte0 == byte4);
      assertNull(byte6);
      assertEquals(4, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)0;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-85);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2502);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {(short)0, (short) (-85), (short)0, (short) (-2502)}, shortArray0);
      assertEquals(0, int0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1043;
      shortArray0[1] = (short) (-3085);
      shortArray0[2] = (short) (-3085);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1043);
      assertArrayEquals(new short[] {(short)1043, (short) (-3085), (short) (-3085)}, shortArray0);
      assertEquals(0, int0);
      assertEquals(3, shortArray0.length);
      
      ArrayUtils.shift((long[]) null, 0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle";
      stringArray0[1] = "org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle";
      stringArray0[2] = "org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(3, stringArray1.length);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2811);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2100;
      shortArray0[3] = (short) (-2537);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-948);
      shortArray0[6] = (short)1043;
      shortArray0[7] = (short) (-3085);
      shortArray0[8] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2);
      assertArrayEquals(new short[] {(short) (-2811), (short)0, (short)2100, (short) (-2537), (short)0, (short) (-948), (short)1043, (short) (-3085), (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-3085);
      longArray0[1] = (long) (short)0;
      ArrayUtils.shift(longArray0, 1012);
      assertArrayEquals(new long[] {(-3085L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[2] = (short)2100;
      shortArray0[3] = (short) (-2537);
      shortArray0[5] = (short) (-948);
      shortArray0[6] = (short)1043;
      shortArray0[7] = (short)1043;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-3085));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2100, (short) (-2537), (short)0, (short) (-948), (short)1043, (short)1043, (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)1043;
      longArray0[1] = (long) (short)0;
      ArrayUtils.shift(longArray0, 1012);
      assertArrayEquals(new long[] {1043L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "v";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2811);
      shortArray0[1] = (short)278;
      shortArray0[2] = (short) (-2811);
      shortArray0[3] = (short) (-2537);
      shortArray0[5] = (short) (-984);
      shortArray0[6] = (short)1043;
      shortArray0[7] = (short)278;
      shortArray0[8] = (short)3;
      Short short0 = new Short((short)3);
      assertEquals((short)3, (short)short0);
      assertNotNull(short0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short) (-2811), (-981));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-2638));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2638, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)55;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)52, (byte)48, (byte)4, (byte)2, (byte)55}, byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)52, (byte)48, (byte)4, (byte)2, (byte)55}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-497L);
      longArray0[1] = 0L;
      ArrayUtils.swap(longArray0, (-1), 1492);
      assertArrayEquals(new long[] {(-497L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[1] = 'l';
      charArray0[2] = 'b';
      charArray0[3] = 'x';
      charArray0[4] = 'J';
      charArray0[5] = 't';
      charArray0[6] = 'l';
      charArray0[7] = 'O';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'l', 'b', 'x', 'J', 't', 'l', 'O'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-265L), 1492);
      assertArrayEquals(new long[] {(-497L), 0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(2, longArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 'l';
      objectArray0[1] = (Object) 'l';
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 'x';
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) 'l';
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) boolean1, (-1));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(bitSet0);
      assertEquals(6, objectArray0.length);
      
      Object[] objectArray1 = new Object[1];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[4]);
      assertEquals(0L, object0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotNull(object0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(6, objectArray0.length);
      
      objectArray1[0] = object0;
      boolean boolean2 = ArrayUtils.isEmpty(objectArray1);
      assertFalse(boolean2);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(boolean2 == boolean0);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(1, objectArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'O';
      intArray0[1] = (int) 'b';
      ArrayUtils.swap(intArray0, 88, (-1511));
      assertArrayEquals(new int[] {79, 98}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)8, (int) (byte)8);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(2147483647L);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)72;
      floatArray0[1] = (float) (byte)40;
      floatArray0[3] = (float) (short)0;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)72;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (byte)40;
      intArray0[3] = (-2144739193);
      intArray0[4] = (-2146171391);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      ArrayUtils.swap(intArray0, 49, (-1), (-1));
      assertArrayEquals(new int[] {72, 0, 40, (-2144739193), (-2146171391), (-1), (-1)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L}, longArray0);
      assertTrue(boolean0);
      assertEquals(8, longArray0.length);
      
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 704L;
      longArray1[1] = (long) 1;
      longArray1[2] = (long) 1;
      longArray1[3] = (long) 1;
      longArray1[4] = (long) 1;
      longArray1[5] = (long) 1;
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L, 704L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      short[] shortArray0 = new short[27];
      shortArray0[0] = (short) (-2811);
      shortArray0[12] = (short) (-1655);
      shortArray0[3] = (short) (-2537);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)127;
      shortArray0[6] = (short)1043;
      shortArray0[7] = (short) (-1655);
      shortArray0[6] = (short)0;
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)0, (-981));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Byte byte0 = new Byte((byte) (-24));
      assertEquals((byte) (-24), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-24));
      assertEquals((byte) (-24), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      float[] floatArray0 = new float[21];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (-1235.9F);
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1807), 2923);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(21, floatArray0.length);
      assertEquals(21, floatArray1.length);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 2923, 2);
      assertEquals((-1), int0);
      
      Byte[] byteArray2 = new Byte[7];
      byteArray2[0] = (Byte) (byte)0;
      byteArray2[1] = (Byte) (byte)0;
      byteArray2[2] = (Byte) (byte)0;
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray2[3] = byte0;
      byteArray2[4] = (Byte) (byte)0;
      byteArray2[5] = (Byte) (byte)0;
      byteArray2[6] = (Byte) (byte)0;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertNotNull(byteArray3);
      assertSame(byteArray3, byteArray2);
      assertSame(byteArray2, byteArray3);
      assertEquals(7, byteArray3.length);
      assertEquals(7, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 818.0;
      doubleArray0[2] = 365.3596;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {818.0, 818.0, 365.3596}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2070;
      shortArray0[1] = (short)0;
      char[] charArray0 = new char[4];
      charArray0[1] = 'J';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '\u0000', Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'\u0000', 'J', '\u0000', '\u0000'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, charArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) '\u0000';
      Object object0 = ArrayUtils.get(objectArray0, (int) 2070, (Object) null);
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[2] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) 818.0;
      objectArray0[5] = (Object) 'J';
      objectArray0[6] = (Object) '\u0000';
      ArrayUtils.shift(objectArray0, (-1993), (int) (short)2070, (int) (short)2070);
      assertEquals(7, objectArray0.length);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte) (-128));
      assertEquals((byte) (-128), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)123);
      assertEquals((byte)123, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)123);
      assertEquals((byte)123, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)99);
      assertEquals((byte)99, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte) (-21));
      assertEquals((byte) (-21), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[4] = byte4;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 639.0469F;
      floatArray0[1] = (-598.8285F);
      floatArray0[2] = 2836.7F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 2836.7F);
      assertArrayEquals(new float[] {639.0469F, (-598.8285F), 2836.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {639.0469F, (-598.8285F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 2121L;
      longArray0[1] = 914L;
      longArray0[2] = (-2147483648L);
      longArray0[3] = (-1L);
      longArray0[4] = 971L;
      longArray0[5] = (-2147483648L);
      longArray0[6] = 97L;
      longArray0[7] = (-1L);
      ArrayUtils.swap(longArray0, 2113, 2, 2);
      assertArrayEquals(new long[] {2121L, 914L, (-2147483648L), (-1L), 971L, (-2147483648L), 97L, (-1L)}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 818.0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1492;
      longArray0[2] = (long) 1492;
      longArray0[3] = (long) 1492;
      longArray0[4] = (long) 1492;
      ArrayUtils.swap(longArray0, 216, 1492);
      assertArrayEquals(new long[] {1492L, 0L, 1492L, 1492L, 1492L}, longArray0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'l';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'t', 'l'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[0];
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 818.0;
      Class<Double[]> class0 = Double[].class;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1, class0);
      assertNotNull(doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-88));
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-107), (byte)119, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-85), (byte) (-107), (byte)119, (byte)0, (byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ZgQ";
      stringArray0[1] = ", Length: ";
      stringArray0[2] = "V-+/3C;AlCt;$76";
      stringArray0[3] = "=v^";
      stringArray0[4] = "i+L3eix<i6u u4aVml";
      stringArray0[5] = "'=._gFp5_QB?I";
      stringArray0[6] = "";
      stringArray0[7] = "!,EVBK\u0002]qW";
      String[] stringArray1 = ArrayUtils.clone(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-88);
      shortArray0[1] = (short) (byte)119;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-85);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-88), (short)119, (short) (-1), (short) (-85)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Long long0 = new Long((-627L));
      assertEquals((-627L), (long)long0);
      assertNotNull(long0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)119;
      longArray0[1] = (long) (byte) (-85);
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)119;
      longArray0[4] = (long) (short)119;
      longArray0[5] = (long) (byte) (-1);
      longArray0[6] = (long) (byte)119;
      longArray0[7] = (-371L);
      longArray0[8] = (long) (byte) (-107);
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      assertArrayEquals(new long[] {119L, (-85L), 0L, 119L, 119L, (-1L), 119L, (-371L), (-107L)}, longArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(576, bitSet0.size());
      assertEquals(268, bitSet0.cardinality());
      assertEquals(576, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(9, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2887L;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, 623, 0, 7);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-1), (byte)62, (byte)18, (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte) (-1);
      shortArray0[7] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      ArrayUtils.reverse(byteArray0, 2, (-1));
      assertArrayEquals(new byte[] {(byte)124, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)0;
      Short short0 = new Short((short)1053);
      assertEquals((short)1053, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte)124);
      assertEquals((short)124, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      Short short2 = new Short((short)1047);
      assertEquals((short)1047, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) integerArray0, (Object) short2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean1);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-3729);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1614);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      ArrayUtils.reverse(byteArray0, 2, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)124}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4596.0;
      doubleArray0[3] = 404.86;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, 4596.0, 404.86, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)43;
      ArrayUtils.swap(byteArray0, (-1413), (int) (byte)88);
      assertArrayEquals(new byte[] {(byte) (-77), (byte)0, (byte)82, (byte)110, (byte)88, (byte)24, (byte)43}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-963.73694F), 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = '#';
      charArray0[2] = ')';
      ArrayUtils.shift(floatArray0, (-1251), (int) (short)98, (-2175));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-1);
      ArrayUtils.swap((boolean[]) null, (-3013), 13, 562);
      float[] floatArray0 = new float[15];
      floatArray0[2] = (float) 13;
      floatArray0[3] = (float) (byte) (-85);
      ArrayUtils.shift(floatArray0, 562);
      assertEquals(15, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 1259);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1259, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-1);
      ArrayUtils.swap((boolean[]) null, (-3013), 13, 562);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2122.0F);
      floatArray0[1] = (float) 13;
      floatArray0[2] = (float) 13;
      floatArray0[3] = (float) (byte) (-85);
      ArrayUtils.shift(floatArray0, 562);
      assertArrayEquals(new float[] {13.0F, (-85.0F), (-2122.0F), 13.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 1259);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1259, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 5375.4047181427;
      doubleArray0[3] = 1183.644;
      doubleArray0[4] = (-659.6599684696);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3550.3);
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1, (-2750.4));
      assertArrayEquals(new double[] {0.0, 0.0, 5375.4047181427, 1183.644, (-659.6599684696), 0.0, (-3550.3), (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2750.4), 0.0, 5375.4047181427, 1183.644, (-659.6599684696), 0.0, (-3550.3), (-1.0), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(1);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      longArray0[1] = long0;
      Long long1 = new Long(1);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[2] = long1;
      longArray0[3] = longArray0[1];
      Long long2 = new Long((-1L));
      assertEquals((-1L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[4] = long2;
      Long long3 = new Long((-1L));
      assertEquals((-1L), (long)long3);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      
      longArray0[5] = long3;
      Long long4 = new Long(0L);
      assertEquals(0L, (long)long4);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertNotNull(long4);
      
      longArray0[6] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[3]);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, (-1L), (-1L), 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 5375.4047181427, 1183.644, (-659.6599684696), 0.0, (-3550.3), (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2750.4), 0.0, 5375.4047181427, 1183.644, (-659.6599684696), 0.0, (-3550.3), (-1.0), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(19, doubleArray2.length);
      assertEquals(10, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2449.656;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 39.4;
      doubleArray0[3] = 1429.8;
      doubleArray0[4] = 818.0;
      doubleArray0[5] = 982.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2449.656, 1.5, 39.4, 1429.8, 818.0, 982.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Double double0 = new Double(1953.1486551);
      assertEquals(1953.1486551, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertEquals(1953.1486551, object0);
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, 128, object0);
      assertEquals(1953.1486551, object1);
      assertNotNull(object1);
      assertEquals(7, objectArray0.length);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertEquals(1953.1486551, object2);
      assertNotNull(object2);
      assertEquals(7, objectArray0.length);
      
      objectArray0[0] = object2;
      Long long0 = new Long(88);
      assertEquals(88L, (long)long0);
      assertNotNull(long0);
      
      Object object3 = ArrayUtils.get(objectArray0, 88, (Object) long0);
      assertEquals(88L, object3);
      assertNotNull(object3);
      assertEquals(7, objectArray0.length);
      
      objectArray0[1] = object3;
      int int0 = 98;
      Object object4 = ArrayUtils.get(objectArray0, 98, (Object) double0);
      assertEquals(1953.1486551, object4);
      assertNotNull(object4);
      assertEquals(7, objectArray0.length);
      
      objectArray0[2] = object4;
      Byte byte0 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[6];
      char char0 = 'R';
      charArray0[0] = 'R';
      charArray0[1] = '5';
      char char1 = 'R';
      charArray0[2] = 'R';
      charArray0[3] = '9';
      charArray0[4] = 'O';
      charArray0[5] = 'n';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'O', (-635));
      assertArrayEquals(new char[] {'R', '5', 'R', '9', 'O', 'n'}, charArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(6, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      short short0 = (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, 2146720233, (short)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146720233, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)10;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1826);
      assertArrayEquals(new short[] {(short)0, (short)10}, shortArray0);
      assertArrayEquals(new short[] {(short)1826, (short)0, (short)10}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 56;
      intArray0[1] = (int) (short)10;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)10;
      intArray0[4] = (int) (short)10;
      intArray0[5] = (int) (short)10;
      intArray0[6] = (int) (short)10;
      intArray0[7] = 654;
      intArray0[8] = (int) (short)10;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)1826;
      objectArray0[1] = (Object) 10;
      objectArray0[2] = (Object) 10;
      objectArray0[3] = (Object) (short)0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '_');
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      Float float0 = new Float(2.133538948E9);
      assertEquals(2.13353894E9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-394);
      shortArray0[1] = (short)3648;
      shortArray0[2] = (short)3648;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-394);
      doubleArray0[1] = (double) (short)3648;
      doubleArray0[2] = (double) (short) (-394);
      doubleArray0[3] = (-616.96340119954);
      ArrayUtils.shift(doubleArray0, (int) (short)3648, (int) (short)3648, (-2123));
      assertArrayEquals(new double[] {(-394.0), 3648.0, (-394.0), (-616.96340119954)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2404.3931;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 977.7996930905947;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 165.79694785933;
      doubleArray0[7] = 361.209704095;
      doubleArray0[8] = (-990.0);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = '~';
      charArray0[2] = 'C';
      charArray0[3] = 'A';
      charArray0[4] = 'q';
      charArray0[5] = '8';
      charArray0[6] = 'Y';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)19;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'\"', 'C', 'A', 'q', '8', 'Y', '~'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = 'J';
      charArray0[4] = 'E';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'J', 'O', 'O', 'J', 'E'}, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'J';
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'E';
      doubleArray0[1] = (double) 'O';
      doubleArray0[3] = (double) 'O';
      ArrayUtils.shift(doubleArray0, 0, (-6), 0);
      assertArrayEquals(new double[] {69.0, 79.0, 0.0, 79.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.reverse(doubleArray0, (-6), 2);
      assertArrayEquals(new double[] {79.0, 69.0, 0.0, 79.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-11.193588670977903);
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-11.193588670977903), 69, (double) (byte)72);
      assertArrayEquals(new double[] {(-11.193588670977903), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (int) (byte)72, 69);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2811);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2100;
      shortArray0[3] = (short) (-2552);
      shortArray0[4] = (short)0;
      shortArray0[4] = (short) (-948);
      shortArray0[6] = (short)1043;
      shortArray0[7] = (short) (-3085);
      shortArray0[8] = (short)0;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-37));
      assertArrayEquals(new byte[] {(byte)8, (byte) (-1), (byte)78, (byte)1, (byte)11, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-1), (byte)78, (byte)1, (byte)11, (byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)1;
      objectArray0[1] = (Object) (byte)11;
      objectArray0[2] = (Object) (byte)1;
      objectArray0[3] = (Object) (byte) (-1);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(4, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-2180), (int) (byte) (-37));
      assertEquals((-1), int0);
      
      byte[] byteArray2 = ArrayUtils.removeElements((byte[]) null, byteArray0);
      assertNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-1), (byte)78, (byte)1, (byte)11, (byte)1}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray3 = ArrayUtils.subarray(byteArray1, 429, 2196);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-1), (byte)78, (byte)1, (byte)11, (byte)1}, byteArray1);
      assertNotNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2811);
      shortArray0[1] = (short)0;
      short short0 = (short)2100;
      shortArray0[2] = (short)2100;
      shortArray0[3] = (short) (-2537);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short) (-2811);
      Byte byte0 = new Byte((byte)34);
      assertEquals((byte)34, (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short) (-2537);
      floatArray0[1] = (float) (short) (-2811);
      floatArray0[2] = 1066.445F;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short) (-2537);
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short) (-2537);
      floatArray0[7] = (float) (-285);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {(-2537.0F), (-2811.0F), 1066.445F, 0.0F, (-2537.0F), 0.0F, (-2537.0F), (-285.0F)}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(8, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-85);
      ArrayUtils.swap((boolean[]) null, (int) (byte)102, 13, 562);
      Double double0 = new Double((byte) (-85));
      assertEquals((-85.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      MutableInt mutableInt0 = new MutableInt((int) (byte) (-85));
      assertEquals("-85", mutableInt0.toString());
      assertEquals((-85), mutableInt0.intValue());
      assertEquals((-85.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-85), mutableInt0.shortValue());
      assertEquals((-85L), mutableInt0.longValue());
      assertEquals((-85), (int)mutableInt0.toInteger());
      assertEquals((-85.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-85), (int)mutableInt0.getValue());
      assertEquals((byte) (-85), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals("-85", mutableInt0.toString());
      assertEquals((-85), mutableInt0.intValue());
      assertEquals((-85.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-85), mutableInt0.shortValue());
      assertEquals((-85L), mutableInt0.longValue());
      assertEquals((-85), (int)mutableInt0.toInteger());
      assertEquals((-85.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-85), (int)mutableInt0.getValue());
      assertEquals((byte) (-85), mutableInt0.byteValue());
      assertEquals((-85.0), mutableInt1.doubleValue(), 0.01);
      assertEquals("-85", mutableInt1.toString());
      assertEquals((-85), (int)mutableInt1.toInteger());
      assertEquals((-85.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-85), (int)mutableInt1.getValue());
      assertEquals((-85), mutableInt1.intValue());
      assertEquals((-85L), mutableInt1.longValue());
      assertEquals((byte) (-85), mutableInt1.byteValue());
      assertEquals((short) (-85), mutableInt1.shortValue());
      assertNotNull(mutableInt1);
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mutableInt1;
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) double0;
      objectArray0[4] = (Object) mutableInt1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[3]);
      assertEquals(3, int0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-3729);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-3729);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1614);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      ArrayUtils.reverse(byteArray0, 2, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)124}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-3729L), (-1L), (-3729L), (-1L), (-3729L), (-3729L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = '^';
      charArray0[2] = '@';
      charArray0[3] = '~';
      boolean boolean0 = ArrayUtils.contains(charArray0, '!');
      assertArrayEquals(new char[] {'[', '^', '@', '~'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1L);
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (-1L);
      objectArray0[3] = (Object) '@';
      int int1 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], (int) (byte)124);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertEquals(4, objectArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(longArray0, 487L, (-1575));
      assertArrayEquals(new long[] {(-3729L), (-1L), (-3729L), (-1L), (-3729L), (-3729L)}, longArray0);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, ", Length: 0");
      assertNull(stringArray0);
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, (-1581), 60, 493);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (-1581);
      floatArray0[2] = (float) (-1581);
      floatArray0[4] = (float) 60;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-1581));
      assertArrayEquals(new float[] {1.0F, (-1581.0F), (-1581.0F), 0.0F, 60.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(5, floatArray0.length);
      
      ArrayUtils.shift(floatArray0, 493, 493, 1348);
      assertArrayEquals(new float[] {1.0F, (-1581.0F), (-1581.0F), 0.0F, 60.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1348;
      longArray0[1] = 2121L;
      longArray0[2] = (long) 1348;
      longArray0[3] = (long) 1348;
      longArray0[4] = (long) 60;
      longArray0[5] = (long) 493;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-1581), 493);
      assertArrayEquals(new long[] {1348L, 2121L, 1348L, 1348L, 60L, 493L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (-3634));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3634);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0.0F, (-3634));
      assertArrayEquals(new double[] {(-3634.0)}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)902;
      shortArray0[1] = (short)18688;
      shortArray0[2] = (short) (-816);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)902, (short)18688, (short) (-816), (short)2, (short) (-1)}, shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (short)902;
      intArray0[2] = (-1);
      intArray0[3] = (-37);
      intArray0[4] = (int) (short)2;
      intArray0[5] = (int) (short)902;
      intArray0[6] = 2;
      intArray0[7] = (-3634);
      intArray0[8] = (-1);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {902, (-1), (-37), 2, 902, 2, (-3634), (-1), 2}, intArray0);
      assertEquals(9, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {902, (-1), (-37), 2, 902, 2, (-3634), (-1), 2}, intArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2811);
      shortArray0[1] = (short) (-1655);
      shortArray0[2] = (short)2100;
      shortArray0[3] = (short) (-2537);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-948);
      shortArray0[6] = (short)1043;
      shortArray0[7] = (short) (-1655);
      shortArray0[8] = (short)0;
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)2100, (-981));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '|');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      charArray0[4] = '#';
      charArray0[2] = '5';
      charArray0[6] = 'e';
      charArray0[7] = '@';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'e');
      assertArrayEquals(new char[] {'#', '#', '5', 'e', '#', '\u0000', 'e', '@'}, charArray0);
      assertArrayEquals(new char[] {'e', '#', '#', '5', 'e', '#', '\u0000', 'e', '@'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'e';
      doubleArray0[1] = (double) '5';
      doubleArray0[2] = (double) 'e';
      doubleArray0[3] = 1.5;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {101.0, 53.0, 101.0, 1.5}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '#';
      longArray0[1] = (long) '#';
      longArray0[2] = (long) '5';
      longArray0[3] = (long) '@';
      longArray0[4] = (long) '#';
      longArray0[5] = (long) '@';
      longArray0[6] = (long) '5';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 35L, (-277));
      assertArrayEquals(new long[] {35L, 35L, 53L, 64L, 35L, 64L, 53L}, longArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(7, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '#';
      intArray0[1] = (-2463);
      intArray0[2] = (int) 'e';
      ArrayUtils.swap(intArray0, 719, 2103, 2103);
      assertArrayEquals(new int[] {35, (-2463), 101}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2463));
      assertArrayEquals(new int[] {35, (-2463), 101}, intArray0);
      assertTrue(boolean0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 2042.800134712;
      doubleArray0[0] = (-350.7645);
      doubleArray0[3] = 924.7283338535548;
      doubleArray0[4] = 2042.800134712;
      doubleArray0[5] = (-1.0);
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2146474491));
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)29;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.0), 2042.800134712, 924.7283338535548, 0.0, 2042.800134712, (-350.7645)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 5375.4047181427;
      doubleArray0[3] = 1183.644;
      doubleArray0[4] = (-659.6599684696);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3550.3);
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1, (-2750.4));
      assertArrayEquals(new double[] {0.0, 1.0, 5375.4047181427, 1183.644, (-659.6599684696), 0.0, (-3550.3), (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2750.4), 1.0, 5375.4047181427, 1183.644, (-659.6599684696), 0.0, (-3550.3), (-1.0), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(1);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      longArray0[1] = long0;
      Long long1 = new Long(1);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[2] = long1;
      longArray0[3] = longArray0[1];
      Long long2 = new Long((-1L));
      assertEquals((-1L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[4] = long2;
      Long long3 = new Long((-1L));
      assertEquals((-1L), (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[5] = long3;
      Long long4 = new Long(0L);
      assertEquals(0L, (long)long4);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      
      longArray0[6] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[3]);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, (-1L), (-1L), 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) longArray0);
      assertNotNull(objectArray0);
      assertSame(longArray0, objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(7, longArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
      assertFalse(boolean0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)10;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1826);
      assertArrayEquals(new short[] {(short)0, (short)10}, shortArray0);
      assertArrayEquals(new short[] {(short)1826, (short)0, (short)10}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 56;
      intArray0[1] = (int) (short)10;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)10;
      intArray0[4] = (int) (short)10;
      intArray0[5] = (int) (short)10;
      intArray0[6] = (int) (short)10;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) 10;
      longArray0[2] = (long) 10;
      longArray0[3] = (long) 0;
      ArrayUtils.reverse(longArray0, 4, (int) (short)1826);
      assertArrayEquals(new long[] {0L, 10L, 10L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      short[] shortArray2 = new short[0];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      short[] shortArray3 = ArrayUtils.insert((int) (short)10, shortArray2, shortArray2);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray3);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2607);
      intArray0[1] = (-1727);
      intArray0[2] = (-4971);
      MockRandom mockRandom0 = new MockRandom(677L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = '~';
      charArray0[3] = '4';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'D');
      assertArrayEquals(new char[] {'M', 'M', '~', '4'}, charArray0);
      assertArrayEquals(new char[] {'M', 'M', '~', '4'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-81);
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-38);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)72, (int) (byte) (-38));
      assertArrayEquals(new byte[] {(byte)0, (byte)76, (byte) (-42), (byte) (-81), (byte)0, (byte)72, (byte) (-38)}, byteArray0);
      assertEquals(5, int0);
      assertEquals(7, byteArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-38);
      floatArray0[1] = (float) 'D';
      MockRandom mockRandom0 = new MockRandom((byte)76);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {68.0F, (-38.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 3598L;
      longArray0[2] = 3440L;
      longArray0[3] = (-3536L);
      longArray0[4] = 770L;
      longArray0[5] = 1142L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 14, 3781);
      assertArrayEquals(new long[] {0L, 3598L, 3440L, (-3536L), 770L, 1142L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)24;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)93;
      longArray0[1] = (long) (byte)93;
      longArray0[2] = (long) (-81);
      longArray0[3] = (long) (byte)93;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)24, (-81));
      assertArrayEquals(new long[] {93L, 93L, (-81L), 93L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-185.78784F);
      floatArray0[1] = (-2460.13F);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (-2370L));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(4, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = '$';
      charArray0[2] = 'j';
      ArrayUtils.swap((boolean[]) null, (-6), 103, (-1));
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte) (-6);
      Byte byte1 = new Byte((byte) (-6));
      assertEquals((byte) (-6), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-6), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = Byte.valueOf((byte) (-85));
      assertEquals((byte) (-85), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte) (-6), (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      try { 
        Byte.valueOf("", (int) (byte) (-6));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -6 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-350.7645), 1073741824);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 1073741824;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1073741824, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", Length: ";
      stringArray0[1] = "p";
      stringArray0[2] = "{";
      stringArray0[3] = "";
      stringArray0[4] = "~[~9y_$+XU|,)e#";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-37));
      assertArrayEquals(new byte[] {(byte)8, (byte)0, (byte)78, (byte)1, (byte)11, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte)0, (byte)78, (byte)1, (byte)11, (byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)1;
      objectArray0[1] = (Object) (byte)11;
      objectArray0[2] = (Object) (byte)1;
      objectArray0[3] = (Object) (byte)0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-2180), (int) (byte) (-37));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.swap(booleanArray0, (int) (byte) (-1), (-2180), 0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "{^HcddY}Sba@]EZB2";
      stringArray1[1] = "'eC5~>E]O%1";
      stringArray1[2] = "";
      stringArray1[3] = "org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeImpl";
      stringArray1[4] = "|[{|&rO\" Tr*c{v5";
      stringArray1[5] = "(j>hN9.o`!`p-M";
      stringArray1[6] = "p^_nx8M";
      stringArray1[7] = "";
      stringArray1[8] = "%IVlr,/wO*q#T";
      String[] stringArray2 = ArrayUtils.nullToEmpty(stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertSame(stringArray1, stringArray2);
      assertEquals(9, stringArray2.length);
      assertEquals(9, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 103.5;
      doubleArray0[2] = (double) (-1135);
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(5, booleanArray0.length);
      
      MutableInt mutableInt0 = new MutableInt((-1241));
      assertEquals((-1241L), mutableInt0.longValue());
      assertEquals((-1241), mutableInt0.intValue());
      assertEquals((-1241.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)39, mutableInt0.byteValue());
      assertEquals((-1241), (int)mutableInt0.getValue());
      assertEquals("-1241", mutableInt0.toString());
      assertEquals((short) (-1241), mutableInt0.shortValue());
      assertEquals((-1241.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1241), (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(0.0);
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("0", mutableInt1.toString());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0L, mutableInt1.longValue());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      MutableInt mutableInt2 = new MutableInt(7);
      assertEquals(7, (int)mutableInt2.getValue());
      assertEquals((byte)7, mutableInt2.byteValue());
      assertEquals(7, (int)mutableInt2.toInteger());
      assertEquals(7.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)7, mutableInt2.shortValue());
      assertEquals(7.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(7L, mutableInt2.longValue());
      assertEquals("7", mutableInt2.toString());
      assertEquals(7, mutableInt2.intValue());
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertNotNull(mutableInt2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(mutableIntArray0, 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = 'D';
      charArray0[2] = '~';
      charArray0[3] = '4';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'D');
      assertArrayEquals(new char[] {'\"', 'D', '~', '4'}, charArray0);
      assertArrayEquals(new char[] {'\"', '~', '4'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-81);
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-38);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)72, (int) (byte) (-38));
      assertArrayEquals(new byte[] {(byte)0, (byte)76, (byte) (-42), (byte) (-81), (byte)0, (byte)72, (byte) (-38)}, byteArray0);
      assertEquals(5, int0);
      assertEquals(7, byteArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-38);
      floatArray0[1] = (float) 'D';
      MockRandom mockRandom0 = new MockRandom((byte)76);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) (byte)0);
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {68.0F, (-38.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Float[] floatArray1 = new Float[1];
      floatArray1[0] = (Float) (-38.0F);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '\"';
      objectArray0[1] = (Object) '\"';
      objectArray0[2] = (Object) '\"';
      objectArray0[3] = (Object) '\"';
      objectArray0[4] = (Object) '\"';
      objectArray0[5] = (Object) '\"';
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, stringArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[2] = (long) (-3729);
      longArray0[3] = (long) '\"';
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) '\"';
      longArray1[1] = (long) '\"';
      longArray1[4] = (long) '\"';
      longArray1[6] = (long) '\"';
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-3729L), 34L}, longArray0);
      assertArrayEquals(new long[] {34L, 34L, 0L, 0L, 34L, 0L, 34L}, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertEquals(11, longArray2.length);
      assertEquals(4, longArray0.length);
      assertEquals(7, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, '\"');
      assertArrayEquals(new char[] {'\"', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Integer[] integerArray0 = new Integer[2];
      int int0 = 84;
      Integer integer0 = new Integer(84);
      assertEquals(84, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)122);
      assertEquals((short)122, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[4];
      shortArray0[0] = short0;
      shortArray0[1] = short2;
      shortArray0[2] = short2;
      shortArray0[3] = short0;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(4, shortArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-685);
      longArray0[1] = (long) 84;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (short)122;
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {(-685L), 84L, 84L, 0L, 122L}, longArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'H');
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2416);
      shortArray0[1] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) (short)0);
      assertNotNull(longStream0);
      
      mockRandom0.setSeed((-430));
      Object[] objectArray0 = new Object[26];
      objectArray0[0] = (Object) (short) (-2416);
      objectArray0[1] = (Object) (short)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      int int0 = ArrayUtils.indexOf((char[]) null, '.', 1800);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-438.0);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      ArrayUtils.reverse(doubleArray0, 0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, 0.0, (-438.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'I', 0);
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      ArrayUtils.reverse(doubleArray0, (-229), (-229));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, 0.0, (-438.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf((int[]) null, 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      
      boolean boolean3 = ArrayUtils.contains((char[]) null, 'I');
      assertFalse(boolean3);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'I';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-229);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 0;
      boolean boolean4 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {73L, (-1L), 0L, (-229L), 0L, (-1L), 0L}, longArray0);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean3);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)76;
      shortArray0[0] = (short)2612;
      shortArray0[4] = (short)3085;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)2612, (short)0, (short)76, (short)0, (short)3085}, shortArray0);
      assertArrayEquals(new short[] {(short)2612, (short)0, (short)76, (short)0, (short)3085, (short)2612, (short)0, (short)76, (short)0, (short)3085}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)2612;
      doubleArray0[1] = (double) (short)2612;
      doubleArray0[2] = (double) (short)76;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short)3085, (double) (short)3085);
      assertArrayEquals(new double[] {2612.0, 2612.0, 76.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-5505), floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = null;
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 0.0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-5505), intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5505, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, booleanArray0.length);
      
      Integer integer0 = new Integer(111);
      assertEquals(111, (int)integer0);
      assertNotNull(integer0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 111;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-870.53F), 111);
      assertArrayEquals(new float[] {111.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(1, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 216, 216);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 216;
      floatArray0[1] = (float) 216;
      floatArray0[2] = (float) 216;
      floatArray0[3] = (float) 216;
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(bitSet0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 3914);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      
      Short short0 = new Short((short)101);
      assertEquals((short)101, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = ArrayUtils.isEquals("T/h'EFg~F7]vSK", short0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-277));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true, true}, booleanArray0));
      assertEquals("{0, 1, 2, 5, 6, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(8, booleanArray0.length);
      
      byte[] byteArray0 = bitSet0.toByteArray();
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true, true}, booleanArray0));
      assertArrayEquals(new byte[] {(byte) (-25)}, byteArray0);
      assertEquals("{0, 1, 2, 5, 6, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertNotNull(byteArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(1, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) double0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      int int0 = (-277);
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-277));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true, false}, booleanArray0));
      assertEquals("{0, 1, 2, 5, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(8, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) double0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1155.0F);
      floatArray0[2] = 0.0F;
      ArrayUtils.reverse(floatArray0, 0, 0);
      assertArrayEquals(new float[] {0.0F, (-1155.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-1));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, (-2414));
      assertArrayEquals(new int[] {(-1), 0}, intArray0);
      assertArrayEquals(new int[] {(-1), 0, (-2414)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'j';
      charArray0[2] = '&';
      charArray0[3] = '';
      charArray0[4] = 'A';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'x');
      assertArrayEquals(new char[] {'j', '&', '', 'A'}, charArray1);
      assertArrayEquals(new char[] {'x', 'j', '&', '', 'A'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(5, charArray0.length);
      
      double[] doubleArray0 = new double[7];
      floatArray0[0] = (float) 0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-1155.0F);
      doubleArray0[5] = (double) '&';
      doubleArray0[6] = (double) '';
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 0);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 0.0, (-1155.0), 38.0, 127.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 0.0, (-1155.0), 38.0, 127.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      ArrayUtils.shift((short[]) null, (-1));
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'B';
      charArray0[5] = 'B';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'k', 'k', 'B', '\u0000', '\u0000', 'B', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      
      Double double0 = new Double((-2368.249728));
      assertEquals((-2368.249728), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1488.0377478646135));
      assertEquals((-1488.0377478646135), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      ArrayUtils.shift((short[]) null, (-696));
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-696);
      floatArray0[2] = (-284.75577F);
      floatArray0[3] = (float) (-1440);
      floatArray0[4] = (float) 'B';
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-696.0F), (-284.75577F), (-1440.0F), 66.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-1251));
      assertArrayEquals(new byte[] {(byte)76}, byteArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)76;
      intArray0[1] = (-1251);
      intArray0[2] = (int) (byte)76;
      intArray0[3] = (-1251);
      intArray0[4] = (int) (byte)76;
      intArray0[5] = (int) (byte)76;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 76, (int) (byte)76);
      assertArrayEquals(new int[] {76, (-1251), 76, (-1251), 76, 76}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) bitSet0;
      Object object0 = ArrayUtils.get(objectArray0, 611);
      assertNull(object0);
      assertEquals(8, objectArray0.length);
      
      objectArray0[1] = null;
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) (-1251);
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) 76;
      objectArray0[6] = (Object) 76;
      BitSet bitSet1 = (BitSet)ArrayUtils.get(objectArray0, (int) 76, (Object) bitSet0);
      assertArrayEquals(new byte[] {(byte)76}, byteArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertNotNull(bitSet1);
      assertSame(bitSet0, bitSet1);
      assertSame(bitSet1, bitSet0);
      assertEquals(1, byteArray0.length);
      assertEquals(8, objectArray0.length);
      
      objectArray0[7] = (Object) bitSet1;
      ArrayUtils.swap(objectArray0, 76, (-1251), (-1));
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      Integer integer0 = new Integer((-37));
      assertEquals((-37), (int)integer0);
      assertNotNull(integer0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((short) (-37), mutableInt0.shortValue());
      assertEquals((-37), mutableInt0.intValue());
      assertEquals((-37.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-37", mutableInt0.toString());
      assertEquals((-37L), mutableInt0.longValue());
      assertEquals((-37), (int)mutableInt0.getValue());
      assertEquals((-37.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-37), (int)mutableInt0.toInteger());
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.getValue();
      assertEquals((short) (-37), mutableInt0.shortValue());
      assertEquals((-37), mutableInt0.intValue());
      assertEquals((-37.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-37", mutableInt0.toString());
      assertEquals((-37L), mutableInt0.longValue());
      assertEquals((-37), (int)mutableInt0.getValue());
      assertEquals((-37.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-37), (int)mutableInt0.toInteger());
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals((-37), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer2;
      objectArray0[1] = (Object) mutableInt0;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer0, (-1));
      assertEquals((-1), int0);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertEquals(2, objectArray0.length);
      
      int int1 = mutableInt0.addAndGet((Number) (-1));
      assertEquals((-38L), mutableInt0.longValue());
      assertEquals((short) (-38), mutableInt0.shortValue());
      assertEquals((-38), mutableInt0.intValue());
      assertEquals((-38), (int)mutableInt0.toInteger());
      assertEquals((-38), (int)mutableInt0.getValue());
      assertEquals((-38.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-38.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-38), mutableInt0.byteValue());
      assertEquals("-38", mutableInt0.toString());
      assertEquals((-38), int1);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      
      mutableInt0.setValue((Number) integer2);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(5);
      assertEquals(5, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int1));
      assertNotNull(integer3);
      
      Integer integer4 = mutableInt0.getValue();
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1), (int)integer4);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(5);
      assertEquals(5, (int)integer5);
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)76;
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 1573, (int) (byte)12);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-497L);
      longArray0[1] = 0L;
      ArrayUtils.swap(longArray0, (-1), 1492);
      assertArrayEquals(new long[] {(-497L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[1] = 'l';
      charArray0[2] = 'b';
      charArray0[3] = 'x';
      charArray0[4] = 'J';
      charArray0[5] = 't';
      charArray0[6] = 'c';
      charArray0[7] = 'O';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'l', 'b', 'x', 'J', 't', 'c', 'O'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-265L), 1492);
      assertArrayEquals(new long[] {(-497L), 0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(2, longArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 'l';
      objectArray0[1] = (Object) 'c';
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 'x';
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) 'c';
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) boolean1, (-1));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(bitSet0);
      assertEquals(6, objectArray0.length);
      
      Object[] objectArray1 = new Object[1];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[4]);
      assertEquals(0L, object0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotNull(object0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(6, objectArray0.length);
      
      objectArray1[0] = object0;
      boolean boolean2 = ArrayUtils.isEmpty(objectArray1);
      assertFalse(boolean2);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(boolean2 == boolean0);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(1, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = 'J';
      charArray0[4] = 'E';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'J', 'O', 'O', 'J', 'E'}, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'J';
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'E';
      doubleArray0[1] = (double) 'O';
      doubleArray0[2] = (double) 'O';
      doubleArray0[3] = (double) 'O';
      ArrayUtils.shift(doubleArray0, (int) 'E', (-6), (int) 'E');
      assertArrayEquals(new double[] {69.0, 79.0, 79.0, 79.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.reverse(doubleArray0, (-6), 2);
      assertArrayEquals(new double[] {79.0, 69.0, 79.0, 79.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      char[] charArray0 = new char[13];
      boolean boolean0 = ArrayUtils.contains(charArray0, 'x');
      assertFalse(boolean0);
      assertEquals(13, charArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) byte0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[3], (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(5, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, 78, 78, Integer.MAX_VALUE);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = 'J';
      charArray0[4] = 'E';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'J', 'O', 'O', 'J', 'E'}, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'J';
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'E';
      doubleArray0[1] = (double) 'O';
      doubleArray0[2] = (double) 'O';
      doubleArray0[3] = (double) 'O';
      ArrayUtils.shift(doubleArray0, 0, (-6), 0);
      assertArrayEquals(new double[] {69.0, 79.0, 79.0, 79.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.reverse(doubleArray0, (-6), 2);
      assertArrayEquals(new double[] {79.0, 69.0, 79.0, 79.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)10;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1826);
      assertArrayEquals(new short[] {(short)0, (short)10}, shortArray0);
      assertArrayEquals(new short[] {(short)1826, (short)0, (short)10}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 56;
      intArray0[1] = (int) (short)10;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)10;
      intArray0[4] = (int) (short)10;
      intArray0[5] = (int) (short)10;
      intArray0[6] = (int) (short)10;
      intArray0[7] = 654;
      intArray0[8] = (int) (short)10;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 0);
      assertArrayEquals(new int[] {56, 10, 0, 10, 10, 10, 10, 654, 10}, intArray0);
      assertArrayEquals(new int[] {56, 10, 10, 10, 10, 10, 654, 10}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 10;
      objectArray0[1] = (Object) 10;
      objectArray0[2] = (Object) 10;
      objectArray0[3] = (Object) (short)0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 2133538948);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 635.937668;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1197.95868123;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {635.937668, 0.0, 1197.95868123, 0.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(4, doubleArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-47);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-6), (int) (byte) (-6));
      assertArrayEquals(new byte[] {(byte) (-6), (byte)6, (byte) (-1), (byte)65, (byte) (-47)}, byteArray0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(5, byteArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-6);
      shortArray0[1] = (short) (byte)65;
      shortArray0[2] = (short) (byte)65;
      shortArray0[0] = (short) (byte)65;
      shortArray0[4] = (short) (byte)6;
      shortArray0[5] = (short) (byte) (-47);
      shortArray0[6] = (short)54;
      shortArray0[7] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)65, (short)65, (short)65, (short)0, (short)6, (short) (-47), (short)54, (short) (-1)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(16, shortArray1.length);
      assertEquals(8, shortArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short) (-1);
      objectArray0[1] = (Object) (short)65;
      objectArray0[2] = (Object) (byte) (-1);
      objectArray0[3] = (Object) (short)65;
      objectArray0[4] = (Object) 0.0;
      Object object0 = ArrayUtils.get(objectArray0, 1423, (Object) "<");
      assertEquals("<", object0);
      assertNotNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[5] = (Object) "<";
      objectArray0[6] = (Object) 0.0;
      ArrayUtils.shift(objectArray0, (-1), (int) (short)65, (int) (byte)65);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 2042.800134712;
      doubleArray0[2] = (-350.7645);
      doubleArray0[3] = 924.7283338535548;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-480.4197647);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2154.9762927539, (-977.388097921361));
      assertArrayEquals(new double[] {1.5, 2042.800134712, (-350.7645), 924.7283338535548, 0.0, (-1.0), (-480.4197647)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)16);
      assertArrayEquals(new byte[] {(byte)111, (byte) (-1)}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2405);
      shortArray0[1] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((-430), 0);
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short) (-2405)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-430);
      intArray0[1] = (-430);
      intArray0[2] = (int) 'H';
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) 'H';
      intArray0[5] = 0;
      intArray0[6] = (-430);
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)118;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte) (-85), (byte) (-1), (byte)109, (byte)118}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)118;
      longArray0[1] = (long) (byte)102;
      longArray0[2] = (long) (byte)102;
      longArray0[3] = (long) (byte) (-85);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {118L, 102L, 102L, (-85L)}, longArray0);
      assertArrayEquals(new long[] {118L, 102L, 102L, (-85L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(2024L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf("<O");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean("<O");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean4);
      assertFalse(boolean5);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.valueOf("<O");
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean0));
      assertNotNull(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean3));
      assertNotNull(boolean7);
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = Boolean.valueOf((boolean) boolean2);
      assertFalse(boolean8);
      assertFalse(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean4));
      assertFalse(boolean2.equals((Object)boolean7));
      assertNotNull(boolean8);
      
      booleanArray0[7] = boolean8;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = '{';
      ArrayUtils.reverse((Object[]) booleanArray0);
      assertEquals(8, booleanArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '6';
      longArray0[1] = (long) '6';
      longArray0[2] = (long) '6';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, (long[]) null);
      assertArrayEquals(new long[] {54L, 54L, 54L}, longArray0);
      assertArrayEquals(new long[] {54L, 54L, 54L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)10;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1826);
      assertArrayEquals(new short[] {(short)0, (short)10}, shortArray0);
      assertArrayEquals(new short[] {(short)1826, (short)0, (short)10}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      int[] intArray0 = new int[9];
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals(9, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, (int) (short)10, (int) (short)10);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("l");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean("l");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 1499L);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      long[] longArray0 = new long[20];
      longArray0[0] = 60L;
      longArray0[1] = (long) (byte)24;
      longArray0[18] = 60L;
      longArray0[3] = (long) (byte)88;
      longArray0[4] = 0L;
      longArray0[5] = 60L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2370L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(20, longArray0.length);
      assertEquals(20, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      short[] shortArray0 = new short[2];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ArrayUtils.reverse(shortArray0, (int) (short)2100, 2146837691);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 2146837691);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-2811);
      shortArray0[2] = (short)2100;
      shortArray0[3] = (short) (-2811);
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-386.143747533615);
      doubleArray0[1] = (-386.143747533615);
      doubleArray0[2] = 107.0;
      doubleArray0[3] = (-386.143747533615);
      doubleArray0[4] = (-1472.81323);
      doubleArray0[5] = 1770.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1334.299), 1965);
      assertArrayEquals(new double[] {(-386.143747533615), (-386.143747533615), 107.0, (-386.143747533615), (-1472.81323), 1770.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-686.2384262);
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = '6';
      charArray0[2] = 't';
      charArray0[3] = ',';
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-686.2384262), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-686.2384262), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1614);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      ArrayUtils.reverse(byteArray0, 2, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)124}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.indexOf(charArray0, '<', (int) (byte)0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = ' ';
      charArray0[2] = 'D';
      ArrayUtils.reverse(charArray0, 0, 0);
      assertArrayEquals(new char[] {'-', ' ', 'D'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.removeElements((Double[]) null, (Double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 'D';
      longArray0[2] = (long) 'D';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-120);
      ArrayUtils.reverse(byteArray0, 2332, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)7, (byte) (-120), (byte)124, (byte)106, (byte)0, (byte) (-120)}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      Object[] objectArray0 = new Object[6];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-";
      stringArray0[1] = "-";
      stringArray0[2] = "-";
      stringArray0[3] = "-";
      stringArray0[4] = "-";
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      int int1 = ArrayUtils.indexOf(doubleArray0, 1.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(3, doubleArray0.length);
      
      Object object0 = ArrayUtils.get((Object[]) stringArray0, (int)  (-47), (Object) "-");
      assertEquals("-", object0);
      assertNotNull(object0);
      assertEquals(9, stringArray0.length);
      
      ArrayUtils.shift(objectArray0, (-1), 24, 20);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 5375.4047181427;
      doubleArray0[3] = 1183.644;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 1.0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 5375.4047181427;
      ArrayUtils.shift(objectArray0, (-285), 1760, (-285));
      assertEquals(4, objectArray0.length);
      
      ArrayUtils.shift(doubleArray0, 1760);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 5375.4047181427, 1183.644}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "V-+/3C;AlCt;$76";
      stringArray0[1] = "";
      int int0 = ArrayUtils.lastIndexOf((Object[]) stringArray0, (Object) "", 4);
      assertEquals(1, int0);
      assertEquals(9, stringArray0.length);
      
      Byte byte0 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get((Object[]) stringArray0, 15, (Object) byte0);
      assertEquals((byte)15, object0);
      assertNotNull(object0);
      assertEquals(9, stringArray0.length);
      
      ArrayUtils.shift((Object[]) stringArray0, 1, 45, 1646);
      assertEquals(9, stringArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Boolean boolean0 = Boolean.valueOf("eP4#/V_u");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) boolean0);
      assertEquals(false, object1);
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.get(objectArray0, 2439, objectArray0[1]);
      assertEquals(false, object2);
      assertNotNull(object2);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = object2;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, 110);
      assertEquals((-1), int0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 818.0;
      doubleArray0[2] = 365.3596;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {818.0, 818.0, 365.3596}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2070;
      shortArray0[1] = (short)0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[1] = 'J';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'D', Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'D', 'J', 'D', 'D'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(4, charArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'D';
      objectArray0[1] = (Object) 365.3596;
      Object object0 = ArrayUtils.get(objectArray0, (int) 2070, (Object) null);
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[2] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) 818.0;
      objectArray0[5] = (Object) 'J';
      objectArray0[6] = (Object) 'D';
      ArrayUtils.shift(objectArray0, (-1993), (int) (short)2070, (int) (short)2070);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('^');
      assertEquals('^', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('^');
      assertEquals('^', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character2));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(2, characterArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((long) character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertEquals(3, byteArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = (char) character0;
      charArray0[1] = 'w';
      charArray0[2] = '^';
      charArray0[3] = '^';
      charArray0[4] = (char) character1;
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'^', '^', '^', '^', 'w'}, charArray0);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertEquals(5, charArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray1, 'w');
      assertArrayEquals(new char[] {'^', '^'}, charArray1);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(charArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(2, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((String) null);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean0);
      assertFalse(boolean4);
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean5);
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean2));
      assertNotNull(boolean7);
      
      booleanArray0[7] = boolean7;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt mutableInt0 = new MutableInt((int) (byte)0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      int int0 = mutableInt0.addAndGet(32);
      assertEquals(32, (int)mutableInt0.getValue());
      assertEquals((byte)32, mutableInt0.byteValue());
      assertEquals(32.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(32, (int)mutableInt0.toInteger());
      assertEquals("32", mutableInt0.toString());
      assertEquals(32L, mutableInt0.longValue());
      assertEquals(32, mutableInt0.intValue());
      assertEquals((short)32, mutableInt0.shortValue());
      assertEquals(32.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(32, int0);
      
      MutableInt mutableInt1 = new MutableInt((int) (byte)0);
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("0", mutableInt1.toString());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt[] mutableIntArray1 = new MutableInt[2];
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      mutableIntArray1[0] = mutableInt1;
      mutableIntArray1[1] = mutableInt0;
      MutableInt[] mutableIntArray2 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray1);
      assertFalse(mutableIntArray0.equals((Object)mutableIntArray1));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertFalse(mutableIntArray2.equals((Object)mutableIntArray0));
      assertFalse(mutableIntArray2.equals((Object)mutableIntArray1));
      assertNotNull(mutableIntArray2);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray2);
      assertNotSame(mutableIntArray1, mutableIntArray2);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray2, mutableIntArray0);
      assertNotSame(mutableIntArray2, mutableIntArray1);
      assertEquals(2, mutableIntArray0.length);
      assertEquals(2, mutableIntArray1.length);
      assertEquals(0, mutableIntArray2.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short) (-1), (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short) (-1), (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)550;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1861), 1);
      assertArrayEquals(new short[] {(short)2, (short)550}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short)2;
      objectArray0[1] = (Object) (short)2;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) (short)550;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)8, (int) (byte)8);
      assertArrayEquals(new byte[] {(byte)72, (byte)72}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(2147483647L);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-38);
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0, (int) (byte)8, 36);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.shift(byteArray0, 1751, 4, 3519);
      assertArrayEquals(new byte[] {(byte)72, (byte)72}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2811);
      shortArray0[1] = (short) (-1655);
      shortArray0[2] = (short) (-2811);
      shortArray0[3] = (short) (-2537);
      shortArray0[5] = (short) (-984);
      shortArray0[6] = (short)1043;
      shortArray0[7] = (short) (-1655);
      shortArray0[8] = (short)0;
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short) (-2811), (-981));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-2638));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2638, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2811);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2100;
      shortArray0[3] = (short) (-2537);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-948);
      shortArray0[6] = (short)1043;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      int int0 = new Short((short)0);
      assertEquals((short)0, int0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)2100, (-981));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)10;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1826);
      assertArrayEquals(new short[] {(short)0, (short)10}, shortArray0);
      assertArrayEquals(new short[] {(short)1826, (short)0, (short)10}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      int[] intArray0 = new int[9];
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals(9, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, 937, (-3488L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 937, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'j';
      ArrayUtils.shift(charArray0, (-1116), (-1116), 0);
      assertArrayEquals(new char[] {'j', 'j', 'j', 'j', 'j', 'j'}, charArray0);
      assertEquals(6, charArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Boolean, Character>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Boolean, Character>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      Character character0 = Character.valueOf('j');
      assertEquals('j', (char)character0);
      assertNotNull(character0);
      
      AbstractMap.SimpleImmutableEntry<Boolean, Character> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Boolean, Character>((Boolean) true, character0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Boolean, Character> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Boolean, Character>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Boolean, Character> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Boolean, Character>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Boolean, Character> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Boolean, Character>(abstractMap_SimpleEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Boolean, Character>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addFirst(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntry1);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry2);
      assertEquals(3, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)10;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1826);
      assertArrayEquals(new short[] {(short)0, (short)10}, shortArray0);
      assertArrayEquals(new short[] {(short)1826, (short)0, (short)10}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 56;
      intArray0[1] = (int) (short)10;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)10;
      intArray0[4] = (int) (short)10;
      intArray0[5] = (int) (short)10;
      intArray0[6] = (int) (short)10;
      intArray0[7] = 654;
      intArray0[8] = (int) (short)10;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 0);
      assertArrayEquals(new int[] {56, 10, 0, 10, 10, 10, 10, 654, 10}, intArray0);
      assertArrayEquals(new int[] {56, 10, 10, 10, 10, 10, 654, 10}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 10;
      objectArray0[1] = (Object) 10;
      objectArray0[2] = (Object) 10;
      objectArray0[3] = (Object) (short)0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, objectArray0.length);
      
      String[] stringArray1 = ArrayUtils.addFirst(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertEquals(4, objectArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)88);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      int int0 = ArrayUtils.indexOf(charArray0, 'S', 10);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 639.0469F;
      floatArray0[1] = (-598.8285F);
      floatArray0[2] = (-598.8285F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 639.0469F);
      assertArrayEquals(new float[] {639.0469F, (-598.8285F), (-598.8285F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-598.8285F), (-598.8285F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 2121L;
      longArray0[1] = 914L;
      longArray0[2] = 914L;
      longArray0[3] = (-1L);
      longArray0[4] = 971L;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      ArrayUtils.reverse(byteArray0, (int) (byte)124, (int) (byte)124);
      assertArrayEquals(new byte[] {(byte)124, (byte)124}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      ArrayUtils.reverse((long[]) null, 0, 0);
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)3466);
      assertEquals((short)3466, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      boolean boolean2 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, shortArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[4];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, (boolean) booleanArray1[2]);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(4, booleanArray2.length);
      assertEquals(4, booleanArray1.length);
      
      boolean boolean3 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      int[] intArray0 = new int[0];
      boolean boolean4 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 6205L, (-223));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      Double double0 = new Double(1828.2571601);
      assertEquals(1828.2571601, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1113.1818901764);
      assertEquals(1113.1818901764, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(1828.2571601);
      assertEquals(1828.2571601, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double((-223));
      assertEquals((-223.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(3.0);
      assertEquals(3.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double2;
      doubleArray0[1] = double3;
      doubleArray0[2] = double3;
      Double double5 = new Double(2060.203);
      assertEquals(2060.203, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      
      doubleArray0[3] = double5;
      doubleArray0[4] = double3;
      doubleArray0[5] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.5);
      assertArrayEquals(new double[] {1828.2571601, (-223.0), (-223.0), 2060.203, (-223.0), 1828.2571601}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      ArrayUtils.reverse((float[]) null, (-831), (-223));
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)24);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)24;
      longArray0[2] = (long) (byte)24;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((byte)24);
      assertEquals(24, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer2 = new Integer((byte)24);
      assertEquals(24, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)19;
      floatArray0[1] = (float) 84;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {84.0F, 19.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-1015));
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1155.0F);
      floatArray0[2] = 0.0F;
      ArrayUtils.reverse(floatArray0, 0, 0);
      assertArrayEquals(new float[] {0.0F, (-1155.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-1));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, (-2414));
      assertArrayEquals(new int[] {(-1), 0}, intArray0);
      assertArrayEquals(new int[] {(-1), 0, (-2414)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'j';
      charArray0[2] = '&';
      charArray0[3] = '';
      charArray0[4] = 'A';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'x');
      assertArrayEquals(new char[] {'j', '&', '', 'A'}, charArray1);
      assertArrayEquals(new char[] {'x', 'j', '&', '', 'A'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(5, charArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-1155.0F);
      doubleArray0[5] = (double) '&';
      doubleArray0[6] = (double) '';
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 0);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 0.0, (-1155.0), 38.0, 127.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 0.0, (-1155.0), 38.0, 127.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '2';
      charArray0[2] = 'D';
      ArrayUtils.reverse(charArray0, 0, 0);
      assertArrayEquals(new char[] {'-', '2', 'D'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.removeElements((Double[]) null, (Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 2144, 18688);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 3598L;
      longArray0[2] = 3440L;
      longArray0[3] = (-3536L);
      longArray0[4] = 770L;
      longArray0[5] = 1142L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 3781);
      assertArrayEquals(new long[] {0L, 3598L, 3440L, (-3536L), 770L, 1142L}, longArray0);
      assertArrayEquals(new long[] {0L, 3598L, 3440L, (-3536L), 770L, 1142L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-3729);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-3729);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 18688);
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), (-3729L), (-1L), (-3729L)}, longArray0);
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), (-3729L), (-1L), (-3729L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = ' ';
      charArray0[2] = 'D';
      ArrayUtils.reverse(charArray0, 0, 0);
      assertArrayEquals(new char[] {'-', ' ', 'D'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.removeElements((Double[]) null, (Double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 'D';
      longArray0[2] = (long) 'D';
      longArray0[3] = (long) 'D';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 3353);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3353, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Short short0 = new Short((short) (-2765));
      assertEquals((short) (-2765), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)11);
      assertEquals((short)11, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[1];
      Short short3 = new Short((short) (-1065));
      assertEquals((short) (-1065), (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray0[0] = short3;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[6];
      MutableInt mutableInt0 = new MutableInt(147);
      assertEquals(147, (int)mutableInt0.getValue());
      assertEquals((byte) (-109), mutableInt0.byteValue());
      assertEquals(147.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)147, mutableInt0.shortValue());
      assertEquals(147, mutableInt0.intValue());
      assertEquals("147", mutableInt0.toString());
      assertEquals(147L, mutableInt0.longValue());
      assertEquals(147.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(147, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertEquals(147, (int)mutableInt0.getValue());
      assertEquals((byte) (-109), mutableInt0.byteValue());
      assertEquals(147.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)147, mutableInt0.shortValue());
      assertEquals(147, mutableInt0.intValue());
      assertEquals("147", mutableInt0.toString());
      assertEquals(147L, mutableInt0.longValue());
      assertEquals(147.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(147, (int)mutableInt0.toInteger());
      assertEquals((short)147, mutableInt1.shortValue());
      assertEquals(147L, mutableInt1.longValue());
      assertEquals("147", mutableInt1.toString());
      assertEquals(147.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(147, mutableInt1.intValue());
      assertEquals(147, (int)mutableInt1.getValue());
      assertEquals((byte) (-109), mutableInt1.byteValue());
      assertEquals(147.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(147, (int)mutableInt1.toInteger());
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      mutableIntArray0[0] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt((-42));
      assertEquals((short) (-42), mutableInt2.shortValue());
      assertEquals("-42", mutableInt2.toString());
      assertEquals((-42), (int)mutableInt2.getValue());
      assertEquals((-42), (int)mutableInt2.toInteger());
      assertEquals((-42.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((byte) (-42), mutableInt2.byteValue());
      assertEquals((-42), mutableInt2.intValue());
      assertEquals((-42L), mutableInt2.longValue());
      assertEquals((-42.0), mutableInt2.doubleValue(), 0.01);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertNotNull(mutableInt2);
      
      mutableIntArray0[1] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(mutableInt1);
      assertEquals(147, (int)mutableInt0.getValue());
      assertEquals((byte) (-109), mutableInt0.byteValue());
      assertEquals(147.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)147, mutableInt0.shortValue());
      assertEquals(147, mutableInt0.intValue());
      assertEquals("147", mutableInt0.toString());
      assertEquals(147L, mutableInt0.longValue());
      assertEquals(147.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(147, (int)mutableInt0.toInteger());
      assertEquals((short)147, mutableInt1.shortValue());
      assertEquals(147L, mutableInt1.longValue());
      assertEquals("147", mutableInt1.toString());
      assertEquals(147.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(147, mutableInt1.intValue());
      assertEquals(147, (int)mutableInt1.getValue());
      assertEquals((byte) (-109), mutableInt1.byteValue());
      assertEquals(147.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(147, (int)mutableInt1.toInteger());
      assertEquals((short)147, mutableInt3.shortValue());
      assertEquals(147L, mutableInt3.longValue());
      assertEquals(147, mutableInt3.intValue());
      assertEquals("147", mutableInt3.toString());
      assertEquals(147.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(147.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(147, (int)mutableInt3.getValue());
      assertEquals((byte) (-109), mutableInt3.byteValue());
      assertEquals(147, (int)mutableInt3.toInteger());
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertNotNull(mutableInt3);
      
      mutableIntArray0[2] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt(147);
      assertEquals(147, (int)mutableInt4.getValue());
      assertEquals((byte) (-109), mutableInt4.byteValue());
      assertEquals("147", mutableInt4.toString());
      assertEquals(147.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(147, (int)mutableInt4.toInteger());
      assertEquals(147.0, mutableInt4.doubleValue(), 0.01);
      assertEquals(147L, mutableInt4.longValue());
      assertEquals(147, mutableInt4.intValue());
      assertEquals((short)147, mutableInt4.shortValue());
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertTrue(mutableInt4.equals((Object)mutableInt3));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      assertTrue(mutableInt4.equals((Object)mutableInt0));
      assertNotNull(mutableInt4);
      
      mutableIntArray0[3] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt(mutableInt0);
      assertEquals(147, (int)mutableInt0.getValue());
      assertEquals((byte) (-109), mutableInt0.byteValue());
      assertEquals(147.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)147, mutableInt0.shortValue());
      assertEquals(147, mutableInt0.intValue());
      assertEquals("147", mutableInt0.toString());
      assertEquals(147L, mutableInt0.longValue());
      assertEquals(147.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(147, (int)mutableInt0.toInteger());
      assertEquals(147, mutableInt5.intValue());
      assertEquals(147.0, mutableInt5.doubleValue(), 0.01);
      assertEquals(147L, mutableInt5.longValue());
      assertEquals("147", mutableInt5.toString());
      assertEquals((short)147, mutableInt5.shortValue());
      assertEquals((byte) (-109), mutableInt5.byteValue());
      assertEquals(147, (int)mutableInt5.toInteger());
      assertEquals(147.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals(147, (int)mutableInt5.getValue());
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt0.equals((Object)mutableInt3));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt0.equals((Object)mutableInt4));
      assertTrue(mutableInt5.equals((Object)mutableInt1));
      assertTrue(mutableInt5.equals((Object)mutableInt4));
      assertTrue(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertTrue(mutableInt5.equals((Object)mutableInt0));
      assertNotNull(mutableInt5);
      
      mutableIntArray0[4] = mutableInt5;
      MutableInt mutableInt6 = new MutableInt(mutableInt1);
      assertEquals(147, (int)mutableInt0.getValue());
      assertEquals((byte) (-109), mutableInt0.byteValue());
      assertEquals(147.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)147, mutableInt0.shortValue());
      assertEquals(147, mutableInt0.intValue());
      assertEquals("147", mutableInt0.toString());
      assertEquals(147L, mutableInt0.longValue());
      assertEquals(147.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(147, (int)mutableInt0.toInteger());
      assertEquals((short)147, mutableInt1.shortValue());
      assertEquals(147L, mutableInt1.longValue());
      assertEquals("147", mutableInt1.toString());
      assertEquals(147.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(147, mutableInt1.intValue());
      assertEquals(147, (int)mutableInt1.getValue());
      assertEquals((byte) (-109), mutableInt1.byteValue());
      assertEquals(147.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(147, (int)mutableInt1.toInteger());
      assertEquals((short)147, mutableInt6.shortValue());
      assertEquals(147L, mutableInt6.longValue());
      assertEquals(147, (int)mutableInt6.getValue());
      assertEquals(147.0, mutableInt6.doubleValue(), 0.01);
      assertEquals(147, mutableInt6.intValue());
      assertEquals("147", mutableInt6.toString());
      assertEquals(147.0F, mutableInt6.floatValue(), 0.01F);
      assertEquals(147, (int)mutableInt6.toInteger());
      assertEquals((byte) (-109), mutableInt6.byteValue());
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt0.equals((Object)mutableInt3));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt0.equals((Object)mutableInt5));
      assertTrue(mutableInt0.equals((Object)mutableInt4));
      assertTrue(mutableInt1.equals((Object)mutableInt3));
      assertTrue(mutableInt1.equals((Object)mutableInt4));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertTrue(mutableInt1.equals((Object)mutableInt5));
      assertTrue(mutableInt6.equals((Object)mutableInt3));
      assertTrue(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertTrue(mutableInt6.equals((Object)mutableInt0));
      assertTrue(mutableInt6.equals((Object)mutableInt1));
      assertTrue(mutableInt6.equals((Object)mutableInt5));
      assertNotNull(mutableInt6);
      
      mutableIntArray0[5] = mutableInt6;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertEquals(6, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((String) null);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean0);
      assertFalse(boolean4);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean5);
      assertTrue(boolean0.equals((Object)boolean4));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean5;
      Boolean boolean7 = Boolean.TRUE;
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean2));
      assertNotNull(boolean7);
      
      booleanArray0[7] = boolean7;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt mutableInt0 = new MutableInt((int) (byte)0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      int int0 = mutableInt0.addAndGet(32);
      assertEquals(32, mutableInt0.intValue());
      assertEquals("32", mutableInt0.toString());
      assertEquals(32L, mutableInt0.longValue());
      assertEquals((short)32, mutableInt0.shortValue());
      assertEquals(32, (int)mutableInt0.getValue());
      assertEquals((byte)32, mutableInt0.byteValue());
      assertEquals(32.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(32.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(32, (int)mutableInt0.toInteger());
      assertEquals(32, int0);
      
      MutableInt mutableInt1 = new MutableInt((int) (byte)0);
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0L, mutableInt1.longValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-5505), floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = null;
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 0.0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (-5505));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      bitSet0.flip((int) (byte)0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-5505), intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5505, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((String) null);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean0);
      assertFalse(boolean4);
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean5);
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean4));
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean4));
      assertNotNull(boolean7);
      
      booleanArray0[7] = boolean7;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt mutableInt0 = new MutableInt((int) (byte)0);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((int) (byte)0);
      assertEquals("0", mutableInt1.toString());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0L, mutableInt1.longValue());
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt[] mutableIntArray1 = new MutableInt[2];
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      mutableIntArray1[0] = mutableInt1;
      mutableIntArray1[1] = mutableInt0;
      MutableInt[] mutableIntArray2 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray1);
      assertFalse(mutableIntArray0.equals((Object)mutableIntArray1));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertFalse(mutableIntArray2.equals((Object)mutableIntArray1));
      assertFalse(mutableIntArray2.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray2);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray2);
      assertNotSame(mutableIntArray1, mutableIntArray2);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray2, mutableIntArray1);
      assertNotSame(mutableIntArray2, mutableIntArray0);
      assertEquals(2, mutableIntArray0.length);
      assertEquals(2, mutableIntArray1.length);
      assertEquals(0, mutableIntArray2.length);
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2404.3931;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 977.7996930905947;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 165.79694785933;
      doubleArray0[7] = 361.209704095;
      doubleArray0[8] = (-990.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2299.64186), 0.0);
      assertArrayEquals(new double[] {2404.3931, 1.5, 0.0, 977.7996930905947, 0.0, 0.0, 165.79694785933, 361.209704095, (-990.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = '~';
      charArray0[2] = 'C';
      charArray0[3] = 'A';
      charArray0[4] = 'q';
      charArray0[5] = '8';
      charArray0[6] = 'Y';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'~', 'C', 'A', 'q', '8', 'Y', '\"'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = '\'';
      Character character0 = Character.valueOf('\'');
      assertEquals('\'', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) char0;
      doubleArray0[1] = (double) '\'';
      doubleArray0[2] = (-2012.444872245);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 39.0, 0.0);
      assertArrayEquals(new double[] {39.0, 39.0, (-2012.444872245)}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[2] = 'e';
      charArray0[3] = 'I';
      charArray0[4] = 'c';
      charArray0[5] = 'd';
      charArray0[6] = 'i';
      charArray0[7] = '4';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'e', 'I', 'c', 'd', 'i', '4'}, charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'e', 'I', 'c', 'd', 'i', '4'}, charArray1);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'i';
      doubleArray0[1] = (double) 'Q';
      doubleArray0[2] = (double) 'i';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 105.0);
      assertArrayEquals(new double[] {105.0, 81.0, 105.0}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      Character character0 = Character.valueOf('\'');
      assertEquals('\'', (char)character0);
      assertNotNull(character0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) '\'';
      doubleArray0[2] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2012.444872245), 39.0);
      assertArrayEquals(new double[] {0.0, 39.0, 0.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      ArrayUtils.swap(longArray0, (-458), 98, (-127));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-497L);
      longArray0[1] = 0L;
      ArrayUtils.swap(longArray0, (-1), 1492);
      assertArrayEquals(new long[] {(-497L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = 'l';
      charArray0[2] = 'b';
      charArray0[3] = 'x';
      charArray0[4] = 'J';
      charArray0[5] = 't';
      charArray0[6] = 'c';
      charArray0[7] = 'O';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'Q', 'l', 'b', 'x', 'J', 't', 'c', 'O'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      ArrayUtils.swap(longArray0, (-1), 1492);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[2] = 'b';
      charArray0[3] = 'x';
      charArray0[4] = 'J';
      charArray0[5] = 't';
      charArray0[6] = 'c';
      charArray0[7] = 'O';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'b', 'x', 'J', 't', 'c', 'O'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.swap(shortArray0, (-873), (-873), (-873));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-873);
      intArray0[1] = (-873);
      intArray0[2] = (-873);
      ArrayUtils.shift(intArray0, (-873));
      assertArrayEquals(new int[] {(-873), (-873), (-873)}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-873);
      floatArray0[1] = (float) (-873);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -873, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2100;
      shortArray0[1] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((-430), 0);
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)2100}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      char[] charArray0 = new char[17];
      charArray0[0] = 'H';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(17, charArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-430);
      intArray0[1] = (-430);
      intArray0[2] = (int) '\u0000';
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) '\u0000';
      intArray0[0] = 0;
      intArray0[6] = (-430);
      intArray0[7] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -430, Length: 17
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '2';
      charArray0[2] = 'D';
      int[] intArray0 = new int[4];
      intArray0[0] = (-2146175872);
      intArray0[1] = 0;
      intArray0[2] = (int) '-';
      intArray0[3] = (int) '-';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2100;
      shortArray0[1] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((-430), (int) (short)0);
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)2100}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-67));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2405);
      shortArray0[1] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((-430), 0);
      assertNotNull(intStream0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short) (-2405), (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-430);
      intArray0[1] = (-430);
      intArray0[2] = (int) 'H';
      intArray0[3] = (int) (short) (-2405);
      intArray0[4] = (int) 'H';
      intArray0[5] = 0;
      intArray0[6] = (-430);
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1899, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      AbstractMap.SimpleEntry<Character, Float>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Character, Float>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 0);
      Character character0 = new Character('f');
      assertEquals('f', (char)character0);
      assertNotNull(character0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      AbstractMap.SimpleEntry<Character, Float> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Character, Float>(character0, float0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Character, Float> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Character, Float>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Character, Float> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Character, Float>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(abstractMap_SimpleEntryArray0, 1969, abstractMap_SimpleEntry1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1969, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'I', 17);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 17;
      intArray0[3] = (-1);
      intArray0[4] = 17;
      intArray0[5] = (int) 'I';
      intArray0[6] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-2204));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2204, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4596.0;
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)27);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength("SS=~)xZ=`m&4GL$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-11.193588670977903);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 3;
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) (-639);
      ArrayUtils.shift(floatArray0, (-639), 1, 11);
      assertArrayEquals(new float[] {3.0F, 3.0F, (-639.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Float[] floatArray1 = new Float[0];
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-11.193588670977903));
      assertArrayEquals(new double[] {(-11.193588670977903), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-11.193588670977903), (-11.193588670977903), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1634.481071;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = ArrayUtils.addFirst((double[]) null, 1634.481071);
      assertArrayEquals(new double[] {1634.481071}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 853, 853, 853);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Float float0 = new Float((float) 853);
      assertEquals(853.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 853;
      longArray0[2] = (long) 853;
      longArray0[3] = (long) 3353;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1.0), 0);
      assertArrayEquals(new double[] {1634.481071}, doubleArray1, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(bitSet0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 853);
      assertArrayEquals(new double[] {0.0, 1634.481071, (-1.0), 1.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-686.2384262);
      doubleArray0[1] = 1634.481071;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-4326.0));
      assertArrayEquals(new double[] {(-686.2384262), 1634.481071, (-1.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4326.0), (-686.2384262), 1634.481071, (-1.0), 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 853, 853, 853);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Float float0 = new Float((float) 853);
      assertEquals(853.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-1), 1132, 1132);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)0;
      byteArray0[3] = (byte) (-85);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)119);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-85), (byte)119, (byte) (-85), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-85), (byte) (-85), (byte)119, (byte) (-85), (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-99));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((String[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2607);
      intArray0[1] = (-1727);
      intArray0[2] = (-4971);
      intArray0[3] = 0;
      intArray0[4] = 16;
      intArray0[5] = (-2434);
      intArray0[6] = 2735;
      ArrayUtils.swap(intArray0, (-4295), (-3887));
      assertArrayEquals(new int[] {(-2607), (-1727), (-4971), 0, 16, (-2434), 2735}, intArray0);
      assertEquals(7, intArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 0;
      Integer integer0 = new Integer((-4971));
      assertEquals((-4971), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[1] = integer0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertFalse(boolean0);
      assertEquals(2, integerArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 2841L);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      int int1 = 1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 1746, (double) 1746);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1746, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 5375.4047181427;
      doubleArray0[3] = 1183.644;
      doubleArray0[4] = (-659.6599684696);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3550.3);
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1, (-2750.4));
      assertArrayEquals(new double[] {0.0, 1.0, 5375.4047181427, 1183.644, (-659.6599684696), 0.0, (-3550.3), (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2750.4), 1.0, 5375.4047181427, 1183.644, (-659.6599684696), 0.0, (-3550.3), (-1.0), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(1);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long long1 = 0L;
      Long long2 = Long.getLong("", 0L);
      assertEquals(0L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(1);
      assertEquals(1L, (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(long1);
      assertEquals(0L, (long)long4);
      assertTrue(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      
      longArray0[3] = long4;
      Long long5 = new Long((-1L));
      assertEquals((-1L), (long)long5);
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertNotNull(long5);
      
      longArray0[4] = long5;
      Long long6 = new Long((-1L));
      assertEquals((-1L), (long)long6);
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long3));
      assertTrue(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long0));
      assertNotNull(long6);
      
      longArray0[5] = long6;
      Long long7 = new Long(0L);
      assertEquals(0L, (long)long7);
      assertTrue(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long0));
      assertTrue(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long6));
      assertTrue(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long5));
      assertNotNull(long7);
      
      longArray0[6] = long7;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, long1);
      assertArrayEquals(new long[] {1L, 0L, 1L, 0L, (-1L), (-1L), 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 2133538948);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (-358L);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-1L), (-358L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2133538948;
      intArray0[1] = (-1);
      intArray0[2] = (-2794);
      intArray0[3] = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2794));
      assertArrayEquals(new int[] {2133538948, (-1), (-2794), (-1)}, intArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{2}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1, 961);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.swap(shortArray0, (-873), (-873), (-873));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-873);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {(-873L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((-873L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray1, (Random) mockRandom0);
      assertArrayEquals(new long[] {(-873L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-68));
      assertNull(byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[3] = 'E';
      charArray0[4] = 'd';
      charArray0[2] = 'm';
      charArray0[7] = '%';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'm', 'E', 'd', '\u0000', '\u0000', '%'}, charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'm', 'E', 'd', '\u0000', '\u0000', '%'}, charArray1);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 'i';
      doubleArray0[2] = (double) 'i';
      char[] charArray2 = ArrayUtils.addFirst(charArray1, 'E');
      assertArrayEquals(new char[] {'Q', '\u0000', 'm', 'E', 'd', '\u0000', '\u0000', '%'}, charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'm', 'E', 'd', '\u0000', '\u0000', '%'}, charArray1);
      assertArrayEquals(new char[] {'E', 'Q', '\u0000', 'm', 'E', 'd', '\u0000', '\u0000', '%'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertEquals(9, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = '9';
      charArray0[2] = 'e';
      charArray0[3] = 'I';
      charArray0[4] = 'c';
      charArray0[5] = 'd';
      charArray0[6] = 'i';
      charArray0[7] = '4';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'Q', '9', 'e', 'I', 'c', 'd', 'i', '4'}, charArray0);
      assertArrayEquals(new char[] {'Q', '9', 'e', 'I', 'c', 'd', 'i', '4'}, charArray1);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'D';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'D');
      assertArrayEquals(new char[] {'C', 'C', 'D', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'C', 'C', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      
      short short0 = (short)77;
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, (-2145659106), (short)77);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2145659106, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '\"';
      objectArray0[1] = (Object) '\"';
      objectArray0[1] = (Object) '\"';
      objectArray0[4] = (Object) '\"';
      objectArray0[5] = (Object) '\"';
      long[] longArray0 = new long[4];
      longArray0[3] = (long) '\"';
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      objectArray0[5] = (Object) '\"';
      longArray1[1] = (long) '\"';
      longArray1[4] = (long) '\"';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 84);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 84, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)102;
      shortArray0[1] = (short) (byte)102;
      shortArray0[2] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1015));
      assertArrayEquals(new short[] {(short)102, (short)102, (short)2}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 4L;
      longArray0[1] = (-469L);
      longArray0[2] = 646L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, (long[]) null);
      assertArrayEquals(new long[] {4L, (-469L), 646L}, longArray0);
      assertArrayEquals(new long[] {4L, (-469L), 646L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-3729);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), (-3729L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), (-3729L), (-1L), (-1L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1614);
      ArrayUtils.reverse(shortArray0, 99, 279);
      assertArrayEquals(new short[] {(short) (-1614)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, 279, 1167);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-3278);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1533);
      shortArray0[6] = (short)14;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2, (short) (-3278), (short)2, (short)0, (short) (-1533), (short)14}, shortArray0);
      assertFalse(boolean0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (byte) (-128);
      shortArray0[2] = (short) (byte) (-128);
      shortArray0[3] = (short) (byte) (-128);
      shortArray0[6] = (short) (byte) (-128);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-128), (short) (-128), (short) (-128), (short)0, (short)0, (short) (-128)}, shortArray0);
      assertFalse(boolean0);
      assertEquals(7, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      ArrayUtils.reverse(doubleArray0, (int) (byte) (-128), 2829);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2154.97629;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-350.7645);
      doubleArray0[3] = (double) (-497L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2042.800134712, 977.7996930905947);
      assertArrayEquals(new double[] {2154.97629, (-1.0), (-350.7645), (-497.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (-1.0));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 100;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 121;
      intArray0[3] = (-73);
      intArray0[4] = 3646;
      intArray0[5] = 2337;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 2337);
      assertArrayEquals(new int[] {100, Integer.MAX_VALUE, 121, (-73), 3646, 2337}, intArray0);
      assertArrayEquals(new int[] {100, Integer.MAX_VALUE, 121, (-73), 3646}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-5505), floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 0.0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      ArrayUtils.reverse(byteArray0, (int) (byte)0, 1514);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      bitSet0.flip((int) (byte)0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short)16303);
      assertArrayEquals(new short[] {(short)16303}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short)102;
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Long long0 = new Long((short)8);
      assertEquals(8L, (long)long0);
      assertNotNull(long0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertEquals(8L, object0);
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) classArray0);
      assertTrue(boolean0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift((byte[]) null, (int) (short)8);
  }

  @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      Integer integer0 = new Integer((-37));
      assertEquals((-37), (int)integer0);
      assertNotNull(integer0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((-37), mutableInt0.intValue());
      assertEquals((-37.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-37), mutableInt0.shortValue());
      assertEquals((-37L), mutableInt0.longValue());
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals("-37", mutableInt0.toString());
      assertEquals((-37.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-37), (int)mutableInt0.getValue());
      assertEquals((-37), (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-37);
      intArray0[1] = 5325;
      intArray0[2] = (-37);
      intArray0[3] = (-37);
      intArray0[4] = (-37);
      intArray0[5] = (-37);
      intArray0[6] = (-37);
      intArray0[7] = (-37);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-37));
      assertArrayEquals(new int[] {(-37), 5325, (-37), (-37), (-37), (-37), (-37), (-37)}, intArray0);
      assertArrayEquals(new int[] {5325, (-37), (-37), (-37), (-37), (-37), (-37)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((-37));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = '9';
      ArrayUtils.shift(charArray0, (-37), (-37), (-37));
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-75);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-75)}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-75);
      intArray0[1] = (int) (short) (-75);
      intArray0[2] = (int) (short) (-75);
      intArray0[3] = (int) (short) (-75);
      intArray0[4] = (int) (short) (-75);
      intArray0[5] = (int) (short) (-75);
      intArray0[6] = (int) (short) (-75);
      intArray0[7] = (int) (short) (-75);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-75));
      assertArrayEquals(new int[] {(-75), (-75), (-75), (-75), (-75), (-75), (-75), (-75)}, intArray0);
      assertArrayEquals(new int[] {(-75), (-75), (-75), (-75), (-75), (-75), (-75)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      
      ArrayUtils.shift((byte[]) null, (-3817));
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = 'R';
      charArray0[2] = 'G';
      charArray0[3] = '3';
      charArray0[4] = 'B';
      charArray0[5] = 'C';
      charArray0[6] = 'F';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'x', 'R', 'G', '3', 'B', 'C', 'F'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (long) (-75);
      longArray0[2] = (long) (-75);
      longArray0[3] = 1L;
      longArray0[4] = (long) (-75);
      longArray0[5] = (long) (-75);
      longArray0[6] = (long) 'C';
      longArray0[7] = (long) (short) (-75);
      long[] longArray1 = ArrayUtils.add(longArray0, (-637L));
      assertArrayEquals(new long[] {0L, (-75L), (-75L), 1L, (-75L), (-75L), 67L, (-75L), (-637L)}, longArray1);
      assertArrayEquals(new long[] {0L, (-75L), (-75L), 1L, (-75L), (-75L), 67L, (-75L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-963.73694F), 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '#';
      charArray0[2] = '/';
      charArray0[3] = '&';
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1139);
      shortArray0[1] = (short)676;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1139);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)98;
      shortArray0[6] = (short) (-1139);
      shortArray0[7] = (short)0;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)3353, 2);
      assertArrayEquals(new short[] {(short) (-1139), (short)676, (short)0, (short) (-1139), (short) (-1), (short)98, (short) (-1139), (short)0}, shortArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)222;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)222}, shortArray0);
      assertEquals(0, int0);
      assertEquals(2, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((short)222);
      assertEquals(222, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf(677);
      assertEquals(677, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(98);
      assertEquals(98, (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1065);
      assertEquals(1065, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = Integer.valueOf(14);
      assertEquals(14, (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-970));
      assertEquals((-970), (int)integer6);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      assertEquals(0, (int)integer7);
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)int0));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[4]);
      assertEquals(1065, (int)integer8);
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertNotNull(integer8);
      assertEquals(9, integerArray0.length);
      
      integerArray0[8] = integer8;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-963.73694F), 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '#';
      charArray0[2] = '/';
      charArray0[3] = '&';
      charArray0[4] = 'G';
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) '/';
      objectArray0[1] = (Object) '#';
      objectArray0[2] = (Object) 'G';
      objectArray0[3] = (Object) '-';
      objectArray0[4] = (Object) '-';
      objectArray0[5] = (Object) '&';
      objectArray0[6] = (Object) 'G';
      ArrayUtils.shift(objectArray0, 10, (-285), (-1));
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = '&';
      charArray0[14] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      Float float0 = new Float(924.3982F);
      assertEquals(924.3982F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.shift((Object[]) floatArray0, (-1013), (-1013), 1760);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 924.3982F;
      doubleArray0[1] = (double) '@';
      doubleArray0[2] = (double) '@';
      doubleArray0[3] = (double) '@';
      doubleArray0[4] = (double) '@';
      ArrayUtils.shift(doubleArray0, (-285));
      assertArrayEquals(new double[] {924.398193359375, 64.0, 64.0, 64.0, 64.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4596.0;
      doubleArray0[3] = 404.86;
      doubleArray0[4] = 0.0;
      ArrayUtils.shift((Object[]) null, (-1), 2141319088, (-1));
  }

  @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-963.73694F), 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), (-1));
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1634.481071;
      Byte byte0 = new Byte((byte) (-9));
      assertEquals((byte) (-9), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) byte0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], (-2146404379));
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, 1369, 78, 1369);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)22693;
      shortArray0[1] = (short)4196;
      shortArray0[2] = (short)2208;
      shortArray0[3] = (short) (-1483);
      shortArray0[4] = (short)771;
      shortArray0[5] = (short) (-479);
      ArrayUtils.reverse(shortArray0, (-2670), (int) (short)771);
      assertArrayEquals(new short[] {(short) (-479), (short)771, (short) (-1483), (short)2208, (short)4196, (short)22693}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 5383.928933377107;
      Long long0 = new Long((-128L));
      assertEquals((-128L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-602L));
      assertEquals((-602L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1614);
      ArrayUtils.reverse(shortArray0, 99, 279);
      assertArrayEquals(new short[] {(short) (-1614)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, 279, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)49);
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte) (-1), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte)102, (byte)0, (byte) (-1), (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "i+L3eix<i6u u4aVml";
      stringArray0[2] = "ZgQ";
      stringArray0[3] = "";
      stringArray0[4] = "ZgQ";
      stringArray0[5] = "ZgQ";
      stringArray0[6] = "V-+/3C;AlCt;$76";
      stringArray0[7] = "";
      String[] stringArray1 = ArrayUtils.clone(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.insert((int) (byte) (-1), booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2100;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      int int0 = 2146837691;
      ArrayUtils.reverse(shortArray0, (int) (short)2100, 2146837691);
      assertArrayEquals(new short[] {(short)2100, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int int1 = ArrayUtils.indexOf((int[]) null, (-2142), Integer.MAX_VALUE);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)2100, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) (short)2100;
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) (short)2100;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 111L);
      assertArrayEquals(new long[] {2147483647L, 2100L, 2L, 2100L}, longArray0);
      assertArrayEquals(new long[] {111L, 2147483647L, 2100L, 2L, 2100L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (short)2100, (byte)48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2100, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2811);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)93;
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)93, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (-5312L));
      assertArrayEquals(new long[] {(-5312L)}, longArray0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 0.0;
      char[] charArray0 = new char[9];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '7', (-5272));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(9, charArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) ')';
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-2457.5095F));
      assertArrayEquals(new float[] {41.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {41.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1643);
      intArray0[1] = (-1643);
      intArray0[2] = (-2181);
      boolean[] booleanArray0 = new boolean[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 57, (-2181));
      assertArrayEquals(new int[] {(-1643), (-1643), (-2181)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      charArray0[5] = 'X';
      charArray0[6] = 'X';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(2061, booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray2);
      
      short[] shortArray0 = new short[24];
      shortArray0[0] = (short)2719;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-89);
      shortArray0[4] = (short)109;
      ArrayUtils.reverse(shortArray0, 0, 49);
      assertEquals(24, shortArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte) (-61), (byte)55, (byte)102, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)55}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test835()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(2061, booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray2);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2719;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-89);
      shortArray0[4] = (short)112;
      ArrayUtils.reverse(shortArray0, 0, 49);
      assertArrayEquals(new short[] {(short)112, (short) (-89), (short)0, (short)0, (short)2719}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte) (-61), (byte)0, (byte)102, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)55}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test836()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 5383.928933377107;
      Long long0 = new Long((-128L));
      assertEquals((-128L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-602L));
      assertEquals((-602L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1474), booleanArray1, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1474, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test837()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 5383.928933377107;
      Long long0 = new Long((-602L));
      assertEquals((-602L), (long)long0);
      assertNotNull(long0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(15, booleanArray1, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test838()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "V-+/3C;AlCt;$76";
      stringArray0[1] = "";
      int int0 = ArrayUtils.lastIndexOf((Object[]) stringArray0, (Object) "", 4);
      assertEquals(1, int0);
      assertEquals(9, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[7] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(4, booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(18, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test839()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1613);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1613), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1613, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test840()  throws Throwable  {
      int int0 = 869;
      boolean[] booleanArray0 = new boolean[5];
      boolean boolean0 = false;
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(869, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 869, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test841()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = '7';
      charArray0[2] = 'e';
      charArray0[3] = 'q';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'[', '7', 'e', 'q'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test842()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[1] = 0.0;
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '7', (-5272));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) ')';
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-2457.5095F));
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 1);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) '7';
      long[] longArray1 = new long[1];
      longArray1[0] = (long) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test843()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (-3634));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3634);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0.0F, (-3634));
      assertArrayEquals(new double[] {(-3634.0)}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)902;
      shortArray0[1] = (short)18688;
      shortArray0[2] = (short) (-816);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)902, (short)18688, (short) (-816), (short)2, (short) (-1)}, shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (short)902;
      intArray0[2] = (-1);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)902, (short)18688, (short) (-816), (short)2, (short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short)902, (short)18688, (short) (-816), (short)2, (short) (-1)}, shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test844()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '6', 877);
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test845()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-3729);
      longArray0[4] = (long) (-1);
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test846()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-963.73694F), 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '#';
      charArray0[2] = '/';
      charArray0[3] = '&';
      charArray0[4] = 'G';
      charArray0[5] = '#';
      charArray0[6] = 'J';
      charArray0[7] = '+';
      charArray0[8] = 'T';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'a', 0);
      assertArrayEquals(new char[] {'-', '#', '/', '&', 'G', '#', 'J', '+', 'T'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(9, charArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '/';
      objectArray0[1] = (Object) 'T';
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = (Object) '&';
      objectArray0[4] = (Object) 'T';
      objectArray0[5] = (Object) bitSet0;
      ArrayUtils.shift(objectArray0, 0, (-1993), (-1));
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test847()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = '>';
      charArray0[2] = '>';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '>');
      assertArrayEquals(new char[] {'6', '>', '>'}, charArray0);
      assertArrayEquals(new char[] {'6'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test848()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '!');
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test849()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2145659106);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {(-2145659106), 0}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, (-2145659106), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      
      int[] intArray2 = ArrayUtils.add(intArray0, (-2145659106));
      assertArrayEquals(new int[] {(-2145659106), 0}, intArray0);
      assertArrayEquals(new int[] {(-2145659106), 0, (-2145659106)}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray2.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = Long.valueOf((-984L));
      assertEquals((-984L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-2147483648L));
      assertEquals((-2147483648L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-1493L));
      assertEquals((-1493L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-2145659106));
      assertEquals((-2145659106L), (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 2735L);
      assertArrayEquals(new long[] {(-984L), (-2147483648L), (-1493L), (-2145659106L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test850()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-3278);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-984.1F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-984.1F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-1874), (float) (short) (-3278));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1874, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test851()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = (-3854L);
      longArray0[2] = (-935L);
      longArray0[3] = 0L;
      longArray0[4] = (-3854L);
      long[] longArray1 = ArrayUtils.add(longArray0, 0, 4385L);
      assertArrayEquals(new long[] {0L, (-3854L), (-935L), 0L, (-3854L)}, longArray0);
      assertArrayEquals(new long[] {4385L, 0L, (-3854L), (-935L), 0L, (-3854L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test852()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)605;
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[0];
  }

  @Test(timeout = 4000)
  public void test853()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1643);
      intArray0[1] = 325;
      intArray0[2] = (-2181);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-2181), (-1643));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2181, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test854()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2404.3931;
      doubleArray0[1] = 1.5;
      doubleArray0[3] = 977.7996930905947;
      doubleArray0[4] = 0.0;
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-1L));
      assertEquals((-1L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = new Long(1348L);
      assertEquals(1348L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      Long long3 = new Long((-3343L));
      assertEquals((-3343L), (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      Long[] longArray0 = new Long[7];
      longArray0[0] = long2;
      longArray0[1] = long3;
      longArray0[3] = long2;
      longArray0[4] = long2;
      longArray0[6] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[4]);
      assertArrayEquals(new long[] {1348L, (-3343L), 1348L, 1348L, 1348L, 1348L, (-1L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test855()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2368;
      intArray0[1] = 14;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 2368, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2368, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test856()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 111, (float) 111);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test857()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(81.0);
      assertEquals(81.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(81.0);
      assertEquals(81.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(81.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertEquals(81.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(6, intArray0.length);
      
      ArrayUtils.swap((boolean[]) null, 0, 0);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '81.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test858()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)36;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)36, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-115), (byte)114, (byte)76, (byte)36, (byte)0}, byteArray0);
      assertEquals("{6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(7, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(8, byteArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-115);
      longArray0[1] = (long) (byte)76;
      longArray0[2] = (long) (byte)114;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (byte)114);
      assertArrayEquals(new long[] {(-115L), 76L, 114L}, longArray0);
      assertArrayEquals(new long[] {(-115L), 76L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test859()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-5505), floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (-5505), 0.0);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-5505), (-1390));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test860()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test861()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)8, (int) (byte)8);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((byte)8);
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)72;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (int) (byte)8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test862()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 1L;
      longArray0[4] = (-850L);
      long[] longArray1 = ArrayUtils.remove(longArray0, 0);
      assertArrayEquals(new long[] {0L, 0L, 1L, 1L, (-850L)}, longArray0);
      assertArrayEquals(new long[] {0L, 1L, 1L, (-850L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test863()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1986.4F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-297.0F);
      floatArray0[5] = (-598.8285F);
      floatArray0[6] = (-984.1F);
      floatArray0[7] = 639.0469F;
      int int0 = ArrayUtils.indexOf(floatArray0, 3323.5F);
      assertArrayEquals(new float[] {(-1986.4F), 0.0F, 0.0F, 1.0F, (-297.0F), (-598.8285F), (-984.1F), 639.0469F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test864()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-37));
      assertArrayEquals(new byte[] {(byte)8, (byte) (-1), (byte)78, (byte)78, (byte)11, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-1), (byte)78, (byte)78, (byte)11, (byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)78;
      objectArray0[1] = (Object) (byte)11;
      objectArray0[2] = (Object) (byte)78;
      objectArray0[3] = (Object) (byte) (-1);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-2180), (int) (byte) (-37));
      assertEquals((-1), int0);
      
      byte[] byteArray2 = ArrayUtils.removeElements((byte[]) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-1), (byte)78, (byte)78, (byte)11, (byte)1}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test865()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3729);
      longArray0[1] = (long) (-3729);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-3729);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), (-3729L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-3729L), (-3729L), (-1L), (-3729L), (-1L), (-1L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1614);
      ArrayUtils.reverse(shortArray0, 99, 279);
      assertArrayEquals(new short[] {(short) (-1614)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, 279, (-3729));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test866()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, (int) (byte) (-85), 562, 101);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 101;
      floatArray0[1] = (-2122.0F);
      floatArray0[2] = (-2122.0F);
      floatArray0[3] = (float) 13;
      floatArray0[4] = (float) 101;
      floatArray0[5] = (float) (byte) (-85);
      floatArray0[6] = (float) (byte) (-85);
      floatArray0[7] = (float) (byte) (-85);
      ArrayUtils.shift(floatArray0, 562);
      assertArrayEquals(new float[] {(-85.0F), (-85.0F), 101.0F, (-2122.0F), (-2122.0F), 13.0F, 101.0F, (-85.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test867()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('\'');
      assertEquals('\'', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test868()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      ArrayUtils.shift(doubleArray0, 1760);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test869()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2405);
      shortArray0[1] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-430));
      IntStream intStream0 = mockRandom0.ints((-430), 0);
      assertNotNull(intStream0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short) (-2405), (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      ArrayUtils.reverse((double[]) null, (-1667), 2);
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-2405), (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test870()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-128));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-128);
      shortArray0[1] = (short) (byte) (-128);
      shortArray0[2] = (short) (byte) (-128);
      shortArray0[3] = (short) (byte) (-128);
      shortArray0[4] = (short) (byte) (-128);
      shortArray0[5] = (short) (byte) (-128);
      shortArray0[6] = (short) (byte) (-128);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-128), (short) (-128), (short) (-128), (short) (-128), (short) (-128), (short) (-128), (short) (-128)}, shortArray0);
      assertTrue(boolean0);
      assertEquals(7, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short) (-128);
      doubleArray0[2] = (double) (short) (-128);
      doubleArray0[3] = (double) (short) (-128);
      doubleArray0[4] = (double) (short) (-128);
      ArrayUtils.reverse(doubleArray0, (int) (byte) (-128), 2829);
      assertArrayEquals(new double[] {(-128.0), (-128.0), (-128.0), (-128.0), 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test871()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2100;
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '+', 0);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)2100;
      intArray0[1] = (int) (byte) (-52);
      intArray0[2] = (int) '+';
      intArray0[3] = 0;
      intArray0[4] = (int) (short)2100;
      intArray0[5] = (int) (short)2100;
      intArray0[6] = (int) (short)2100;
      intArray0[7] = (int) (byte) (-52);
      intArray0[8] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (int) (byte) (-52));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -52, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test872()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-3278);
      shortArray0[3] = (short) (-3278);
      Integer integer0 = new Integer((short)2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-3278);
      doubleArray0[6] = (double) (int)integer0;
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test873()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1639);
      intArray0[1] = (-1639);
      intArray0[2] = (-2181);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = '+';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '+', (int) (byte) (-52));
      assertArrayEquals(new char[] {'X', '+'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-1639));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1639, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test874()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2836.7F;
      floatArray0[1] = 1091.27F;
      floatArray0[2] = 2837.6265F;
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'Q');
      assertEquals((-1), int0);
      
      ArrayUtils.shift((char[]) null, (-2131736754), (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test875()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-389);
      shortArray0[2] = (short) (-389);
      int int0 = ArrayUtils.indexOf((int[]) null, (int) (short) (-389), (-1585));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test876()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1484.5139F;
      floatArray0[1] = (-429.72644F);
      floatArray0[2] = 123.12101F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1484.5139F, 1049);
      assertArrayEquals(new float[] {1484.5139F, (-429.72644F), 123.12101F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.shift((Object[]) characterArray0, 2, 892, (-1196));
      assertEquals(1, characterArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 5343.3934927990795;
      ArrayUtils.shift(doubleArray0, (-1688));
      assertArrayEquals(new double[] {5343.3934927990795}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test877()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean1;
      booleanArray0[6] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 8, 1136, 14);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test878()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.subarray((Float[]) null, 0, 0);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = 'j';
      charArray0[3] = '9';
      charArray0[4] = 'P';
      charArray0[5] = '9';
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) (-105);
      floatArray1[1] = (float) 0;
      floatArray1[2] = (-1988.7599F);
      floatArray1[3] = (float) '9';
      floatArray1[4] = (float) '9';
      floatArray1[5] = (float) '9';
      ArrayUtils.shift(floatArray1, (int) (short)0, 3212, (-105));
      assertArrayEquals(new float[] {57.0F, 57.0F, 57.0F, (-105.0F), 0.0F, (-1988.7599F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, 57.0F, 2146742297);
      assertArrayEquals(new float[] {57.0F, 57.0F, 57.0F, (-105.0F), 0.0F, (-1988.7599F)}, floatArray1, 0.01F);
      assertEquals(2, int0);
      assertEquals(6, floatArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test879()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-844.407F);
      floatArray0[1] = 1066.445F;
      floatArray0[2] = (-2858.6345F);
      floatArray0[3] = (-2595.06F);
      floatArray0[4] = 1120.0F;
      floatArray0[5] = (-1988.7599F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2858.6345F), 1);
      assertArrayEquals(new float[] {(-844.407F), 1066.445F, (-2858.6345F), (-2595.06F), 1120.0F, (-1988.7599F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(6, floatArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-2858.6345F);
      objectArray0[1] = (Object) 1066.445F;
      objectArray0[2] = (Object) (-844.407F);
      objectArray0[3] = (Object) (-1988.7599F);
      objectArray0[4] = (Object) (-2595.06F);
      objectArray0[5] = (Object) (-2595.06F);
      objectArray0[6] = (Object) (-2858.6345F);
      objectArray0[7] = (Object) (-2858.6345F);
      objectArray0[8] = (Object) 1120.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-2858.6345', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test880()  throws Throwable  {
      char[] charArray0 = new char[1];
      ArrayUtils.swap(charArray0, (-2308), 9);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1171;
      shortArray0[1] = (short)2254;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)85);
      assertArrayEquals(new short[] {(short)1171, (short)2254}, shortArray0);
      assertArrayEquals(new short[] {(short)1171, (short)2254, (short)85}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)2254;
      floatArray0[1] = (float) (short)2254;
      floatArray0[2] = (float) (short)2254;
      floatArray0[3] = (float) (short)2254;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2254.0F, 2254.0F, 2254.0F, 2254.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)2254;
      longArray0[1] = (long) (-2308);
      longArray0[2] = (long) (-2308);
      boolean boolean1 = ArrayUtils.contains(longArray0, (-3963L));
      assertArrayEquals(new long[] {2254L, (-2308L), (-2308L)}, longArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1171;
      intArray0[1] = (int) (short)2254;
      intArray0[2] = (int) (short)1171;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-25), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -25, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test881()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.swap(intArray0, (-4295), (-4295));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Integer integer0 = new Integer((-525));
      assertEquals((-525), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertTrue(boolean0);
      assertEquals(0, integerArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 2841L);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test882()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-2308), 9);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1171;
      shortArray0[1] = (short)2254;
      short short0 = (short)85;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)85);
      assertArrayEquals(new short[] {(short)1171, (short)2254}, shortArray0);
      assertArrayEquals(new short[] {(short)1171, (short)2254, (short)85}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)2254;
      floatArray0[1] = (float) (short)2254;
      floatArray0[2] = (float) (short)2254;
      floatArray0[3] = (float) (short)2254;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2254.0F, 2254.0F, 2254.0F, 2254.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)2254;
      longArray0[1] = (long) (-2308);
      longArray0[2] = (long) (-2308);
      boolean boolean1 = ArrayUtils.contains(longArray0, (-3963L));
      assertArrayEquals(new long[] {2254L, (-2308L), (-2308L)}, longArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1171;
      intArray0[1] = (int) (short)2254;
      intArray0[2] = (int) (short)1171;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-25), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -25, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test883()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2100;
      shortArray0[1] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((-430), (int) (short)0);
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)2100}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      char[] charArray0 = new char[17];
      charArray0[0] = 'H';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(17, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test884()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '@';
      charArray0[3] = 'e';
      charArray0[4] = '&';
      charArray0[2] = '5';
      charArray0[6] = 'e';
      charArray0[7] = '@';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'e');
      assertArrayEquals(new char[] {'&', '&', '5', 'e', '&', '\u0000', 'e', '@'}, charArray0);
      assertArrayEquals(new char[] {'e', '&', '&', '5', 'e', '&', '\u0000', 'e', '@'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'e';
      doubleArray0[1] = (double) '5';
      doubleArray0[2] = (double) 'e';
      doubleArray0[3] = 1.5;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {101.0, 53.0, 101.0, 1.5}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '&';
      longArray0[1] = (long) '&';
      longArray0[2] = (long) '5';
      longArray0[3] = (long) '@';
      longArray0[4] = (long) '&';
      longArray0[5] = (long) '@';
      longArray0[6] = (long) '5';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 38L, (-277));
      assertArrayEquals(new long[] {38L, 38L, 53L, 64L, 38L, 64L, 53L}, longArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(7, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '&';
      intArray0[1] = (-2463);
      intArray0[2] = (int) 'e';
      ArrayUtils.swap(intArray0, 719, 2103, 2103);
      assertArrayEquals(new int[] {38, (-2463), 101}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test885()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2887L;
      longArray0[1] = (-3854L);
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '~';
      charArray0[2] = ';';
      charArray0[3] = '&';
      ArrayUtils.swap(charArray0, 2146254005, 115);
      assertArrayEquals(new char[] {'X', '~', ';', '&'}, charArray0);
      assertEquals(4, charArray0.length);
      
      long[] longArray1 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "I[p($|";
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 2146254005, 2);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test886()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2070;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)135;
      shortArray0[3] = (short)135;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertArrayEquals(new short[] {(short)2070, (short)0, (short)135, (short)135}, shortArray0);
      assertArrayEquals(new short[] {(short)2070, (short)0, (short)135, (short)135}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2135.24F);
      floatArray0[1] = (float) (short)2070;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2070.0F, 3296);
      assertArrayEquals(new float[] {(-2135.24F), 2070.0F}, floatArray0, 0.01F);
      assertEquals(1, int0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test887()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'x';
      ArrayUtils.swap(charArray0, 727, 8, 49);
      assertArrayEquals(new char[] {'B', 'x', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test888()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)36;
      BitSet bitSet0 = new BitSet();
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-115);
      longArray0[1] = (long) (-1);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {(-115L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-115L), (-1L)}, longArray1);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-115);
      intArray0[1] = 2;
      intArray0[2] = (int) (byte)76;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1869);
      assertArrayEquals(new int[] {(-115), 2, 76}, intArray0);
      assertArrayEquals(new int[] {(-115), 2, 76}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test889()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-192.6F);
      floatArray0[1] = (-2457.5095F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2110.15F));
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      int int1 = ArrayUtils.indexOf(floatArray0, (-2686.5F), (-5721));
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-3486);
      shortArray0[1] = (short)1180;
      int int2 = ArrayUtils.indexOf(shortArray0, (short) (-3486), (-5721));
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test890()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.indexOf(longArray0, (long) 27, 27);
      int[] intArray0 = new int[3];
      intArray0[0] = (-2146641332);
      intArray0[1] = (-2146641332);
      intArray0[2] = (-1);
  }

  @Test(timeout = 4000)
  public void test891()  throws Throwable  {
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test892()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      ArrayUtils.subarray((Float[]) null, 0, 0);
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean1 == boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test893()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-192.6F);
      floatArray0[1] = (-2460.13F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2110.15F));
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (-2370L));
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = '$';
      charArray0[2] = 'j';
      charArray0[3] = '1';
      charArray0[4] = 'Z';
      charArray0[5] = 'P';
      charArray0[6] = 'Y';
      charArray0[7] = 'T';
      ArrayUtils.swap(charArray0, (-1), Integer.MAX_VALUE);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(4, longArray1.length);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotSame(objectArray1, objectArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2085);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)144;
      shortArray0[3] = (short) (-2316);
      shortArray0[4] = (short)2;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test894()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      ArrayUtils.reverse((long[]) null, (-9), 1144);
  }

  @Test(timeout = 4000)
  public void test895()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2887L;
      longArray0[1] = (-3854L);
      longArray0[2] = (-935L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      ArrayUtils.reverse(longArray0, 0, 0);
      assertArrayEquals(new long[] {2887L, (-3854L), (-935L), 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test896()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 76L;
      longArray0[1] = 3914L;
      longArray0[2] = (-984L);
      longArray0[3] = 126L;
      longArray0[4] = (-1666L);
      longArray0[5] = 722L;
      longArray0[6] = 76L;
      longArray0[7] = 3103L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 76L, 84);
      assertEquals(6, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 722L;
      doubleArray0[1] = (double) (-1666L);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test897()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 2042.800134712;
      doubleArray0[2] = (-1.0);
      ArrayUtils.shift((char[]) null, (-2018), 128, (-2146641332));
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1146.1420985);
      assertArrayEquals(new double[] {1146.1420985, 1.5, 2042.800134712, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2146641332);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      ArrayUtils.indexesOf(floatArray1, (-264.818F), (-2146641332));
      assertArrayEquals(new float[] {1.0F, (-2.14664128E9F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test898()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-8), 1132, 1132);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)135;
      shortArray0[2] = (short) (-603);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) (short) (-603);
      floatArray0[3] = (float) (short) (-603);
      floatArray0[4] = (float) (short)2;
      floatArray0[5] = (float) (-8);
      floatArray0[6] = (float) (short)135;
      floatArray0[7] = (float) (short)2;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1160.1F), (-8));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test899()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 1047, (int) (short) (-12), (-590));
  }

  @Test(timeout = 4000)
  public void test900()  throws Throwable  {
      Long long0 = new Long((-2617L));
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2617L);
      ArrayUtils.shift(floatArray0, (-2));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-3);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2), 53);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-3), (byte) (-3), (byte) (-3), (byte)0, (byte)3, (byte)3}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test901()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (-1), (-1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.toMap(objectArray0);
      Short short0 = new Short((short)0);
      Short short1 = Short.valueOf((short)11544);
      Short short2 = new Short((short) (-1118));
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short2;
      shortArray0[1] = short1;
      shortArray0[2] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short) (-1118), (short)11544, (short)11544}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test902()  throws Throwable  {
      char[] charArray0 = new char[20];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = 2904L;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 3592L, 93);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test903()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2416);
      shortArray0[1] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed((short)0);
      Object[] objectArray0 = new Object[28];
      objectArray0[0] = (Object) (short) (-2416);
      objectArray0[1] = (Object) (short)0;
      ArrayUtils.shift((byte[]) null, (-374), (int) (short) (-2416), (-1014));
      ArrayUtils.clone((byte[]) null);
      ArrayUtils.reverse(shortArray0, (int) (short)0, (int) (short) (-176));
      int int0 = ArrayUtils.indexOf((int[]) null, (-3451), (-75));
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-2416), (short)0, (short)0}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test904()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3729));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = 'b';
      ArrayUtils.subarray(charArray0, 7, (-1));
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      MockRandom mockRandom0 = new MockRandom((-1L));
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test905()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-128));
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-128);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-128);
      ArrayUtils.shift(floatArray0, (-105), (int) (short) (-128), 34);
      assertArrayEquals(new float[] {(-128.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test906()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, (-1581), 60, 493);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true}, booleanArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (-1581);
      floatArray0[2] = (float) (-1581);
      floatArray0[3] = (float) (-1581);
      floatArray0[4] = (float) 60;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-1581));
      assertEquals("{1, 2, 3}", bitSet0.toString());
      
      ArrayUtils.shift(floatArray0, 493, 493, 1348);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1348;
      longArray0[1] = 2121L;
      longArray0[2] = (long) (-1581);
      longArray0[3] = (long) 1348;
      longArray0[4] = (long) 60;
      longArray0[5] = (long) 493;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-1581), 493);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test907()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = 'D';
      charArray0[2] = '~';
      charArray0[3] = '4';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'D');
      assertArrayEquals(new char[] {'\"', '~', '4'}, charArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-81);
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-38);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)72, (int) (byte) (-38));
      assertEquals(5, int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-38);
      floatArray0[1] = (float) 'D';
      MockRandom mockRandom0 = new MockRandom((byte)76);
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {68.0F, (-38.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test908()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1171.0F;
      floatArray0[1] = 2455.29F;
      floatArray0[2] = 1501.0F;
      floatArray0[3] = 1268.9F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 3340.636F;
      ArrayUtils.swap(floatArray0, (-1663), (-1663), (-743));
      assertArrayEquals(new float[] {1171.0F, 2455.29F, 1501.0F, 1268.9F, 1.0F, 3340.636F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test909()  throws Throwable  {
      Float float0 = new Float(2.133538948E9);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-394);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)3648;
      ArrayUtils.swap(floatArray0, (int) (short) (-394), (int) (short)3648, (-2811));
      Character character0 = new Character('}');
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) null, (Object) character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test910()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 3914);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[2];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(2, characterArray0.length);
      assertNotNull(characterArray0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test911()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-335.0F);
      floatArray0[1] = (-2745.826F);
      floatArray0[2] = 151.527F;
      floatArray0[3] = (-3.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 886.68F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      ArrayUtils.swap(floatArray0, (-622), (-622), 2);
      assertArrayEquals(new float[] {(-335.0F), (-2745.826F), 151.527F, (-3.0F), (-1.0F), 886.68F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test912()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-128));
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-128);
      shortArray0[1] = (short) (byte) (-128);
      shortArray0[2] = (short) (byte) (-128);
      shortArray0[3] = (short) (byte) (-128);
      shortArray0[4] = (short) (byte) (-128);
      shortArray0[5] = (short) (byte) (-128);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-128);
      longArray0[1] = (long) (short) (-128);
      int int0 = ArrayUtils.indexOf(longArray0, (-1304L));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-128), (int) (short) (-128));
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test913()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      ArrayUtils.removeAllOccurrences(shortArray0, (short)2);
      long[] longArray0 = new long[2];
      shortArray0[1] = (short) (-2278);
      longArray0[1] = (long) (short)2;
  }

  @Test(timeout = 4000)
  public void test914()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)14;
      intArray0[1] = (-1251);
      intArray0[2] = (int) (byte)14;
      intArray0[3] = (-1251);
      intArray0[4] = (int) (byte)14;
      ArrayUtils.subarray(intArray0, 14, (int) (byte)14);
      Object[] objectArray0 = new Object[8];
      Object object0 = ArrayUtils.toPrimitive((Object) 14);
      objectArray0[1] = object0;
      objectArray0[2] = objectArray0[0];
      objectArray0[3] = (Object) (-1251);
      objectArray0[6] = (Object) 14;
      ArrayUtils.swap(objectArray0, 0, (-1251), 14);
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test915()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 818.0;
      doubleArray0[2] = 0.0;
      doubleArray0[2] = 365.3596;
      ArrayUtils.isNotEmpty(doubleArray0);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2570);
      ArrayUtils.shift(shortArray0, 2136539038, (int) (short) (-3396), (-298));
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test916()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[0] = (byte) (-85);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)109;
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      charArray0[5] = 'T';
      charArray0[6] = 'T';
      charArray0[7] = 'T';
      charArray0[8] = 'T';
      ArrayUtils.swap(charArray0, (int) (byte) (-85), (int) (byte) (-1));
      assertArrayEquals(new char[] {'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'T'}, charArray0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test917()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-14);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-14);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      Byte byte0 = new Byte((byte) (-125));
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-14);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test918()  throws Throwable  {
      short[] shortArray0 = new short[21];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)10;
      ArrayUtils.addFirst(shortArray0, (short)1826);
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-766), (int) (short)10);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test919()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-2416);
      intArray0[1] = (int) (short)0;
      intArray0[3] = (int) (short) (-2416);
      intArray0[5] = (int) (short) (-2416);
      intArray0[6] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test920()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-128));
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (int) (byte) (-128), (int) (byte) (-128), 259);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test921()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-686.2384262);
      doubleArray0[1] = 1634.481071;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-4326.0));
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 853, 853, 853);
      Float float0 = new Float((float) 853);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 853;
      longArray0[2] = (long) 853;
      longArray0[3] = (long) 3353;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1.0), 0);
      assertArrayEquals(new double[] {(-4326.0), (-686.2384262), 1634.481071, (-1.0), 1.0}, doubleArray1, 0.01);
      assertEquals("{3}", bitSet0.toString());
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test922()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      int[] intArray0 = new int[0];
      ArrayUtils.subarray(intArray0, (int) (short)0, (-264));
      ArrayUtils.isEmpty(intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-264);
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 'm';
      doubleArray0[3] = (double) (-264);
      doubleArray0[4] = (double) (-264);
      doubleArray0[5] = (double) 'm';
      ArrayUtils.lastIndexOf(doubleArray0, 3.161858146175504, 8, (double) 8);
      ArrayUtils.removeAllOccurrences(doubleArray0, (-264.0));
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test923()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1800L);
      longArray0[1] = 0L;
      longArray0[2] = (-402L);
      longArray0[3] = (-2439L);
      longArray0[4] = 348L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1529);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      byte[] byteArray0 = new byte[0];
      ArrayUtils.indexesOf(byteArray0, (byte)0, (int) (byte)0);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-1529);
      intArray0[1] = (int) (short) (-1529);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (short) (-1529);
      intArray0[4] = (int) (short) (-1529);
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)0;
      intArray0[8] = (int) (short) (-1529);
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test924()  throws Throwable  {
      ArrayUtils.indexOf((double[]) null, (-2767.8));
      Object[] objectArray0 = new Object[2];
      Float float0 = new Float((float) (-1));
      Object object0 = ArrayUtils.get(objectArray0, (-1), (Object) float0);
      objectArray0[0] = object0;
  }

  @Test(timeout = 4000)
  public void test925()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)24);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test926()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.lastIndexOf(intArray0, (-3729));
      char[] charArray0 = new char[4];
      charArray0[1] = '\"';
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '\u0000';
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '\"';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-3729);
      doubleArray0[3] = (double) (-3729);
      ArrayUtils.indexOf(doubleArray0, 924.7283338535548);
      ArrayUtils.get(objectArray0, (-1), objectArray0[0]);
      ArrayUtils.shift(objectArray0, (-1), 1, (-82));
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test927()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 635.937668;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1197.95868123;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-47);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-6), (int) (byte) (-6));
      assertEquals("{0}", bitSet0.toString());
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-6);
      shortArray0[1] = (short) (byte)65;
      shortArray0[2] = (short) (byte)65;
      shortArray0[3] = (short) (byte)65;
      shortArray0[4] = (short) (byte)6;
      shortArray0[5] = (short) (byte) (-47);
      shortArray0[6] = (short)54;
      shortArray0[7] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(16, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test928()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      ArrayUtils.indexOf((Object[]) stringArray0, (Object) null);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (-1904.929F);
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1);
      ArrayUtils.swap(floatArray0, 0, (-1945), (-1));
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) "", (Object) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test929()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 5375.4047181427;
      doubleArray0[3] = 5375.4047181427;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 5375.4047181427;
      MutableInt mutableInt0 = new MutableInt(106);
      Integer integer0 = mutableInt0.toInteger();
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, (Object) integer0);
      assertEquals(4, objectArray1.length);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test930()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1800L);
      longArray0[1] = 0L;
      longArray0[2] = (-402L);
      longArray0[3] = (-2439L);
      longArray0[4] = 348L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(5, longArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1529);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.indexesOf(byteArray0, (byte)0, (int) (byte)0);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-1529);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1529), (int) (short)0);
      assertEquals(0, int0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (byte)0);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1529)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test931()  throws Throwable  {
      Character[] characterArray0 = new Character[11];
      Character character0 = new Character('^');
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = new Character('E');
      characterArray0[2] = character1;
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) character0);
      assertEquals(10, characterArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (char)character0;
      floatArray0[1] = (float) (char)character1;
      ArrayUtils.shuffle(floatArray0);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {69.0F, 0.0F, 94.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test932()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1077.78523928894;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (-464L);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test933()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "d>)E*Unl5`r2fQ(yne";
      stringArray0[2] = "Array and element cannot both be null";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "0>0Sr";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "0>0Sr");
      Float float0 = new Float((-2110.15F));
      ArrayUtils.indexOf((Object[]) stringArray1, (Object) float0);
      assertEquals(5, stringArray1.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 70);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test934()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      double[] doubleArray0 = new double[0];
      ArrayUtils.removeElement(doubleArray0, (double) 0.0F);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1636.225535334));
      assertEquals(0, doubleArray1.length);
      
      Boolean boolean0 = Boolean.TRUE;
      Boolean.valueOf(false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) boolean0;
      MutableInt mutableInt0 = new MutableInt(0.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) mutableInt0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2133538948;
      ArrayUtils.shift(intArray0, 2133538948);
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test935()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[2] = (-4971);
      intArray0[3] = 0;
      intArray0[4] = 16;
      intArray0[5] = (-2434);
      intArray0[6] = 2735;
      ArrayUtils.swap(intArray0, (-4295), (-3887));
      Integer integer0 = new Integer((-4971));
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 2841L);
      ArrayUtils.toObject(longArray1);
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 2735, Integer.MAX_VALUE);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test936()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 0.0F;
      ArrayUtils.indexOf(objectArray0, objectArray0[1], 2133538948);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-4361));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4361, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test937()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-128));
      assertEquals(10, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short) (byte) (-128);
      ArrayUtils.contains(byteArray0, (byte) (-128));
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test938()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-234);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-234), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -234, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test939()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)8;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1184, 1188);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) (short)8;
      objectArray0[2] = (Object) "";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test940()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (-3634));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3634);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0.0F, (-3634));
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)902;
      shortArray0[1] = (short)18688;
      shortArray0[2] = (short) (-816);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'g';
      charArray0[2] = '>';
      charArray0[3] = ']';
      charArray0[4] = 'e';
      charArray0[5] = '6';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '[');
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'w', 'g', '>', ']', 'e', '6'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test941()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-14);
      ArrayUtils.removeElements(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-14);
      ArrayUtils.lastIndexOf(doubleArray0, Double.NaN);
      Byte byte0 = new Byte((byte)66);
      assertEquals((byte)66, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test942()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long long0 = new Long(1L);
      Long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, long0);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = 'c';
      charArray0[2] = 'x';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'l');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test943()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-3);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 10, (-500));
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test944()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 79, (int) (byte)10, (double) (byte)10);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test945()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('\'');
      characterArray0[0] = character0;
      Character.valueOf('\'');
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      char[] charArray1 = ArrayUtils.add(charArray0, 'n');
      assertArrayEquals(new char[] {'\'', 'n'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test946()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-44.9908);
      doubleArray0[1] = (double) (-50);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2913.922751), (-2913.922751));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test947()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      ArrayUtils.subarray((Float[]) null, 0, 0);
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean1 == boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      
      Short[] shortArray0 = new Short[3];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      shortArray0[0] = short1;
      Short short2 = new Short((short)0);
      short[] shortArray1 = new short[2];
      shortArray1[0] = (short)0;
      shortArray1[1] = short0;
      int int0 = ArrayUtils.lastIndexOf(shortArray1, short0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test948()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(1770L);
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, long0);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (long)longArray0[0];
      doubleArray0[1] = (double) 1770L;
      ArrayUtils.lastIndexOf(doubleArray0, 1.0, 701);
      ArrayUtils.lastIndexOf(doubleArray0, (-3100.32130094476), 0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) 701);
      assertArrayEquals(new double[] {1770.0, 1770.0, 701.0}, doubleArray1, 0.01);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 2190, (-1));
      assertNotNull(byteArray2);
      assertEquals(3, byteArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)0;
      shortArray0[8] = (short) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertEquals(8, int0);
  }
}
