/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:17:37 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 428.946580119;
      doubleArray0[1] = (-1149.34724812);
      doubleArray0[2] = 3.0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2, (-1149.34724812));
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {428.946580119, (-1149.34724812), 3.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {428.946580119, (-1149.34724812), (-1149.34724812), 3.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.insert(2, doubleArray1, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {428.946580119, (-1149.34724812), 3.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {428.946580119, (-1149.34724812), (-1149.34724812), 3.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {428.946580119, (-1149.34724812), 428.946580119, (-1149.34724812), (-1149.34724812), 3.0, (-1149.34724812), 3.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) 2;
      floatArray0[7] = (float) 2;
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 2;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2, 2, 2}, intArray0);
      assertArrayEquals(new float[] {2.0F, (-1.0F), 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, (-1.0F), 2.0F, 2.0F, 2.0F, 2.0F, 2.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Long[] longArray0 = new Long[7];
      int int0 = 0;
      try { 
        Long.valueOf("n*.z-", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      ArrayUtils.shift((long[]) null, (-1434));
      Long long0 = new Long((byte)6);
      assertEquals(6L, (long)long0);
      assertNotNull(long0);
      
      Short short0 = new Short((byte)6);
      assertEquals((short)6, (short)short0);
      assertNotNull(short0);
      
      String string0 = ArrayUtils.toString((Object) short0);
      assertEquals("6", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(booleanArray0, 32);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 32;
      intArray0[1] = (int) (byte)6;
      intArray0[2] = 32;
      intArray0[3] = 4422;
      intArray0[4] = (int) (byte)6;
      intArray0[5] = (-41);
      ArrayUtils.swap(intArray0, (-1434), (-3582), 2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {32, 6, 32, 4422, 6, (-41)}, intArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short)6, object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (-1224));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray2 = ArrayUtils.remove(booleanArray1, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(7, booleanArray2.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-753L), 10);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)3883;
      shortArray0[2] = (short) (-2340);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)7;
      shortArray0[5] = (short)1736;
      shortArray0[6] = (short)1;
      shortArray0[7] = (short) (-1883);
      shortArray0[8] = (short)15;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (-1943));
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)3883, (short) (-2340), (short)2, (short)7, (short)1736, (short)1, (short) (-1883), (short)15}, shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)42;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-4), (byte)68, (byte)42}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      ArrayUtils.reverse(byteArray0, 1517, 55);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-42), (byte)0}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte)0, (int) (byte) (-42));
      assertEquals(0, int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-5133));
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Long long0 = new Long(1517);
      assertEquals(1517L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte) (-42));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1517L}, longArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-42);
      shortArray0[1] = (short) (byte) (-42);
      shortArray0[2] = (short) (byte)3;
      shortArray0[3] = (short) (byte) (-42);
      shortArray0[4] = (short) (byte)3;
      shortArray0[5] = (short) (byte) (-42);
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-42), (int) (short) (-42));
      assertEquals(0, int1);
      assertEquals(6, shortArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short) (-42), (short) (-42), (short)3, (short) (-42), (short)3, (short) (-42)}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-42), (int) (short)3);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-42), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short)0;
      byte[] byteArray0 = new byte[5];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isEquals((short) (-1), (short)0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2288), 0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2288);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1411.843;
      doubleArray0[3] = (double) (short)0;
      int int1 = ArrayUtils.indexOf(doubleArray0, 1411.843, 2);
      assertEquals(2, int1);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-2288.0), 0.0, 1411.843, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-47);
      shortArray0[1] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[3] = (short)0;
      shortArray0[6] = (short) (-1);
      ArrayUtils.swap(shortArray0, (int) (short)0, 10, (int) (short) (-1));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-47), (short) (-1), (short)0, (short)0, (short) (-1), (short)0, (short) (-1), (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)67;
      byteArray1[3] = (byte)0;
      byte[] byteArray2 = ArrayUtils.insert((int) (short)0, byteArray0, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)0, (byte)0}, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-47);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-47.0F), (-47.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-47.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '<';
      charArray0[2] = 'Q';
      charArray0[3] = 'o';
      charArray0[4] = '}';
      charArray0[5] = '*';
      charArray0[6] = 'd';
      charArray0[7] = 'B';
      charArray0[8] = 'q';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o');
      assertEquals(3, int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'J', '<', 'Q', 'o', '}', '*', 'd', 'B', 'q'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      short[] shortArray0 = new short[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '9');
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertArrayEquals(new char[] {'D'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = new char[6];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'D';
      charArray2[1] = 'F';
      charArray2[2] = '9';
      charArray2[3] = 'D';
      charArray2[4] = 'D';
      charArray2[5] = 'D';
      char[] charArray3 = ArrayUtils.insert((int) (short)0, charArray2, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(6, charArray2.length);
      assertEquals(7, charArray3.length);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertNotNull(charArray3);
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertArrayEquals(new char[] {'D', 'F', '9', 'D', 'D', 'D'}, charArray2);
      assertArrayEquals(new char[] {'D', 'D', 'F', '9', 'D', 'D', 'D'}, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      long[] longArray0 = new long[5];
      ArrayUtils.shift(longArray0, 512, 1034, 0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)74);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 512);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)74;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) byte0;
      shortArray0[6] = (short) byte0;
      shortArray0[7] = (short) (byte)74;
      shortArray0[8] = (short) byte0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (-3141));
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)74, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)74, (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[2] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-1), (-3043), (-3043));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)713);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3043);
      intArray0[1] = (int) (short)713;
      intArray0[2] = 7;
      ArrayUtils.shift(intArray0, (-1));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {713, 7, (-3043)}, intArray0);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y*jM";
      stringArray0[1] = "H";
      stringArray0[2] = "H";
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-294.0658708627);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-860.9012496);
      doubleArray0[3] = 100.0;
      doubleArray0[4] = 2255.8235;
      doubleArray0[5] = (-184.8023959142);
      doubleArray0[6] = (-1158.7163664);
      int int0 = ArrayUtils.indexOf(doubleArray0, 7.973397519526512, Double.NaN);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-294.0658708627), (-1.0), (-860.9012496), 100.0, 2255.8235, (-184.8023959142), (-1158.7163664)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = ',';
      charArray0[2] = '+';
      charArray0[3] = '5';
      ArrayUtils.shift(charArray0, 2, 2, (-1));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'y', ',', '+', '5'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      short[] shortArray0 = new short[5];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)2;
      shortArray0[4] = (short) (byte)51;
      byteArray0[3] = (byte) (-47);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-594));
      assertFalse(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)51}, shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-3409.164F);
      floatArray0[1] = (-3409.164F);
      floatArray0[2] = (-3409.164F);
      floatArray0[3] = (-3409.164F);
      floatArray0[4] = 4341.0F;
      floatArray0[5] = (-3409.164F);
      int int0 = ArrayUtils.indexOf(floatArray0, 2180.4F, (-611));
      assertEquals((-1), int0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-3409.164F), (-3409.164F), (-3409.164F), (-3409.164F), 4341.0F, (-3409.164F)}, floatArray0, 0.01F);
      
      int[] intArray0 = null;
      int int1 = 117;
      ArrayUtils.shift((int[]) null, (-2), 117, (-1));
      Object[] objectArray0 = new Object[6];
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(16, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Object[] objectArray0 = new Object[7];
      Integer integer0 = new Integer((-2306));
      assertEquals((-2306), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-427), (Object) integer0);
      assertEquals((-2306), object0);
      assertEquals(7, objectArray0.length);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals((-2306), object1);
      assertEquals(7, objectArray0.length);
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-2306), object2);
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = ArrayUtils.get((Object[]) integerArray1, 6);
      assertEquals(8, integerArray0.length);
      assertEquals(16, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNull(object3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      objectArray0[3] = null;
      Object object4 = ArrayUtils.get((Object[]) integerArray1, 6);
      assertEquals(8, integerArray0.length);
      assertEquals(16, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNull(object4);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      objectArray0[4] = null;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)849;
      shortArray0[1] = (short) (-248);
      shortArray0[2] = (short) (-3049);
      shortArray0[3] = (short) (-868);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-248), (-2146674801));
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(4, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)849, (short) (-248), (short) (-3049), (short) (-868)}, shortArray0);
      
      Object object5 = ArrayUtils.removeAll(object3, bitSet0);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(8, integerArray0.length);
      assertEquals(16, integerArray1.length);
      assertEquals(4, shortArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNull(object5);
      assertArrayEquals(new short[] {(short)849, (short) (-248), (short) (-3049), (short) (-868)}, shortArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      objectArray0[5] = null;
      Object object6 = new Object();
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, objectArray0);
      assertFalse(boolean0);
      assertEquals(8, integerArray0.length);
      assertEquals(7, objectArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)0;
      double[] doubleArray0 = new double[35];
      doubleArray0[0] = (double) (short)0;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[0];
      Double double0 = new Double((short)2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) double0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, objectArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, (double) (-1));
      assertFalse(boolean0);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = ';';
      charArray0[2] = '4';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'l', ';', '4', 'l', ';', '4'}, charArray1);
      assertArrayEquals(new char[] {'l', ';', '4'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      ArrayUtils.swap((boolean[]) null, (-2146298371), (-2146298371));
      ArrayUtils.swap((byte[]) null, 9, 83, (-1474));
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'Z';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'Z'}, charArray0);
      
      Integer integer0 = new Integer('f');
      assertEquals(102, (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float(29.0F);
      assertEquals(29.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(float0, "");
      assertNotNull(abstractMap_SimpleEntry0);
      
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) 'f';
      doubleArray0[1] = (double) 'F';
      doubleArray0[3] = (double) 'f';
      doubleArray0[5] = (double) 'f';
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-2859), (-2859));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) characterArray0, (-2859), (-2859), 5);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'Z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      long[] longArray0 = new long[5];
      longArray0[0] = 54L;
      longArray0[1] = 54L;
      longArray0[2] = 54L;
      longArray0[3] = (-35L);
      longArray0[4] = (-876L);
      int int0 = ArrayUtils.indexOf(longArray0, 95L);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {54L, 54L, 54L, (-35L), (-876L)}, longArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-593);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 3211);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, (-1), (-1), (-1), (-593)}, intArray1);
      assertArrayEquals(new int[] {1, (-1), (-1), (-1), (-593)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Double[] doubleArray2 = ArrayUtils.insert(4, (Double[]) null, (Double[]) null);
      assertNull(doubleArray2);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 3547, 3547, 3547);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Long[] longArray0 = new Long[2];
      Long long0 = Long.valueOf((-2367L));
      assertEquals((-2367L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(3547);
      assertEquals(3547L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-2147483648L));
      assertEquals((-2147483648L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      Long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, long2);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      long[] longArray2 = new long[8];
      longArray2[0] = (long) (-1);
      longArray2[1] = 413L;
      longArray2[2] = 1L;
      longArray2[3] = (-2146563560L);
      longArray2[4] = (long) 3547;
      longArray2[5] = 1L;
      longArray2[6] = (long) (byte)41;
      longArray2[7] = (-2147483648L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray2, (-3343L), 2054);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(8, longArray2.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-1L), 413L, 1L, (-2146563560L), 3547L, 1L, 41L, (-2147483648L)}, longArray2);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      ArrayUtils.swap((Object[]) longArray1, (-1), 3547, 0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      Short short0 = new Short((short) (-23));
      assertEquals((short) (-23), (short)short0);
      assertNotNull(short0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) short0;
      objectArray0[1] = (Object) short0;
      objectArray0[2] = (Object) short0;
      objectArray0[3] = (Object) short0;
      objectArray0[4] = (Object) short0;
      objectArray0[5] = (Object) short0;
      objectArray0[6] = (Object) short0;
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(7, objectArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-23);
      shortArray0[1] = (short) (-23);
      shortArray0[2] = (short) (-23);
      shortArray0[3] = (short) (-23);
      shortArray0[4] = (short) (-23);
      shortArray0[5] = (short) (-23);
      shortArray0[6] = (short) (-23);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-23));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertEquals(7, bitSet0.cardinality());
      assertEquals(7, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-23), (short) (-23), (short) (-23), (short) (-23), (short) (-23), (short) (-23), (short) (-23)}, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-23);
      longArray0[1] = (-1L);
      longArray0[2] = (long) (short) (-23);
      int int0 = ArrayUtils.indexOf(longArray0, (long) (short) (-23), 0);
      assertEquals(0, int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-23L), (-1L), (-23L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'n', 32);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 3804;
      intArray0[6] = (int) 'n';
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-2146111452), (-1));
      assertEquals((-1), int1);
      assertEquals(7, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), 3804, 110}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1160.5233F;
      Character character0 = new Character('3');
      assertEquals('3', (char)character0);
      assertNotNull(character0);
      
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1160.5233F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1160.5233F, 1160.5233F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-4279L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-4279L)}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-4279L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.swap(longArray0, (-522), 4, 2231);
      assertEquals(1, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-4279L)}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1160.5233F;
      doubleArray0[1] = (double) (-4279L);
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-522), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -522, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1517.478197799237);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-1));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-2142569572));
      assertEquals((-2142569572), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-2142569572));
      assertEquals((-2142569572), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(3, integerArray1.length);
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (int)integerArray0[0];
      floatArray0[1] = (float) (-1);
      floatArray0[2] = 336.78F;
      floatArray0[3] = (float) (int)integerArray0[0];
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) integerArray0[0]);
      assertTrue(boolean1);
      assertEquals(4, floatArray0.length);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 336.78F, (-1.0F)}, floatArray0, 0.01F);
      assertSame(integerArray0, integerArray1);
      
      long[] longArray0 = new long[0];
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean2);
      assertEquals(0, longArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new long[] {}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2125344641), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2125344641, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals(0, int0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[2] = (short)0;
      shortArray0[4] = (short)0;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 78, 2623, (int) (short)0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      ArrayUtils.swap(floatArray0, (int) (short)0, 1, 2);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      ArrayUtils.shift(byteArray0, (-1388), 1, 2623);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Byte byte0 = new Byte((byte)65);
      assertEquals((byte)65, (byte)byte0);
      assertNotNull(byte0);
      
      MutableInt mutableInt1 = new MutableInt(736);
      assertEquals(736L, mutableInt1.longValue());
      assertEquals(736.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)736, mutableInt1.shortValue());
      assertEquals(736, mutableInt1.intValue());
      assertEquals(736, (int)mutableInt1.toInteger());
      assertEquals(736, (int)mutableInt1.getValue());
      assertEquals(736.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("736", mutableInt1.toString());
      assertEquals((byte) (-32), mutableInt1.byteValue());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      int int1 = ArrayUtils.hashCode((Object) mutableInt1);
      assertEquals(736L, mutableInt1.longValue());
      assertEquals(736.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)736, mutableInt1.shortValue());
      assertEquals(736, mutableInt1.intValue());
      assertEquals(736, (int)mutableInt1.toInteger());
      assertEquals(736, (int)mutableInt1.getValue());
      assertEquals(736.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("736", mutableInt1.toString());
      assertEquals((byte) (-32), mutableInt1.byteValue());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(int1 == int0);
      assertNotSame(mutableInt1, mutableInt0);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      Short short0 = new Short((short)108);
      assertEquals((short)108, (short)short0);
      assertNotNull(short0);
      
      MutableInt mutableInt0 = new MutableInt(2262);
      assertEquals(2262L, mutableInt0.longValue());
      assertEquals("2262", mutableInt0.toString());
      assertEquals(2262.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2262.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2262, (int)mutableInt0.getValue());
      assertEquals(2262, (int)mutableInt0.toInteger());
      assertEquals((byte) (-42), mutableInt0.byteValue());
      assertEquals((short)2262, mutableInt0.shortValue());
      assertEquals(2262, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      boolean boolean0 = ArrayUtils.isSameType(short0, mutableInt0);
      assertFalse(boolean0);
      assertEquals(2262L, mutableInt0.longValue());
      assertEquals("2262", mutableInt0.toString());
      assertEquals(2262.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2262.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2262, (int)mutableInt0.getValue());
      assertEquals(2262, (int)mutableInt0.toInteger());
      assertEquals((byte) (-42), mutableInt0.byteValue());
      assertEquals((short)2262, mutableInt0.shortValue());
      assertEquals(2262, mutableInt0.intValue());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2262;
      doubleArray0[1] = 1461.76491673483;
      doubleArray0[2] = (double) 'v';
      doubleArray0[3] = (double) (short)108;
      doubleArray0[4] = (double) 'v';
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2262.0, 1461.76491673483, 118.0, 108.0, 118.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2262.0, 1461.76491673483, 118.0, 108.0, 118.0, 2262.0, 1461.76491673483, 118.0, 108.0, 118.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)108;
      longArray0[1] = (long) 'v';
      longArray0[2] = 118L;
      longArray0[3] = (long) 'v';
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)108, 112);
      assertEquals(0, int0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {108L, 118L, 118L, 118L}, longArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)112);
      assertNull(byteArray0);
      
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-1));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = (int) 'v';
      intArray0[3] = 1;
      intArray0[4] = (int) (byte) (-1);
      intArray0[5] = (int) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (int) (short)108);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 108, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      ArrayUtils.swap((short[]) null, 2, (-718));
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) (-718);
      floatArray0[3] = (float) 2;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, (-718));
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F, 2.0F, (-718.0F), 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)76, (-2498));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet1 = BitSet.valueOf(longArray0);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, longArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotSame(bitSet1, bitSet0);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {2.0F, 2.0F, (-718.0F), 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, 2.0F, (-718.0F), 2.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertSame(floatArray2, floatArray0);
      
      String string0 = ArrayUtils.toString((Object) bitSet0, ">");
      assertEquals("{}", string0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertNotNull(string0);
      assertNotSame(bitSet0, bitSet1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)52;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(532, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 532, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      int[] intArray0 = new int[0];
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y*jM";
      stringArray0[1] = "H";
      stringArray0[2] = "H";
      float[] floatArray0 = new float[9];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      Long[] longArray3 = new Long[0];
      long[] longArray4 = ArrayUtils.toPrimitive(longArray3, 4088L);
      assertEquals(0, longArray3.length);
      assertEquals(0, longArray4.length);
      assertFalse(longArray4.equals((Object)longArray0));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertNotNull(longArray4);
      assertArrayEquals(new long[] {}, longArray4);
      assertNotSame(longArray4, longArray0);
      assertNotSame(longArray4, longArray1);
      assertNotSame(longArray4, longArray2);
      
      Class<Long[]> class0 = Long[].class;
      Long[] longArray5 = ArrayUtils.nullToEmpty(longArray3, class0);
      assertEquals(0, longArray5.length);
      assertEquals(0, longArray3.length);
      assertNotNull(longArray5);
      assertSame(longArray5, longArray3);
      assertSame(longArray3, longArray5);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      char[] charArray0 = new char[1];
      long[] longArray0 = new long[7];
      longArray0[0] = 1971L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[4] = (float) 1971L;
      floatArray0[5] = (float) 1971L;
      floatArray0[6] = (float) '(';
      floatArray0[7] = (float) '\u0000';
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 511;
      longArray1[1] = (long) (-1);
      longArray1[2] = 1971L;
      longArray1[3] = 1971L;
      longArray1[4] = (long) (-1);
      ArrayUtils.shift(longArray1, (-1), (-610), (-1));
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {511L, (-1L), 1971L, 1971L, (-1L)}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Double double0 = new Double(1971L);
      assertEquals(1971.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      String string0 = ArrayUtils.toString((Object) double0, "Lz$><C8uY");
      assertEquals("1971.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      int[] intArray0 = new int[3];
      intArray0[0] = (-3043);
      intArray0[2] = 7;
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      long[] longArray0 = new long[5];
      ArrayUtils.shift(longArray0, 512, 1034, 0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = '?';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\'', '?'}, charArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      ArrayUtils.shift((long[]) null, (-1434));
      Long long0 = new Long((byte)6);
      assertEquals(6L, (long)long0);
      assertNotNull(long0);
      
      Short short0 = new Short((byte)6);
      assertEquals((short)6, (short)short0);
      assertNotNull(short0);
      
      String string0 = ArrayUtils.toString((Object) short0);
      assertEquals("6", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(booleanArray0, 32);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      int[] intArray0 = new int[6];
      intArray0[1] = (int) (byte)6;
      intArray0[2] = 32;
      intArray0[3] = 4422;
      intArray0[4] = (int) (byte)6;
      intArray0[5] = (-41);
      ArrayUtils.swap(intArray0, (-1434), Integer.MAX_VALUE, 2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 6, 32, 4422, 6, (-41)}, intArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short)6, object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean[] booleanArray2 = new boolean[0];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) map0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      int[] intArray0 = new int[0];
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y*jM";
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-683));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals(0, int0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[2] = (short)0;
      shortArray0[4] = (short)0;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 78, 2623, (int) (short)0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      ArrayUtils.swap(floatArray0, (int) (short)0, 1, 2);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Byte byte0 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertEquals("-4", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 78, 1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 1120.71503300268);
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (float) 2623);
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2623.0F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      Float[] floatArray2 = new Float[1];
      floatArray2[0] = (Float) 1.0F;
      Float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray2);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray3.length);
      assertNotNull(floatArray3);
      assertSame(floatArray2, floatArray3);
      assertSame(floatArray3, floatArray2);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(910);
      assertEquals(910, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1821);
      assertEquals(1821, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertEquals(1821, (int)integer2);
      assertEquals(4, integerArray0.length);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(910);
      assertEquals(910, (int)integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {910, 1821, 1821, 910}, intArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer3);
      assertEquals(910L, mutableInt0.longValue());
      assertEquals(910.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(910, mutableInt0.intValue());
      assertEquals(910.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)910, mutableInt0.shortValue());
      assertEquals(910, (int)mutableInt0.toInteger());
      assertEquals(910, (int)mutableInt0.getValue());
      assertEquals((byte) (-114), mutableInt0.byteValue());
      assertEquals("910", mutableInt0.toString());
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((Number) integer1);
      assertEquals("1821", mutableInt1.toString());
      assertEquals(1821, mutableInt1.intValue());
      assertEquals(1821, (int)mutableInt1.getValue());
      assertEquals(1821, (int)mutableInt1.toInteger());
      assertEquals((byte)29, mutableInt1.byteValue());
      assertEquals(1821.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)1821, mutableInt1.shortValue());
      assertEquals(1821L, mutableInt1.longValue());
      assertEquals(1821.0, mutableInt1.doubleValue(), 0.01);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(mutableInt1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-107);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-65), (int) integerArray0[2]);
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new byte[] {(byte)68, (byte) (-86), (byte)30, (byte) (-107)}, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (int)integerArray0[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.1, 910, (-1056.0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {910.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = 'H';
      charArray0[2] = 'L';
      charArray0[3] = '<';
      charArray0[4] = '?';
      charArray0[5] = '!';
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'o';
      charArray1[1] = 'H';
      charArray1[2] = '!';
      charArray1[3] = 'L';
      charArray1[4] = '?';
      charArray1[5] = '<';
      charArray1[6] = '<';
      charArray1[7] = 'o';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean0);
      assertEquals(8, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'o', 'H', '!', 'L', '?', '<', '<', 'o'}, charArray1);
      assertArrayEquals(new char[] {'o', 'H', 'L', '<', '?', '!'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-185);
      intArray0[2] = 3;
      intArray0[3] = 79;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 59;
      intArray0[6] = 4488;
      intArray0[7] = (-4865);
      intArray0[8] = 1396;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, (-185), 3, 79, Integer.MAX_VALUE, 59, 4488, (-4865), 1396}, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-4865);
      floatArray0[1] = (-2590.0F);
      floatArray0[2] = (float) (-4865);
      floatArray0[3] = 28.83768F;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 59;
      floatArray0[6] = 102.0F;
      floatArray0[7] = (float) 59;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1354.0F, 520);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(8, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-4865.0F), (-2590.0F), (-4865.0F), 28.83768F, 0.0F, 59.0F, 102.0F, 59.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)45;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)45;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)27334;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)27334}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 16, 786);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'n', 'n', 'n'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)44;
      byteArray1[1] = (byte)108;
      byteArray1[2] = (byte)108;
      byteArray1[3] = (byte)44;
      byteArray1[4] = (byte)47;
      byteArray1[5] = (byte)108;
      byteArray1[6] = (byte)44;
      byteArray1[7] = (byte)45;
      byteArray1[8] = (byte)47;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean1);
      assertEquals(7, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)44, (byte)108, (byte)108, (byte)44, (byte)47, (byte)108, (byte)44, (byte)45, (byte)47}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(910);
      assertEquals(910, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1821);
      assertEquals(1821, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertEquals(1821, (int)integer2);
      assertEquals(4, integerArray0.length);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[0] = integer2;
      Integer integer3 = new Integer(910);
      assertEquals(910, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      char[] charArray0 = new char[4];
      charArray0[1] = '/';
      charArray0[2] = 'n';
      Integer integer0 = new Integer((short)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1), 0, (-1), 0}, intArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integerArray0[1]);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(4, integerArray0.length);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((Number) int0);
      assertEquals((-1L), mutableInt1.longValue());
      assertEquals((-1), mutableInt1.intValue());
      assertEquals("-1", mutableInt1.toString());
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      Short[] shortArray0 = new Short[8];
      short short0 = (short)79;
      Short short1 = new Short((short)79);
      assertEquals((short)79, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)110);
      assertEquals((short)110, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)110);
      assertEquals((short)110, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertNotNull(short3);
      
      Short short4 = new Short((short)9);
      assertEquals((short)9, (short)short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'b';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'V', (int) short0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(2, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'V', 'b'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'V', 'b'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-87);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-87);
      shortArray0[1] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, 102);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-87), (short)0}, shortArray0);
      
      ArrayUtils.swap(booleanArray0, (-2145718405), (int) (short) (-87), (-1));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 99);
      assertEquals(1, int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-87), (short)0}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-84), (double) 1);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-87), (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-87), (short)0}, shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-87));
      assertEquals(3, bitSet1.length());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(7, byteArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-87), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bitSet1, bitSet0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      long[] longArray0 = new long[4];
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 0L;
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertSame(doubleArray0, doubleArray2);
      assertSame(doubleArray2, doubleArray0);
      
      Float[] floatArray0 = new Float[10];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (short)0);
      assertEquals(10, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 0);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.swap(intArray0, 0, 0, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)16;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-82));
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte) (-93), (byte)102, (byte)16}, byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte) (-93), (byte)102, (byte)16}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'S');
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'v'}, charArray0);
      
      ArrayUtils.reverse((long[]) null, 6, 90);
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '+';
      charArray1[1] = 'v';
      charArray1[2] = 'v';
      boolean boolean1 = ArrayUtils.isEmpty(charArray1);
      assertFalse(boolean1);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'+', 'v', 'v'}, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Class<Object> class0 = Object.class;
      Class<Float> class1 = Float.class;
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'v';
      intArray0[1] = (-193);
      intArray0[3] = (int) '7';
      intArray0[4] = (int) '+';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2, 0);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {118, (-193), 0, 55, 43}, intArray0);
      
      boolean boolean2 = ArrayUtils.isEquals(class0, class1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)10;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)10;
      doubleArray0[1] = (double) (short)1779;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)10, (int) (short)1779);
      assertEquals(0, int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {10.0, 1779.0, 0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)10;
      objectArray0[1] = (Object) 1779.0;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) 1779.0;
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) long0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)10;
      longArray0[1] = (long) (short)1779;
      longArray0[2] = (long) (short)10;
      longArray0[3] = (long) (short)1779;
      longArray0[4] = (long) (short)1779;
      longArray0[5] = (long) (short)10;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 1864L);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(6, longArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {10L, 1779L, 10L, 1779L, 1779L, 10L}, longArray0);
      assertNotSame(bitSet1, bitSet0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, 2);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 301;
      intArray0[1] = 101;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 101);
      assertEquals(1, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {301, 101}, intArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte)67, (byte) (-57));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 67, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-47);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-47);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-47.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-47.0), (-47.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = (-1333L);
      longArray0[2] = (long) (short) (-47);
      longArray0[3] = (-1333L);
      longArray0[4] = (long) (short) (-1);
      longArray0[4] = (long) 2;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short) (-1), 1);
      assertEquals((-1), int0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1L, (-1333L), (-47L), (-1333L), 2L, 0L, 0L}, longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-536);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf("NUIS50h");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("NUIS50h");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("Object varargs must not be null");
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("7mow>V\"N1S");
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean("NUIS50h");
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf("NUIS50h");
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = new Boolean((boolean) boolean0);
      assertFalse(boolean7);
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean5));
      assertNotNull(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-533);
      doubleArray0[1] = (double) (-533);
      doubleArray0[2] = 3416.929647883;
      boolean boolean8 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean8);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-533.0), (-533.0), 3416.929647883}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 2794.708671;
      doubleArray0[2] = (double) 0;
      ArrayUtils.swap(doubleArray0, (-1027), 0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2794.708671, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1612;
      shortArray0[1] = (short)1612;
      shortArray0[2] = (short)1612;
      shortArray0[3] = (short)1612;
      shortArray0[4] = (short)1612;
      shortArray0[5] = (short)1612;
      shortArray0[6] = (short)1612;
      shortArray0[7] = (short)1612;
      shortArray0[8] = (short)1612;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertEquals(10, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1612, (short)1612, (short)1612, (short)1612, (short)1612, (short)1612, (short)1612, (short)1612, (short)1612, (short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short)1612, (short)1612, (short)1612, (short)1612, (short)1612, (short)1612, (short)1612, (short)1612, (short)1612}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)1612;
      floatArray0[1] = (float) (short)1612;
      floatArray0[2] = (float) (short)1612;
      floatArray0[3] = 97.0F;
      floatArray0[4] = (float) (-1027);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 46);
      assertEquals((-1), int0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1612.0F, 1612.0F, 1612.0F, 97.0F, (-1027.0F)}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, 0, (-198));
      assertEquals((-1), int1);
      assertEquals(6, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      int int2 = ArrayUtils.lastIndexOf(intArray0, 665, (-30));
      assertEquals((-1), int2);
      assertEquals(6, intArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)45;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)45;
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      String string0 = ArrayUtils.toString((Object) boolean1);
      assertEquals("true", string0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "true";
      objectArray0[1] = (Object) 45L;
      objectArray0[2] = (Object) "true";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      longArray0[2] = (long) '}';
      int int0 = ArrayUtils.indexOf(charArray0, '/', 15);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '}', '}', '\u0000'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte)45);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 125L;
      floatArray0[1] = (float) '}';
      floatArray0[2] = (float) 125L;
      floatArray0[3] = (float) 125L;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (byte)45);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {125.0F, 125.0F, 125.0F, 125.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {125.0F, 125.0F, 125.0F, 125.0F, 45.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 3547, 3547, 3547);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Long[] longArray0 = new Long[2];
      Long long0 = Long.valueOf((-2367L));
      assertEquals((-2367L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(3547);
      assertEquals(3547L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-2147483648L));
      assertEquals((-2147483648L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      Long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, long2);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)34;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)34}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)34, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)34, (-1675), 90.0);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((byte) (-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertEquals(1, integerArray1.length);
      assertEquals(0, integerArray0.length);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      Integer integer1 = new Integer((byte)0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray1, (Object) integer1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(bitSet0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 3548, 3548, 3548);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Long[] longArray0 = new Long[2];
      Long long0 = Long.valueOf((-2367L));
      assertEquals((-2367L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(3548);
      assertEquals(3548L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-2147483648L));
      assertEquals((-2147483648L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      Long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, long2);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)34;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-1));
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte) (-1), (byte) (-1), (byte)34}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte) (-1), (byte) (-1), (byte)34, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)34, (-1675), 90.0);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-2146387993));
      assertEquals((-2146387993), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Integer integer1 = new Integer((-2146387993));
      assertEquals((-2146387993), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray1, (Object) integer1);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(bitSet0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "&zZMHdV@");
      assertNull(stringArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)1;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-84);
      ArrayUtils.swap(byteArray0, 2, (int) (byte)0, 120);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)18, (byte)0}, byteArray0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = Long.valueOf((long) (byte) (-84));
      assertEquals((-84L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = Long.getLong("&zZMHdV@", long0);
      assertEquals((-84L), (long)long1);
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(91L);
      assertEquals(91L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) long0);
      assertEquals((-84L), (long)long3);
      assertFalse(long0.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(2147483647L);
      assertEquals(2147483647L, (long)long4);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      longArray0[5] = long3;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.swap((Object[]) null, (int) (byte)0, (int) (byte) (-84));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (long)long0;
      doubleArray0[2] = (double) (long)long0;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) (long)long0;
      doubleArray0[5] = (double) (long)long0;
      doubleArray0[5] = (double) (long)long0;
      doubleArray0[7] = (double) (long)long0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-84.0), (-84.0), 1.0, (-84.0), (-84.0), 0.0, (-84.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "&zZMHdV@");
      assertNull(stringArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-37);
      ArrayUtils.swap(byteArray0, 2, (int) (byte)1, 120);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-37), (byte)18}, byteArray0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = Long.valueOf((long) (byte) (-37));
      assertEquals((-37L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((byte) (-37));
      assertEquals((-37L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = Long.getLong("&zZMHdV@", long1);
      assertEquals((-37L), (long)long2);
      assertTrue(long1.equals((Object)long0));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(91L);
      assertEquals(91L, (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      
      longArray0[2] = long3;
      Long long4 = new Long((long) long0);
      assertEquals((-37L), (long)long4);
      assertTrue(long0.equals((Object)long2));
      assertFalse(long0.equals((Object)long3));
      assertTrue(long0.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long2));
      assertNotNull(long4);
      
      longArray0[3] = long4;
      Long long5 = new Long(2147483647L);
      assertEquals(2147483647L, (long)long5);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long3));
      assertNotNull(long5);
      
      longArray0[4] = long5;
      Long long6 = new Long(2857L);
      assertEquals(2857L, (long)long6);
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long1));
      assertNotNull(long6);
      
      longArray0[5] = long6;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      ArrayUtils.swap((Object[]) null, (int) (byte)1, (int) (byte) (-37));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (long)long0;
      doubleArray0[2] = (double) (long)long0;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) (long)long0;
      doubleArray0[5] = (double) (long)long0;
      doubleArray0[6] = (double) (long)long0;
      doubleArray0[7] = (double) (long)longArray0[5];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-37.0), (-37.0), 1.0, (-37.0), (-37.0), (-37.0), 2857.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-1), (-3043), (-3043));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)713);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3043);
      intArray0[1] = (int) (short)713;
      intArray0[2] = 7;
      ArrayUtils.shift(intArray0, (-1));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {713, 7, (-3043)}, intArray0);
      
      short[] shortArray1 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) (-3043);
      doubleArray0[2] = (double) (short)713;
      doubleArray0[3] = (double) (short)713;
      doubleArray0[4] = (double) (-3043);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-3043);
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (-1774.0);
      ArrayUtils.swap(doubleArray0, 713, (-3737), 713);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {7.0, (-3043.0), 713.0, 713.0, (-3043.0), (-1.0), (-3043.0), (-1.0), (-1774.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-533);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2068.8649141023784);
      doubleArray0[1] = (-839.703457);
      doubleArray0[2] = 0.0;
      doubleArray0[4] = (double) (-533);
      doubleArray0[5] = 1.0;
      char[] charArray0 = new char[9];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '}';
      charArray0[6] = '}';
      charArray0[7] = '}';
      charArray0[8] = '}';
      int int0 = ArrayUtils.indexOf(charArray0, '}', (-533));
      assertEquals(0, int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'}', '}', '}', '}', '}', '}', '}', '}', '}'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)116;
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.insert(2423, byteArray0, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(7, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-23), (byte) (-124), (byte)17, (byte) (-34), (byte)11, (byte)116}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-23), (byte) (-124), (byte)17, (byte) (-34), (byte)11, (byte)116}, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-533);
      ArrayUtils.shift(intArray0, 11);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, (-533), 0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-533);
      floatArray0[1] = (float) (-533);
      floatArray0[2] = (float) (-533);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-533.0F), (-533.0F), (-533.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-533.0F), (-533.0F), (-533.0F)}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'W';
      charArray0[2] = 's';
      charArray0[3] = '9';
      charArray0[4] = 'L';
      charArray0[5] = '8';
      charArray0[6] = 'G';
      charArray0[7] = '_';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'m', 'W', 's', '9', 'L', '8', 'G', '_'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)0;
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = (double) (short)0;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[0];
      Double double0 = new Double((short)2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) double0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(0, objectArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(19, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = '4';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'l', 'l', '4'}, charArray0);
      assertArrayEquals(new char[] {'l', 'l', '4', 'l', 'l', '4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray1 = new short[7];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)0;
      shortArray1[1] = (short)2;
      shortArray1[2] = (short)2;
      shortArray1[3] = (short)2;
      shortArray1[4] = (short)2;
      shortArray1[5] = (short)0;
      shortArray1[6] = (short)0;
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray2.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)2, (short)2, (short)2, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-573);
      shortArray0[1] = (short) (-2590);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)787;
      shortArray0[5] = (short) (-243);
      shortArray0[6] = (short)787;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-573), (short) (-2590), (short)2, (short)0, (short)787, (short) (-243), (short)787}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (float) (short)787;
      floatArray0[2] = (float) (short) (-2590);
      floatArray0[3] = 51.0F;
      floatArray0[4] = (float) (short)2;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-3409.164F));
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F, 787.0F, (-2590.0F), 51.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, 787.0F, (-2590.0F), 51.0F, 2.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(shortArray2, (short) (-243), 711);
      assertEquals((-1), int0);
      assertEquals(1, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false}, booleanArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1014;
      intArray0[1] = 771;
      intArray0[2] = 120;
      intArray0[3] = 20;
      intArray0[4] = 1810;
      intArray0[5] = 70;
      int int0 = ArrayUtils.indexOf(intArray0, 712);
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1014, 771, 120, 20, 1810, 70}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 4;
      floatArray0[1] = 74.0F;
      ArrayUtils.shift(floatArray0, 2140730554, (int) (byte) (-87), 37);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {4.0F, 74.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-3293.1074086328704), (-2406.6570084387445));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {3.0, 0.0}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[6];
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 3.0;
      Double double0 = new Double((-1501.13567184));
      assertEquals((-1501.13567184), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[3] = double0;
      doubleArray1[4] = (Double) 0.0;
      Double double1 = new Double(191.31113);
      assertEquals(191.31113, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray1[5] = double1;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals(0, int0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[7];
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 78, 2623, (int) (short)0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      ArrayUtils.swap(floatArray0, (int) (short)0, 1, 2);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      Byte byte0 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertEquals("-4", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 78, 1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (float) 2623);
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2623.0F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      Float[] floatArray2 = new Float[1];
      floatArray2[0] = (Float) 1.0F;
      Float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray2);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray3.length);
      assertNotNull(floatArray3);
      assertSame(floatArray2, floatArray3);
      assertSame(floatArray3, floatArray2);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-47);
      shortArray0[1] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[3] = (short)0;
      shortArray0[6] = (short) (-1);
      ArrayUtils.swap(shortArray0, (int) (short)0, 10, (int) (short) (-1));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-47), (short) (-1), (short)0, (short)0, (short) (-1), (short)0, (short) (-1), (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)67;
      byteArray1[3] = (byte)0;
      byte[] byteArray2 = ArrayUtils.insert((int) (short)0, byteArray0, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)0, (byte)0}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-47);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-47.0F), (-47.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-47.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      int[] intArray0 = new int[0];
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y*jM";
      stringArray0[2] = "H";
      float[] floatArray0 = new float[9];
      floatArray0[2] = Float.NaN;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      booleanArray0[3] = false;
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(34.0);
      assertEquals(34.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(Float.NaN);
      assertEquals(Double.NaN, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-3409.1640625));
      assertEquals((-3409.1640625), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1226.0);
      assertEquals(1226.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1226.0);
      assertEquals(1226.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(130.1445358);
      assertEquals(130.1445358, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-3409.1640625));
      assertEquals((-3409.1640625), (double)double6, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1185.247278));
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {34.0, Double.NaN, (-3409.1640625), 1226.0, 1226.0, 130.1445358, (-3409.1640625)}, doubleArray1, 0.01);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      int[] intArray0 = new int[0];
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y*jM";
      stringArray0[1] = "Y*jM";
      stringArray0[2] = "Y*jM";
      float[] floatArray0 = new float[9];
      floatArray0[2] = Float.NaN;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      booleanArray0[3] = false;
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = 'g';
      char[] charArray1 = ArrayUtils.remove(charArray0, 1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'#', 'g'}, charArray0);
      assertArrayEquals(new char[] {'#'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[4] = (float) 1971L;
      floatArray0[5] = (float) 1971L;
      floatArray0[6] = (float) '(';
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      Short short0 = new Short((short) (-76));
      assertEquals((short) (-76), (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) short0;
      objectArray0[5] = (Object) short0;
      objectArray0[8] = (Object) short0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-540);
      doubleArray0[1] = (double) (-540);
      doubleArray0[2] = (double) (-540);
      doubleArray0[3] = (double) (-540);
      doubleArray0[4] = (double) (-3409.164F);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-516));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-540.0), (-540.0), (-540.0), (-540.0), (-3409.1640625)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (-516), 14);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'Z';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'Z'}, charArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0, "=");
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'Z'}, charArray0);
      
      AbstractMap.SimpleEntry<Object, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 4);
      Integer integer0 = new Integer('f');
      assertEquals(102, (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float(29.0F);
      assertEquals(29.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(float0, "");
      assertNotNull(abstractMap_SimpleEntry0);
      
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) 'f';
      doubleArray0[1] = (double) 'F';
      doubleArray0[2] = (double) '\u0000';
      doubleArray0[3] = (double) 'f';
      doubleArray0[5] = (double) 'f';
      doubleArray0[6] = (double) 29.0F;
      doubleArray0[8] = (double) 'Z';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 29.0F, (int) 'Z');
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(13, doubleArray0.length);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 90.0, (double) 'Z');
      assertEquals(12, int0);
      assertEquals(13, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom('\u0000');
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      float float1 = mockRandom0.nextFloat();
      assertEquals(0.1F, float1, 0.01F);
      
      ArrayUtils.shuffle((Object[]) characterArray0, (Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'Z'}, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'F';
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 12;
      doubleArray1[1] = (double) 'F';
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) 'Z';
      doubleArray1[4] = (double) 'Z';
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray1, (-1618.1939364), 70, (-839.703457));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {12.0, 70.0, 0.0, 90.0, 90.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(bitSet1, bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) abstractMap_SimpleEntryArray0);
      assertFalse(boolean0);
      assertEquals(4, abstractMap_SimpleEntryArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1);
      assertEquals(1, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {70}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'S');
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ArrayUtils.reverse((long[]) null, (int) 'E', 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'W';
      doubleArray0[1] = (double) '`';
      doubleArray0[2] = (-1278.891);
      doubleArray0[3] = (double) 'E';
      doubleArray0[4] = (double) 'W';
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 'S';
      doubleArray0[7] = (double) 'A';
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {96.0, (-1278.891), 69.0, 87.0, 0.0, 83.0, 65.0, 87.0}, doubleArray0, 0.01);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameType(boolean1, boolean1);
      assertTrue(boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean2 == boolean0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(16, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {96.0, (-1278.891), 69.0, 87.0, 0.0, 83.0, 65.0, 87.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1333L), (-536));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 14L, 3610);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 0);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      
      ArrayUtils.reverse((short[]) null, 3610, (-1));
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)97);
      assertFalse(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)97;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 3610;
      doubleArray0[3] = (double) 3610;
      doubleArray0[4] = (double) 3610;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1708.5640563166144), 318);
      assertEquals((-1), int1);
      assertEquals(5, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {97.0, (-1.0), 3610.0, 3610.0, 3610.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 3610;
      floatArray0[1] = 1425.51F;
      floatArray0[2] = (float) 14L;
      floatArray0[3] = (float) 318;
      floatArray0[4] = (float) 3610;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 318);
      assertEquals("{3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals(5, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {3610.0F, 1425.51F, 14.0F, 318.0F, 3610.0F}, floatArray0, 0.01F);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertSame(longArray0, longArray2);
      assertSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-573);
      shortArray0[1] = (short) (-573);
      shortArray0[2] = (short)2;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-573);
      longArray0[2] = (long) (short)2;
      longArray0[3] = (long) (short)2;
      longArray0[4] = 481L;
      longArray0[5] = (long) (short) (-573);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)2);
      assertEquals(3, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, (-573L), 2L, 2L, 481L, (-573L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, (-2), 102, (int) (short) (-573));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-15L);
      longArray0[2] = 1L;
      longArray0[3] = 555L;
      longArray0[4] = 0L;
      longArray0[1] = 0L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertEquals(6, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 1L, 555L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1L, 555L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (-329), 2);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray2 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (-329);
      intArray0[3] = (-329);
      intArray0[4] = (-1);
      intArray0[5] = (-329);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(12, intArray1.length);
      assertEquals(6, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2, 2, (-329), (-329), (-1), (-329)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      long[] longArray3 = new long[17];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      
      longArray3[0] = (long) (-329);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      short[] shortArray2 = new short[4];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (-1);
      shortArray2[1] = (short)1295;
      shortArray2[2] = (short)2;
      shortArray2[3] = (short)2236;
      short[] shortArray3 = ArrayUtils.addAll(shortArray2, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertEquals(4, shortArray3.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)1295, (short)2, (short)2236}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)1295, (short)2, (short)2236}, shortArray3);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1003);
      ArrayUtils.swap(intArray0, (-1003), (-1003), (-1003));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1003), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-1003), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-30);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-5), 3125);
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-51), (byte) (-96), (byte) (-2), (byte)47, (byte)1, (byte) (-1), (byte) (-30)}, byteArray0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = '_';
      charArray0[2] = '(';
      charArray0[3] = 'h';
      charArray0[4] = 'W';
      charArray0[5] = 'X';
      charArray0[6] = 'C';
      charArray0[7] = 'P';
      int int0 = ArrayUtils.indexOf(charArray0, 'y', 1);
      assertEquals((-1), int0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'i', '_', '(', 'h', 'W', 'X', 'C', 'P'}, charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'W';
      longArray0[1] = (long) 'P';
      longArray0[2] = (long) 'y';
      longArray0[3] = (long) 'C';
      longArray0[4] = (long) 'W';
      longArray0[5] = (long) '(';
      longArray0[6] = (-1335L);
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1335L), (-2625));
      assertEquals((-1), int1);
      assertEquals(7, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {87L, 80L, 121L, 67L, 87L, 40L, (-1335L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)59;
      intArray0[1] = (-1082);
      intArray0[2] = (int) (byte)59;
      intArray0[3] = (int) (byte)59;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1082));
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {59, (-1082), 59, 59}, intArray0);
      assertArrayEquals(new int[] {(-1082), 59, (-1082), 59, 59}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1082);
      longArray0[1] = (-569L);
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1082L), (-569L)}, longArray0);
      assertArrayEquals(new long[] {(-1082L), (-569L), (-1082L), (-569L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Character[] characterArray0 = new Character[0];
      Comparator<Character> comparator0 = (Comparator<Character>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(characterArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(0, characterArray0.length);
      
      ArrayUtils.shift((short[]) null, 947, (-1082), Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[21];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(21, floatArray0.length);
      assertEquals(21, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)4056);
      assertEquals((short)4056, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (byte)68);
      assertEquals(68, (int)mutableInt0.toInteger());
      assertEquals((byte)68, mutableInt0.byteValue());
      assertEquals(68.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(68, (int)mutableInt0.getValue());
      assertEquals(68L, mutableInt0.longValue());
      assertEquals(68.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("68", mutableInt0.toString());
      assertEquals(68, mutableInt0.intValue());
      assertEquals((short)68, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt();
      assertEquals("0", mutableInt1.toString());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt1.shortValue());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray1, 0.0F);
      assertEquals(21, floatArray0.length);
      assertEquals(21, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'S');
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ArrayUtils.reverse((long[]) null, (int) 'E', 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'W';
      doubleArray0[1] = (double) '`';
      doubleArray0[2] = (-1278.891);
      doubleArray0[3] = (double) 'E';
      doubleArray0[4] = (double) 'W';
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 'S';
      doubleArray0[7] = (double) 'A';
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {96.0, (-1278.891), 69.0, 87.0, 0.0, 83.0, 65.0, 87.0}, doubleArray0, 0.01);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameType(boolean1, boolean1);
      assertTrue(boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean2 == boolean0);
      
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'W'}, charArray0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {96.0, (-1278.891), 69.0, 87.0, 0.0, 83.0, 65.0, 87.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {96.0, (-1278.891), 69.0, 87.0, 0.0, 83.0, 65.0, 87.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'b';
      longArray0[1] = 2298L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {98L, 2298L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = ArrayUtils.insert(69, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[3] = 'I';
      char[] charArray1 = Character.toChars((int) '(');
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'('}, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)937;
      shortArray0[1] = (short)937;
      shortArray0[2] = (short) (byte)85;
      shortArray0[3] = (short)937;
      shortArray0[4] = (short)937;
      shortArray0[5] = (short)97;
      shortArray0[6] = (short) (-2911);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1072);
      assertEquals((-1), int0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)937, (short)937, (short)85, (short)937, (short)937, (short)97, (short) (-2911)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1517.478197799237);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Float float0 = new Float(336.78F);
      assertEquals(336.78F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = ArrayUtils.isSameType(integer0, float0);
      assertFalse(boolean1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)121;
      ArrayUtils.swap(doubleArray2, (int) (short)121, (-2182), (int) (short)121);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-805));
      assertEquals(6, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)121, (short)0, (short)0, (short)0, (short)0, (short) (-805)}, shortArray1);
      assertArrayEquals(new short[] {(short)121, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-805);
      floatArray0[1] = (float) (-1165);
      floatArray0[2] = (float) (short)1612;
      floatArray0[3] = (float) (short)121;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 121.0F, 4030);
      assertEquals(3, int1);
      assertEquals(4, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-805.0F), (-1165.0F), 1612.0F, 121.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (-2590);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)787;
      shortArray0[2] = (short) (-243);
      shortArray0[6] = (short)787;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-2590), (short) (-243), (short)0, (short)787, (short)0, (short)787}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      ArrayUtils.swap((double[]) null, 0, 65536, (-839));
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.insert(90, booleanArray0, booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      Long long0 = new Long(145L);
      assertEquals(145L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      long[] longArray1 = new long[0];
      ArrayUtils.shuffle(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      long[] longArray2 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 145L;
      doubleArray0[1] = 1467.55;
      doubleArray0[2] = (-3822.23739674);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 145.0, 1061);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {145.0, 1467.55, (-3822.23739674)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1517.478197799237);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[0] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Float float0 = new Float(336.78F);
      assertEquals(336.78F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = ArrayUtils.isSameType(integer0, float0);
      assertFalse(boolean1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short) (-2434);
      shortArray0[2] = (short)2256;
      shortArray0[3] = (short) (-3151);
      shortArray0[4] = (short) (-2775);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-653), (-1528));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)121, (short) (-2434), (short)2256, (short) (-3151), (short) (-2775)}, shortArray0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-2147483648L);
      longArray0[1] = (long) (-1528);
      longArray0[2] = (long) (short) (-2775);
      longArray0[3] = (long) (short) (-2434);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (short) (-2434));
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2147483648L), (-1528L), (-2775L), (-2434L)}, longArray0);
      assertArrayEquals(new long[] {(-2434L), (-2147483648L), (-1528L), (-2775L), (-2434L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertEquals(0.0F, object0);
      assertNotNull(object0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 2470L;
      longArray0[1] = (long) (-1471);
      longArray0[2] = (long) (-1471);
      longArray0[3] = (long) (-1471);
      longArray0[4] = (-35L);
      longArray0[5] = (long) (-1471);
      longArray0[6] = (-1674L);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1471), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1471, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[21];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(21, floatArray0.length);
      assertEquals(21, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)4056);
      assertEquals((short)4056, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-1459));
      assertEquals((short) (-1459), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      shortArray0[2] = shortArray0[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)4056, (short) (-1459), (short) (-1459)}, shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[2] = (double) (short) (-1459);
      doubleArray0[3] = (double) 0.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)0, (-2688));
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1459.0), 0.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) shortArray0, (Object) null);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(3, shortArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)4056;
      intArray0[1] = 0;
      int int1 = ArrayUtils.indexOf(intArray0, 699, 218);
      assertEquals((-1), int1);
      assertEquals(2, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {4056, 0}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (short)shortArray0[1];
      longArray0[2] = (-3300L);
      longArray0[3] = (long) (short)shortArray0[2];
      longArray0[4] = (long) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) shortArray0[2], longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1459, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("(M}gUn'cbXGvo");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[8];
      booleanArray0[0] = boolean0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-14));
      assertEquals((byte) (-14), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-122));
      assertEquals((byte) (-122), (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Long long0 = new Long((byte)6);
      assertEquals(6L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      ArrayUtils.shift((long[]) null, (-1434));
      Long long0 = new Long((byte)6);
      assertEquals(6L, (long)long0);
      assertNotNull(long0);
      
      Short short0 = new Short((byte)6);
      assertEquals((short)6, (short)short0);
      assertNotNull(short0);
      
      String string0 = ArrayUtils.toString((Object) short0);
      assertEquals("6", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(booleanArray0, 32);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 32;
      intArray0[1] = (int) (byte)6;
      intArray0[2] = 32;
      intArray0[3] = 4422;
      intArray0[4] = (int) (byte)6;
      intArray0[5] = (-41);
      ArrayUtils.swap(intArray0, (-1434), (-3582), 2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {32, 6, 32, 4422, 6, (-41)}, intArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short)6, object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean[] booleanArray2 = new boolean[0];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      ArrayUtils.shift((long[]) null, (-1434));
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Short short0 = new Short((byte)6);
      assertEquals((short)6, (short)short0);
      assertNotNull(short0);
      
      String string0 = ArrayUtils.toString((Object) short0);
      assertEquals("6", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(booleanArray0, 59);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 59;
      intArray0[1] = (int) (byte)6;
      intArray0[2] = 59;
      intArray0[3] = 4422;
      intArray0[4] = (int) (byte)6;
      intArray0[5] = (-41);
      ArrayUtils.swap(intArray0, 2426, (-3582), 2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {59, 6, 59, 4422, 6, (-41)}, intArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short)6, object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean[] booleanArray2 = new boolean[0];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      Object object0 = new Object();
      assertNotNull(object0);
      
      org.evosuite.runtime.Random.setNextRandom(0);
      long[] longArray0 = new long[5];
      longArray0[4] = (long) 0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 38L);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {38L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (-4641.042782);
      doubleArray0[2] = 969.65;
      doubleArray0[3] = (-171.11412232979);
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-4641.042782), 969.65, (-171.11412232979), 0.0}, doubleArray0, 0.01);
      
      AbstractMap.SimpleEntry<Character, Double>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Character, Double>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 4);
      AbstractMap.SimpleImmutableEntry<Character, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Character, Double>((Character) null, (Double) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Character, Double> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Character, Double>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<Character, Double> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Character, Double>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      Character character0 = new Character('\'');
      assertEquals('\'', (char)character0);
      assertNotNull(character0);
      
      AbstractMap.SimpleEntry<Character, Double> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Character, Double>(character0, (Double) 969.65);
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry2);
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry2;
      Character character1 = Character.valueOf('\'');
      assertEquals('\'', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Double double0 = new Double((-1686.62992953824));
      assertEquals((-1686.62992953824), (double)double0, 0.01);
      assertNotNull(double0);
      
      AbstractMap.SimpleEntry<Character, Double> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Character, Double>(character1, double0);
      assertTrue(character1.equals((Object)character0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry3);
      
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry3;
      AbstractMap.SimpleEntry<Character, Double>[] abstractMap_SimpleEntryArray1 = ArrayUtils.toArray(abstractMap_SimpleEntryArray0);
      assertEquals(4, abstractMap_SimpleEntryArray1.length);
      assertEquals(4, abstractMap_SimpleEntryArray0.length);
      assertNotNull(abstractMap_SimpleEntryArray1);
      assertSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) '\'';
      longArray2[1] = (long) 0;
      longArray2[2] = 38L;
      longArray2[3] = 38L;
      longArray2[4] = (long) '\'';
      long[] longArray3 = ArrayUtils.subarray(longArray2, 0, 0);
      assertEquals(0, longArray3.length);
      assertEquals(5, longArray2.length);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray3);
      assertArrayEquals(new long[] {39L, 0L, 38L, 38L, 39L}, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-204.3344F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-204.3344F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = '?';
      charArray0[2] = '#';
      charArray0[3] = '?';
      int int0 = ArrayUtils.indexOf(charArray0, '}', (int) '#');
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'g', '?', '#', '?'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Double double0 = new Double(70.0);
      assertEquals(70.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 70.0;
      doubleArray0[2] = 70.0;
      doubleArray0[2] = 70.0;
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      intArray0[1] = 59;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {32, 59}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 70.0, (-1810.79));
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {70.0, 0.0, 70.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-27);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-115));
      assertEquals(1, int1);
      assertEquals(3, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)14, (byte) (-115), (byte) (-27)}, byteArray0);
      
      boolean boolean2 = ArrayUtils.contains(intArray0, (int) (byte) (-115));
      assertFalse(boolean2);
      assertEquals(2, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {32, 59}, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)96, (-2420));
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Byte byte0 = new Byte((byte)110);
      assertEquals((byte)110, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = '(';
      char[] charArray1 = Character.toChars((int) 'T');
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'T'}, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray1, '4');
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'T'}, charArray1);
      assertArrayEquals(new char[] {'4', 'T'}, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[5] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray0));
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '4';
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 'T';
      doubleArray0[3] = (double) (byte)96;
      doubleArray0[4] = 668.97298414;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (byte)96;
      doubleArray0[7] = (double) 'D';
      ArrayUtils.shift(doubleArray0, (-921));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 84.0, 96.0, 668.97298414, (-1.0), 96.0, 68.0, 52.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)96, (-2420));
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Byte byte0 = new Byte((byte)110);
      assertEquals((byte)110, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = '(';
      char[] charArray1 = Character.toChars((int) 'T');
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'T'}, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray1, '4');
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'T'}, charArray1);
      assertArrayEquals(new char[] {'4', 'T'}, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[5] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, false}, booleanArray0));
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '4';
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 'T';
      doubleArray0[3] = (double) (byte)96;
      doubleArray0[4] = 668.97298414;
      doubleArray0[5] = (double) (-1);
      doubleArray0[7] = (double) 'D';
      ArrayUtils.shift(doubleArray0, (-921));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 84.0, 96.0, 668.97298414, (-1.0), 0.0, 68.0, 52.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      Long[] longArray0 = new Long[10];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(10, longArray0.length);
      assertEquals(10, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)55;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)55}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (byte) (-27);
      doubleArray0[2] = 70.0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)55;
      doubleArray0[6] = (double) (byte) (-27);
      ArrayUtils.shift(doubleArray0, (int) (byte)0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-27.0), 70.0, 0.0, 0.0, 55.0, (-27.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[8];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)0);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)55}, byteArray0);
      assertArrayEquals(new byte[] {(byte)55}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 70.0, (-27.0));
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-27.0), 70.0, 0.0, 0.0, 55.0, (-27.0)}, doubleArray0, 0.01);
      
      ArrayUtils.shift(charArray0, (int) (byte) (-27), 2, (int) (byte)55);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-501L));
      assertEquals((-501L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)55;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-27), (byte)0, (byte)55}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte) (-27);
      doubleArray0[2] = 70.0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)55;
      doubleArray0[6] = (double) (byte) (-27);
      ArrayUtils.shift(doubleArray0, (int) (byte)0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-27.0), 70.0, 0.0, 0.0, 55.0, (-27.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = ',';
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)0);
      assertEquals(4, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-27), (byte)0, (byte)55}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)55}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 70.0, (-27.0));
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-27.0), 70.0, 0.0, 0.0, 55.0, (-27.0)}, doubleArray0, 0.01);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ',');
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {',', ',', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {',', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'S');
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ArrayUtils.reverse((long[]) null, (int) 'E', 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'W';
      doubleArray0[1] = (double) '`';
      doubleArray0[2] = (-1278.891);
      doubleArray0[3] = (double) 'E';
      doubleArray0[4] = (double) 'W';
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 'S';
      doubleArray0[7] = (double) 'A';
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {96.0, (-1278.891), 69.0, 87.0, 0.0, 83.0, 65.0, 87.0}, doubleArray0, 0.01);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameType(boolean1, boolean1);
      assertTrue(boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean2 == boolean0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(16, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {96.0, (-1278.891), 69.0, 87.0, 0.0, 83.0, 65.0, 87.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1333L), (-536));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1979);
      shortArray0[1] = (short) (-1013);
      shortArray0[2] = (short) (-2592);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      boolean boolean3 = ArrayUtils.contains(shortArray0, (short) (-1013));
      assertTrue(boolean3);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new short[] {(short) (-1979), (short) (-1013), (short) (-2592), (short)1, (short)1}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-47);
      shortArray0[1] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[3] = (short)0;
      shortArray0[6] = (short) (-1);
      ArrayUtils.swap(shortArray0, (int) (short)0, 10, (int) (short) (-1));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-47), (short) (-1), (short)0, (short)0, (short) (-1), (short)0, (short) (-1), (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)67;
      byteArray1[3] = (byte)0;
      byte[] byteArray2 = ArrayUtils.insert((int) (short)0, byteArray0, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)0, (byte)0}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-47);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-47.0F), (-47.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-47.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-3887);
      intArray0[1] = (int) (short)0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1820), (-637));
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-3887), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1767;
      intArray0[1] = 298;
      intArray0[2] = 1;
      intArray0[3] = 1918;
      int int0 = ArrayUtils.indexOf(intArray0, 1918, 1767);
      assertEquals((-1), int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1767, 298, 1, 1918}, intArray0);
      
      Short[] shortArray0 = new Short[8];
      short short0 = (short)2;
      Short short1 = new Short((short)2);
      assertEquals((short)2, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)44);
      assertEquals((short)44, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short(short0);
      assertEquals((short)2, (short)short3);
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short((short) (-837));
      assertEquals((short) (-837), (short)short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short((short) (-1339));
      assertEquals((short) (-1339), (short)short5);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertNotNull(short5);
      
      shortArray0[4] = short5;
      try { 
        Short.valueOf("?Wxg_M:a^vh:hCK", (int) (short) (-837));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -837 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '~';
      charArray0[2] = ':';
      charArray0[3] = 'N';
      charArray0[4] = 'I';
      charArray0[5] = '`';
      charArray0[6] = '{';
      charArray0[7] = '9';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'>', '~', ':', 'N', 'I', '`', '{', '9'}, charArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, '9', (-2146587743));
      assertEquals(7, int0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'>', '~', ':', 'N', 'I', '`', '{', '9'}, charArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '9';
      floatArray0[1] = (float) '~';
      floatArray0[2] = 2210.0F;
      floatArray0[3] = 0.225733F;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'I';
      intArray0[1] = (int) '>';
      intArray0[2] = (int) '~';
      intArray0[3] = (int) '9';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 126, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals((-1), int0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true, false, false}, booleanArray0));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'w');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-27);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte)1, (byte)1, (byte)93, (byte) (-39), (byte) (-27)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertEquals(0, int0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[25];
      floatArray0[0] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true}, booleanArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) ')';
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) ')';
      longArray0[4] = (long) 0;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(10, longArray1.length);
      assertEquals(5, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {41L, 0L, 0L, 41L, 0L, 41L, 0L, 0L, 41L, 0L}, longArray1);
      assertArrayEquals(new long[] {41L, 0L, 0L, 41L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Integer integer0 = new Integer((-87));
      assertEquals((-87), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.getInteger("");
      assertNull(integer2);
      
      MutableInt mutableInt0 = new MutableInt(0.0F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer((-87));
      assertEquals((-87), (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertEquals(5, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      intArray0[2] = 9;
      intArray0[3] = 6;
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(9);
      assertEquals(9L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      int int0 = ArrayUtils.indexOf(intArray0, 6, 1);
      assertEquals(3, int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-516), 0, 9, 6, 0, 0, 0, 0}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)91);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      org.evosuite.runtime.Random.setNextRandom(203);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.toPrimitive((Object) "java.lang.Integer");
      assertEquals("java.lang.Integer", object0);
      assertNotNull(object0);
      
      objectArray0[0] = (Object) "java.lang.Integer";
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1786.0;
      doubleArray0[1] = (double) (-610);
      doubleArray0[2] = (double) (-610);
      doubleArray0[3] = (double) (-610);
      doubleArray0[4] = (double) (-610);
      doubleArray0[5] = (double) (-610);
      doubleArray0[6] = (double) (-610);
      doubleArray0[7] = (double) (-610);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-610.0), (-610));
      assertEquals(1, int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1786.0, (-610.0), (-610.0), (-610.0), (-610.0), (-610.0), (-610.0), (-610.0)}, doubleArray0, 0.01);
      
      String string0 = ArrayUtils.toString((Object) "java.lang.Integer");
      assertEquals("java.lang.Integer", string0);
      assertTrue(string0.equals((Object)object0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-87);
      ArrayUtils.shift(shortArray0, 102);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-87), (short)0}, shortArray0);
      
      ArrayUtils.swap(booleanArray0, (-2145718405), (int) (short) (-87), (-1));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 99);
      assertEquals(1, int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-87), (short)0}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-84), (double) 1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-87), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-87), (short)0}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)63, 65536);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(7, byteArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(bitSet1, bitSet0);
      
      bitSet0.and(bitSet1);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(7, byteArray0.length);
      assertEquals(0, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(bitSet0, bitSet1);
      
      floatArray0[1] = (float) 102;
      floatArray0[2] = (float) (byte) (-84);
      floatArray0[3] = (float) (-2145718405);
      floatArray0[4] = (float) 102;
      floatArray0[5] = (float) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-84.0F), 83);
      assertEquals(2, int1);
      assertEquals(6, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {1.0F, 102.0F, (-84.0F), (-2.1457184E9F), 102.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-533);
      ArrayUtils.shift(intArray0, 11);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, (-533), 0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-533);
      floatArray0[1] = (float) (-533);
      floatArray0[2] = (float) (-533);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-533.0F), (-533.0F), (-533.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-533.0F), (-533.0F), (-533.0F)}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1650), (int) (byte)2);
      assertEquals(6, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-1), (byte)99, (byte) (-109), (byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(6, byteArray2.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-1), (byte)99, (byte) (-109), (byte)2, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-1), (byte)99, (byte) (-109), (byte)2, (byte)0}, byteArray0);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(100.0);
      assertEquals(100.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {100.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      int[] intArray0 = new int[0];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1), 906);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.shift(intArray0, (-1418));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isEquals(objectArray0[0], objectArray0[0]);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) 906;
      floatArray0[2] = (float) (-1418);
      floatArray0[3] = (float) 906;
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (-1418);
      floatArray0[6] = (float) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 937.0F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(7, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1.0F), 906.0F, (-1418.0F), 906.0F, (-1.0F), (-1418.0F), (-1.0F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) 0;
      longArray0[5] = (-265L);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) 0;
      longArray0[8] = (long) (-1418);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, (-1L), 0L, (-265L), (-1L), 0L, (-1418L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      long[] longArray0 = new long[2];
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 0L;
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertSame(doubleArray0, doubleArray2);
      assertSame(doubleArray2, doubleArray0);
      
      Float[] floatArray0 = new Float[10];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (short)9);
      assertEquals(10, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {9.0F, 9.0F, 9.0F, 9.0F, 9.0F, 9.0F, 9.0F, 9.0F, 9.0F, 9.0F}, floatArray1, 0.01F);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)9;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)9;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)9);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)9}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-80), (byte)0}, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-87);
      intArray0[1] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[8] = (int) (byte)0;
      boolean boolean1 = ArrayUtils.contains(intArray0, 0);
      assertTrue(boolean1);
      assertEquals(9, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-87), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean2);
      assertEquals(9, intArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new int[] {(-87), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, objectArray0.length);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(objectArray0);
      assertNotSame(booleanArray1, objectArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, objectArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '{';
      charArray0[3] = '/';
      ArrayUtils.shift(charArray0, (int) (byte)0, 1921, (int) (byte)0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'>', '>', '{', '/'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-3);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-3), (byte)0, (byte)0, (byte)0, (byte) (-80), (byte)0}, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-3);
      intArray0[1] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte) (-3);
      intArray0[6] = (int) (byte)0;
      intArray0[8] = (int) (byte)0;
      boolean boolean1 = ArrayUtils.contains(intArray0, 0);
      assertTrue(boolean1);
      assertEquals(9, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-3), 0, 0, 0, 0, (-3), 0, 0, 0}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean2);
      assertEquals(9, intArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {(-3), 0, 0, 0, 0, (-3), 0, 0, 0}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, objectArray0.length);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(objectArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, objectArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, objectArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[2] = '/';
      ArrayUtils.shift(charArray0, (int) (byte) (-3), 1921, (int) (byte)0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'>', '>', '/', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-2305L));
      assertEquals((-2305L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-2305L));
      assertEquals((-2305L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (-1144);
      intArray0[3] = (int) (byte)1;
      intArray0[4] = (int) (byte)1;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = (int) (byte)1;
      ArrayUtils.shift(intArray0, (-1144));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, (-1144)}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2696.6162394;
      doubleArray0[1] = (double) 1;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1144));
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {2696.6162394, 1.0}, doubleArray0, 0.01);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 47.0F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      ArrayUtils.swap(floatArray0, 1, (-1144), 2209);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      shortArray0[4] = (short) (byte)1;
      shortArray0[5] = (short)1136;
      shortArray0[6] = (short) (byte)1;
      shortArray0[7] = (short) (byte)1;
      shortArray0[8] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-2320));
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1136, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1136, (short)1, (short)1, (short)1}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3465.797501;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 3465.797501;
      doubleArray0[3] = (double) 98;
      doubleArray0[4] = (double) 98;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      int int0 = ArrayUtils.indexOf(doubleArray0, 98.0, 2193, 1.5);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {3465.797501, 1.5, 3465.797501, 98.0, 98.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = new Float[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(floatArray0, 0);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 5458.79882286;
      doubleArray0[1] = (-1216.5375419);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 310.457636802;
      doubleArray0[7] = 1.5;
      doubleArray0[8] = 3465.797501;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 98, 3465.797501);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {5458.79882286, (-1216.5375419), 0.0, 0.0, 0.0, 1.0, 310.457636802, 1.5, 3465.797501}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-2099);
      intArray0[2] = (-1);
      intArray0[3] = 98;
      intArray0[4] = 98;
      intArray0[5] = 98;
      intArray0[6] = (-1);
      ArrayUtils.swap(intArray0, (-2739), (-3297), (-1556));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-2099), (-1), 98, 98, 98, (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)0;
      ArrayUtils.shift((boolean[]) null, 781, (int) (short)2, 781);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)0);
      assertEquals(5, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.shift((int[]) null, 0);
      Long[] longArray0 = new Long[2];
      Long long0 = Long.getLong("UUKrG,NZ=", 2L);
      assertEquals(2L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short)0);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[0];
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean2);
      assertEquals(0, intArray0.length);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[0] = boolean3;
      Boolean boolean4 = Boolean.valueOf(true);
      assertTrue(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[1] = boolean4;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      boolean boolean5 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[2] = 9;
      intArray0[3] = 6;
      intArray0[4] = (-693);
      ArrayUtils.shift(intArray0, 7);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 9, 6, (-693), 0, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1083);
      shortArray0[1] = (short) (-417);
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.insert(7, (short[]) null, shortArray0);
      assertEquals(3, shortArray0.length);
      assertNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1083), (short) (-417), (short)0}, shortArray0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 6, 2);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (-693);
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) 9;
      doubleArray0[6] = (double) 6;
      doubleArray0[7] = (double) (short)0;
      doubleArray0[8] = (double) (short) (-417);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1224.342627812813, 348);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(9, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, (-693.0), 6.0, 0.0, 9.0, 6.0, 0.0, (-417.0)}, doubleArray0, 0.01);
      
      Long[] longArray2 = new Long[0];
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray3);
      assertSame(longArray3, longArray1);
      
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (long) 6;
      longArray4[1] = (-1007L);
      longArray4[2] = (long) 348;
      ArrayUtils.shift(longArray4, (int) (short) (-1083), 718, 9);
      assertEquals(3, longArray4.length);
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertArrayEquals(new long[] {6L, (-1007L), 348L}, longArray4);
      assertNotSame(longArray4, longArray3);
      assertNotSame(longArray4, longArray1);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 5458.79882286;
      doubleArray0[1] = (-1216.5375419);
      doubleArray0[2] = 2034.285467;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 310.457636802;
      doubleArray0[7] = 1.5;
      doubleArray0[8] = 3465.797501;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 98, 3465.797501);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {5458.79882286, (-1216.5375419), 2034.285467, 0.0, 0.0, 1.0, 310.457636802, 1.5, 3465.797501}, doubleArray0, 0.01);
      
      ArrayUtils.swap(booleanArray0, (-1), (-1));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, false, false}, booleanArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '\"', 98);
      assertEquals(0, int1);
      assertEquals(1, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'\"'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals(0, int0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true}, booleanArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = '&';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = 'w';
      charArray0[5] = 'Q';
      charArray0[6] = '\\';
      charArray0[7] = 'f';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'w');
      assertEquals(7, charArray1.length);
      assertEquals(8, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'q', '&', ' ', ' ', 'Q', '\\', 'f'}, charArray1);
      assertArrayEquals(new char[] {'q', '&', ' ', ' ', 'w', 'Q', '\\', 'f'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) true;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'w';
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'f';
      longArray0[3] = (long) 'w';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1613L, 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {119L, 0L, 102L, 119L}, longArray0);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(4, longArray0.length);
      assertNull(object0);
      assertArrayEquals(new long[] {119L, 0L, 102L, 119L}, longArray0);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) '\\';
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) ' ';
      objectArray0[6] = (Object) false;
      objectArray0[7] = (Object) ' ';
      int int1 = ArrayUtils.indexOf(objectArray0, objectArray0[6], 0);
      assertEquals(4, int1);
      assertEquals(8, objectArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("(M}gUn'cbXGvo");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (-265));
      assertNull(shortArray0);
      
      Boolean boolean4 = Boolean.TRUE;
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      Boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray0, boolean0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(boolean0.equals((Object)boolean3));
      assertFalse(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean4));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      assertEquals(6, mutableInt0.intValue());
      assertEquals(6.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("6", mutableInt0.toString());
      assertEquals(6.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(6L, mutableInt0.longValue());
      assertEquals((short)6, mutableInt0.shortValue());
      assertEquals(6, (int)mutableInt0.getValue());
      assertEquals((byte)6, mutableInt0.byteValue());
      assertEquals(6, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[9];
      mutableIntArray0[2] = mutableInt0;
      mutableIntArray0[3] = mutableInt0;
      mutableIntArray0[4] = mutableInt0;
      mutableIntArray0[5] = mutableInt0;
      mutableIntArray0[6] = mutableInt0;
      mutableIntArray0[7] = mutableInt0;
      mutableIntArray0[8] = mutableInt0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(mutableIntArray0, (int)  (-265), mutableInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -265, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-244.8F);
      floatArray0[1] = 74.0F;
      floatArray0[2] = (-53.213F);
      floatArray0[3] = (-3409.164F);
      floatArray0[4] = 442.0F;
      floatArray0[5] = (-3409.164F);
      floatArray0[6] = (-2796.8F);
      floatArray0[8] = Float.NaN;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-54));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, 3);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 82;
      intArray0[1] = (-353);
      intArray0[2] = (int) (byte) (-1);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 82);
      assertEquals(4, intArray1.length);
      assertEquals(3, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {82, 82, (-353), (-1)}, intArray1);
      assertArrayEquals(new int[] {82, (-353), (-1)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-3409.164F);
      doubleArray0[1] = (double) (byte) (-54);
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (double) (-3409.164F);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3409.1640625), (-54.0), Double.NaN, (-3409.1640625)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3409.1640625), (-54.0), Double.NaN, (-3409.1640625)}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-3075.6606F);
      floatArray0[1] = 2123.0F;
      floatArray0[2] = (float) (byte)5;
      floatArray0[3] = (float) (byte)5;
      floatArray0[4] = 990.0F;
      ArrayUtils.shift(floatArray0, (-3896), 3, (-427));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {2123.0F, 5.0F, (-3075.6606F), 5.0F, 990.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3075.6606F);
      doubleArray0[1] = (double) 5.0F;
      doubleArray0[2] = (double) 5.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-352.1180924704), (-851.0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-3075.66064453125), 5.0, 5.0}, doubleArray0, 0.01);
      
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 3);
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2123.0F, 5.0F, (-3075.6606F), 5.0F, 990.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2123.0F, 5.0F, (-3075.6606F), 990.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.indexOf((Object[]) doubleArray0, (Object) long0, 2);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 2;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = 2;
      intArray0[7] = 2;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), 2, (-1), (-1), (-1), (-1), 2, 2}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      String string0 = ArrayUtils.toString((Object) long0, "");
      assertEquals("-1", string0);
      assertNotNull(string0);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-678.16865342);
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) (-1L);
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (-2772.5378095), 16, 67.57787691680754);
      assertEquals((-1), int1);
      assertEquals(3, doubleArray1.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-678.16865342), 2.0, (-1.0)}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'i';
      charArray0[1] = 'V';
      charArray0[2] = 'D';
      charArray0[3] = 'e';
      ArrayUtils.reverse(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'e', 'D', 'V', 'i'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      intArray0[2] = 9;
      intArray0[3] = (-1);
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = 'O';
      charArray0[2] = 'u';
      charArray0[3] = 'N';
      charArray0[4] = 'w';
      charArray0[5] = 'N';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'&', 'O', 'u', 'N', 'w', 'N'}, charArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'N';
      objectArray0[1] = (Object) (-1);
      objectArray0[2] = (Object) 'N';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      boolean boolean1 = ArrayUtils.contains(objectArray0, objectArray0[1]);
      assertTrue(boolean1);
      assertEquals(4, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'O';
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {79.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {79.0, 79.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 1412L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 1412L}, longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1964;
      shortArray0[1] = (short)4187;
      shortArray0[2] = (short)4187;
      shortArray0[3] = (short) (byte) (-126);
      shortArray0[4] = (short) (byte) (-126);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)98);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1964, (short)4187, (short)4187, (short) (-126), (short) (-126)}, shortArray0);
      assertArrayEquals(new short[] {(short)1964, (short)4187, (short)4187, (short) (-126), (short) (-126)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[15];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(15, booleanArray0.length);
      assertEquals(15, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 1412L}, longArray0);
      assertArrayEquals(new long[] {0L, 1412L, 0L, 1412L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-126);
      floatArray0[1] = (float) (short)1964;
      floatArray0[2] = (float) (byte) (-126);
      floatArray0[3] = (float) (byte) (-126);
      floatArray0[4] = (float) 1412L;
      ArrayUtils.reverse(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1412.0F, (-126.0F), (-126.0F), 1964.0F, (-126.0F)}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte) (-126), (int) (short)4187);
      assertEquals((-1), int0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1412.0F, (-126.0F), (-126.0F), 1964.0F, (-126.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.contains(intArray0, (-2631));
      assertFalse(boolean1);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      Long long0 = new Long((short)1964);
      assertEquals(1964L, (long)long0);
      assertNotNull(long0);
      
      long[] longArray2 = ArrayUtils.toPrimitive((Long[]) null, 209L);
      assertNull(longArray2);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-126.0F);
      doubleArray0[1] = (double) 1964.0F;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-126.0), 1964.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-126.0), 1964.0, (-126.0), 1964.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.indexOf((Object[]) doubleArray0, (Object) long0, 2);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 2;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = 2;
      Double double0 = new Double(1426.0);
      assertEquals(1426.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2396.67F;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (-373.47726F);
      floatArray0[4] = (float) (-1L);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 2, 2396.67F);
      assertEquals(6, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2396.67F, (-1.0F), 2396.67F, (-1.0F), (-373.47726F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2396.67F, (-1.0F), (-1.0F), (-373.47726F), (-1.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 2, (-401), (-1));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-87);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-87);
      shortArray0[1] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, 102);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-87), (short)0}, shortArray0);
      
      ArrayUtils.swap(booleanArray0, (-2145718405), (int) (short) (-87), (-1));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 99);
      assertEquals(1, int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-87), (short)0}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-84), (double) 1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-87), (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-87), (short)0}, shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 102;
      floatArray0[2] = (float) (byte) (-84);
      floatArray0[3] = (float) (-2145718405);
      floatArray0[4] = (float) 102;
      floatArray0[5] = (float) (byte) (-87);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-84.0F), 83);
      assertEquals(2, int1);
      assertEquals(6, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {1.0F, 102.0F, (-84.0F), (-2.1457184E9F), 102.0F, (-87.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'N';
      charArray0[2] = 'd';
      charArray0[3] = '$';
      charArray0[4] = 'a';
      ArrayUtils.reverse(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'a', '$', 'd', 'N', '\u0000'}, charArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)990;
      shortArray0[1] = (short)807;
      shortArray0[2] = (short)37;
      shortArray0[3] = (short)120;
      shortArray0[4] = (short)937;
      shortArray0[5] = (short)2521;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)990);
      assertEquals(0, int0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)990, (short)807, (short)37, (short)120, (short)937, (short)2521}, shortArray0);
      
      Character character0 = Character.valueOf('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      int int1 = ArrayUtils.indexOf((Object[]) null, (Object) character0, (int) (short)990);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)807;
      floatArray0[1] = (float) (short)120;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (short)37;
      floatArray0[4] = (float) (short)990;
      floatArray0[5] = (float) (short)990;
      floatArray0[6] = (float) (short)937;
      floatArray0[7] = (float) '\u0000';
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (short)37);
      assertEquals(8, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {807.0F, 120.0F, 0.0F, 37.0F, 990.0F, 990.0F, 937.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {807.0F, 120.0F, 0.0F, 990.0F, 990.0F, 937.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)45;
      char[] charArray0 = new char[4];
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000', (int) (byte)45);
      assertEquals(3, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'Z', 'Z', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)45;
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)45;
      floatArray0[1] = (float) 'Z';
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {45.0F, 90.0F}, floatArray0, 0.01F);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'U';
      charArray1[1] = 'W';
      charArray1[2] = 'b';
      charArray1[3] = 'Z';
      charArray1[4] = 's';
      charArray1[5] = 'W';
      charArray1[6] = 'U';
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray1);
      assertEquals(14, charArray2.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'U', 'W', 'b', 'Z', 's', 'W', 'U'}, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3561);
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-3561);
      floatArray0[1] = (float) (short) (-3561);
      floatArray0[2] = (float) (short) (-3561);
      floatArray0[3] = (float) (short) (-3561);
      floatArray0[4] = (float) (short) (-3561);
      floatArray0[5] = (float) (short) (-3561);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-3561.0F), (-3561.0F), (-3561.0F), (-3561.0F), (-3561.0F), (-3561.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = 'W';
      charArray0[2] = 'f';
      charArray0[3] = 'X';
      charArray0[4] = 'J';
      charArray0[5] = 'U';
      charArray0[6] = 's';
      charArray0[7] = 'b';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(16, charArray1.length);
      assertEquals(8, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'y', 'W', 'f', 'X', 'J', 'U', 's', 'b'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-3561);
      intArray0[1] = (int) 'W';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-3561), 87}, intArray0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) 'W';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, '6');
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'W'}, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((-2459.99168));
      assertEquals((-2459.9917F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-660.91F));
      assertEquals((-660.91F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      floatArray0[2] = floatArray0[0];
      Float float2 = new Float((-791.5858));
      assertEquals((-791.5858F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[3] = float2;
      Float float3 = new Float((float) floatArray0[3]);
      assertEquals((-791.5858F), (float)float3, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      floatArray0[4] = float3;
      Float float4 = new Float((-791.5858));
      assertEquals((-791.5858F), (float)float4, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      
      floatArray0[5] = float4;
      Float float5 = new Float((-3366.661233378));
      assertEquals((-3366.6611F), (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotNull(float5);
      
      floatArray0[6] = float5;
      Float float6 = new Float((float) floatArray0[4]);
      assertEquals((-791.5858F), (float)float6, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotNull(float6);
      
      floatArray0[7] = float6;
      Float float7 = new Float(2633.0F);
      assertEquals(2633.0F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotNull(float7);
      
      floatArray0[8] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2459.9917F), (-660.91F), (-2459.9917F), (-791.5858F), (-791.5858F), (-791.5858F), (-3366.6611F), (-791.5858F), 2633.0F}, floatArray1, 0.01F);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      characterArray0[1] = character0;
      Character character1 = new Character('j');
      assertEquals('j', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = new Character('?');
      assertEquals('?', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '?');
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'?', '^', 'j', '?'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[6] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, 14);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(floatArray1, 1517);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)58;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)68, (byte)0, (byte)68, (byte)68, (byte)68, (byte)65, (byte)68, (byte)58}, byteArray1);
      assertArrayEquals(new byte[] {(byte)68, (byte)0, (byte)68, (byte)68, (byte)68, (byte)65, (byte)68, (byte)58}, byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)65;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)65;
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)65, (short)0, (short)65}, shortArray0);
      assertArrayEquals(new short[] {(short)65, (short)0, (short)65, (short)65, (short)0, (short)65}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-244.8F);
      floatArray0[1] = 74.0F;
      floatArray0[2] = (-53.213F);
      floatArray0[3] = (-3409.164F);
      floatArray0[4] = 442.0F;
      floatArray0[5] = (-3409.164F);
      floatArray0[6] = (-2796.8F);
      floatArray0[7] = 1361.98F;
      floatArray0[8] = Float.NaN;
      ArrayUtils.shift(floatArray0, 4, 82, 3);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-244.8F), 74.0F, (-53.213F), (-3409.164F), (-2796.8F), 1361.98F, Float.NaN, 442.0F, (-3409.164F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-53.213F);
      doubleArray0[1] = (double) (-2796.8F);
      doubleArray0[2] = (double) 74.0F;
      doubleArray0[3] = (double) (-53.213F);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 74.0F, (double) 442.0F);
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-53.2130012512207), (-2796.800048828125), 74.0, (-53.2130012512207)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'S');
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ArrayUtils.reverse((long[]) null, (int) 'E', 0);
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1);
      assertEquals(8, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'W';
      doubleArray0[1] = (double) '`';
      doubleArray0[2] = (-1278.891);
      doubleArray0[3] = (double) 'E';
      doubleArray0[4] = (double) 'W';
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 'S';
      doubleArray0[7] = (double) 'A';
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {96.0, (-1278.891), 69.0, 87.0, 0.0, 83.0, 65.0, 87.0}, doubleArray0, 0.01);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean2);
      assertEquals(true, object0);
      assertFalse(object0.equals((Object)boolean0));
      assertFalse(object0.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(object0);
      
      boolean boolean3 = ArrayUtils.isSameType(boolean2, boolean2);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(16, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {96.0, (-1278.891), 69.0, 87.0, 0.0, 83.0, 65.0, 87.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1333L), (-536));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'W';
      boolean boolean4 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean4);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertArrayEquals(new float[] {87.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-2384L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) 0);
      assertEquals(5, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-2384L)}, longArray0);
      assertArrayEquals(new long[] {(-2384L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.reverse((short[]) null, (-329), 2);
      long[] longArray2 = ArrayUtils.subarray(longArray0, 118, 45);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-2384L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      Long[] longArray3 = new Long[5];
      Long long0 = new Long((-3714L));
      assertEquals((-3714L), (long)long0);
      assertNotNull(long0);
      
      longArray3[0] = long0;
      longArray3[1] = (Long) 0L;
      longArray3[2] = (Long) 0L;
      longArray3[3] = (Long) (-2384L);
      longArray3[4] = (Long) 0L;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-6135), longArray3, longArray3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -6135, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[3] = (byte) (-78);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-60);
      byteArray0[4] = (byte) (-62);
      byteArray0[6] = (byte)15;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-332), (int) (byte) (-1));
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1), (byte) (-1), (byte) (-62), (byte)0, (byte)15}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-78);
      ArrayUtils.shift(intArray0, (int) (byte)0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-78)}, intArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte) (-1);
      objectArray0[1] = (Object) (byte) (-1);
      objectArray0[2] = (Object) (byte) (-1);
      objectArray0[3] = (Object) (byte) (-1);
      objectArray0[4] = (Object) (byte) (-62);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(3, int0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[3] = (byte) (-78);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-60);
      byteArray0[6] = (byte)15;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-332), (int) (byte) (-1));
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-1), (byte) (-1), (byte) (-60), (byte)0, (byte)15}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-78);
      ArrayUtils.shift(intArray0, (int) (byte)0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-78)}, intArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte) (-1);
      objectArray0[1] = (Object) (byte) (-1);
      objectArray0[2] = (Object) (byte) (-1);
      objectArray0[3] = (Object) (byte) (-1);
      objectArray0[4] = (Object) (byte) (-60);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(3, int0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)96, (int) (byte)96);
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Byte byte0 = new Byte((byte)96);
      assertEquals((byte)96, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.swap(byteArray0, 2904, 2904, (-1));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Float float0 = new Float((float) (-3286));
      assertEquals((-3286.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-4346.415702226524));
      assertEquals((-4346.4155F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float1;
      floatArray0[1] = float2;
      floatArray0[2] = float1;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      Float float3 = new Float(1.5);
      assertEquals(1.5F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      floatArray0[5] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-4346.4155F), 1.0F, (-4346.4155F), (-3286.0F), (-3286.0F), 1.5F}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0, (-931.60565F));
      assertEquals(6, floatArray2.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-4346.4155F), 1.0F, (-4346.4155F), (-3286.0F), (-3286.0F), 1.5F}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(12, booleanArray0.length);
      
      long[] longArray0 = new long[10];
      longArray0[1] = (long) 1;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[17];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) 'R';
      floatArray0[2] = (float) 1;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(17, floatArray0.length);
      assertEquals(17, floatArray1.length);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = ':';
      floatArray0[14] = (float) '#';
      charArray0[3] = '#';
      charArray0[4] = 'J';
      charArray0[5] = '|';
      charArray0[6] = '#';
      int int1 = new Character('g');
      assertEquals('g', int1);
      assertFalse(int1 == int0);
      
      float[] floatArray2 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertEquals(34, floatArray2.length);
      assertEquals(17, floatArray0.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 101, 101, (-2));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Object[] objectArray0 = new Object[5];
      int[] intArray0 = new int[0];
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      Object object0 = ArrayUtils.get(objectArray0, 101);
      assertEquals(5, objectArray0.length);
      assertNull(object0);
      
      objectArray0[1] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[3] = object2;
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, (-1042));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Object object3 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNull(object3);
      
      objectArray0[4] = null;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(2, classArray0.length);
      assertEquals(2, classArray1.length);
      assertNotNull(classArray1);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-193), 2599);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Object object4 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)0, object4);
      assertNotNull(object4);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)object4));
      assertNotNull(byte1);
      
      boolean boolean0 = ArrayUtils.isEquals(object4, byte1);
      assertTrue(boolean0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object4.equals((Object)byte1));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)object4));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-193);
      longArray0[1] = 754L;
      longArray0[2] = (long) (-193);
      longArray0[3] = (long) 2599;
      longArray0[4] = (long) 101;
      ArrayUtils.reverse(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {101L, 2599L, (-193L), 754L, (-193L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      Short[] shortArray0 = new Short[9];
      Short short0 = new Short((short) (-30));
      assertEquals((short) (-30), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-174));
      assertEquals((short) (-174), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-120));
      assertEquals((short) (-120), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-30));
      assertEquals((short) (-30), (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-30));
      assertEquals((short) (-30), (short)short4);
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short)1072);
      assertEquals((short)1072, (short)short5);
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)0);
      assertEquals((short)0, (short)short6);
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      Short short7 = new Short((short) (-1472));
      assertEquals((short) (-1472), (short)short7);
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short1));
      assertNotNull(short7);
      
      shortArray0[7] = short7;
      Short short8 = new Short((short) shortArray0[5]);
      assertEquals((short)1072, (short)short8);
      assertEquals(9, shortArray0.length);
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short6));
      assertFalse(short8.equals((Object)short4));
      assertTrue(short8.equals((Object)short5));
      assertFalse(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short3));
      assertNotNull(short8);
      
      shortArray0[8] = short8;
      Short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-15L);
      longArray0[2] = 1L;
      longArray0[3] = 555L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertEquals(6, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-15L), 1L, 555L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-15L), 1L, 555L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (-329), 2);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray2 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (-329);
      intArray0[3] = (-329);
      intArray0[4] = (-1);
      intArray0[5] = (-329);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(12, intArray1.length);
      assertEquals(6, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2, 2, (-329), (-329), (-1), (-329)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      
      longArray3[0] = (long) (-329);
      int int0 = ArrayUtils.lastIndexOf(longArray3, (-850L));
      assertEquals((-1), int0);
      assertEquals(1, longArray3.length);
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-329L)}, longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-15L);
      Object[] objectArray1 = ArrayUtils.removeElements(objectArray0, objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, 1, 2, (-1));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-15L);
      longArray0[2] = 1L;
      longArray0[3] = 555L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertEquals(6, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-15L), 1L, 555L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-15L), 1L, 555L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (-329), 2);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 2, 2);
      assertEquals(6, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, (-15L), 1L, 555L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-15L), 1L, 555L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      Long[] longArray3 = new Long[1];
      longArray3[0] = (Long) 555L;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3247, longArray3, longArray3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3247, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-87);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-87), (byte)0, (byte)0, (byte) (-80), (byte)0}, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-87);
      intArray0[1] = (int) (byte) (-87);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)0;
      intArray0[8] = (int) (byte)0;
      boolean boolean1 = ArrayUtils.contains(intArray0, (-87));
      assertTrue(boolean1);
      assertEquals(9, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-87), (-87), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean2);
      assertEquals(9, intArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new int[] {(-87), (-87), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, objectArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(objectArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, objectArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, objectArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '{';
      charArray0[3] = '/';
      ArrayUtils.shift(charArray0, (int) (byte)0, 1921, (int) (byte) (-87));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'/', '>', '>', '{'}, charArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1001;
      shortArray0[1] = (short) (byte) (-80);
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte)0;
      shortArray1[1] = (short) (byte) (-87);
      shortArray1[2] = (short) (byte)0;
      boolean boolean3 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(boolean3);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1001, (short) (-80)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-87), (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      Character character0 = new Character('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3143;
      shortArray0[1] = (short)3143;
      shortArray0[2] = (short)3143;
      shortArray0[3] = (short)3143;
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = (-2239);
      int[] intArray1 = ArrayUtils.removeElements((int[]) null, intArray0);
      assertEquals(2, intArray0.length);
      assertNull(intArray1);
      assertArrayEquals(new int[] {2, (-2239)}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      Character character1 = new Character('H');
      assertEquals('H', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Short short0 = new Short((short) (-833));
      assertEquals((short) (-833), (short)short0);
      assertNotNull(short0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertFalse(boolean1);
      assertEquals(2, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {2, (-2239)}, intArray0);
      
      boolean boolean2 = ArrayUtils.contains((int[]) null, (int) (short) (-833));
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[0] = 0L;
      longArray0[4] = 1L;
      longArray0[5] = 0L;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)1214);
      assertEquals((-1), int0);
      
      Float[] floatArray2 = new Float[1];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(floatArray2, 1082);
      assertFalse(boolean0);
      assertEquals(1, floatArray2.length);
      
      float[] floatArray3 = ArrayUtils.insert((-1621), floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray3.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) floatArray2, (Object) float0, (int) (short)1214);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, floatArray2.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, 1082);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(1, booleanArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotSame(bitSet1, bitSet0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1621));
      assertEquals((-1621), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2142569572));
      assertEquals((-2142569572), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integerArray0[0];
      Integer integer2 = new Integer((-373));
      assertEquals((-373), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertEquals((-373), (int)integer3);
      assertEquals(4, integerArray0.length);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray3, (-73.2262F));
      assertFalse(boolean1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray3.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short)1383);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)1383}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 11;
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) ')';
      doubleArray0[1] = 512.7;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, 2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {41.0, 512.7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 2);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {41.0, 512.7}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3115);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[7];
      stringArray0[3] = "Y*jM";
      stringArray0[4] = "H";
      stringArray0[2] = "H";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-4);
      ArrayUtils.swap(byteArray0, (int) (byte) (-84), (int) (byte) (-84), (-90));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-84), (byte) (-84), (byte) (-84), (byte) (-4)}, byteArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-4);
      floatArray0[1] = (float) (byte) (-84);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 3115;
      floatArray0[4] = (float) (byte) (-84);
      ArrayUtils.swap(floatArray0, (-857), (-1418), (-857));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-4.0F), (-84.0F), 1.0F, 3115.0F, (-84.0F)}, floatArray0, 0.01F);
      
      MutableInt mutableInt0 = new MutableInt(3115);
      assertEquals(3115.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3115.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3115L, mutableInt0.longValue());
      assertEquals((short)3115, mutableInt0.shortValue());
      assertEquals(3115, mutableInt0.intValue());
      assertEquals("3115", mutableInt0.toString());
      assertEquals((byte)43, mutableInt0.byteValue());
      assertEquals(3115, (int)mutableInt0.toInteger());
      assertEquals(3115, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      String string0 = ArrayUtils.toString((Object) "H");
      assertEquals("H", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-84);
      doubleArray0[1] = (double) 3115;
      doubleArray0[2] = (double) 1.0F;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, (int) (byte) (-84));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-84.0), 3115.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 2696.6162394);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-84.0), 3115.0, 1.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2511, 90);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 2511);
      assertNull(intArray0);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)28645;
      shortArray0[1] = (short)2298;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-412));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)28645, (short)2298}, shortArray0);
      assertArrayEquals(new short[] {(short)28645, (short)2298}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 90;
      longArray0[1] = (long) (short)2298;
      longArray0[2] = (long) (short) (-412);
      longArray0[3] = (long) (short) (-412);
      longArray0[4] = (long) 2511;
      longArray0[5] = (-4412L);
      longArray0[6] = (long) (short)2298;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, (int) (short) (-412));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(7, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {90L, 2298L, (-412L), (-412L), 2511L, (-4412L), 2298L}, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) 2298L;
      floatArray0[2] = 2858.231F;
      floatArray0[3] = 3769.0F;
      floatArray0[4] = (float) (short)2298;
      floatArray0[5] = (float) (short)28645;
      floatArray0[6] = (float) (-412L);
      floatArray0[7] = (float) 2511;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 2298.0F, 2858.231F, 3769.0F, 2298.0F, 28645.0F, (-412.0F), 2511.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      longArray0[1] = (-693L);
      longArray0[2] = (-2367L);
      longArray0[3] = 4687L;
      longArray0[4] = 799L;
      longArray0[5] = 2219L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 68, 68);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), (-693L), (-2367L), 4687L, 799L, 2219L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '\"';
      ArrayUtils.swap(charArray0, 68, 68, (-885));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'!', '\"'}, charArray0);
      
      ArrayUtils.swap(longArray1, 103, 1, 1);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), (-693L), (-2367L), 4687L, 799L, 2219L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '!';
      intArray0[1] = (int) '!';
      intArray0[2] = (int) '!';
      intArray0[3] = 2859;
      intArray0[4] = 68;
      intArray0[5] = 68;
      intArray0[6] = (int) '\"';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2859, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-394.46796F);
      floatArray0[1] = (-1033.464F);
      floatArray0[2] = (-2.14748365E9F);
      floatArray0[3] = (-533.0F);
      floatArray0[4] = (-609.273F);
      floatArray0[5] = 1251.661F;
      floatArray0[6] = (-680.9F);
      floatArray0[7] = 45.75F;
      floatArray0[8] = (-1.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1033.464F), 704);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(9, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-394.46796F), (-1033.464F), (-2.14748365E9F), (-533.0F), (-609.273F), 1251.661F, (-680.9F), 45.75F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'S');
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ArrayUtils.reverse((long[]) null, (int) '7', 6);
      boolean boolean1 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Object> class0 = Object.class;
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 2);
      Class<Float> class1 = Float.class;
      classArray0[0] = class1;
      Class<Float> class2 = Float.class;
      classArray0[1] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(2, classArray0.length);
      assertEquals(2, classArray1.length);
      assertNotNull(classArray1);
      
      int[] intArray0 = new int[2];
      charArray0[7] = 'S';
      intArray0[1] = (int) 'S';
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-193), 6);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 83}, intArray0);
      
      boolean boolean2 = ArrayUtils.isEquals(class0, class1);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(class1, class2);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 6, (-1680));
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'S'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'class java.lang.Float', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)0;
      Short short0 = new Short((short)91);
      assertEquals((short)91, (short)short0);
      assertNotNull(short0);
      
      byte[] byteArray0 = new byte[1];
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) short0);
      assertEquals(91.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (byte)0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) (short)91);
      assertEquals(91.0F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      Long[] longArray0 = new Long[10];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(10, longArray0.length);
      assertEquals(10, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)55;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)55}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (byte) (-27);
      doubleArray0[2] = 70.0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)55;
      doubleArray0[6] = (double) (byte) (-27);
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) longArray1);
      assertFalse(boolean1);
      assertEquals(10, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(boolean1 == boolean0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      char[] charArray0 = new char[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '?';
      longArray0[1] = (long) '?';
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {63L, 63L}, longArray0);
      
      ArrayUtils.shift(charArray0, (-3044), (-3044), (-329));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)45;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)45;
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)45;
      floatArray0[1] = (float) 'Z';
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {45.0F, 90.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = 'W';
      charArray0[2] = 'b';
      charArray0[4] = 's';
      charArray0[5] = 'W';
      charArray0[6] = 'W';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(14, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Z', 'W', 'b', '\u0000', 's', 'W', 'W'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 98.0;
      doubleArray0[2] = (-2068.8649141023784);
      doubleArray0[3] = 3693.268;
      doubleArray0[4] = 959.7098235740249;
      doubleArray0[5] = (-886.4504001941259);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 98.0, (-2068.8649141023784), 3693.268, 959.7098235740249, (-886.4504001941259)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-88);
      shortArray0[1] = (short)196;
      shortArray0[2] = (short)1261;
      shortArray0[3] = (short)59;
      shortArray0[4] = (short) (-2187);
      shortArray0[5] = (short)76;
      shortArray0[6] = (short) (-37);
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)50;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-2475));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2475, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-47);
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short)0;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-22);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-110), (int) (byte) (-110));
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-22), (byte) (-22), (byte) (-22), (byte) (-22)}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (byte) (-22);
      doubleArray0[2] = (double) (byte) (-22);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short) (-47);
      doubleArray0[5] = (double) (byte) (-22);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = 1267.268;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean1);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1.0), (-22.0), (-22.0), (-1.0), (-47.0), (-22.0), (-1.0), 1267.268}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[2] = (byte)9;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)5);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte)9}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte)9}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-27), (int) (byte)9);
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte)9}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte)9}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte)9}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte)9}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted((Object[]) floatArray0, comparator0);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-27);
      doubleArray0[1] = (double) (byte) (-27);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 49.0;
      boolean boolean2 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean2);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {(-27.0), (-27.0), (-1.0), 49.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)9;
      intArray0[1] = (-1300);
      intArray0[2] = (int) (byte)5;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      Float float0 = new Float((-1539.62613764064));
      assertEquals((-1539.6261F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals((-1539L), mutableInt0.longValue());
      assertEquals((-1539), (int)mutableInt0.getValue());
      assertEquals((-1539), (int)mutableInt0.toInteger());
      assertEquals((byte) (-3), mutableInt0.byteValue());
      assertEquals((-1539.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-1539", mutableInt0.toString());
      assertEquals((-1539.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1539), mutableInt0.intValue());
      assertEquals((short) (-1539), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      MutableInt[] mutableIntArray1 = ArrayUtils.removeAllOccurrences(mutableIntArray0, mutableInt0);
      assertEquals((-1539L), mutableInt0.longValue());
      assertEquals((-1539), (int)mutableInt0.getValue());
      assertEquals((-1539), (int)mutableInt0.toInteger());
      assertEquals((byte) (-3), mutableInt0.byteValue());
      assertEquals((-1539.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-1539", mutableInt0.toString());
      assertEquals((-1539.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1539), mutableInt0.intValue());
      assertEquals((short) (-1539), mutableInt0.shortValue());
      assertEquals(0, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2200.3F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1425.51F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1425.51F);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2200.3F), (-1.0F), 1425.51F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2200.3F), (-1.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 79;
      intArray0[1] = (-4884);
      intArray0[2] = 41;
      intArray0[3] = (-1434);
      intArray0[4] = 945;
      intArray0[5] = (-8);
      intArray0[6] = (-1481);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {79, (-4884), 41, (-1434), 945, (-8), (-1481)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'M';
      floatArray0[2] = (float) 'M';
      floatArray0[3] = (float) 'M';
      floatArray0[4] = (float) 'M';
      floatArray0[7] = (float) 'M';
      ArrayUtils.shuffle(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 77.0F, 77.0F, 77.0F, 0.0F, 0.0F, 77.0F, 0.0F, 77.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[21];
      longArray0[0] = (-11L);
      longArray0[1] = (long) 'M';
      longArray0[13] = (long) 'M';
      longArray0[3] = (long) 'M';
      longArray0[4] = (long) 'M';
      longArray0[5] = (long) 'M';
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Float float0 = new Float((double) 77L);
      assertEquals(77.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = ArrayUtils.isEquals(byte0, float0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)88;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-126));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(4, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)88}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 13L;
      Class<String[]> class0 = String[].class;
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null, class0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short)91;
      shortArray0[2] = (short) (-829);
      shortArray0[3] = (short) (-1639);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-829));
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(4, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)16, (short)91, (short) (-829), (short) (-1639)}, shortArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 2281L);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(8, longArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {13L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-2305L));
      assertEquals((-2305L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-2305L));
      assertEquals((-2305L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Long long2 = new Long(440L);
      assertEquals(440L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1057.98;
      doubleArray0[1] = (-2591.560268744868);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1479.163666;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1057.98, (-2591.560268744868), (-1.0), (-1.0), 1479.163666}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1057.98, (-2591.560268744868), (-1.0), (-1.0), 1479.163666, 1057.98, (-2591.560268744868), (-1.0), (-1.0), 1479.163666}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1110L);
      doubleArray0[1] = (double) (-1333L);
      longArray0[2] = 1L;
      longArray0[3] = (long) (-536);
      longArray0[4] = (-1333L);
      longArray0[5] = (-1333L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 2);
      assertEquals(2, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1110L), 0L, 1L, (-536L), (-1333L), (-1333L)}, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-536);
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = (-3301);
      intArray0[4] = 2;
      intArray0[5] = (-536);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-981));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -981, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      shortArray0[2] = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray1 = new Short[5];
      shortArray1[0] = short1;
      shortArray1[1] = (Short) (short)0;
      shortArray1[2] = short1;
      shortArray1[3] = (Short) (short)0;
      shortArray1[4] = short1;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      Float float0 = new Float((float) short0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayUtils.shift(byteArray0, (int) short0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 3610;
      longArray0[2] = (long) 3610;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 14L, (int) (short)0);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 3610L, 3610L}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 3610L, 3610L}, longArray0);
      
      ArrayUtils.reverse((short[]) null, (int) short0, 784);
      boolean boolean0 = ArrayUtils.contains(shortArray0, short0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 54L;
      longArray0[1] = (-35L);
      longArray0[2] = 95L;
      longArray0[3] = (-876L);
      longArray0[4] = 54L;
      longArray0[5] = (long) (byte)45;
      longArray0[6] = 95L;
      longArray0[7] = (-35L);
      int int0 = ArrayUtils.indexOf(longArray0, 54L);
      assertEquals(0, int0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {54L, (-35L), 95L, (-876L), 54L, 45L, 95L, (-35L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)96, (int) (byte)96);
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Byte byte0 = new Byte((byte)96);
      assertEquals((byte)96, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.swap(byteArray0, 2904, 2904, (-1));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Float float0 = new Float((float) (-3286));
      assertEquals((-3286.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-4346.415702226524));
      assertEquals((-4346.4155F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float1;
      floatArray0[1] = float2;
      floatArray0[2] = float1;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      Float float3 = new Float(1.5);
      assertEquals(1.5F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      floatArray0[5] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-931.60565F));
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-4346.4155F), 1.0F, (-4346.4155F), (-3286.0F), (-3286.0F), 1.5F}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 2904;
      longArray0[2] = (long) 2904;
      longArray0[3] = (long) (byte)96;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-1));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-1L), 2904L, 2904L, 96L}, longArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) floatArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(objectArray0);
      assertSame(floatArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-501L));
      assertEquals((-501L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)55;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-27), (byte)0, (byte)55}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte) (-27);
      doubleArray0[2] = 70.0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)55;
      doubleArray0[6] = (double) (byte) (-27);
      ArrayUtils.shift(doubleArray0, 101);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 55.0, (-27.0), 0.0, (-27.0), 70.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = ',';
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)0);
      assertEquals(4, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-27), (byte)0, (byte)55}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)55}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-27.0), 0.0);
      assertEquals(2, int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 55.0, (-27.0), 0.0, (-27.0), 70.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ',');
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {',', ',', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {',', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      assertSame(longArray0, objectArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double('O');
      assertEquals(79.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double('O');
      assertEquals(79.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1750.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3974);
      shortArray0[1] = (short) (-1224);
      shortArray0[2] = (short) (-3343);
      ArrayUtils.reverse(shortArray0, (int) (short) (-1224), 3822);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-3343), (short) (-1224), (short) (-3974)}, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1674L);
      longArray0[1] = (long) (short) (-3343);
      longArray0[2] = (long) (short) (-3343);
      int int0 = ArrayUtils.indexOf(longArray0, 54L);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1674L), (-3343L), (-3343L)}, longArray0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      intArray0[1] = 11;
      intArray0[2] = 9;
      intArray0[3] = 6;
      intArray0[4] = (-693);
      intArray0[5] = 1720;
      intArray0[6] = 22;
      intArray0[7] = (-76);
      ArrayUtils.reverse(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-76), 22, 1720, (-693), 6, 9, 11, (-516)}, intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 22;
      longArray0[1] = (long) (-693);
      longArray0[2] = (long) 22;
      longArray0[3] = (long) (-516);
      longArray0[4] = (long) (-516);
      longArray0[5] = (long) 11;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {22L, (-693L), 22L, (-516L), (-516L), 11L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) 11);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (double) (-76));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) 6);
      assertEquals((-1), int1);
      assertEquals(6, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {22L, (-693L), 22L, (-516L), (-516L), 11L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 631;
      longArray0[1] = (long) 631;
      longArray0[2] = (long) 631;
      longArray0[3] = (long) 631;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 631);
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      ArrayUtils.shift(longArray0, 631, 631, 1506);
      assertEquals(4, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {631L, 631L, 631L, 631L}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 631L;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) 1506;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {631.0, 2.0, 1506.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) 631L;
      floatArray0[2] = (float) 1506;
      floatArray0[3] = (float) (byte)2;
      floatArray0[4] = (float) 631L;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 631L);
      assertEquals(3, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F, 1506.0F, 2.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F, 631.0F, 1506.0F, 2.0F, 631.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 631;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {631, 0}, intArray0);
      
      long[] longArray2 = ArrayUtils.addFirst(longArray0, (-2444L));
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {631L, 631L, 631L, 631L}, longArray0);
      assertArrayEquals(new long[] {(-2444L), 631L, 631L, 631L, 631L}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 638;
      longArray0[1] = (long) 638;
      longArray0[3] = (long) 638;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 638);
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      ArrayUtils.shift(longArray0, 638, 638, 1506);
      assertEquals(4, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {638L, 638L, 0L, 638L}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) 638L;
      floatArray0[3] = (float) (byte)2;
      floatArray0[4] = (float) 638;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 638L);
      assertEquals(5, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F, 638.0F, 0.0F, 2.0F, 638.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, 0.0F, 2.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1506;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte)2;
      intArray0[5] = 1506;
      int int1 = ArrayUtils.indexOf(intArray0, (int) (byte)2);
      assertEquals(4, int1);
      assertEquals(6, intArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {1506, 0, 0, 0, 2, 1506}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 749;
      intArray0[5] = (-2641);
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray1, (-2641), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2641, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Double double0 = new Double((-1216.5375419));
      assertEquals((-1216.5375419), (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayUtils.hashCode((Object) double0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1216.5375419);
      doubleArray0[2] = (-1216.5375419);
      doubleArray0[2] = (-1216.5375419);
      doubleArray0[3] = (-1216.5375419);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1216.5375419), (-610));
      assertEquals(0, int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1216.5375419), 0.0, (-1216.5375419), (-1216.5375419)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)9;
      shortArray0[3] = (short) (-41);
      shortArray0[0] = (short)52;
      shortArray0[5] = (short)283;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1216.5375419), (-1216.5375419), (-1216.5375419)}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(12, shortArray2.length);
      assertEquals(6, shortArray0.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)52, (short)1, (short)9, (short) (-41), (short)0, (short)283}, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int int0 = (-1434);
      int int1 = ArrayUtils.lastIndexOf((double[]) null, 1.0, (-1434), 1.5);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = ArrayUtils.insert((-1), (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Long[] longArray0 = new Long[8];
      String string0 = "The array must not contain any null elements";
      try { 
        Long.decode("java.lang.Float");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Float\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)96, (int) (byte)96);
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Byte byte0 = new Byte((byte)96);
      assertEquals((byte)96, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.swap(byteArray0, 2904, 2904, (-1));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Float float0 = new Float((float) (-3286));
      assertEquals((-3286.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-4346.415702226524));
      assertEquals((-4346.4155F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(435.7732451);
      assertEquals(435.7732451, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-4295.0412));
      assertEquals((-4295.0412), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-1));
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-3337.8));
      assertEquals((-3337.8), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      assertEquals(435.7732451, (double)double5, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {435.7732451, (-4295.0412), (-1.0), 1.0, (-3337.8), 435.7732451}, doubleArray1, 0.01);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '1');
      assertNull(charArray0);
      
      String[] stringArray0 = ArrayUtils.addFirst((String[]) null, "A5G\"O&!l{Np");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)45;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)45;
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      String string0 = ArrayUtils.toString((Object) boolean1);
      assertEquals("true", string0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "true";
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, 13);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 45L;
      floatArray0[1] = (float) 45L;
      floatArray0[2] = (float) 45L;
      floatArray0[3] = 2144.0F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-531.6F));
      assertEquals(5, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {45.0F, 45.0F, 45.0F, 2144.0F, (-531.6F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {45.0F, 45.0F, 45.0F, 2144.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'u', (int) (byte)59);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 'Z'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'Z';
      longArray0[1] = (long) 'Z';
      longArray0[2] = (long) 'Z';
      longArray0[3] = (long) 'Z';
      longArray0[4] = (long) (byte)59;
      ArrayUtils.shift(longArray0, (-3438));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {90L, 59L, 90L, 90L, 90L}, longArray0);
      
      Long long0 = new Long((byte)59);
      assertEquals(59L, (long)long0);
      assertNotNull(long0);
      
      String string0 = ArrayUtils.toString((Object) long0);
      assertEquals("59", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(booleanArray0, (int) (byte)59);
      assertEquals(2, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      boolean[] booleanArray2 = new boolean[4];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = true;
      booleanArray2[1] = false;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      boolean[] booleanArray3 = ArrayUtils.clone(booleanArray2);
      assertEquals(4, booleanArray2.length);
      assertEquals(4, booleanArray3.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray3));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      
      ArrayUtils.swap((int[]) null, (-1), (-3438), (int) (byte)59);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 90L;
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertEquals(59L, object0);
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '90', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      char[] charArray0 = new char[5];
      ArrayUtils.swap(charArray0, 1, 1, 101);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Character character0 = new Character('=');
      assertEquals('=', (char)character0);
      assertNotNull(character0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      org.evosuite.runtime.Random.setNextRandom(1);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 45;
      floatArray0[1] = (float) 1235;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)56;
      shortArray0[1] = (short)56;
      shortArray0[2] = (short)56;
      shortArray0[3] = (short)56;
      shortArray0[4] = (short)56;
      shortArray0[5] = (short)56;
      shortArray0[6] = (short)56;
      shortArray0[7] = (short)56;
      shortArray0[8] = (short)56;
      ArrayUtils.shift(shortArray0, 1, (int) (short)56, (-2182));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)56, (short)56, (short)56, (short)56, (short)56, (short)56, (short)56, (short)56, (short)56}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {45.0F, 1235.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-2410.23739674), (double) (-2182));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (int) (short)56, (long) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 56, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-228), (-516));
      assertNull(byteArray0);
      
      ArrayUtils.shift(intArray0, (-126));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-516), 0, 0, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)101;
      shortArray0[1] = (short)1;
      intArray0[1] = (int) (short)101;
      shortArray0[3] = (short)54;
      shortArray0[4] = (short)12;
      shortArray0[5] = (short)12;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0, (int) (short)0);
      assertEquals(2, int0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)101, (short)1, (short)0, (short)54, (short)12, (short)12}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)12, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)45;
      char[] charArray0 = new char[4];
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000', (int) (byte)45);
      assertEquals(3, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'Z', 'Z', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)45;
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift(longArray0, 3);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {45L, 0L, 0L}, longArray0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      String string0 = ArrayUtils.toString((Object) boolean1);
      assertEquals("true", string0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "true";
      objectArray0[1] = (Object) 45L;
      objectArray0[2] = (Object) "true";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      
      short[] shortArray0 = ArrayUtils.insert((int) (byte)45, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)45;
      doubleArray0[1] = (double) (byte)45;
      ArrayUtils.shift(doubleArray0, (int) (byte)45, (int) (byte)45, 1854);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {45.0, 45.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 90.0;
      doubleArray0[1] = 1.5;
      ArrayUtils.shift(doubleArray0, 127, 203, 4496);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {90.0, 1.5}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 203;
      intArray0[1] = 203;
      int int0 = ArrayUtils.indexOf(intArray0, 4496, 203);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {203, 203}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-128), (-1));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = '+';
      charArray0[2] = 'M';
      charArray0[3] = 'o';
      charArray0[4] = 'q';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {',', '+', 'M', 'o', 'q'}, charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'o';
      longArray0[1] = (long) 'M';
      longArray0[2] = (long) 'q';
      longArray0[3] = (long) 'q';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 520);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 520, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, false, true}, booleanArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 5458.79882286;
      doubleArray0[1] = (-1216.5375419);
      doubleArray0[2] = 2034.285467;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 310.457636802;
      doubleArray0[7] = 1.5;
      doubleArray0[8] = 3465.797501;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 98, 3465.797501);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {5458.79882286, (-1216.5375419), 2034.285467, 0.0, 0.0, 1.0, 310.457636802, 1.5, 3465.797501}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 1;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      char[] charArray0 = new char[8];
      charArray0[0] = '/';
      charArray0[1] = 'e';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = '/';
      charArray0[6] = ' ';
      charArray0[7] = '#';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertEquals(16, charArray1.length);
      assertEquals(8, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'/', 'e', '\'', '\'', '\'', '/', ' ', '#'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 'B';
      charArray0[2] = 'U';
      charArray0[3] = 'B';
      charArray0[5] = '/';
      charArray0[6] = 'p';
      ArrayUtils.swap(charArray0, (-1165), 4, 1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'B', 'U', 'B', 'H', '/', 'p'}, charArray0);
      
      Character character0 = new Character('p');
      assertEquals('p', (char)character0);
      assertNotNull(character0);
      
      int[] intArray0 = new int[18];
      intArray0[0] = (int) 'p';
      intArray0[13] = (int) 'B';
      intArray0[2] = (int) 'U';
      intArray0[3] = (int) 'H';
      intArray0[4] = (-1165);
      intArray0[5] = (int) 'B';
      intArray0[6] = (int) (short)97;
      intArray0[7] = (int) 'H';
      intArray0[8] = (int) 'B';
      Object object0 = new Object();
      assertNotNull(object0);
      
      org.evosuite.runtime.Random.setNextRandom((-1165));
      int int0 = ArrayUtils.indexOf(charArray0, '/');
      assertEquals(5, int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'B', 'U', 'B', 'H', '/', 'p'}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '/';
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-2024.3696F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {47.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {47.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1491.265F);
      floatArray0[1] = (-2508.161F);
      floatArray0[2] = 3213.895F;
      floatArray0[3] = 3384.431F;
      floatArray0[4] = 2.14748365E9F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1491.265F), (-2508.161F), 3213.895F, 3384.431F, 2.14748365E9F}, floatArray0, 0.01F);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 271L;
      long[] longArray1 = ArrayUtils.add(longArray0, 271L);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {271L}, longArray0);
      assertArrayEquals(new long[] {271L, 271L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2508.161F);
      doubleArray0[1] = (double) (-1491.265F);
      doubleArray0[2] = (double) (-2508.161F);
      doubleArray0[3] = (double) (-2508.161F);
      doubleArray0[4] = (double) 271L;
      doubleArray0[5] = (double) 3213.895F;
      doubleArray0[6] = (double) (-2508.161F);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1.0));
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-2508.160888671875), (-1491.2650146484375), (-2508.160888671875), (-2508.160888671875), 271.0, 3213.89501953125, (-2508.160888671875)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2508.160888671875), (-1491.2650146484375), (-2508.160888671875), (-2508.160888671875), 271.0, 3213.89501953125, (-2508.160888671875)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray1, (-2147483648L));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = ':';
      charArray0[2] = '_';
      charArray0[3] = ' ';
      charArray0[4] = 'b';
      ArrayUtils.shift(charArray0, 2095833977);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {':', '_', ' ', 'b', '\u0000', 'R'}, charArray0);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)6508);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)6508}, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)112;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)32;
      byteArray0[6] = (byte) (-22);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-89));
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)17, (byte) (-83), (byte)32, (byte)0, (byte) (-22)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)17, (byte) (-83), (byte)32, (byte)0, (byte) (-22)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray1, (-2147483648L));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      Object[] objectArray0 = new Object[0];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) boolean0, 3014);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, objectArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = ':';
      charArray0[2] = '_';
      charArray0[3] = ' ';
      charArray0[4] = 'b';
      ArrayUtils.shift(charArray0, 2095833977);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {' ', 'b', 'R', ':', '_'}, charArray0);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)6501);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)6501}, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-22);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-89));
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)112, (byte)17, (byte) (-83), (byte)32, (byte)33, (byte) (-22)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)112, (byte)17, (byte) (-83), (byte)32, (byte)33, (byte) (-22)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertEquals((byte) (-14), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte byte2 = (byte) (-126);
      Byte byte3 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-122));
      assertEquals((byte) (-122), (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte3;
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-14)}, byteArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2413;
      intArray0[1] = (int) (byte) (-126);
      intArray0[2] = (int) (byte) (-126);
      intArray0[3] = (int) byte2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) byte2, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -126, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 938.1);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      charArray0[2] = '/';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = '/';
      charArray0[6] = 'n';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'n', '\u0000', '/', 'n', 'n', '/', 'n'}, charArray0);
      
      Short[] shortArray0 = new Short[22];
      Short short0 = new Short((short) (-701));
      assertEquals((short) (-701), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)117);
      assertEquals((short)117, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences((double[]) null, 938.1);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = new Byte[2];
      try { 
        Byte.decode("G@bWoCe/S71$+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"G@bWoCe/S71$+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = (-1214.5574F);
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1214.5574F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1214.5574F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Float float0 = new Float(3.40657890391901);
      assertEquals(3.406579F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Long long0 = new Long((-288L));
      assertEquals((-288L), (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) long0, (-1932735283));
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (-1);
      intArray0[2] = (-1932735283);
      intArray0[3] = (-1);
      intArray0[4] = 413;
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1);
      assertEquals(5, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, (-1), (-1932735283), (-1), 413}, intArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(2, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1673.1F);
      assertEquals((-1), int1);
      assertEquals(5, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1214.5574F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int2 = ArrayUtils.lastIndexOf((Object[]) floatArray1, (Object) long0, 413);
      assertEquals((-1), int2);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1214.5574F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'x');
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1003);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-1003), 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-87);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-87);
      shortArray0[1] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, 102);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-87), (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (byte) (-84);
      doubleArray0[2] = (double) (byte) (-87);
      doubleArray0[3] = (double) (-1453);
      doubleArray0[4] = (double) (byte) (-84);
      doubleArray0[5] = (double) (short) (-87);
      ArrayUtils.swap(doubleArray0, (-2673), 74, 580);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-84.0), (-87.0), (-1453.0), (-84.0), (-87.0)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      ArrayUtils.shift(objectArray0, (-1));
      assertEquals(1, objectArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (byte) (-87);
      intArray0[3] = (int) (byte) (-87);
      intArray0[4] = (int) (byte) (-87);
      intArray0[5] = (int) (short)0;
      intArray0[6] = (-1347);
      intArray0[7] = 74;
      intArray0[8] = (int) (short)0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, intArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-1), 0, (-87), (-87), (-87), 0, (-1347), 74, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 18688, 8);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 18688);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {18688L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = (-2019);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2, (-2019)}, intArray0);
      assertArrayEquals(new int[] {2, (-2019)}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-2019);
      objectArray0[1] = (Object) (-2019);
      objectArray0[2] = (Object) 2;
      objectArray0[3] = (Object) (-2019);
      objectArray0[4] = (Object) (-2019);
      objectArray0[5] = (Object) 2;
      objectArray0[6] = (Object) (-2019);
      objectArray0[7] = (Object) 2;
      objectArray0[8] = (Object) (-2019);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)14;
      shortArray0[1] = (short) (byte)14;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)14, (short)14}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Short[] shortArray2 = new Short[8];
      shortArray2[0] = (Short) (short)14;
      shortArray2[1] = (Short) (short)14;
      shortArray2[2] = (Short) (short)14;
      shortArray2[3] = (Short) (short)14;
      shortArray2[4] = (Short) (short)14;
      Short short0 = new Short((short) shortArray2[2]);
      assertEquals((short)14, (short)short0);
      assertEquals(8, shortArray2.length);
      assertNotNull(short0);
      
      shortArray2[5] = short0;
      shortArray2[6] = (Short) (short)14;
      shortArray2[7] = (Short) (short)14;
      Class<Short[]> class0 = Short[].class;
      Short[] shortArray3 = ArrayUtils.nullToEmpty(shortArray2, class0);
      assertEquals(8, shortArray2.length);
      assertEquals(8, shortArray3.length);
      assertNotNull(shortArray3);
      assertSame(shortArray2, shortArray3);
      assertSame(shortArray3, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)42);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)5, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)5, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-1), (int) (byte) (-1));
      assertEquals(2, int0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)9, (byte)5, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)5, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)9, (byte)5, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)5, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom((byte)9);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) floatArray0, (Random) mockRandom0);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)9;
      intArray0[1] = 2;
      intArray0[2] = (-717);
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte) (-1));
      assertEquals(4, intArray1.length);
      assertEquals(3, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {9, 2, (-717), (-1)}, intArray1);
      assertArrayEquals(new int[] {9, 2, (-717)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      ArrayUtils.shuffle(intArray1, (Random) mockRandom0);
      assertEquals(4, intArray1.length);
      assertEquals(3, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {2, (-717), (-1), 9}, intArray1);
      assertArrayEquals(new int[] {9, 2, (-717)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false}, booleanArray0));
      
      char char0 = '4';
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '4');
      assertNull(charArray0);
      
      char[] charArray1 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1626), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1626, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2629);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte) (-35);
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertEquals(14, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte)9, (byte) (-35), (byte)9, (byte) (-35), (byte) (-35)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1170L;
      longArray0[1] = (long) (byte) (-42);
      longArray0[2] = (-2278L);
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1);
      assertEquals(3, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {1170L, (-42L), (-2278L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      short[] shortArray0 = new short[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) (short)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 938.1, (double) (short)0);
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(7, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(bitSet1, bitSet0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '/';
      doubleArray0[5] = (double) 'n';
      charArray0[3] = 'n';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '/', '\u0000', 'n'}, charArray0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2, (int) (short)0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'n';
      longArray0[1] = (long) '/';
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 'n';
      boolean boolean2 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean2);
      assertEquals(4, longArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new long[] {110L, 47L, 2L, 110L}, longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '/';
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) '/';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {47.0F, 0.0F, 1.0F, 47.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {47.0F, 0.0F, 1.0F, 47.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short short0 = (short) (-4);
      Short short1 = new Short((short) (-4));
      assertEquals((short) (-4), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-2444));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4)}, shortArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-4);
      floatArray0[1] = (float) (short) (-4);
      floatArray0[2] = (float) (short) (-2444);
      floatArray0[3] = (float) short0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-4.0F), (-4.0F), (-2444.0F), (-4.0F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-4);
      longArray0[1] = (long) (short) (-2444);
      longArray0[2] = (long) short0;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1455L));
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-4L), (-2444L), (-4L)}, longArray0);
      assertArrayEquals(new long[] {(-4L), (-2444L), (-4L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-4.0F);
      objectArray0[1] = (Object) (-4L);
      objectArray0[2] = (Object) (-4L);
      objectArray0[3] = (Object) (-2444.0F);
      objectArray0[4] = (Object) (-4L);
      objectArray0[5] = (Object) (-4.0F);
      objectArray0[6] = (Object) (-4.0F);
      objectArray0[7] = (Object) (-2444L);
      Integer[] integerArray0 = new Integer[4];
      MutableInt mutableInt0 = new MutableInt((-2444.0F));
      assertEquals((-2444), (int)mutableInt0.toInteger());
      assertEquals((byte)116, mutableInt0.byteValue());
      assertEquals((-2444), (int)mutableInt0.getValue());
      assertEquals((-2444L), mutableInt0.longValue());
      assertEquals((-2444.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-2444", mutableInt0.toString());
      assertEquals((-2444), mutableInt0.intValue());
      assertEquals((short) (-2444), mutableInt0.shortValue());
      assertEquals((-2444.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.getValue();
      assertEquals((-2444), (int)integer0);
      assertEquals((-2444), (int)mutableInt0.toInteger());
      assertEquals((byte)116, mutableInt0.byteValue());
      assertEquals((-2444), (int)mutableInt0.getValue());
      assertEquals((-2444L), mutableInt0.longValue());
      assertEquals((-2444.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-2444", mutableInt0.toString());
      assertEquals((-2444), mutableInt0.intValue());
      assertEquals((short) (-2444), mutableInt0.shortValue());
      assertEquals((-2444.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(short0);
      assertEquals((-4), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(70);
      assertEquals(70, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((short) (-4));
      assertEquals((-4), (int)integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      Integer integer5 = ArrayUtils.get(integerArray0, (int)  (-2444), integer4);
      assertEquals((-4), (int)integer5);
      assertEquals(4, integerArray0.length);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, (Object) integer5);
      assertEquals(8, objectArray0.length);
      assertEquals(8, objectArray1.length);
      assertEquals(4, integerArray0.length);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(12, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(12, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[4];
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-101);
      ArrayUtils.reverse(byteArray0, 1517, 55);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-42), (byte) (-101)}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-101);
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-101.0F)}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte) (-101), (int) (byte) (-42));
      assertEquals(0, int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-101.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte) (-42));
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Long long0 = new Long(1517);
      assertEquals(1517L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2147483648L));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1517L}, longArray1);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '\'');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      Double double0 = new Double((-2068.8649141023784));
      assertEquals((-2068.8649141023784), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-516));
      assertEquals((-516.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      ArrayUtils.shift(intArray0, 11);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, (-516), 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-516);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-2068.8649141023784);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 11;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (-516));
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-516.0), 0.0, 0.0, (-2068.8649141023784), 0.0, 0.0, 11.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2068.8649141023784), 0.0, 0.0, 11.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'y');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-1), (-3043), (-3043));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)741);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3043);
      intArray0[1] = (int) (short)741;
      intArray0[2] = 7;
      ArrayUtils.shift(intArray0, (-1));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {741, 7, (-3043)}, intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 7;
      longArray0[1] = (long) (-3043);
      longArray0[2] = (-1500L);
      longArray0[3] = (long) (-3043);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 7;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1107L));
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {7L, (-3043L), (-1500L), (-3043L), (-1L), 7L}, longArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3043);
      doubleArray0[1] = (double) (-1);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)741, (-1));
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-3043.0), (-1.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-330);
      shortArray0[1] = (short)2503;
      shortArray0[2] = (short)624;
      shortArray0[3] = (short)1426;
      shortArray0[4] = (short)229;
      shortArray0[5] = (short)140;
      shortArray0[6] = (short)54;
      shortArray0[7] = (short) (-1160);
      ArrayUtils.swap(shortArray0, (-954), (int) (short)229, (int) (short)54);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-330), (short)2503, (short)624, (short)1426, (short)229, (short)140, (short)54, (short) (-1160)}, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)9;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)140, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 140, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      long[] longArray0 = new long[4];
      double[] doubleArray0 = new double[5];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1517.478197799237);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Long long0 = new Long(1091L);
      assertEquals(1091L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray1 = new Long[3];
      longArray1[0] = long0;
      longArray1[1] = long0;
      longArray1[2] = long0;
      Long[] longArray2 = ArrayUtils.add(longArray1, longArray1[2]);
      assertEquals(3, longArray1.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (long)longArray1[0];
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) (long)longArray1[1];
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (long)longArray1[0];
      floatArray0[5] = (float) (long)longArray1[2];
      floatArray0[6] = (float) (long)longArray1[0];
      floatArray0[7] = (float) 1091L;
      floatArray0[8] = (-12.0F);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, Float.NaN, (-1));
      assertEquals((-1), int1);
      assertEquals(9, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {1091.0F, 1.0F, 1091.0F, (-1.0F), 1091.0F, 1091.0F, 1091.0F, 1091.0F, (-12.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = (-2019);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2, (-2019)}, intArray0);
      assertArrayEquals(new int[] {2, (-2019)}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-2019);
      objectArray0[1] = (Object) (-2019);
      objectArray0[2] = (Object) 2;
      objectArray0[3] = (Object) (-2019);
      objectArray0[4] = (Object) (-2019);
      objectArray0[5] = (Object) 2;
      objectArray0[6] = (Object) (-2019);
      objectArray0[7] = (Object) 2;
      objectArray0[8] = (Object) (-2019);
      Byte byte0 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) byte0);
      assertEquals((-1), int0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 31.9163559;
      ArrayUtils.swap(doubleArray0, (-2182), (-1), (-1165));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 31.9163559}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)14;
      shortArray0[1] = (short)1612;
      shortArray0[2] = (short) (byte)14;
      shortArray0[3] = (short) (byte)14;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1612);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)14, (short)1612, (short)14, (short)14}, shortArray0);
      assertArrayEquals(new short[] {(short)14, (short)1612, (short)14, (short)14, (short)1612}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 97.0F;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) (-2019);
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) (byte)14;
      floatArray0[6] = (float) (short)1612;
      floatArray0[7] = (float) (byte)14;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, (-1));
      assertEquals((-1), int1);
      assertEquals(8, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {97.0F, 2.0F, 2.0F, (-2019.0F), 2.0F, 14.0F, 1612.0F, 14.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 13;
      intArray0[1] = 11;
      Byte byte0 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 11;
      objectArray0[1] = (Object) 13;
      objectArray0[2] = (Object) 13;
      objectArray0[3] = (Object) 13;
      objectArray0[4] = (Object) 13;
      objectArray0[5] = (Object) 11;
      objectArray0[6] = (Object) 11;
      Object object0 = ArrayUtils.get(objectArray0, (int)  (-28), objectArray0[1]);
      assertEquals(13, object0);
      assertEquals(9, objectArray0.length);
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      objectArray0[8] = (Object) 11;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[7]);
      assertEquals(1, int0);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 11;
      doubleArray0[4] = 31.9163559;
      doubleArray0[5] = (double) 13;
      doubleArray0[6] = (double) 11;
      ArrayUtils.swap(doubleArray0, (-2182), 13, (-2182));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 11.0, 1.0, 11.0, 31.9163559, 13.0, 11.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1612;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1026);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1612}, shortArray0);
      assertArrayEquals(new short[] {(short)1612, (short)1026}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(100.0);
      assertEquals(100.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(100.0);
      assertEquals(100.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(100.0);
      assertEquals(100.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(100.0);
      assertEquals(100.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(2616.212509296976);
      assertEquals(2616.212509296976, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(2616.212509296976);
      assertEquals(2616.212509296976, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[1]);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {100.0, 100.0, 100.0, 100.0, 2616.212509296976, 2616.212509296976}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[6];
      short short0 = (short)2;
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)1367;
      shortArray0[3] = (short) (-238);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-310);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2, 115);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2, (short)3, (short)1367, (short) (-238), (short)2, (short) (-310)}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) double3, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1306.0795F);
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'Z';
      charArray0[3] = 'm';
      charArray0[3] = '0';
      charArray0[4] = '0';
      ArrayUtils.reverse(charArray0, (-1307), (-1307));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'6', 'Z', '\u0000', '0', '0', '\u0000'}, charArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '6';
      doubleArray0[1] = (double) (-1396.356F);
      doubleArray0[2] = (double) '0';
      doubleArray0[3] = (double) '6';
      doubleArray0[4] = (double) '\u0000';
      doubleArray0[5] = (double) '0';
      doubleArray0[6] = (double) (-716);
      doubleArray0[7] = 100.0;
      ArrayUtils.reverse(doubleArray0, (-1888), (-777));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {54.0, (-1396.35595703125), 48.0, 54.0, 0.0, 48.0, (-716.0), 100.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 457.5011F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1306.0795F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-47);
      shortArray0[1] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[3] = (short)0;
      shortArray0[6] = (short) (-2230);
      shortArray0[7] = (short)476;
      ArrayUtils.swap(shortArray0, (int) (short)476, 10, (-2305));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-47), (short) (-1), (short)0, (short)0, (short) (-1), (short)0, (short) (-2230), (short)476}, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)67;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)9;
      byte[] byteArray2 = ArrayUtils.insert((int) (short)0, byteArray0, byteArray1);
      assertEquals(4, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)0, (byte)9}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)0, (byte)9}, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (byte)67);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(8, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 1;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'R');
      assertEquals(4, charArray1.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'e', 'R', 'R', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'e', 'R', 'R', 'R', '\u0000'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      MockRandom mockRandom0 = new MockRandom(2768L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray1, (Random) mockRandom0);
      assertEquals(4, charArray1.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'R', 'R', '\u0000', 'e'}, charArray1);
      assertArrayEquals(new char[] {'e', 'R', 'R', 'R', '\u0000'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      ArrayUtils.shift((Object[]) null, 1401);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1160.5233F;
      floatArray0[1] = 1160.5233F;
      floatArray0[2] = (-2753.7754F);
      ArrayUtils.swap(floatArray0, 43, 43);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1160.5233F, 1160.5233F, (-2753.7754F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 43);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-33);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 1160.5233F;
      objectArray0[1] = (Object) 1160.5233F;
      objectArray0[2] = (Object) (byte) (-33);
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean1);
      assertEquals(3, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-33);
      shortArray0[1] = (short) (byte) (-33);
      shortArray0[2] = (short) (byte) (-33);
      shortArray0[3] = (short) (byte) (-33);
      ArrayUtils.swap(shortArray0, 43, 108);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-33), (short) (-33), (short) (-33), (short) (-33)}, shortArray0);
      
      ArrayUtils.shift(shortArray0, (-710), 1823, 2);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-33), (short) (-33), (short) (-33), (short) (-33)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3409.164F);
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (-204.3344F);
      floatArray0[4] = 45.75F;
      floatArray0[5] = 85.0F;
      floatArray0[6] = (-47.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-3409.164F), Float.NaN, (-204.3344F), 45.75F, 85.0F, (-47.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '#';
      charArray0[2] = '?';
      charArray0[3] = '5';
      charArray0[4] = 'g';
      charArray0[5] = ':';
      charArray0[6] = 'J';
      int int0 = ArrayUtils.indexOf(charArray0, 'S', (-2484));
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'|', '#', '?', '5', 'g', ':', 'J'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "java.lang.Short";
      stringArray0[3] = "";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)68);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)68;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)68, 49);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {68.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '^';
      charArray0[2] = ':';
      charArray0[3] = 'W';
      charArray0[4] = '/';
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'W';
      intArray0[1] = (int) 'W';
      intArray0[2] = (int) (byte)68;
      intArray0[3] = (int) (byte)68;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 87, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-42);
      Short short0 = new Short((short)485);
      assertEquals((short)485, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[1]);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)485, (short)485, (short)485, (short)485, (short)485, (short)485}, shortArray1);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)485, (short)485, (short)485, (short)485, (short)485, (short)485}, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Double double0 = new Double(70.0);
      assertEquals(70.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayUtils.hashCode((Object) double0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 70.0;
      doubleArray0[2] = 70.0;
      doubleArray0[2] = 70.0;
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("Arguments cannot both be null");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1273.713F;
      floatArray0[1] = (-718.5627F);
      floatArray0[2] = 2640.1438F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = 1488.0F;
      floatArray0[5] = 2640.1438F;
      floatArray0[6] = 1312.948F;
      int int0 = ArrayUtils.indexOf(floatArray0, Float.NaN, 13);
      assertEquals((-1), int0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {1273.713F, (-718.5627F), 2640.1438F, Float.NaN, 1488.0F, 2640.1438F, 1312.948F}, floatArray0, 0.01F);
      
      boolean boolean2 = ArrayUtils.contains((int[]) null, (-29));
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 13, 13);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 13;
      floatArray0[1] = (float) 13;
      floatArray0[3] = (float) 13;
      floatArray0[3] = (float) 13;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {13.0F, 13.0F, 0.0F, 13.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {13.0F, 13.0F, 0.0F, 13.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)4056);
      assertEquals((short)4056, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-1459));
      assertEquals((short) (-1459), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)shortArray0[0];
      longArray0[1] = (long) (short) (-1459);
      longArray0[2] = (-439L);
      longArray0[3] = (long) (short)4056;
      longArray0[4] = (long) (short)shortArray0[0];
      longArray0[5] = (long) 13;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2146886007), 3);
      assertEquals(3, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4056L, (-1459L), (-439L)}, longArray1);
      assertArrayEquals(new long[] {4056L, (-1459L), (-439L), 4056L, 4056L, 13L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, 13L);
      assertEquals((-1), int0);
      assertEquals(3, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {4056L, (-1459L), (-439L)}, longArray1);
      assertArrayEquals(new long[] {4056L, (-1459L), (-439L), 4056L, 4056L, 13L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Object[] objectArray0 = ArrayUtils.removeElements((Object[]) shortArray0, (Object[]) shortArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(1, shortArray0.length);
      assertNotNull(objectArray0);
      assertNotSame(shortArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      shortArray0[2] = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray1 = new Short[5];
      shortArray1[0] = short1;
      shortArray1[1] = (Short) (short)0;
      shortArray1[2] = short1;
      shortArray1[3] = (Short) (short)0;
      shortArray1[4] = short1;
      ArrayUtils.shift((Object[]) shortArray1, (int) (short)0);
      assertEquals(5, shortArray1.length);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, short0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-15L);
      longArray0[2] = 1L;
      longArray0[3] = 555L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertEquals(6, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-15L), 1L, 555L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-15L), 1L, 555L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (-329), 2);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray2 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (-329);
      intArray0[3] = (-329);
      intArray0[4] = (-1);
      intArray0[5] = (-329);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(12, intArray1.length);
      assertEquals(6, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2, 2, (-329), (-329), (-1), (-329)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) (-329);
      int int0 = ArrayUtils.lastIndexOf(longArray3, (-850L));
      assertEquals((-1), int0);
      assertEquals(1, longArray3.length);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-329L)}, longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-15L);
      Object[] objectArray1 = ArrayUtils.removeElements(objectArray0, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, 1, 2, (-1));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 97);
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) ')';
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 'O';
      charArray0[2] = ')';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = ')';
      charArray0[6] = 'w';
      ArrayUtils.shift(charArray0, (-1223), 2, 97);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'O', 'L', ')', '\"', '\"', ')', 'w'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-87), (byte) (-84), (byte)0, (byte) (-80), (byte)0}, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-87);
      intArray0[1] = (int) (byte) (-87);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)0;
      intArray0[8] = 0;
      boolean boolean1 = ArrayUtils.contains(intArray0, (-87));
      assertTrue(boolean1);
      assertEquals(9, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-87), (-87), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean2);
      assertEquals(9, intArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new int[] {(-87), (-87), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, objectArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(objectArray0);
      assertNotSame(booleanArray0, objectArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, objectArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'n';
      charArray0[2] = '{';
      charArray0[3] = '/';
      ArrayUtils.shift(charArray0, (int) (byte)0, 1921, (int) (byte) (-87));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'/', '>', 'n', '{'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 101, 101, (-2));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Boolean[] booleanArray1 = new Boolean[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 101;
      doubleArray0[1] = (-1421.4);
      doubleArray0[2] = (double) 101;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 101, (-3592.268));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {101.0, (-1421.4), 101.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte)56;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)56);
      assertTrue(boolean1);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)56, (byte)90, (byte)37, (byte)2, (byte)37, (byte)90, (byte)56, (byte)56}, byteArray0);
      
      ArrayUtils.shift((Object[]) booleanArray1, 90, (int) (byte)56, (int) (byte)56);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((int) (byte)37, floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)90;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (byte)56;
      intArray0[3] = 2146851902;
      intArray0[4] = (int) (byte)56;
      intArray0[5] = (int) (byte)56;
      intArray0[6] = (int) (byte)2;
      intArray0[7] = (int) (byte)37;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(16, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {90, 2, 56, 2146851902, 56, 56, 2, 37}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-104);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertTrue(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)71, (byte)83, (byte)15, (byte) (-96), (byte)2, (byte) (-1), (byte) (-1), (byte) (-104)}, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-96);
      shortArray0[1] = (short) (byte)83;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte)83;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte) (-96);
      shortArray0[7] = (short) (byte) (-96);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1635);
      assertEquals(9, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1635, (short) (-96), (short)83, (short) (-1), (short) (-1), (short)83, (short)0, (short) (-96), (short) (-96)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-96), (short)83, (short) (-1), (short) (-1), (short)83, (short)0, (short) (-96), (short) (-96)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)3;
      ArrayUtils.reverse(byteArray0, 1517, 1517);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-42), (byte)3}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)3;
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {3.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-101);
      longArray0[1] = (long) (byte) (-42);
      longArray0[3] = (long) (byte)3;
      longArray0[4] = (long) (byte)3;
      long[] longArray1 = ArrayUtils.insert((int) (byte)3, longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-101L), (-42L), 0L, 3L, 3L}, longArray0);
      assertArrayEquals(new long[] {(-101L), (-42L), 0L, (-101L), (-42L), 0L, 3L, 3L, 3L, 3L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift(longArray1, 1506, (int) (byte) (-42), 1);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-101L), (-42L), 0L, 3L, 3L}, longArray0);
      assertArrayEquals(new long[] {(-101L), (-42L), 0L, (-101L), (-42L), 0L, 3L, 3L, 3L, 3L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3.0F;
      doubleArray0[1] = (double) 1506;
      doubleArray0[2] = (double) (byte)3;
      doubleArray0[3] = (double) 3L;
      doubleArray0[4] = (double) 3L;
      doubleArray0[5] = (double) (byte)3;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.0, 1506.0, 3.0, 3.0, 3.0, 3.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)3;
      ArrayUtils.reverse(byteArray0, 1517, 55);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-42), (byte)3}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)3;
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {3.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-101);
      longArray0[1] = (long) (byte) (-42);
      longArray0[2] = (long) (byte)3;
      longArray0[3] = (long) 55;
      longArray0[4] = (long) 55;
      long[] longArray1 = ArrayUtils.insert((int) (byte)3, longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-101L), (-42L), 3L, 55L, 55L}, longArray0);
      assertArrayEquals(new long[] {(-101L), (-42L), 3L, (-101L), (-42L), 3L, 55L, 55L, 55L, 55L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift(longArray1, 1506, Integer.MAX_VALUE, 1506);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-101L), (-42L), 3L, 55L, 55L}, longArray0);
      assertArrayEquals(new long[] {(-101L), (-42L), 3L, (-101L), (-42L), 3L, 55L, 55L, 55L, 55L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3.0F;
      doubleArray0[1] = (double) 1506;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) 55L;
      doubleArray0[4] = (double) 55L;
      doubleArray0[5] = (double) (byte)3;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.0, 1506.0, 2.147483647E9, 55.0, 55.0, 3.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences((float[]) null, 3908.3135F);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 18688, 8);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      AbstractMap.SimpleEntry<Long, Integer>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Long, Integer>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 9);
      Long long0 = new Long(18688);
      assertEquals(18688L, (long)long0);
      assertNotNull(long0);
      
      Integer integer0 = new Integer(18688);
      assertEquals(18688, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<Long, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, Integer>(long0, integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      Long long1 = new Long(18688);
      assertEquals(18688L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Integer integer1 = new Integer(15);
      assertEquals(15, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      AbstractMap.SimpleEntry<Long, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, Integer>(long1, integer1);
      assertTrue(long1.equals((Object)long0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      AbstractMap.SimpleEntry<Long, Integer> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Long, Integer>(abstractMap_SimpleEntry0);
      assertTrue(long0.equals((Object)long1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry2);
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry2;
      Long long2 = new Long(18688);
      assertEquals(18688L, (long)long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      
      AbstractMap.SimpleEntry<Long, Integer> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Long, Integer>(long2, integer0);
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertTrue(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(abstractMap_SimpleEntry3);
      
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry3;
      AbstractMap.SimpleEntry<Long, Integer> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Long, Integer>(abstractMap_SimpleEntry0);
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry0));
      assertTrue(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry3));
      assertTrue(long0.equals((Object)long1));
      assertTrue(long0.equals((Object)long2));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry3));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry4);
      
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry4;
      AbstractMap.SimpleEntry<Long, Integer> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<Long, Integer>(long2, integer1);
      assertTrue(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(abstractMap_SimpleEntry5);
      
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry5;
      AbstractMap.SimpleEntry<Long, Integer> abstractMap_SimpleEntry6 = new AbstractMap.SimpleEntry<Long, Integer>(long2, integer0);
      assertTrue(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry4));
      assertTrue(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(abstractMap_SimpleEntry6);
      
      abstractMap_SimpleEntryArray0[6] = abstractMap_SimpleEntry6;
      Long long3 = new Long(15);
      assertEquals(15L, (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      Integer integer2 = new Integer(18688);
      assertEquals(18688, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      AbstractMap.SimpleImmutableEntry<Long, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Long, Integer>(long3, integer2);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Long, Integer> abstractMap_SimpleEntry7 = new AbstractMap.SimpleEntry<Long, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry6));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry3));
      assertNotNull(abstractMap_SimpleEntry7);
      
      abstractMap_SimpleEntryArray0[7] = abstractMap_SimpleEntry7;
      AbstractMap.SimpleEntry<Long, Integer> abstractMap_SimpleEntry8 = new AbstractMap.SimpleEntry<Long, Integer>(abstractMap_SimpleEntry7);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry6));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry3));
      assertTrue(abstractMap_SimpleEntry8.equals((Object)abstractMap_SimpleEntry7));
      assertFalse(abstractMap_SimpleEntry8.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry8.equals((Object)abstractMap_SimpleEntry6));
      assertFalse(abstractMap_SimpleEntry8.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry8.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry8.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry8.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry8.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry8);
      
      abstractMap_SimpleEntryArray0[8] = abstractMap_SimpleEntry8;
      AbstractMap.SimpleEntry<Long, Integer>[] abstractMap_SimpleEntryArray1 = ArrayUtils.clone(abstractMap_SimpleEntryArray0);
      assertEquals(9, abstractMap_SimpleEntryArray0.length);
      assertEquals(9, abstractMap_SimpleEntryArray1.length);
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertNotNull(abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 221;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 4187;
      doubleArray0[2] = 2.144613615E9;
      doubleArray0[3] = (double) 4187;
      doubleArray0[4] = (-1.0);
      ArrayUtils.swap(doubleArray0, (-409), 221, 4187);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 4187.0, 2.144613615E9, 4187.0, (-1.0)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) 4187.0;
      objectArray0[3] = (Object) (-1.0);
      objectArray0[5] = (Object) (-1.0);
      Short short0 = new Short((byte)45);
      assertEquals((short)45, (short)short0);
      assertNotNull(short0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) short0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-27), (int) (byte) (-1));
      assertEquals((-1), int0);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)5;
      shortArray0[1] = (short) (byte)5;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertTrue(boolean0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)9;
      doubleArray0[1] = (double) (byte)9;
      doubleArray0[2] = (double) (byte)9;
      doubleArray0[3] = (double) (short)5;
      doubleArray0[4] = (double) (byte)9;
      doubleArray0[5] = (double) (byte)9;
      doubleArray0[6] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {9.0, 9.0, 9.0, 5.0, 9.0, 9.0, (-1.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray3 = new byte[9];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte)5;
      byteArray3[1] = (byte)9;
      byteArray3[2] = (byte) (-27);
      byteArray3[3] = (byte) (-27);
      byteArray3[4] = (byte)9;
      byteArray3[5] = (byte)5;
      byteArray3[6] = (byte)9;
      byteArray3[7] = (byte) (-1);
      byteArray3[8] = (byte)9;
      byte[] byteArray4 = ArrayUtils.removeElement(byteArray3, (byte)12);
      assertEquals(9, byteArray4.length);
      assertEquals(9, byteArray3.length);
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)5, (byte)9, (byte) (-27), (byte) (-27), (byte)9, (byte)5, (byte)9, (byte) (-1), (byte)9}, byteArray4);
      assertArrayEquals(new byte[] {(byte)5, (byte)9, (byte) (-27), (byte) (-27), (byte)9, (byte)5, (byte)9, (byte) (-1), (byte)9}, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, " in an array of ");
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) " in an array of ");
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = ')';
      charArray0[2] = '5';
      charArray0[3] = 'J';
      ArrayUtils.reverse(charArray0, 1, 3319);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'*', 'J', '5', ')'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      byte byte0 = (byte)6;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte byte2 = (byte)75;
      Byte byte3 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byte byte5 = (byte) (-126);
      Byte byte6 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertNotNull(byte6);
      
      byte byte7 = (byte) (-122);
      Byte[] byteArray0 = new Byte[2];
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)75;
      shortArray0[1] = (short) (byte)75;
      shortArray0[2] = (short) (byte) (-126);
      ArrayUtils.shift(shortArray0, (int) (byte)6);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)75, (short)75, (short) (-126)}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)75, (short)75, (short) (-126)}, shortArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)75;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      intArray0[2] = 9;
      intArray0[3] = 6;
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(9);
      assertEquals(9L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {9L}, longArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)3251);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)3251}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray1 = ArrayUtils.insert(1, intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-516), 0, 9, 6, 0, 0, 0, 0}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.shift(intArray0, 467);
      assertEquals(8, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 0, 0, (-516), 0, 9, 6, 0}, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-47);
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short)0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z', (int) (byte)59);
      assertEquals(3, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 'Z'}, charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 'Z';
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 90L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 90L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift(longArray1, 3);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 90L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 90L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      String string0 = ArrayUtils.toString((Object) false);
      assertEquals("false", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(booleanArray1, (-1));
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertEquals(16, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 649;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 649;
      longArray1[1] = (long) 649;
      longArray1[2] = (long) 649;
      ArrayUtils.swap(longArray1, 119, 649);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {649L, 649L, 649L}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)351;
      shortArray0[1] = (short)4187;
      shortArray0[2] = (short) (-3343);
      longArray1[2] = (long) (short)281;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(2, classArray0.length);
      assertEquals(2, classArray1.length);
      assertNotNull(classArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 120;
      intArray0[1] = (int) (short)281;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-193), 13);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {120, 281}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEquals(class0, class0);
      assertTrue(boolean0);
      assertSame(class0, class1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 119;
      floatArray0[1] = (float) 120;
      floatArray0[2] = (float) 649L;
      floatArray0[3] = (float) 649L;
      floatArray0[4] = (float) (short) (-3343);
      floatArray0[5] = (float) 119;
      floatArray0[6] = (float) 120;
      floatArray0[7] = (float) (short)4187;
      ArrayUtils.shift(floatArray0, (int) (short)281);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {4187.0F, 119.0F, 120.0F, 649.0F, 649.0F, (-3343.0F), 119.0F, 120.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)26;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-91);
      byteArray0[4] = (byte) (-61);
      byteArray0[7] = (byte)7;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(2643, intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-91);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-91.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-91.0F), (-91.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      ArrayUtils.reverse(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      Integer integer1 = new Integer((byte)39);
      assertEquals(39, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(18688);
      assertEquals(18688, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[3] = integer0;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)0, (byte) (-61));
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)0, (byte) (-119), (byte) (-61), (byte) (-91), (byte)0, (byte)7}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-61), (byte)39, (byte)0, (byte)0, (byte) (-119), (byte) (-61), (byte) (-91), (byte)0, (byte)7}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 18688, 17);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      shortArray0[2] = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray1 = new Short[5];
      shortArray1[0] = short1;
      shortArray1[1] = (Short) (short)0;
      shortArray1[2] = short1;
      shortArray1[3] = (Short) (short)0;
      shortArray1[4] = short1;
      byte[] byteArray0 = new byte[1];
      Float float0 = new Float((float) short0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayUtils.shift(byteArray0, (int) short0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Character character0 = Character.valueOf('6');
      assertEquals('6', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      int[] intArray0 = new int[6];
      intArray0[1] = (int) (byte) (-78);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte) (-78);
      intArray0[4] = (int) (byte) (-78);
      intArray0[5] = (int) (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte) (-1));
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals("{2, 5}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, (-78), (-1), (-78), (-78), (-1)}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-78), (-1), (-78), (-78), (-1)}, intArray0);
      assertArrayEquals(new int[] {0, (-78), (-1), (-78), (-78), (-1)}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      Class<Boolean[]> class0 = Boolean[].class;
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0, class0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-89);
      ArrayUtils.swap(byteArray0, (int) (byte) (-89), 3280, (int) (byte) (-116));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)71, (byte)0, (byte) (-116), (byte) (-89)}, byteArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = '9';
      charArray0[5] = '9';
      charArray0[6] = 'R';
      charArray0[7] = 'R';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '9');
      assertEquals(7, charArray1.length);
      assertEquals(8, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', '9', 'R', 'R'}, charArray1);
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', '9', '9', 'R', 'R'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1292.510128;
      doubleArray0[1] = (double) '9';
      doubleArray0[2] = (double) (byte)71;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)71;
      doubleArray0[6] = (double) (byte)71;
      doubleArray0[7] = (double) (byte)71;
      doubleArray0[8] = (double) 3280;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1292.510128);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1292.510128, 57.0, 71.0, 0.0, 0.0, 71.0, 71.0, 71.0, 3280.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {57.0, 71.0, 0.0, 0.0, 71.0, 71.0, 71.0, 3280.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      int int0 = 65;
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(65);
      assertEquals(65, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      assertEquals(2, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2);
      assertEquals(2, (int)integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(65);
      assertEquals(65, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = ArrayUtils.get(integerArray0, int0, integer1);
      assertEquals(2, (int)integer5);
      assertEquals(5, integerArray0.length);
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      
      Object object0 = ArrayUtils.get(objectArray0, 65, (Object) integer5);
      assertEquals(2, object0);
      assertEquals(1, objectArray0.length);
      assertEquals(5, integerArray0.length);
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer3));
      assertFalse(object0.equals((Object)integer4));
      assertFalse(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer2));
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
      assertEquals(5, integerArray0.length);
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer3));
      assertFalse(object0.equals((Object)integer4));
      assertFalse(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer2));
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      ArrayUtils.shift((long[]) null, (int) (byte) (-83), 24, 97);
      Character character0 = new Character('L');
      assertEquals('L', (char)character0);
      assertNotNull(character0);
      
      Short short0 = new Short((short)2634);
      assertEquals((short)2634, (short)short0);
      assertNotNull(short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short)2634, object0);
      assertNotNull(object0);
      
      Short short1 = new Short((byte) (-83));
      assertEquals((short) (-83), (short)short1);
      assertFalse(short1.equals((Object)object0));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) short1;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) short1;
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) character0);
      assertTrue(boolean0);
      assertEquals(5, objectArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 97;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (int) (short) (-3286));
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {97.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      boolean boolean1 = ArrayUtils.contains(intArray0, 2);
      assertFalse(boolean1);
      assertEquals(1, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1306.0795F);
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = 'Z';
      charArray0[3] = 'm';
      charArray0[3] = '0';
      charArray0[4] = '0';
      ArrayUtils.reverse(charArray0, (-1307), (-1307));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'6', 'Z', '\u0000', '0', '0'}, charArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '6';
      doubleArray0[1] = (double) (-1396.356F);
      doubleArray0[3] = (double) '6';
      doubleArray0[4] = (double) '\u0000';
      doubleArray0[5] = (double) '0';
      doubleArray0[6] = (double) (-716);
      doubleArray0[3] = 100.0;
      ArrayUtils.reverse(doubleArray0, (-1888), (-777));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {54.0, (-1396.35595703125), 0.0, 100.0, 0.0, 48.0, (-716.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 457.5011F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1306.0795F)}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2784);
      shortArray0[1] = (short)496;
      ArrayUtils.shift(shortArray0, (-716), (-777), (-777));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2784), (short)496}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 62.0;
      doubleArray0[2] = (-611.153665760412);
      doubleArray0[3] = (double) (-2688);
      doubleArray0[4] = (double) (-2688);
      doubleArray0[5] = 44.774974201788;
      doubleArray0[6] = (double) (-2688);
      doubleArray0[7] = (double) (-2688);
      doubleArray0[8] = (double) (-2688);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 100.0, (-2688));
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, 62.0, (-611.153665760412), (-2688.0), (-2688.0), 44.774974201788, (-2688.0), (-2688.0), (-2688.0)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 100.0;
      Object object0 = ArrayUtils.get(objectArray0, 2589);
      assertEquals(7, objectArray0.length);
      assertNull(object0);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) (-2688.0);
      objectArray0[3] = (Object) (-2688.0);
      objectArray0[4] = (Object) 62.0;
      objectArray0[5] = (Object) (-2688.0);
      objectArray0[6] = (Object) (-2688.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[5]);
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{2, 3, 5, 6}", bitSet0.toString());
      assertEquals(7, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      short[] shortArray0 = new short[5];
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)0;
      shortArray0[1] = (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)90;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-61), (byte) (-1), (byte)90}, byteArray0);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(6, classArray1.length);
      assertEquals(6, classArray0.length);
      assertNotNull(classArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)90;
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-61);
      longArray0[4] = (long) (byte) (-61);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {90L, (-1L), (-1L), (-61L), (-61L)}, longArray0);
      
      ArrayUtils.reverse((short[]) null, 4081, (-923));
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (byte) (-61));
      assertFalse(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-61), (byte) (-1), (byte)90}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 'B';
      charArray0[2] = 'U';
      charArray0[3] = 'T';
      charArray0[4] = 'J';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'B';
      floatArray0[1] = (float) (short)97;
      floatArray0[2] = (float) 'H';
      ArrayUtils.reverse(floatArray0, 474, (int) 'T');
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {66.0F, 97.0F, 72.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, 474, 724, (int) 'J');
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {66.0F, 97.0F, 72.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 8, 8);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 8);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {8L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-736);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)2620);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-736)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-736), (short)2620}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3105);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y*jM";
      stringArray0[1] = "H";
      stringArray0[2] = "H";
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (-293L));
      assertNull(longArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'E');
      assertNull(charArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'E';
      floatArray0[1] = (float) 'x';
      floatArray0[2] = (float) 3105;
      ArrayUtils.reverse(floatArray0, (int) (byte) (-80), (int) (byte) (-80));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {69.0F, 120.0F, 3105.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) ',';
      floatArray1[1] = (float) 555L;
      floatArray1[2] = (float) 474;
      floatArray1[3] = (float) (-293L);
      ArrayUtils.swap(floatArray1, (-972), 4081, 4081);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {44.0F, 555.0F, 474.0F, (-293.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((long[]) null, (-293L), (-503));
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1246);
      shortArray0[1] = (short)605;
      shortArray0[2] = (short) (-867);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)75;
      shortArray0[5] = (short) (-2168);
      shortArray0[6] = (short) (-2778);
      shortArray0[7] = (short)56;
      ArrayUtils.shift(shortArray0, (int) (short) (-1), (int) (short)56, (int) (short) (-1246));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2778), (short)56, (short) (-1246), (short)605, (short) (-867), (short) (-1), (short)75, (short) (-2168)}, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)56;
      floatArray0[1] = (float) (short)605;
      floatArray0[2] = (float) (short)605;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {56.0F, 605.0F, 605.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short) (-1246);
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = (long) (short) (-2778);
      longArray0[3] = (long) (short)56;
      longArray0[4] = (long) (short) (-2168);
      longArray0[5] = (long) (short) (-2168);
      longArray0[6] = (long) (short) (-867);
      longArray0[7] = (long) (short) (-1246);
      longArray0[8] = 2206L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1246L), (-1L), (-2778L), 56L, (-2168L), (-2168L), (-867L), (-1246L), 2206L}, longArray1);
      assertArrayEquals(new long[] {(-1246L), (-1L), (-2778L), 56L, (-2168L), (-2168L), (-867L), (-1246L), 2206L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 40.0, (double) (short) (-2778));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, 'v', (-3330));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertEquals(1, int0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[25];
      floatArray0[0] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) ')';
      ArrayUtils.shift(floatArray0, (-1513));
      assertEquals(25, floatArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)68;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)58, (byte)68}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)58, (byte)68}, byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)68;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)68, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)68, (short)68, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1513));
      assertEquals((-1513), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte)0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger((String) null, integer0);
      assertEquals((-1513), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((byte)0);
      assertEquals(0, (int)integer4);
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = Integer.valueOf((-1308));
      assertEquals((-1308), (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) 0, 2);
      assertEquals(2, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 8, 8);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 8);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {8L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, 8, objectArray0[1]);
      assertEquals(true, object0);
      assertEquals(5, objectArray0.length);
      assertNotNull(object0);
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((short)512);
      assertEquals((short)512, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = Short.valueOf((short) shortArray0[0]);
      assertEquals((short)512, (short)short1);
      assertEquals(5, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)512);
      assertEquals((short)512, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      short short3 = (short) (-1);
      Short short4 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short4);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short3));
      assertNotNull(short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short((short)322);
      assertEquals((short)322, (short)short5);
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertNotNull(short5);
      
      shortArray0[4] = short5;
      Short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) short3, (int) shortArray0[4]);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1160.3566F;
      floatArray0[1] = Float.NaN;
      int[] intArray0 = new int[7];
      intArray0[6] = 7;
      intArray0[1] = 7;
      intArray0[2] = 7;
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)0, 7);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'z';
      charArray0[1] = 'a';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'z', 2210);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'z', 'a'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)80;
      shortArray0[1] = (short)80;
      shortArray0[2] = (short)80;
      ArrayUtils.shift(shortArray0, (-2182), (int) (short)80, 927);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)80, (short)80, (short)80}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = null;
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short)80, (double) (short)80);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, 90, (-418L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)80;
      shortArray0[1] = (short)80;
      shortArray0[2] = (short)80;
      ArrayUtils.shift(shortArray0, (-2182), (int) (short)80, (int) (short)80);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)80, (short)80, (short)80, (short)0, (short)0}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = null;
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short)80, (double) (short)80);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, 90, (-418L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3105);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y*jM";
      stringArray0[1] = "H";
      stringArray0[2] = "H";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-80);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-80)}, byteArray0);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte) (-80));
      assertFalse(boolean1);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean2);
      assertEquals(0, intArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new int[] {}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[0] = boolean3;
      Boolean boolean4 = Boolean.valueOf("H");
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      booleanArray0[1] = boolean4;
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (int) 'r', (int) (byte) (-80));
      assertNull(charArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Class<Boolean[]> class0 = Boolean[].class;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0, class0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      
      boolean boolean5 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 649;
      doubleArray0[1] = (double) 649;
      doubleArray0[2] = (double) 649;
      doubleArray0[4] = (double) 649;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3769;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[8] = (short)3769;
      shortArray0[3] = (short) (-1229);
      shortArray0[7] = (short) (-2962);
      shortArray0[8] = (short) (-1229);
      ArrayUtils.shift(shortArray0, (-1494));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)3769, (short)0, (short)0, (short) (-1229), (short)0, (short)0, (short)0, (short) (-2962), (short) (-1229)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 114);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)3769;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3769, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)3769, (short)0, (short)0, (short) (-1229), (short)0, (short)0, (short)0, (short) (-2962), (short) (-1229)}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) 649, 0, (double) 2144612966);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray1, (float) (short)0, (-1925));
      assertEquals((-1), int1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 649;
      doubleArray0[1] = (double) 649;
      doubleArray0[2] = (double) 649;
      doubleArray0[4] = (double) 649;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3769;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[8] = (short)3769;
      shortArray0[3] = (short) (-1229);
      shortArray0[7] = (short) (-2962);
      shortArray0[8] = (short) (-1229);
      ArrayUtils.shift(shortArray0, (-1494));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)3769, (short)0, (short)0, (short) (-1229), (short)0, (short)0, (short)0, (short) (-2962), (short) (-1229)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.swap(booleanArray0, (int) (short)3769, 114, 2144612966);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 114);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)3769;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3769, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)3769, (short)0, (short)0, (short) (-1229), (short)0, (short)0, (short)0, (short) (-2962), (short) (-1229)}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) 649, 0, (double) 2144612966);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray1, (float) (short)0, (-1925));
      assertEquals((-1), int1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((-251.82489F));
      assertEquals((-251.82489F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-3299.6755F));
      assertEquals((-3299.6755F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(2263.3);
      assertEquals(2263.3F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-431.7459F));
      assertEquals((-431.7459F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-990.4698F));
      assertEquals((-990.4698F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(0.0F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = new Float((double) (-990.4698F));
      assertEquals((-990.4698F), (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      Float float7 = new Float(961.3F);
      assertEquals(961.3F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotNull(float7);
      
      floatArray0[7] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 905.82F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-251.82489F), (-3299.6755F), 2263.3F, (-431.7459F), (-990.4698F), 0.0F, (-990.4698F), 961.3F}, floatArray1, 0.01F);
      
      Short[] shortArray0 = new Short[1];
      short short0 = (short) (-126);
      Short short1 = new Short((short) (-126));
      assertEquals((short) (-126), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Class<Short[]> class0 = Short[].class;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0, class0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-126);
      intArray0[1] = (int) short0;
      intArray0[2] = (-2144382977);
      intArray0[3] = (int) (short) (-126);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short) (-126), (-126));
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{0, 1, 3}", bitSet0.toString());
      assertEquals(9, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-126), (-126), (-2144382977), (-126), 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 5L;
      longArray0[1] = 5L;
      longArray0[2] = 1L;
      longArray0[3] = 555L;
      longArray0[4] = 0L;
      longArray0[5] = 555L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 555L);
      assertEquals(8, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {5L, 5L, 1L, 555L, 0L, 555L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {5L, 5L, 1L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'x';
      charArray1[1] = 'x';
      charArray1[2] = ',';
      char[] charArray2 = ArrayUtils.removeElement(charArray1, 'E');
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'x', 'x', ','}, charArray1);
      assertArrayEquals(new char[] {'x', 'x', ','}, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 5L;
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 'x';
      floatArray0[3] = (float) 'x';
      floatArray0[4] = (float) ',';
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 'x';
      ArrayUtils.reverse(floatArray0, 474, 474);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {5.0F, 1.0F, 120.0F, 120.0F, 44.0F, 0.0F, 120.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, 1, (-1418), 1703);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 120.0F, 120.0F, 44.0F, 0.0F, 120.0F, 5.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Double double0 = new Double(70.0);
      assertEquals(70.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayUtils.hashCode((Object) double0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 70.0;
      doubleArray0[2] = 70.0;
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("Arguments cannot both be null");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean("`~g>ww");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.valueOf("Arguments cannot both be null");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      char[] charArray0 = new char[1];
      doubleArray0[0] = (double) '9';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '9');
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) boolean0;
      objectArray0[1] = (Object) 57.0;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) boolean1);
      assertEquals(0, int0);
      assertEquals(2, objectArray0.length);
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean4));
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1239;
      shortArray0[1] = (short)1239;
      ArrayUtils.swap(shortArray0, (int) (short)1239, 2904);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1239, (short)1239}, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)1239;
      doubleArray0[1] = (double) (short)1239;
      doubleArray0[2] = (double) (short)1239;
      doubleArray0[3] = (double) (short)1239;
      doubleArray0[4] = (double) (short)1239;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (int) (short)1239, 1239.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1239, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, 0L, 3592);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0, (-1), 3592);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3592;
      intArray0[1] = (-1);
      intArray0[2] = 3592;
      intArray0[3] = 3592;
      intArray0[4] = 3592;
      intArray0[5] = 3592;
      intArray0[6] = 3592;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3592, (-1), 3592, 3592, 3592, 3592, 3592}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)75;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)75, (int) (byte) (-1));
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)82, (byte)43, (byte)0, (byte)86, (byte)75}, byteArray0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)22, 428);
      assertEquals((-1), int1);
      assertEquals(6, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)82, (byte)43, (byte)0, (byte)86, (byte)75}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-57), 1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(6, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)82, (byte)75, (byte)43, (byte)4, (byte)0, (byte)13}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)90;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-61), (byte) (-1), (byte)90}, byteArray0);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) byteArray1, 9, 1047);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-61), (byte) (-1), (byte)90}, byteArray0);
      assertNotSame(byteArray1, objectArray0);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[0] = (short)0;
      shortArray0[3] = (short)0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (int) (short)2);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[0];
      Double double0 = new Double((short)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) double0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1160.5233F;
      floatArray0[2] = 1160.5233F;
      floatArray0[2] = (-2753.7754F);
      ArrayUtils.swap(floatArray0, 43, 43);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1160.5233F, 0.0F, (-2753.7754F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 43);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-33);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) (byte) (-33);
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean1);
      assertEquals(3, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-1L));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'x';
      charArray0[2] = '*';
      charArray0[3] = ')';
      charArray0[4] = '0';
      charArray0[5] = 'X';
      charArray0[6] = 'w';
      charArray0[7] = 'A';
      charArray0[8] = 'f';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '5', (int) (byte) (-33));
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'0', 'x', '*', ')', '0', 'X', 'w', 'A', 'f'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2144146449;
      intArray0[1] = 2144146449;
      intArray0[2] = 1;
      intArray0[3] = (-281);
      intArray0[4] = 2144146449;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-281));
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2144146449, 2144146449, 1, (-281), 2144146449}, intArray0);
      assertArrayEquals(new int[] {2144146449, 2144146449, 1, 2144146449}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 2144146449);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1338), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1338, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-265));
      assertEquals((-265), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("t1!v_0UigGBLjH?PtGO");
      assertNull(integer1);
      
      MutableInt mutableInt0 = new MutableInt((Number) integerArray0[0]);
      assertEquals((-265L), mutableInt0.longValue());
      assertEquals((-265), mutableInt0.intValue());
      assertEquals("-265", mutableInt0.toString());
      assertEquals((short) (-265), mutableInt0.shortValue());
      assertEquals((-265.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-265), (int)mutableInt0.getValue());
      assertEquals((-265.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-265), (int)mutableInt0.toInteger());
      assertEquals((byte) (-9), mutableInt0.byteValue());
      assertEquals(7, integerArray0.length);
      assertNotNull(mutableInt0);
      
      Integer integer2 = mutableInt0.toInteger();
      assertEquals((-265), (int)integer2);
      assertEquals((-265L), mutableInt0.longValue());
      assertEquals((-265), mutableInt0.intValue());
      assertEquals("-265", mutableInt0.toString());
      assertEquals((short) (-265), mutableInt0.shortValue());
      assertEquals((-265.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-265), (int)mutableInt0.getValue());
      assertEquals((-265.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-265), (int)mutableInt0.toInteger());
      assertEquals((byte) (-9), mutableInt0.byteValue());
      assertEquals(7, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(21);
      assertEquals(21, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(808);
      assertEquals(808, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[2]);
      assertEquals((-265), (int)integer5);
      assertEquals(7, integerArray0.length);
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2);
      assertEquals(2, (int)integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      longArray0[4] = 1L;
      longArray0[5] = 0L;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)1214);
      assertEquals((-1), int0);
      
      Float[] floatArray2 = new Float[1];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(floatArray2, 0);
      assertTrue(boolean0);
      assertEquals(1, floatArray2.length);
      
      float[] floatArray3 = ArrayUtils.insert((-1621), floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray3.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) floatArray2, (Object) float0, (int) (short)1214);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, floatArray2.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true, 0);
      assertEquals("{0}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals(1, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals(1, booleanArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotSame(bitSet1, bitSet0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1621));
      assertEquals((-1621), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2142569559));
      assertEquals((-2142569559), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-373));
      assertEquals((-373), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger((String) null, (int) integerArray0[1]);
      assertEquals((-2142569559), (int)integer3);
      assertEquals(4, integerArray0.length);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray3, (-73.2262F));
      assertFalse(boolean1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray3.length);
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      intArray0[5] = 9;
      MutableInt mutableInt0 = new MutableInt((-776));
      assertEquals((short) (-776), mutableInt0.shortValue());
      assertEquals((-776.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-776), mutableInt0.intValue());
      assertEquals("-776", mutableInt0.toString());
      assertEquals((-776L), mutableInt0.longValue());
      assertEquals((-776), (int)mutableInt0.toInteger());
      assertEquals((-776.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-776), (int)mutableInt0.getValue());
      assertEquals((byte) (-8), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(82);
      assertEquals(82.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(82.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(82, (int)mutableInt1.getValue());
      assertEquals(82, (int)mutableInt1.toInteger());
      assertEquals((byte)82, mutableInt1.byteValue());
      assertEquals(82, mutableInt1.intValue());
      assertEquals("82", mutableInt1.toString());
      assertEquals((short)82, mutableInt1.shortValue());
      assertEquals(82L, mutableInt1.longValue());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      MutableInt mutableInt2 = new MutableInt(11);
      assertEquals(11, mutableInt2.intValue());
      assertEquals("11", mutableInt2.toString());
      assertEquals(11L, mutableInt2.longValue());
      assertEquals(11, (int)mutableInt2.toInteger());
      assertEquals(11, (int)mutableInt2.getValue());
      assertEquals(11.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((byte)11, mutableInt2.byteValue());
      assertEquals(11.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((short)11, mutableInt2.shortValue());
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertNotNull(mutableInt2);
      
      MutableInt mutableInt3 = new MutableInt(mutableInt2);
      assertEquals(11, mutableInt2.intValue());
      assertEquals("11", mutableInt2.toString());
      assertEquals(11L, mutableInt2.longValue());
      assertEquals(11, (int)mutableInt2.toInteger());
      assertEquals(11, (int)mutableInt2.getValue());
      assertEquals(11.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((byte)11, mutableInt2.byteValue());
      assertEquals(11.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((short)11, mutableInt2.shortValue());
      assertEquals(11.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(11L, mutableInt3.longValue());
      assertEquals(11.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(11, (int)mutableInt3.getValue());
      assertEquals(11, (int)mutableInt3.toInteger());
      assertEquals((byte)11, mutableInt3.byteValue());
      assertEquals("11", mutableInt3.toString());
      assertEquals((short)11, mutableInt3.shortValue());
      assertEquals(11, mutableInt3.intValue());
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertNotNull(mutableInt3);
      
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      MutableInt mutableInt4 = ArrayUtils.get(mutableIntArray0, 1);
      assertEquals(0, mutableIntArray0.length);
      assertNull(mutableInt4);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-20);
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-68);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (short) (-68);
      doubleArray0[2] = (double) (short) (-20);
      doubleArray0[3] = (-1708.5640563166144);
      doubleArray0[4] = (double) (short) (-68);
      doubleArray0[5] = 10.0;
      doubleArray0[6] = (double) (byte)58;
      doubleArray0[7] = (double) (short) (-1);
      doubleArray0[8] = (double) (byte)58;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-1), 2753);
      assertEquals(7, int0);
      assertEquals(19, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1.0);
      assertEquals(18, doubleArray1.length);
      assertEquals(19, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 2753);
      assertNull(floatArray0);
      
      Byte[] byteArray2 = new Byte[0];
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = 45.33991931959279;
      doubleArray0[2] = 2.144613615E9;
      doubleArray0[3] = 573.74149;
      doubleArray0[4] = 2034.285467;
      doubleArray0[5] = (-1.0);
      ArrayUtils.swap(doubleArray0, 221, 4187, (-1453));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.1, 45.33991931959279, 2.144613615E9, 573.74149, 2034.285467, (-1.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte) (-96);
      ArrayUtils.swap(byteArray0, (-546), (-1235), (int) (byte)7);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)45, (byte)82, (byte)104, (byte)7, (byte)17, (byte) (-7), (byte)118, (byte) (-96)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-87);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) short0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      byte byte0 = (byte)65;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-87), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-87), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3397;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-87), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -87, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(12, booleanArray0.length);
      
      long[] longArray0 = new long[10];
      longArray0[1] = (long) 1;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char char0 = 'R';
      Character character0 = new Character('R');
      assertEquals('R', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(673.87);
      assertEquals(673.87, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-4334.093F);
      floatArray0[2] = 1977.5635F;
      floatArray0[3] = (-4334.093F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1673.1F);
      assertEquals(6, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, (-4334.093F), 1977.5635F, (-4334.093F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1673.1F, 1.0F, (-4334.093F), 1977.5635F, (-4334.093F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((-251.82489F));
      assertEquals((-251.82489F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-3299.6755F));
      assertEquals((-3299.6755F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-3299.6755F);
      doubleArray0[2] = (double) (-251.82489F);
      doubleArray0[3] = (-1421.4);
      doubleArray0[4] = (double) (-3299.6755F);
      doubleArray0[5] = 122.0;
      doubleArray0[6] = (double) (-251.82489F);
      doubleArray0[7] = (double) (float)floatArray0[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 938.1, (-3299.675537109375));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0), (-3299.675537109375), (-251.82489013671875), (-1421.4), (-3299.675537109375), 122.0, (-251.82489013671875), (-3299.675537109375)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'n'}, charArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)90;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)2);
      assertFalse(boolean1);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)56, (byte)37, (byte)90}, byteArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)90;
      ArrayUtils.shift(objectArray0, (int) (byte)2, (int) (byte)56, (-1082));
      assertEquals(1, objectArray0.length);
      
      float[] floatArray1 = new float[1];
      floatArray1[0] = (float) (byte)56;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)37, floatArray1, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 37, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-533);
      ArrayUtils.shift(intArray0, 11);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, (-533), 0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-533);
      floatArray0[1] = (float) (-533);
      floatArray0[2] = (float) (-533);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-533.0F), (-533.0F), (-533.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-533.0F), (-533.0F), (-533.0F)}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)115;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)4, (-533));
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)115}, shortArray0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((short)115);
      assertEquals(115L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertEquals(115L, (long)long1);
      assertEquals(6, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-1));
      assertEquals((-1L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      try { 
        Long.valueOf("java.lang.Short", (-41));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -41 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-4078);
      ArrayUtils.shift(shortArray0, 102);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4078)}, shortArray0);
      
      ArrayUtils.swap(booleanArray0, 1465, (int) (short) (-4078), 0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 102;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 'e';
      doubleArray0[4] = (double) 'e';
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 102.0, 0.0, 101.0, 101.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)869, (int) (short) (-4078));
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4078)}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean1);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-4078)}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short) (-4078), 1779.0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 102.0, 0.0, 101.0, 101.0}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4078)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-4078)}, shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      
      short[] shortArray2 = new short[4];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)2090;
      shortArray2[1] = (short)869;
      shortArray2[2] = (short)869;
      shortArray2[3] = (short) (-4078);
      Short[] shortArray3 = ArrayUtils.toObject(shortArray2);
      assertEquals(4, shortArray2.length);
      assertEquals(4, shortArray3.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {(short)2090, (short)869, (short)869, (short) (-4078)}, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-14));
      assertEquals((byte) (-14), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-122));
      assertEquals((byte) (-122), (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte3;
      byteArray0[1] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-14)}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte) (-122));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-14)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-14), (byte) (-122)}, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-2305L));
      assertEquals((-2305L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-2305L));
      assertEquals((-2305L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[1]);
      assertEquals((-2305L), (long)long2);
      assertEquals(5, longArray0.length);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[0] = long2;
      Long long3 = new Long((long) longArray0[1]);
      assertEquals((-2305L), (long)long3);
      assertEquals(5, longArray0.length);
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((-2305L));
      assertEquals((-2305L), (long)long4);
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long3));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-15846);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)4900);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-15846), (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)2;
      ArrayUtils.shift(byteArray0, (-3735), 111, (-290));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)2}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, (int) (byte)2);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(2, booleanArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotSame(bitSet1, bitSet0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.reverse((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      Character character0 = new Character('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3143;
      shortArray0[1] = (short)3143;
      shortArray0[2] = (short)3143;
      shortArray0[3] = (short)3143;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3143, (short)3143, (short)3143, (short)3143}, shortArray0);
      assertArrayEquals(new short[] {(short)3143, (short)3143, (short)3143, (short)3143, (short)3143, (short)3143, (short)3143, (short)3143}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[19];
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)75);
      assertEquals(19, byteArray0.length);
      assertEquals(19, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toArray((Long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = '3';
      ArrayUtils.shift(charArray0, (-12), (-12), (-12));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'S', '3', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift((boolean[]) null, (-128), (-128), (-128));
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'S';
      floatArray0[1] = (float) 'S';
      floatArray0[2] = 2396.67F;
      floatArray0[3] = (float) '3';
      floatArray0[4] = (float) '3';
      floatArray0[5] = (float) '3';
      floatArray0[6] = (float) (-12);
      floatArray0[7] = (float) (-128);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1024.6002F, 125);
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {83.0F, 83.0F, 2396.67F, 51.0F, 51.0F, 51.0F, (-12.0F), (-128.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {83.0F, 83.0F, 2396.67F, 51.0F, 51.0F, 51.0F, (-12.0F), (-128.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {83.0F, 83.0F, 2396.67F, 51.0F, 51.0F, 51.0F, (-12.0F), (-128.0F)}, floatArray0, 0.01F);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = (-1);
      ArrayUtils.shift(booleanArray0, (-1), (-3043), (-3043));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)713);
      assertNull(shortArray0);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, true, 0);
      assertEquals(0, int1);
      assertEquals(3, booleanArray0.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, (-1850));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1850, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      intArray0[2] = 9;
      intArray0[3] = 6;
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-1285), 54);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("r;?o?V5,,");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("r;?o?V5,,");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean0);
      assertFalse(boolean4);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2652);
      intArray0[1] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 1, (-2652));
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2652), 1}, intArray0);
      assertArrayEquals(new int[] {(-2652), (-2652), 1}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)30807;
      shortArray0[2] = (short)32;
      shortArray0[3] = (short) (-317);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)68;
      shortArray0[7] = (short)3246;
      shortArray0[8] = (short)322;
      boolean boolean5 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean5);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)91, (short)30807, (short)32, (short) (-317), (short) (-1), (short)1, (short)68, (short)3246, (short)322}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      char[] charArray0 = new char[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '?';
      longArray0[1] = (long) '?';
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {63L, 63L}, longArray0);
      
      ArrayUtils.shift(charArray0, (-3044), (-3044), (-329));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      Object object0 = ArrayUtils.get((Object[]) booleanArray0, (-329));
      assertEquals(1, booleanArray0.length);
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3044);
      intArray0[1] = (-329);
      intArray0[2] = (-3044);
      intArray0[3] = (-936);
      intArray0[4] = (int) '?';
      intArray0[5] = (-3044);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      Short short0 = new Short((short)4696);
      assertEquals((short)4696, (short)short0);
      assertNotNull(short0);
      
      String string0 = ArrayUtils.toString((Object) short0, "The Array must not be null");
      assertEquals("4696", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)4696;
      doubleArray0[1] = (double) (short)4696;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (short)4696;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-280.0980586949572), 64.0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {4696.0, 4696.0, 1.0, 4696.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.swap(booleanArray0, (int) (short)4696, (int) (short)4696);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, false}, booleanArray0));
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((float) (short)4696);
      assertEquals(4696.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals(4696.0F, (float)float1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) (short)4696);
      assertEquals(4696.0F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(64.0F);
      assertEquals(64.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) floatArray0[0]);
      assertEquals(4696.0F, (float)float4, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float((double) floatArray0[4]);
      assertEquals(4696.0F, (float)float5, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = new Float((double) (short)4696);
      assertEquals(4696.0F, (float)float6, 0.01F);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      Float float7 = new Float((-2026.5));
      assertEquals((-2026.5F), (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotNull(float7);
      
      floatArray0[7] = float7;
      Float float8 = new Float((float) floatArray0[0]);
      assertEquals(4696.0F, (float)float8, 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertEquals((float)float8, (float)float2, 0.01F);
      assertEquals((float)float8, (float)float1, 0.01F);
      assertEquals((float)float8, (float)float6, 0.01F);
      assertEquals((float)float8, (float)float4, 0.01F);
      assertEquals((float)float8, (float)float0, 0.01F);
      assertNotNull(float8);
      
      floatArray0[8] = float8;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1.0F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {4696.0F, 4696.0F, 4696.0F, 64.0F, 4696.0F, 4696.0F, 4696.0F, (-2026.5F), 4696.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      Short short0 = new Short((short)3845);
      assertEquals((short)3845, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-1459));
      assertEquals((short) (-1459), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short) (-1459);
      doubleArray0[2] = (double) (short)3845;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)0, (-2146231469));
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1459.0), 3845.0}, doubleArray0, 0.01);
      
      Float float0 = new Float((-602.154F));
      assertEquals((-602.154F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) float0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(70.0);
      assertEquals(70.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(70.0);
      assertEquals(70.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double2;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3974);
      shortArray0[1] = (short) (-1224);
      shortArray0[2] = (short) (-3343);
      ArrayUtils.reverse(shortArray0, (int) (short) (-1224), 3822);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-3343), (short) (-1224), (short) (-3974)}, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1674L);
      longArray0[1] = (long) (short) (-3343);
      longArray0[2] = (long) (short) (-3343);
      int int0 = ArrayUtils.indexOf(longArray0, 54L);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1674L), (-3343L), (-3343L)}, longArray0);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-3343), (short) (-1224), (short) (-3974)}, shortArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1);
      longArray1[1] = 1714L;
      longArray1[2] = (long) 'O';
      longArray1[3] = (long) (short)0;
      longArray1[4] = (long) (short) (-1224);
      int int1 = ArrayUtils.indexOf(longArray1, 0L);
      assertEquals(3, int1);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {(-1L), 1714L, 79L, 0L, (-1224L)}, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2545;
      shortArray0[1] = (short)2501;
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-24);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) (byte) (-44);
      objectArray0[2] = (Object) (byte) (-24);
      objectArray0[3] = (Object) (byte)95;
      objectArray0[4] = (Object) (byte) (-89);
      objectArray0[5] = (Object) (byte) (-116);
      objectArray0[6] = (Object) (byte) (-116);
      objectArray0[7] = (Object) (byte)67;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[4], (int) (byte) (-89));
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(8, objectArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (byte)67;
      doubleArray1[2] = (double) (byte) (-89);
      doubleArray1[3] = (double) (byte)67;
      doubleArray1[4] = (double) (-1);
      doubleArray1[5] = (double) (-1);
      doubleArray1[6] = (double) (byte)95;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)67;
      intArray0[1] = (-1008);
      intArray0[2] = (int) (byte) (-24);
      intArray0[3] = (-788);
      intArray0[4] = (int) (byte)67;
      intArray0[5] = (int) (byte)67;
      intArray0[6] = (int) (byte)67;
      intArray0[7] = (int) (byte)67;
      intArray0[8] = (int) (byte) (-44);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 67, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-119);
      ArrayUtils.reverse(byteArray0, 1517, 55);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-42), (byte) (-119)}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-119);
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-119.0F)}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      ArrayUtils.shift(charArray0, 36);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'T'}, charArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'K');
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'T'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      assertNotSame(class1, class0);
      
      AbstractMap.SimpleImmutableEntry<String, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeElement((AbstractMap.SimpleImmutableEntry<String, Integer>[]) null, (Object) class0);
      assertFalse(class0.equals((Object)class1));
      assertNull(abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(class0, class1);
      
      ArrayUtils.reverse((double[]) null);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true, false, true, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = 'N';
      charArray0[2] = ' ';
      charArray0[3] = 'X';
      charArray0[4] = '#';
      charArray0[5] = '\'';
      charArray0[6] = 'L';
      charArray0[7] = 'W';
      charArray0[8] = '/';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-720), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -720, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      short[] shortArray0 = new short[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'O');
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int1);
      assertEquals(1, booleanArray0.length);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '|');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'O';
      charArray1[1] = 'O';
      charArray1[2] = '|';
      charArray1[3] = 'P';
      char[] charArray2 = ArrayUtils.insert((-1), charArray1, (char[]) null);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'O', 'O', '|', 'P'}, charArray1);
      assertArrayEquals(new char[] {'O', 'O', '|', 'P'}, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)2);
      assertNull(byteArray2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '|';
      intArray0[1] = (int) 'P';
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      int[] intArray1 = ArrayUtils.remove(intArray0, (int) (byte)2);
      assertEquals(3, intArray1.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {124, 80, (-1)}, intArray1);
      assertArrayEquals(new int[] {124, 80, (-1), (-1)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2146543005);
      doubleArray0[1] = (double) (-2146543005);
      doubleArray0[2] = (double) 124;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(doubleArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'c', (int) (byte)59);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 'Z'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'Z';
      longArray0[1] = (long) 'Z';
      Object[] objectArray0 = new Object[1];
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean1);
      assertEquals(1, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)45;
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)45;
      longArray0[2] = (long) (byte)45;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {45L, 0L, 45L}, longArray0);
      assertArrayEquals(new long[] {45L, 0L, 45L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift(longArray1, (int) 'Z');
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {45L, 0L, 45L}, longArray0);
      assertArrayEquals(new long[] {45L, 0L, 45L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      String string0 = ArrayUtils.toString((Object) boolean0);
      assertEquals("true", string0);
      assertNotNull(string0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, ',');
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', '\u0000'}, charArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'Z';
      floatArray0[1] = (float) (byte)45;
      floatArray0[2] = (float) (byte)45;
      floatArray0[3] = (float) 45L;
      floatArray0[4] = (float) (byte)45;
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) 'Z';
      floatArray0[7] = (float) (byte)45;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 40.0F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {90.0F, 45.0F, 45.0F, 45.0F, 45.0F, (-1.0F), 90.0F, 45.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {90.0F, 45.0F, 45.0F, 45.0F, 45.0F, (-1.0F), 90.0F, 45.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)45;
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)45;
      longArray0[2] = (long) (byte)45;
      ArrayUtils.shift(longArray0, (int) 'Z');
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {45L, 0L, 45L}, longArray0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      String string0 = ArrayUtils.toString((Object) boolean0);
      assertEquals("true", string0);
      assertNotNull(string0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, ',');
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', '\u0000'}, charArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'Z';
      floatArray0[1] = (float) (byte)45;
      floatArray0[2] = (float) (byte)45;
      floatArray0[3] = (float) 45L;
      floatArray0[4] = (float) (byte)45;
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) 'Z';
      floatArray0[7] = (float) (byte)45;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 40.0F);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {90.0F, 45.0F, 45.0F, 45.0F, 45.0F, (-1.0F), 90.0F, 45.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {90.0F, 45.0F, 45.0F, 45.0F, 45.0F, (-1.0F), 90.0F, 45.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 649;
      doubleArray0[1] = (double) 649;
      doubleArray0[2] = (double) 649;
      doubleArray0[4] = (double) 649;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3769;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[8] = (short)3769;
      shortArray0[3] = (short) (-1229);
      shortArray0[7] = (short) (-2962);
      shortArray0[8] = (short) (-1229);
      ArrayUtils.shift(shortArray0, (-1494));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)3769, (short)0, (short)0, (short) (-1229), (short)0, (short)0, (short)0, (short) (-2962), (short) (-1229)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.swap(booleanArray0, (int) (short)3769, 114, 2144612966);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 114);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)3769;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3769, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)3769, (short)0, (short)0, (short) (-1229), (short)0, (short)0, (short)0, (short) (-2962), (short) (-1229)}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) 649, 0, (double) 2144612966);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray1, (float) (short)0, (-1925));
      assertEquals((-1), int1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new int[] {3769, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new short[] {(short)3769, (short)0, (short)0, (short) (-1229), (short)0, (short)0, (short)0, (short) (-2962), (short) (-1229)}, shortArray0);
      assertArrayEquals(new short[] {(short)3769, (short)0, (short)0, (short) (-1229), (short)0, (short)0, (short)0, (short) (-2962), (short) (-1229)}, shortArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = (-3489);
      intArray0[3] = 749;
      intArray0[5] = (-2641);
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, 45L);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 45L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      Short[] shortArray0 = new Short[8];
      short short0 = (short)9;
      Short short1 = new Short((short)9);
      assertEquals((short)9, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)79);
      assertEquals((short)79, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short short3 = new Short((short)110);
      assertEquals((short)110, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short((short)110);
      assertEquals((short)110, (short)short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertNotNull(short4);
      
      Short short5 = new Short((short)9);
      assertEquals((short)9, (short)short5);
      assertTrue(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertNotNull(short5);
      
      shortArray0[4] = short5;
      Short short6 = new Short(short0);
      assertEquals((short)9, (short)short6);
      assertFalse(short6.equals((Object)short4));
      assertTrue(short6.equals((Object)short0));
      assertTrue(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short3));
      assertTrue(short6.equals((Object)short1));
      assertNotNull(short6);
      
      shortArray0[5] = short6;
      Short short7 = new Short((short) (-1418));
      assertEquals((short) (-1418), (short)short7);
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short1));
      assertNotNull(short7);
      
      shortArray0[3] = short7;
      Short short8 = new Short((short) (-118));
      assertEquals((short) (-118), (short)short8);
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short4));
      assertFalse(short8.equals((Object)short5));
      assertFalse(short8.equals((Object)short6));
      assertFalse(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short2));
      assertNotNull(short8);
      
      shortArray0[7] = short8;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 938.1, 938.1);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      charArray0[1] = 'g';
      charArray0[2] = '/';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = '/';
      charArray0[6] = 'n';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'n', 'g', '/', 'n', 'n', '/', 'n'}, charArray0);
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((short) (-701));
      assertEquals((short) (-701), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)117);
      assertEquals((short)117, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1201));
      assertEquals((short) (-1201), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)221);
      assertEquals((short)221, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = Short.valueOf((short)536);
      assertEquals((short)536, (short)short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte) (-98);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte)21, (byte) (-118), (byte) (-84), (byte) (-33), (byte) (-98)}, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-33);
      shortArray0[1] = (short) (byte) (-84);
      shortArray0[2] = (short) (byte) (-98);
      shortArray0[3] = (short) (byte) (-84);
      short[] shortArray1 = new short[7];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte) (-118);
      shortArray1[1] = (short) (byte)12;
      shortArray1[2] = (short) (byte) (-98);
      shortArray1[3] = (short) (byte)21;
      shortArray1[4] = (short) (byte)21;
      shortArray1[5] = (short) (-1);
      shortArray1[6] = (short) (byte) (-33);
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertEquals(2, shortArray2.length);
      assertEquals(4, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-84), (short) (-84)}, shortArray2);
      assertArrayEquals(new short[] {(short) (-33), (short) (-84), (short) (-98), (short) (-84)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-118), (short)12, (short) (-98), (short)21, (short)21, (short) (-1), (short) (-33)}, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      int[] intArray0 = new int[4];
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertArrayEquals(new char[] {'('}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1971L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1));
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 1971L;
      floatArray0[2] = (float) 1971L;
      floatArray0[3] = (float) '(';
      floatArray0[4] = (float) 1971L;
      floatArray0[5] = (float) 1971L;
      floatArray0[6] = (float) '(';
      floatArray0[7] = (float) '(';
      ArrayUtils.reverse(floatArray0, (-1), (-1));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 1971.0F, 1971.0F, 40.0F, 1971.0F, 1971.0F, 40.0F, 40.0F}, floatArray0, 0.01F);
      
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 4);
      Class<Long> class0 = Long.class;
      classArray0[0] = class0;
      Class<Long> class1 = Long.class;
      classArray0[1] = class1;
      Class<Long> class2 = Long.class;
      classArray0[2] = class2;
      Class<Long> class3 = Long.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      assertNotNull(classArray1);
      
      ArrayUtils.swap(floatArray0, (-717), (-515));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 1971.0F, 1971.0F, 40.0F, 1971.0F, 1971.0F, 40.0F, 40.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) (short)2;
      floatArray0[3] = (float) (short)2;
      floatArray0[4] = (float) (short)2;
      floatArray0[5] = (float) (short)2;
      floatArray0[6] = (float) (short)2;
      floatArray0[7] = (float) (short)2;
      floatArray0[8] = (float) (short)2;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2.0F;
      doubleArray0[1] = 58.0;
      doubleArray0[2] = (double) 2.0F;
      doubleArray0[3] = (double) 2.0F;
      doubleArray0[4] = (double) (short)2;
      doubleArray0[5] = (double) 2.0F;
      doubleArray0[6] = (double) 2.0F;
      doubleArray0[7] = (double) 2.0F;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1215.5203), (int) (short)2);
      assertEquals((-1), int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 58.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      
      Float float0 = new Float((double) 2.0F);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(2.0F);
      assertEquals(2.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray2 = new Float[0];
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.swap(booleanArray0, (int) (byte) (-126), (-2146563517));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-2517));
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-2517)}, intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-126);
      shortArray0[1] = (short) (byte) (-126);
      shortArray0[2] = (short) (byte) (-126);
      shortArray0[3] = (short) (byte) (-126);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-126), (short) (-126), (short) (-126), (short) (-126)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-126), (short) (-126), (short) (-126), (short) (-126)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-626));
      assertEquals((short) (-626), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)shortArray0[0];
      longArray0[1] = (long) (short)shortArray0[0];
      longArray0[2] = (long) 7;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-626L), (-626L), 7L}, longArray0);
      assertArrayEquals(new long[] {(-626L), (-626L), 7L, (-626L), (-626L), 7L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (int) shortArray0[0], (long) 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -626, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = (-1214.5574F);
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "7<>s~wG?f)9at");
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 2147483647L);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {2147483647L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      Character character0 = new Character('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      org.evosuite.runtime.Random.setNextRandom(0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2282;
      longArray0[1] = (long) 4;
      longArray0[2] = (long) 'M';
      longArray0[3] = (long) 2282;
      longArray0[4] = (long) 0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 38L);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2282L, 4L, 77L, 2282L, 0L}, longArray0);
      assertArrayEquals(new long[] {38L, 2282L, 4L, 77L, 2282L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-1);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-27), (int) (byte) (-1));
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1)}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)5;
      shortArray0[1] = (short) (byte)5;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1085));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1085)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int1 = ArrayUtils.indexOf(byteArray1, (byte) (-9), (-1));
      assertEquals((-1), int1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertTrue(int1 == int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-15L);
      longArray0[2] = 1L;
      longArray0[3] = 555L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertEquals(6, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-15L), 1L, 555L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-15L), 1L, 555L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (-329), 2);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 2, 2);
      assertEquals(6, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, (-15L), 1L, 555L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-15L), 1L, 555L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (-329);
      intArray0[3] = (-329);
      intArray0[4] = (-1);
      intArray0[5] = (-329);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(12, intArray1.length);
      assertEquals(6, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2, 2, (-329), (-329), (-1), (-329)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) (-329);
      int int0 = ArrayUtils.lastIndexOf(longArray3, (-850L));
      assertEquals((-1), int0);
      assertEquals(1, longArray3.length);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-329L)}, longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-15L);
      objectArray0[1] = (Object) 1L;
      Object[] objectArray1 = ArrayUtils.removeElements(objectArray0, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 66.0F;
      floatArray0[1] = 3433.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1027.0F);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {66.0F, 3433.0F, (-1.0F), 1.0F, (-1027.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 66.0F;
      objectArray0[1] = (Object) (-1027.0F);
      objectArray0[2] = (Object) 1.0F;
      Object object0 = ArrayUtils.get(objectArray0, (int) 18);
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[3] = null;
      objectArray0[4] = (Object) (byte)18;
      objectArray0[5] = (Object) 1.0F;
      objectArray0[6] = (Object) (byte)18;
      objectArray0[7] = (Object) (-1027.0F);
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) float0, (-262));
      assertEquals((-1), int0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1087;
      ArrayUtils.reverse(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1087}, intArray0);
      
      ArrayUtils.reverse(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1087}, intArray0);
      
      AbstractMap.SimpleImmutableEntry<String, Byte>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeElements((AbstractMap.SimpleImmutableEntry<String, Byte>[]) null, (AbstractMap.SimpleImmutableEntry<String, Byte>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1087;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1087.0F}, floatArray0, 0.01F);
      
      Long long0 = new Long(1087);
      assertEquals(1087L, (long)long0);
      assertNotNull(long0);
      
      Object object0 = ArrayUtils.get((Object[]) null, 1087, (Object) long0);
      assertEquals(1087L, object0);
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 2);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.swap(booleanArray0, 770, 1087);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1087}, intArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'i');
      assertNull(charArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)117;
      ArrayUtils.swap(shortArray0, 1913, 770, 1913);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)117}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[6] = 0L;
      longArray0[1] = 0L;
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) long0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3534);
      shortArray0[2] = (short)0;
      Short[] shortArray1 = new Short[5];
      shortArray1[0] = (Short) (short)0;
      shortArray1[1] = (Short) (short)0;
      shortArray1[2] = (Short) (short)0;
      shortArray1[4] = (Short) (short)0;
      Class<Short[]> class0 = Short[].class;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1, class0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertNotNull(shortArray2);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      
      ArrayUtils.shift((Object[]) shortArray1, (int) (short)0);
      assertEquals(5, shortArray1.length);
      assertSame(shortArray1, shortArray2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-2);
      int[] intArray0 = new int[0];
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1), (byte)100, (byte) (-31), (byte)0, (byte) (-2)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1), (byte)100, (byte) (-31), (byte)0, (byte) (-2)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = (-1214.5574F);
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1214.5574F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1214.5574F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Float float0 = new Float(3.40657890391901);
      assertEquals(3.406579F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Long long0 = new Long((-288L));
      assertEquals((-288L), (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) long0, (-1932735283));
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '$';
      intArray0[1] = (-1);
      intArray0[2] = (-1932735283);
      intArray0[3] = (-1);
      intArray0[4] = 413;
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1);
      assertEquals(5, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {36, (-1), (-1932735283), (-1), 413}, intArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(2, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1673.1F);
      assertEquals((-1), int1);
      assertEquals(5, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1214.5574F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.40657890391901;
      doubleArray0[1] = (double) (-1932735283);
      doubleArray0[2] = (double) 413;
      doubleArray0[3] = (double) (-1214.5574F);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 3.40657890391901;
      doubleArray0[6] = (double) (-288L);
      doubleArray0[7] = 3.40657890391901;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1214.5574F), (-1932735283));
      assertEquals(1, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{3}", bitSet0.toString());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {3.40657890391901, (-1.932735283E9), 413.0, (-1214.557373046875), (-1.0), 3.40657890391901, (-288.0), 3.40657890391901}, doubleArray0, 0.01);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {36, (-1), (-1932735283), (-1), 413}, intArray0);
      assertArrayEquals(new int[] {36, (-1), (-1932735283), (-1), 413}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      Character character0 = Character.valueOf('J');
      assertEquals('J', (char)character0);
      assertNotNull(character0);
      
      ArrayUtils.hashCode((Object) character0);
      boolean boolean0 = ArrayUtils.isNotEmpty((Double[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'J';
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) 'J';
      longArray0[6] = (long) 'J';
      longArray0[7] = (long) 'J';
      boolean boolean1 = ArrayUtils.contains(longArray0, 74L);
      assertTrue(boolean1);
      assertEquals(9, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {74L, 0L, 0L, 74L, 74L, 0L, 74L, 74L, 0L}, longArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[1] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'J', 0);
      assertEquals("{0, 1, 4, 5}", bitSet0.toString());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals(6, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'J', 'J', '\u0000', '\u0000', 'J', 'J'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      Long[] longArray1 = ArrayUtils.add((Long[]) null, (Long) 74L);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 74L, 74L, 0L, 74L, 74L, 0L, 74L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-33);
      shortArray0[1] = (short) (-1);
      shortArray0[1] = (short)0;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (-88);
      intArray0[2] = (int) (short) (-33);
      intArray0[3] = 45;
      intArray0[4] = (int) (short) (-33);
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short) (-33);
      boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 45;
      longArray0[1] = (long) (-33);
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (-88);
      longArray0[4] = (long) 45;
      ArrayUtils.shift(longArray0, (-3927));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, (-88L), 45L, 45L, (-33L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1003);
      ArrayUtils.swap(intArray0, (-1003), (-1003), (-1003));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1003), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-1003), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(37, floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)85, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)85, (byte) (-1), (byte) (-1), (byte)85, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-2305L));
      assertEquals((-2305L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-2305L));
      assertEquals((-2305L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[1]);
      assertEquals((-2305L), (long)long2);
      assertEquals(5, longArray0.length);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[1]);
      assertEquals((-2305L), (long)long3);
      assertEquals(5, longArray0.length);
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((-2305L));
      assertEquals((-2305L), (long)long4);
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long2));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-15846);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3425.2842130999998);
      doubleArray0[1] = (double) (long)longArray0[3];
      doubleArray0[2] = (double) (long)longArray0[3];
      doubleArray0[3] = (-1637.4350553426402);
      doubleArray0[4] = (-1420.0);
      doubleArray0[5] = (double) (long)longArray0[0];
      doubleArray0[6] = (double) (long)longArray0[2];
      doubleArray0[7] = (double) (long)longArray0[2];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-3425.2842130999998), (-2305.0), (-2305.0), (-1637.4350553426402), (-1420.0), (-2305.0), (-2305.0), (-2305.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)7;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)7}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)7, (byte) (-4), (byte)7}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals((-1), int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1989;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (-1));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1989.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1989.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[1];
      ArrayUtils.shuffle(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1989.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1989.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Short short0 = new Short((short)1989);
      assertEquals((short)1989, (short)short0);
      assertNotNull(short0);
      
      boolean boolean1 = ArrayUtils.isSameType("=", short0);
      assertFalse(boolean1);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1989.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1989.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1989.0, 1989.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, 2627L, (-1));
      assertEquals((-1), int1);
      assertEquals(1, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-1));
      assertNull(byteArray0);
      
      int int2 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-1));
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 608;
      longArray0[1] = (long) 608;
      longArray0[3] = (long) 608;
      ArrayUtils.shift(longArray0, 608, 608, 1506);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {608L, 608L, 0L, 608L}, longArray0);
      
      ArrayUtils.shift(longArray0, 1506, Integer.MAX_VALUE, 97);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {608L, 608L, 0L, 608L}, longArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 608L;
      objectArray0[1] = (Object) 608L;
      objectArray0[2] = (Object) 0L;
      Character character0 = new Character('6');
      assertEquals('6', (char)character0);
      assertNotNull(character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertEquals('6', object0);
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      Short short0 = new Short((short) (-3286));
      assertEquals((short) (-3286), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) short0);
      assertFalse(boolean0);
      assertEquals(4, objectArray0.length);
      
      float[] floatArray0 = new float[3];
      ArrayUtils.shuffle(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 97;
      longArray1[1] = (-3L);
      longArray1[2] = (long) '6';
      boolean boolean1 = ArrayUtils.contains(longArray1, (long) Integer.MAX_VALUE);
      assertFalse(boolean1);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {97L, (-3L), 54L}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-13));
      assertEquals((byte) (-13), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte)16);
      assertEquals((byte)16, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[4] = byte4;
      Byte byte5 = new Byte((byte)21);
      assertEquals((byte)21, (byte)byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      byteArray0[5] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)107);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)100, (byte) (-13), (byte)107, (byte)2, (byte)16, (byte)21}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      long[] longArray0 = new long[5];
      ArrayUtils.shift(longArray0, 512, 1034, 0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)74);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 608;
      longArray0[1] = (long) 608;
      longArray0[3] = (long) 608;
      ArrayUtils.shift(longArray0, 608, 608, 1506);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {608L, 608L, 0L, 608L}, longArray0);
      
      ArrayUtils.shift(longArray0, 1506, Integer.MAX_VALUE, 97);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {608L, 608L, 0L, 608L}, longArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 608L;
      objectArray0[1] = (Object) 608L;
      objectArray0[2] = (Object) 0L;
      Character character0 = new Character('6');
      assertEquals('6', (char)character0);
      assertNotNull(character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertEquals('6', object0);
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      Short short0 = new Short((short) (-3286));
      assertEquals((short) (-3286), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) short0);
      assertFalse(boolean0);
      assertEquals(4, objectArray0.length);
      
      float[] floatArray0 = new float[3];
      ArrayUtils.shuffle(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 97;
      longArray1[1] = (-3L);
      longArray1[2] = (long) '6';
      boolean boolean1 = ArrayUtils.contains(longArray1, (long) Integer.MAX_VALUE);
      assertFalse(boolean1);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {97L, (-3L), 54L}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-13));
      assertEquals((byte) (-13), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte)16);
      assertEquals((byte)16, (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray0[4] = byte4;
      Byte byte5 = new Byte((byte)21);
      assertEquals((byte)21, (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      byteArray0[5] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)107);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)100, (byte) (-13), (byte) (-78), (byte)2, (byte)16, (byte)21}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)3;
      ArrayUtils.reverse(byteArray0, 1517, 55);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-42), (byte)3}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)3;
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {3.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte)3, (int) (byte) (-42));
      assertEquals(0, int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {3.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-5125));
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 3007L;
      longArray0[1] = 4131L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {3007L, 4131L}, longArray0);
      assertArrayEquals(new long[] {3007L, 4131L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte) (-42);
      intArray1[1] = 237;
      intArray1[2] = (int) (byte)3;
      intArray1[3] = (int) (byte) (-101);
      intArray1[4] = (int) (byte) (-42);
      intArray1[5] = 0;
      intArray1[6] = 1578;
      boolean boolean1 = ArrayUtils.isEmpty(intArray1);
      assertFalse(boolean1);
      assertEquals(7, intArray1.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-42), 237, 3, (-101), (-42), 0, 1578}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.shift(longArray0, 55);
      assertEquals(2, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {4131L, 3007L}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.reverse((double[]) null, (int) (byte)3, (-2513));
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)3;
      shortArray0[1] = (short) (byte) (-42);
      shortArray0[2] = (short) (byte)3;
      shortArray0[3] = (short)90;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (byte) (-101);
      shortArray0[6] = (short) (byte) (-101);
      shortArray0[7] = (short) (byte) (-101);
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (byte) (-42), (-437));
      assertEquals(1, int1);
      assertEquals(8, shortArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short)3, (short) (-42), (short)3, (short)90, (short)2, (short) (-101), (short) (-101), (short) (-101)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      Character character0 = new Character('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3143;
      shortArray0[1] = (short)3143;
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (short)3143;
      floatArray0[2] = (float) 520;
      floatArray0[3] = (float) 'H';
      floatArray0[4] = (-1.0F);
      floatArray0[5] = Float.NaN;
      floatArray0[6] = (float) 520;
      floatArray0[7] = (float) 'H';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2564.4136F, 3);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(8, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 3143.0F, 520.0F, 72.0F, (-1.0F), Float.NaN, 520.0F, 72.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(70.0);
      assertEquals(70.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(70.0);
      assertEquals(70.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1750.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3974);
      shortArray0[1] = (short) (-1224);
      shortArray0[2] = (short) (-3343);
      ArrayUtils.reverse(shortArray0, (int) (short) (-1224), 3822);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-3343), (short) (-1224), (short) (-3974)}, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1674L);
      longArray0[1] = (long) (short) (-3343);
      longArray0[2] = (long) (short) (-3343);
      int int0 = ArrayUtils.indexOf(longArray0, 54L);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1674L), (-3343L), (-3343L)}, longArray0);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-3343), (short) (-1224), (short) (-3974)}, shortArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(70.0);
      assertEquals(70.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(70.0);
      assertEquals(70.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) '#');
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3974);
      shortArray0[1] = (short) (-1229);
      shortArray0[2] = (short) (-3343);
      ArrayUtils.reverse(shortArray0, (int) (short) (-1229), 3822);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-3343), (short) (-1229), (short) (-3974)}, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1674L);
      longArray0[1] = (long) (short) (-3343);
      longArray0[2] = (long) (short) (-3343);
      int int0 = ArrayUtils.indexOf(longArray0, 54L);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1674L), (-3343L), (-3343L)}, longArray0);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-3343), (short) (-1229), (short) (-3974)}, shortArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'#', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      int[] intArray0 = new int[8];
      Short short0 = new Short((short) (-76));
      assertEquals((short) (-76), (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (-3409.164F), 0);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, 'x');
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      ArrayUtils.shift(intArray0, 37, 0, (-540));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) short0;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) short0;
      objectArray0[5] = (Object) short0;
      objectArray0[6] = (Object) 0;
      objectArray0[7] = (Object) 0;
      objectArray0[8] = (Object) short0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertEquals((-1), int1);
      assertEquals(8, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-76);
      doubleArray0[1] = (double) (-3409.164F);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 37;
      doubleArray0[4] = 113.9682;
      doubleArray0[5] = (double) 37;
      doubleArray0[6] = (double) 'x';
      doubleArray0[7] = (double) (-3409.164F);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-76.0), (-3409.1640625), (-1.0), 37.0, 113.9682, 37.0, 120.0, (-3409.1640625)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-76.0), (-3409.1640625), (-1.0), 37.0, 113.9682, 37.0, 120.0, (-3409.1640625)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      int[] intArray0 = new int[8];
      Short short0 = new Short((short) (-76));
      assertEquals((short) (-76), (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (-3409.164F), 0);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, 'x');
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      ArrayUtils.shift(intArray0, 37, 0, (-540));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) short0;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) short0;
      objectArray0[5] = (Object) short0;
      objectArray0[6] = (Object) 0;
      objectArray0[7] = (Object) 0;
      objectArray0[8] = (Object) short0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertEquals((-1), int1);
      assertEquals(8, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 37;
      doubleArray0[4] = 113.9682;
      doubleArray0[5] = (double) 37;
      doubleArray0[6] = (double) 'x';
      doubleArray0[7] = (double) (-3409.164F);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 37.0, 113.9682, 37.0, 120.0, (-3409.1640625)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 37.0, 113.9682, 37.0, 120.0, (-3409.1640625)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (-2590);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)787;
      shortArray0[2] = (short) (-243);
      shortArray0[6] = (short)787;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-2590), (short) (-243), (short)0, (short)787, (short)0, (short)787}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-14));
      assertEquals((byte) (-14), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-122));
      assertEquals((byte) (-122), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Long long0 = new Long((byte)6);
      assertEquals(6L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)6;
      shortArray0[1] = (short) (byte) (-122);
      shortArray0[2] = (short) (byte)6;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)6, (short) (-122), (short)6}, shortArray0);
      assertArrayEquals(new short[] {(short)6, (short) (-122), (short)6}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '?');
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '?';
      longArray0[1] = (long) '?';
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean1);
      assertEquals(2, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {63L, 63L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertEquals(8, bitSet0.cardinality());
      assertEquals(9, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, true}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 63L, 351);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals(0, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(bitSet1, bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 157L);
      assertEquals((-1), int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {63L, 63L}, longArray0);
      
      ArrayUtils.reverse(charArray0, (-1307), 351);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.reverse(doubleArray0, Integer.MAX_VALUE, (-716));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-716);
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = 1412.0F;
      floatArray0[3] = (float) 63L;
      floatArray0[4] = (float) Integer.MAX_VALUE;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) Integer.MAX_VALUE;
      floatArray0[8] = (float) '?';
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertEquals(6, int1);
      assertEquals(9, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-716.0F), 2.14748365E9F, 1412.0F, 63.0F, 2.14748365E9F, 1.0F, (-1.0F), 2.14748365E9F, 63.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)0;
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift((long[]) null, (int) (short)0);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-14));
      assertEquals((byte) (-14), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-122));
      assertEquals((byte) (-122), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte2;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)75;
      shortArray0[1] = (short) (byte) (-14);
      shortArray0[2] = (short) (byte) (-126);
      ArrayUtils.shift(shortArray0, (int) (byte) (-14));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-126), (short)75, (short) (-14)}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-126), (short)75, (short) (-14)}, shortArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = '?';
      charArray0[2] = 'o';
      charArray0[3] = 'c';
      charArray0[5] = 'J';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean1);
      assertEquals(0, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'i', '?', 'o', 'c', '\u0000', 'J'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = 'K';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'K');
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'P', 'K'}, charArray0);
      assertArrayEquals(new char[] {'P'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2996);
      shortArray0[1] = (short)15;
      shortArray0[2] = (short)10;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)4280;
      shortArray0[5] = (short)184;
      shortArray0[6] = (short)2465;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2996), (short)15, (short)10, (short) (-1), (short)4280, (short)184, (short)2465}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2996), (short)15, (short)10, (short) (-1), (short)4280, (short)184, (short)2465}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-20);
      byteArray0[0] = (byte) (-20);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-20)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = 1710;
      try { 
        Byte.valueOf(",", 1710);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1710 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      charArray0[3] = 'M';
      charArray0[4] = 'W';
      charArray0[5] = 'W';
      char[] charArray1 = ArrayUtils.add(charArray0, 'W');
      assertEquals(6, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'W', 'W', 'W', 'M', 'W', 'W'}, charArray0);
      assertArrayEquals(new char[] {'W', 'W', 'W', 'M', 'W', 'W', 'W'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom(652L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      int[] intArray0 = new int[4];
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = (float) '\u0000';
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '|');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray1, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3141), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3141, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3105);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y*jM";
      stringArray0[1] = "H";
      stringArray0[2] = "H";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-80);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-80)}, byteArray0);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte) (-80));
      assertFalse(boolean1);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean2);
      assertEquals(0, intArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new int[] {}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[0] = boolean3;
      Boolean boolean4 = Boolean.valueOf("H");
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[1] = boolean4;
      char[] charArray0 = ArrayUtils.insert((int) (byte) (-84), (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Class<Boolean[]> class0 = Boolean[].class;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0, class0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-80));
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-84)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-80)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-14.0F));
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'p';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2145, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2145, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'O');
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, int1);
      assertEquals(1, booleanArray0.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '|');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'O';
      charArray1[1] = 'O';
      charArray1[2] = '|';
      charArray1[3] = 'P';
      char[] charArray2 = ArrayUtils.insert(0, charArray1, (char[]) null);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'O', 'O', '|', 'P'}, charArray1);
      assertArrayEquals(new char[] {'O', 'O', '|', 'P'}, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)2);
      assertNull(byteArray2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '|';
      intArray0[1] = (int) 'P';
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, (int) (byte)2);
      assertEquals(3, intArray1.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {124, 80, 0}, intArray1);
      assertArrayEquals(new int[] {124, 80, 0, 0}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2146543005);
      doubleArray0[1] = (double) (-2146543005);
      doubleArray0[2] = (double) 124;
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      Character character0 = new Character('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('^');
      assertEquals('^', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('^');
      assertEquals('^', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character1;
      characterArray0[1] = character0;
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'w');
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'^', 'G', '^'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-2146543005), (-2146543005));
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'O');
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int1);
      assertEquals(1, booleanArray0.length);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '|');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'O';
      charArray1[1] = 'O';
      charArray1[2] = '|';
      charArray1[3] = 'P';
      char[] charArray2 = ArrayUtils.insert((-1), charArray1, (char[]) null);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'O', 'O', '|', 'P'}, charArray1);
      assertArrayEquals(new char[] {'O', 'O', '|', 'P'}, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)2);
      assertNull(byteArray2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '|';
      intArray0[1] = (int) 'P';
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      int[] intArray1 = ArrayUtils.remove(intArray0, (int) (byte)2);
      assertEquals(3, intArray1.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {124, 80, (-1)}, intArray1);
      assertArrayEquals(new int[] {124, 80, (-1), (-1)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2146543005);
      doubleArray0[1] = (double) (-2146543005);
      doubleArray0[2] = (double) 124;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(doubleArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-14));
      assertEquals((byte) (-14), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-122));
      assertEquals((byte) (-122), (byte)byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte3;
      byteArray0[1] = byte2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      int[] intArray0 = new int[4];
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertArrayEquals(new char[] {'('}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'('}, charArray0);
      assertNotSame(charArray0, charArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '(';
      floatArray0[1] = (float) '(';
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) '(';
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new float[] {40.0F, 40.0F, 0.0F, (-1.0F), (-1.0F), (-1.0F), 40.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {40.0F, 0.0F, (-1.0F), (-1.0F), (-1.0F), 40.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 2002L;
      char[] charArray2 = ArrayUtils.add(charArray0, 'W');
      assertEquals(2, charArray2.length);
      assertEquals(1, charArray0.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'(', 'W'}, charArray2);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-1.0F), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)64;
      byteArray0[6] = (byte)62;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)3);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)3, (byte)90, (byte) (-95), (byte)112, (byte)64, (byte)0, (byte)62}, byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-95), (byte)112, (byte)64, (byte)0, (byte)62}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)64;
      doubleArray0[1] = (double) (byte)62;
      doubleArray0[2] = (double) (byte)62;
      doubleArray0[3] = (double) (byte)64;
      doubleArray0[4] = (double) ',';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)3, (-412.800514340597));
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {64.0, 62.0, 62.0, 64.0, 44.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1128.510588485084), (-190.0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {64.0, 62.0, 62.0, 64.0, 44.0}, doubleArray0, 0.01);
      
      BitSet bitSet1 = (BitSet)ArrayUtils.toPrimitive((Object) bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {64.0, 62.0, 62.0, 64.0, 44.0}, doubleArray0, 0.01);
      assertSame(bitSet1, bitSet0);
      assertSame(bitSet0, bitSet1);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)305;
      shortArray0[1] = (short)763;
      shortArray0[2] = (short)3354;
      shortArray0[3] = (short)2891;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)1731;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)305, 3005);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)305, (short)763, (short)3354, (short)2891, (short) (-1), (short)1731}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1340L;
      longArray0[1] = (long) (short)2891;
      longArray0[2] = (long) (short)1731;
      longArray0[3] = (long) (short)2891;
      MockRandom mockRandom0 = new MockRandom((short) (-1));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {2891L, 1731L, 2891L, 1340L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3561);
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) byteArray1, 1047, (int)  (-3561));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray1, objectArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-101);
      ArrayUtils.reverse(byteArray0, 1517, 55);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-42), (byte) (-101)}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-101);
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-101.0F)}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte) (-101), (int) (byte) (-42));
      assertEquals(0, int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-101.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-5125));
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Long long0 = new Long(1517);
      assertEquals(1517L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1517L}, longArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-101);
      shortArray0[1] = (short) (byte)3;
      shortArray0[2] = (short) (byte) (-101);
      shortArray0[3] = (short) (-1021);
      shortArray0[4] = (short) (byte) (-101);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-101));
      assertEquals(4, int1);
      assertEquals(5, shortArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short) (-101), (short)3, (short) (-101), (short) (-1021), (short) (-101)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean1);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-2305L));
      assertEquals((-2305L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-2305L));
      assertEquals((-2305L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[1]);
      assertEquals((-2305L), (long)long2);
      assertEquals(5, longArray0.length);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[1]);
      assertEquals((-2305L), (long)long3);
      assertEquals(5, longArray0.length);
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((-2305L));
      assertEquals((-2305L), (long)long4);
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long0));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-15846);
      shortArray0[1] = (short) (-3683);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)4900);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-15846), (short) (-3683)}, shortArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      // Undeclared exception!
      try { 
        bitSet0.or((BitSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.insert(90, booleanArray0, booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      Long long0 = new Long(145L);
      assertEquals(145L, (long)long0);
      assertNotNull(long0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'v');
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'v'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertEquals(0.0, (double)double3, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(2939.0);
      assertEquals(2939.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(90);
      assertEquals(90.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(145L);
      assertEquals(145.0, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[3]);
      assertEquals(0.0, (double)double7, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertEquals((double)double7, (double)double2, 0.01);
      assertEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertEquals((double)double7, (double)double1, 0.01);
      assertEquals((double)double7, (double)double0, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-2305L));
      assertEquals((-2305L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-2305L));
      assertEquals((-2305L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      long[] longArray1 = ArrayUtils.insert((int) (short) (-1316), (long[]) null, (long[]) null);
      assertNull(longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      ArrayUtils.shift(byteArray0, (int) (short) (-1316));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)19, (byte)19}, byteArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-1), object0);
      assertNotNull(object0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)19;
      intArray0[1] = (int) (byte)19;
      intArray0[2] = (int) (byte) (-1);
      int[] intArray1 = ArrayUtils.insert(1, intArray0, intArray0);
      assertEquals(6, intArray1.length);
      assertEquals(3, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {19, 19, 19, (-1), 19, (-1)}, intArray1);
      assertArrayEquals(new int[] {19, 19, (-1)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean1);
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false}, booleanArray0));
      
      boolean boolean2 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-1704.0F));
      assertNull(floatArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 0);
      assertEquals(0, int0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.indexOf(charArray0, ')');
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[25];
      floatArray0[0] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[6] = (float) ')';
      ArrayUtils.shift(floatArray0, (-1513));
      assertEquals(25, floatArray0.length);
      
      int int2 = ArrayUtils.indexOf(charArray0, ')', (-1513));
      assertEquals((-1), int2);
      assertEquals(0, charArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)68;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)58, (byte)68}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)58, (byte)68}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)68;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)68, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)68, (short)0, (short)0, (short)0, (short)68, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int3 = ArrayUtils.indexOf(charArray0, ')', 0);
      assertEquals((-1), int3);
      assertEquals(0, charArray0.length);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 649;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 649;
      doubleArray0[1] = (double) 649;
      doubleArray0[2] = (double) 649;
      doubleArray0[4] = (double) 649L;
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray2, 0.01);
      assertSame(doubleArray0, doubleArray2);
      assertSame(doubleArray2, doubleArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3769;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1229);
      shortArray0[3] = (short)0;
      shortArray0[8] = (short)3769;
      shortArray0[5] = (short) (-2962);
      shortArray0[3] = (short) (-1229);
      shortArray0[7] = (short) (-2962);
      shortArray0[8] = (short) (-1229);
      ArrayUtils.shift(shortArray0, (-1494));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)3769, (short)0, (short) (-1229), (short) (-1229), (short)0, (short) (-2962), (short)0, (short) (-2962), (short) (-1229)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.swap(booleanArray0, (int) (short)3769, 114, 2144612966);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 114);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 649L}, longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)3769;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3769, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)3769, (short)0, (short) (-1229), (short) (-1229), (short)0, (short) (-2962), (short)0, (short) (-2962), (short) (-1229)}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray2, (double) 649, 0, (double) 2144612966);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray2, 0.01);
      assertSame(doubleArray0, doubleArray2);
      assertSame(doubleArray2, doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray1, (float) (short) (-1229), (-1925));
      assertEquals((-1), int1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3534);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-995);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3534), (short)0, (short)0, (short) (-995), (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-995);
      doubleArray0[1] = (double) (short) (-3534);
      doubleArray0[2] = (double) (short) (-3534);
      doubleArray0[3] = (double) (short) (-3534);
      doubleArray0[4] = (double) (short) (-3534);
      doubleArray0[5] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-403.516120065), (int) (short)0, 1.0);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-995.0), (-3534.0), (-3534.0), (-3534.0), (-3534.0), 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-2054);
      floatArray0[1] = (float) (short) (-3534);
      floatArray0[2] = (float) (short) (-995);
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short) (-995);
      floatArray0[5] = (float) (short) (-3534);
      floatArray0[6] = (float) (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((int) (short) (-3534), (-113));
      assertNotNull(intStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        mockRandom0.doubles((long) (-1), (double) (short) (-1028), 89.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-1), (-3043), (-3043));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)713);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3043);
      intArray0[1] = (int) (short)713;
      intArray0[2] = 7;
      ArrayUtils.shift(intArray0, (-1));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {713, 7, (-3043)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-47);
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short)0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z', (int) (byte)59);
      assertEquals(3, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 'Z'}, charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 'Z';
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift(longArray0, 3);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 90L, 0L}, longArray0);
      
      String string0 = ArrayUtils.toString((Object) false);
      assertEquals("false", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(booleanArray1, (-1));
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertEquals(16, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 45;
      floatArray0[1] = (float) 1235;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1235;
      floatArray1[1] = (float) 1;
      floatArray1[2] = 1652.2872F;
      floatArray1[4] = (float) 1488;
      floatArray1[5] = (float) 45;
      floatArray1[6] = (float) 1488;
      floatArray1[7] = (float) 45;
      floatArray1[8] = (float) 1235;
      int int0 = ArrayUtils.indexOf(floatArray1, 0.0F, 45);
      assertEquals((-1), int0);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1235.0F, 1.0F, 1652.2872F, 0.0F, 1488.0F, 45.0F, 1488.0F, 45.0F, 1235.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 1235;
      intArray0[2] = 1235;
      intArray0[3] = 1235;
      intArray0[4] = 45;
      intArray0[5] = 1;
      intArray0[6] = (-1);
      intArray0[7] = 45;
      intArray0[8] = 45;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1));
      assertTrue(boolean0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), 1235, 1235, 1235, 45, 1, (-1), 45, 45}, intArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean1);
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      org.evosuite.runtime.Random.setNextRandom((-15846));
      ArrayUtils.shift(booleanArray0, 1);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 1235);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-47);
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short)0;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)59;
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z', (int) (byte)59);
      assertEquals(3, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 'Z'}, charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)59;
      longArray0[1] = (long) 'Z';
      longArray0[2] = (long) 3;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {59L, 90L, 3L}, longArray1);
      assertArrayEquals(new long[] {59L, 90L, 3L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift(longArray1, 3);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {59L, 90L, 3L}, longArray1);
      assertArrayEquals(new long[] {59L, 90L, 3L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      String string0 = ArrayUtils.toString((Object) boolean1);
      assertEquals("true", string0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) 3L;
      floatArray0[2] = (float) 'Z';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 3, 3);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 3.0F, 90.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[7];
      int[] intArray0 = new int[2];
      int int1 = (-2629);
      intArray0[0] = (-2629);
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3534);
      shortArray0[2] = (short)0;
      Short short0 = new Short((short)91);
      assertEquals((short)91, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray1 = new Short[5];
      shortArray1[0] = short0;
      shortArray1[1] = (Short) (short)0;
      shortArray1[2] = short0;
      shortArray1[3] = (Short) (short)0;
      Class<Short[]> class0 = Short[].class;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1, class0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertNotNull(shortArray2);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      
      ArrayUtils.shift((Object[]) shortArray1, (int) (short)0);
      assertEquals(5, shortArray1.length);
      assertSame(shortArray1, shortArray2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte) (-44);
      byteArray0[8] = (byte) (-1);
      ArrayUtils.reverse(byteArray0, (-493), 469);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-44), (byte) (-48), (byte) (-31), (byte) (-14), (byte) (-1), (byte) (-128), (byte)0, (byte) (-110)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-24);
      ArrayUtils.swap(byteArray0, (-1494), (-160), (int) (byte) (-24));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)95, (byte) (-44), (byte) (-89), (byte)95, (byte)67, (byte) (-24)}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'R');
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'9'}, charArray0);
      assertArrayEquals(new char[] {'9'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Float float0 = new Float((double) (byte) (-89));
      assertEquals((-89.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals((short) (-89), mutableInt0.shortValue());
      assertEquals((-89), (int)mutableInt0.getValue());
      assertEquals((byte) (-89), mutableInt0.byteValue());
      assertEquals((-89.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-89), (int)mutableInt0.toInteger());
      assertEquals("-89", mutableInt0.toString());
      assertEquals((-89L), mutableInt0.longValue());
      assertEquals((-89.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-89), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-24));
      assertEquals("{7}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(8, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)95, (byte) (-44), (byte) (-89), (byte)95, (byte)67, (byte) (-24)}, byteArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-60));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(8, byteArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)95, (byte) (-44), (byte) (-89), (byte)95, (byte)67, (byte) (-24)}, byteArray0);
      assertNotSame(bitSet1, bitSet0);
      
      bitSet0.andNot(bitSet1);
      assertEquals("{7}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(8, byteArray0.length);
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)95, (byte) (-44), (byte) (-89), (byte)95, (byte)67, (byte) (-24)}, byteArray0);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.5, (double) (byte)9);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      longArray0[4] = 1L;
      longArray0[5] = 0L;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)70;
      shortArray0[1] = (short) (-27);
      shortArray0[2] = (short)98;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)70, (short) (-27), (short)98, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)70, (short) (-27), (short)98, (short)0}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)111;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (short)0);
      assertEquals(7, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-69), (byte)122, (byte) (-53), (byte) (-97), (byte) (-10), (byte)0, (byte)111}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-69), (byte)122, (byte) (-53), (byte) (-97), (byte) (-10), (byte)0, (byte)111}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (short) (-27);
      doubleArray0[3] = (double) (byte) (-97);
      doubleArray0[4] = 2565.298198093;
      doubleArray0[5] = (double) (byte) (-97);
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) (byte)122;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2148.8248031), 1276.45941);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, (-27.0), (-97.0), 2565.298198093, (-97.0), 1.0, 122.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      charArray0[6] = 'Q';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'g', 'g', 'Q'}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, 554.9F);
      assertEquals((-1), int0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)49;
      ArrayUtils.shift(byteArray0, (int) (byte) (-70), 3247, (int) (byte) (-70));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)92, (byte)49, (byte) (-70), (byte)87}, byteArray0);
      
      Byte byte0 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.hashCode((Object) byte0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3115);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[7];
      stringArray0[3] = "Y*jM";
      stringArray0[4] = "H";
      stringArray0[2] = "H";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-4);
      ArrayUtils.swap(byteArray0, (int) (byte) (-84), (int) (byte) (-84), (-90));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)0, (byte) (-84), (byte) (-84), (byte) (-4)}, byteArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-4);
      floatArray0[1] = (float) (byte) (-84);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 3115;
      floatArray0[4] = (float) (byte) (-84);
      ArrayUtils.swap(floatArray0, (-857), (-1418), (-857));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-4.0F), (-84.0F), 1.0F, 3115.0F, (-84.0F)}, floatArray0, 0.01F);
      
      MutableInt mutableInt0 = new MutableInt(3115);
      assertEquals((short)3115, mutableInt0.shortValue());
      assertEquals(3115.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("3115", mutableInt0.toString());
      assertEquals((byte)43, mutableInt0.byteValue());
      assertEquals(3115, (int)mutableInt0.getValue());
      assertEquals(3115, (int)mutableInt0.toInteger());
      assertEquals(3115, mutableInt0.intValue());
      assertEquals(3115.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3115L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      String string0 = ArrayUtils.toString((Object) "H");
      assertEquals("H", string0);
      assertNotNull(string0);
      
      int int0 = mutableInt0.addAndGet((Number) (byte) (-84));
      assertEquals(3031, int0);
      assertEquals(3031, mutableInt0.intValue());
      assertEquals(3031.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3031L, mutableInt0.longValue());
      assertEquals(3031.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-41), mutableInt0.byteValue());
      assertEquals((short)3031, mutableInt0.shortValue());
      assertEquals("3031", mutableInt0.toString());
      assertEquals(3031, (int)mutableInt0.getValue());
      assertEquals(3031, (int)mutableInt0.toInteger());
      
      ArrayUtils.shift(byteArray0, (-2733), 2, (-1418));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)0, (byte) (-84), (byte) (-84), (byte) (-4)}, byteArray0);
      
      Byte byte0 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.hashCode((Object) mutableInt0);
      assertEquals(3031, mutableInt0.intValue());
      assertEquals(3031.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3031L, mutableInt0.longValue());
      assertEquals(3031.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-41), mutableInt0.byteValue());
      assertEquals((short)3031, mutableInt0.shortValue());
      assertEquals("3031", mutableInt0.toString());
      assertEquals(3031, (int)mutableInt0.getValue());
      assertEquals(3031, (int)mutableInt0.toInteger());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte) (-14);
      Byte byte2 = new Byte((byte) (-14));
      assertEquals((byte) (-14), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byte byte3 = (byte) (-126);
      Byte byte4 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-122));
      assertEquals((byte) (-122), (byte)byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte4;
      byteArray0[1] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-14)}, byteArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-126);
      floatArray0[1] = (float) byte1;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)6, (int) byte3);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(byte3 == byte1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-126.0F), (-14.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-14)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      ArrayUtils.shift(byteArray1, 83);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-126)}, byteArray1);
      assertNotSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      charArray0[6] = 'Q';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'g', 'g', 'Q'}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, 554.9F);
      assertEquals((-1), int0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)49;
      ArrayUtils.shift(byteArray0, (int) (byte) (-70), 3247, (int) (byte) (-70));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)98, (byte)49, (byte) (-70), (byte) (-70)}, byteArray0);
      
      Byte byte0 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.hashCode((Object) byte0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      Long long0 = new Long((-2305L));
      assertEquals((-2305L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-2305L));
      assertEquals((-2305L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-15846);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2305L);
      doubleArray0[3] = (-1637.4350553426402);
      doubleArray0[4] = (-1420.0);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-2305.0), 0.0, 0.0, (-1637.4350553426402), (-1420.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)7;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)7}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)7, (byte) (-4), (byte)7}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-2305L));
      assertEquals((-2305L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-2305L));
      assertEquals((-2305L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[1]);
      assertEquals((-2305L), (long)long2);
      assertEquals(5, longArray0.length);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[1]);
      assertEquals((-2305L), (long)long3);
      assertEquals(5, longArray0.length);
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((-2305L));
      assertEquals((-2305L), (long)long4);
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long3));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-15846);
      shortArray0[1] = (short) (-3683);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)4900);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-15846), (short) (-3683)}, shortArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)2;
      ArrayUtils.shift(byteArray0, (-3735), 111, (-290));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)2}, byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3735);
      intArray0[1] = (int) (byte) (-10);
      intArray0[2] = (int) (byte) (-10);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -10, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)59;
      Float float0 = new Float((float) (short) (-47));
      assertEquals((-47.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-62));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)59}, byteArray0);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((byte) (-60));
      assertEquals((short) (-60), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)485);
      assertEquals((short)485, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)4);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-60), (short)485}, shortArray1);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-60), (short)485}, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-1), (-3043), (-3043));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)713);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3043);
      intArray0[1] = (int) (short)713;
      intArray0[2] = 7;
      ArrayUtils.shift(intArray0, (-1));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {713, 7, (-3043)}, intArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert(9, doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = 'H';
      ArrayUtils.reverse(charArray0, 1, (-635));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'c', 'H'}, charArray0);
      
      ArrayUtils.shift(booleanArray0, 7, 101, (-1003));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2545;
      shortArray0[1] = (short)2491;
      shortArray0[2] = (short)1946;
      shortArray0[3] = (short) (-453);
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)3235;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2545, (short)2491, (short)1946, (short) (-453), (short)4, (short)1, (short)2, (short)3235}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-556), (int) (short)2491);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2545, (short)2491, (short)1946, (short) (-453), (short)4, (short)1, (short)2, (short)3235}, shortArray0);
      assertArrayEquals(new short[] {(short)2545, (short)2491, (short)1946, (short) (-453), (short)4, (short)1, (short)2, (short)3235}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short)3235;
      floatArray0[2] = (float) (short)3235;
      int int0 = ArrayUtils.indexOf(floatArray0, 3235.0F, (int) (short)1946);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 3235.0F, 3235.0F}, floatArray0, 0.01F);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray0);
      assertEquals(8, shortArray2.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)2545, (short)2491, (short)1946, (short) (-453), (short)4, (short)1, (short)2, (short)3235}, shortArray2);
      assertArrayEquals(new short[] {(short)2545, (short)2491, (short)1946, (short) (-453), (short)4, (short)1, (short)2, (short)3235}, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      
      int[] intArray0 = new int[8];
      intArray0[1] = (int) (short)4;
      intArray0[2] = 2766;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) (short)4;
      intArray0[5] = (int) (short)1946;
      intArray0[6] = 10;
      intArray0[7] = (int) (short)1946;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 4, 2766, 1, 4, 1946, 10, 1946}, intArray0);
      assertArrayEquals(new int[] {4, 2766, 1, 4, 1946, 10, 1946}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte)2;
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = (long) (byte) (-1);
      longArray0[6] = (long) (byte)2;
      longArray0[7] = 2147483647L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1L), 2L, (-1L), (-1L), (-1L), (-1L), 2L, 2147483647L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray0 = ArrayUtils.insert(102, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-3544);
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)5);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-27), (int) (byte) (-1));
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted((Object[]) floatArray0, comparator0);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)5;
      shortArray0[1] = (short) (byte)5;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1068));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1068)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.insert(3524, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.insert(1235, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      long long0 = (-1L);
      Long long1 = new Long((-1L));
      assertEquals((-1L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long1;
      Long[] longArray1 = ArrayUtils.add(longArray0, (Long) long0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = new long[8];
      longArray2[0] = 145L;
      longArray2[1] = (long) 2184;
      longArray2[2] = (-1L);
      longArray2[3] = (long) 2184;
      longArray2[4] = 145L;
      longArray2[5] = (long) 2184;
      longArray2[6] = long0;
      longArray2[7] = long0;
      ArrayUtils.shuffle(longArray2);
      assertEquals(8, longArray2.length);
      assertArrayEquals(new long[] {2184L, (-1L), 2184L, 145L, 2184L, (-1L), (-1L), 145L}, longArray2);
      
      String string0 = ArrayUtils.toString((Object) long1, "B");
      assertEquals("-1", string0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(string0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1741;
      shortArray0[1] = (short)11175;
      shortArray0[2] = (short)2694;
      shortArray0[3] = (short)1984;
      shortArray0[4] = (short)2523;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)57;
      shortArray0[8] = (short)58;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)1741, (short)11175, (short)2694, (short)1984, (short)2523, (short)2, (short) (-1), (short)57, (short)58}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)1779;
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((Object[]) null, (int) (short)0, (int) (short)1779, 0);
      ArrayUtils.shuffle(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1779, (short)10}, shortArray0);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((short)1779);
      assertEquals(1779.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      assertEquals((-1.0), (double)double4, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[3]);
      assertEquals((-1.0), (double)double5, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      assertEquals(0.0, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short)1779);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 1779.0, (-1.0), (-1.0), (-1.0), 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (-1214.5574F));
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1214.5574F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray1 = ArrayUtils.remove(shortArray0, 0);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1779, (short)10}, shortArray0);
      assertArrayEquals(new short[] {(short)10}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)1779;
      intArray0[1] = 0;
      intArray0[2] = (int) (short)1779;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)10;
      intArray0[5] = (int) (short)10;
      intArray0[6] = 0;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short)1779;
      intArray1[1] = 840;
      intArray1[2] = (int) (short)1779;
      intArray1[3] = (int) (short)10;
      intArray1[4] = (int) (short)1779;
      intArray1[5] = (int) (short)10;
      intArray1[6] = (int) (short)0;
      intArray1[7] = 0;
      intArray1[8] = 106;
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(boolean1);
      assertEquals(9, intArray1.length);
      assertEquals(7, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {1779, 840, 1779, 10, 1779, 10, 0, 0, 106}, intArray1);
      assertArrayEquals(new int[] {1779, 0, 1779, 0, 10, 10, 0}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      Character character0 = new Character('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3143;
      shortArray0[1] = (short)3143;
      shortArray0[2] = (short)3143;
      shortArray0[3] = (short)3143;
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = (-2239);
      int[] intArray1 = ArrayUtils.removeElements((int[]) null, intArray0);
      assertEquals(2, intArray0.length);
      assertNull(intArray1);
      assertArrayEquals(new int[] {2, (-2239)}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2, (-2239)}, intArray0);
      
      Character character1 = new Character('W');
      assertEquals('W', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Short short0 = new Short((short) (-833));
      assertEquals((short) (-833), (short)short0);
      assertNotNull(short0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.contains((int[]) null, (int) (short) (-833));
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.indexOf((Object[]) doubleArray0, (Object) long0, 2);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 2;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[7] = 2;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), 2, (-1), (-1), (-1), (-1), 0, 2}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (-708.1F);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = 495.137F;
      floatArray0[6] = (float) 2;
      floatArray0[7] = (float) 2;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertEquals(7, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-708.1F), (-1.0F), (-1.0F), 495.137F, 2.0F, 2.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-708.1F), (-1.0F), (-1.0F), 495.137F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[1] = long0;
      long long1 = 50L;
      Long long2 = new Long(50L);
      assertEquals(50L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (Long) long1);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      charArray0[6] = 'R';
      charArray0[7] = 'R';
      charArray0[8] = 'R';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '*');
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R'}, charArray0);
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom(758L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(9, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R'}, charArray0);
      assertNotSame(charArray0, charArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)50;
      shortArray0[1] = (short)436;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)436);
      assertEquals(1, int1);
      assertEquals(2, shortArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short)50, (short)436}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 'B';
      charArray0[2] = 'U';
      charArray0[3] = 'T';
      charArray0[4] = 'J';
      charArray0[5] = '/';
      charArray0[6] = 'p';
      ArrayUtils.swap(charArray0, (-1165), 4, 1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'J', 'B', 'U', 'T', 'H', '/', 'p'}, charArray0);
      
      Character character0 = new Character('B');
      assertEquals('B', (char)character0);
      assertNotNull(character0);
      
      int[] intArray0 = new int[18];
      intArray0[0] = (int) 'p';
      intArray0[13] = (int) 'B';
      intArray0[2] = (int) 'U';
      intArray0[3] = (int) 'H';
      intArray0[4] = (-1165);
      intArray0[5] = (int) 'B';
      intArray0[6] = (int) (short)97;
      intArray0[7] = (int) 'H';
      intArray0[8] = (int) 'B';
      Object object0 = new Object();
      assertNotNull(object0);
      
      org.evosuite.runtime.Random.setNextRandom((-1165));
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 'B';
      charArray0[2] = 'U';
      charArray0[3] = 'B';
      charArray0[5] = '/';
      charArray0[6] = 'p';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'T');
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'H', 'B', 'U', 'B', '\u0000', '/', 'p'}, charArray0);
      assertArrayEquals(new char[] {'H', 'B', 'U', 'B', '\u0000', '/', 'p'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom((-4230L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray1, (Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'H', 'B', 'U', 'B', '\u0000', '/', 'p'}, charArray0);
      assertArrayEquals(new char[] {'B', 'U', 'B', '\u0000', '/', 'p', 'H'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)45;
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z', (int) (byte)45);
      assertEquals(2, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)45;
      longArray0[2] = (long) 2;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {45L, 0L, 2L}, longArray0);
      assertArrayEquals(new long[] {45L, 0L, 2L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift(longArray1, 2);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {45L, 0L, 2L}, longArray0);
      assertArrayEquals(new long[] {0L, 2L, 45L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      String string0 = ArrayUtils.toString((Object) boolean1);
      assertEquals("true", string0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1235;
      floatArray0[1] = (float) 1235;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1235.0F, 1235.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {1235.0F, 1235.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) 1235, 2610);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 2610);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) (-5125);
      longArray0[2] = (long) 2610;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, (-5125L), 2610L}, longArray0);
      assertArrayEquals(new long[] {1L, (-5125L), 2610L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean1);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift(longArray1, 1578);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1L, (-5125L), 2610L}, longArray0);
      assertArrayEquals(new long[] {1L, (-5125L), 2610L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte)75;
      Byte byte2 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-14));
      assertEquals((byte) (-14), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-122));
      assertEquals((byte) (-122), (byte)byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte3;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)75;
      shortArray0[1] = (short) (byte) (-14);
      shortArray0[2] = (short) (byte) (-126);
      ArrayUtils.shift(shortArray0, (int) (byte) (-14));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-126), (short)75, (short) (-14)}, shortArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)6;
      longArray0[1] = (long) (short) (-1229);
      longArray0[2] = (long) (short)75;
      longArray0[3] = (long) (short)75;
      longArray0[4] = (long) (byte) (-122);
      longArray0[5] = (-3165L);
      longArray0[6] = (long) (short) (-126);
      longArray0[7] = (long) (short) (-126);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 2146132423, 75L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146132423, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'e'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      ArrayUtils.swap(booleanArray0, 43, 322, 322);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-556);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)14565;
      shortArray0[3] = (short)51;
      shortArray0[4] = (short)321;
      MockRandom mockRandom0 = new MockRandom((-2147483648L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)14565, (short)51, (short)321, (short) (-556)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 608;
      longArray0[3] = (long) 608;
      ArrayUtils.shift(longArray0, 608, 608, 1506);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 608L, 0L, 608L}, longArray0);
      
      Integer integer0 = new Integer(608);
      assertEquals(608, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 608);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {608, 608, 608}, intArray0);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-2212L), 1517);
      assertEquals((-1), int0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 608L, 0L, 608L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (-128));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -128, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      Class<Integer> class3 = Integer.TYPE;
      assertFalse(class3.isAnnotation());
      assertEquals("int", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.equals((Object)class2));
      assertFalse(class3.equals((Object)class0));
      assertFalse(class3.equals((Object)class1));
      assertNotNull(class3);
      assertNotSame(class3, class2);
      assertNotSame(class3, class0);
      assertNotSame(class3, class1);
      
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      assertNotNull(classArray1);
      
      AbstractMap.SimpleImmutableEntry<String, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeElement((AbstractMap.SimpleImmutableEntry<String, Integer>[]) null, (Object) class2);
      assertFalse(class2.equals((Object)class3));
      assertNull(abstractMap_SimpleImmutableEntryArray0);
      assertSame(class2, class1);
      assertSame(class2, class0);
      assertNotSame(class2, class3);
      
      ArrayUtils.reverse((double[]) null);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(10, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true, false, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-47);
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short)0;
      byte[] byteArray0 = new byte[5];
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z', (int) (byte)59);
      assertEquals(3, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 'Z'}, charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 'Z';
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 90L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 90L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift(longArray1, 3);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 90L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 90L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      String string0 = ArrayUtils.toString((Object) false);
      assertEquals("false", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3561);
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      String string0 = ArrayUtils.toString((Object) boolean0);
      assertEquals("false", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'Q';
      charArray0[2] = 'E';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z', (-2685));
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'Q', 'E'}, charArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 3007L;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) '\u0000';
      longArray0[3] = (long) 'Q';
      longArray0[4] = (long) '~';
      longArray0[5] = (long) (-2685);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {3007L, (-1L), 0L, 81L, 126L, (-2685L)}, longArray0);
      assertArrayEquals(new long[] {3007L, (-1L), 0L, 81L, 126L, (-2685L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'E';
      intArray0[1] = (int) 'Q';
      intArray0[2] = (int) 'Z';
      intArray0[3] = (-1);
      intArray0[4] = (int) 'Q';
      intArray0[5] = (int) 'E';
      intArray0[6] = (int) '\u0000';
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1);
      assertEquals(7, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {69, 81, 90, (-1), 81, 69, 0}, intArray0);
      
      ArrayUtils.shift(longArray0, 69);
      assertEquals(6, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {81L, 126L, (-2685L), 3007L, (-1L), 0L}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      String string0 = ArrayUtils.toString((Object) boolean2);
      assertEquals("true", string0);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      Short short0 = new Short((short) (-76));
      assertEquals((short) (-76), (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (-3409.164F), (-516));
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, 'x');
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      ArrayUtils.shift(intArray0, 37, (-516), (-540));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-516), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-516);
      objectArray0[1] = (Object) short0;
      objectArray0[2] = (Object) (-516);
      objectArray0[3] = (Object) (-516);
      objectArray0[4] = (Object) short0;
      objectArray0[5] = (Object) short0;
      objectArray0[6] = (Object) (-516);
      objectArray0[7] = (Object) (-516);
      objectArray0[8] = (Object) short0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertEquals((-1), int1);
      assertEquals(8, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {(-516), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      long[] longArray0 = ArrayUtils.insert(2719, (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-87);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) short0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((Number) short0);
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0, mutableInt1.intValue());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals("0", mutableInt1.toString());
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[21];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(21, floatArray0.length);
      assertEquals(21, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)4056);
      assertEquals((short)4056, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (byte)68);
      assertEquals(68.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(68, mutableInt0.intValue());
      assertEquals(68, (int)mutableInt0.getValue());
      assertEquals((byte)68, mutableInt0.byteValue());
      assertEquals(68.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(68, (int)mutableInt0.toInteger());
      assertEquals((short)68, mutableInt0.shortValue());
      assertEquals("68", mutableInt0.toString());
      assertEquals(68L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((Number) (byte)68);
      assertEquals(68L, mutableInt1.longValue());
      assertEquals(68.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(68, mutableInt1.intValue());
      assertEquals("68", mutableInt1.toString());
      assertEquals(68, (int)mutableInt1.getValue());
      assertEquals(68.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)68, mutableInt1.shortValue());
      assertEquals(68, (int)mutableInt1.toInteger());
      assertEquals((byte)68, mutableInt1.byteValue());
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (-1));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1216.5375419);
      doubleArray0[1] = (double) (byte)68;
      doubleArray0[2] = (double) (byte)68;
      doubleArray0[3] = (double) (byte)68;
      doubleArray0[4] = 10.0;
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray1);
      
      MutableInt[] mutableIntArray0 = new MutableInt[7];
      MutableInt mutableInt0 = new MutableInt(68.0);
      assertEquals(68.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(68, mutableInt0.intValue());
      assertEquals("68", mutableInt0.toString());
      assertEquals(68L, mutableInt0.longValue());
      assertEquals(68, (int)mutableInt0.getValue());
      assertEquals(68, (int)mutableInt0.toInteger());
      assertEquals((byte)68, mutableInt0.byteValue());
      assertEquals(68.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)68, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(68.0);
      assertEquals((short)68, mutableInt1.shortValue());
      assertEquals("68", mutableInt1.toString());
      assertEquals(68.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(68L, mutableInt1.longValue());
      assertEquals(68.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(68, mutableInt1.intValue());
      assertEquals(68, (int)mutableInt1.getValue());
      assertEquals((byte)68, mutableInt1.byteValue());
      assertEquals(68, (int)mutableInt1.toInteger());
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(mutableInt1);
      assertEquals((short)68, mutableInt2.shortValue());
      assertEquals(68, (int)mutableInt2.getValue());
      assertEquals("68", mutableInt2.toString());
      assertEquals(68L, mutableInt2.longValue());
      assertEquals(68, mutableInt2.intValue());
      assertEquals(68, (int)mutableInt2.toInteger());
      assertEquals(68.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((byte)68, mutableInt2.byteValue());
      assertEquals(68.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)68, mutableInt1.shortValue());
      assertEquals("68", mutableInt1.toString());
      assertEquals(68.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(68L, mutableInt1.longValue());
      assertEquals(68.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(68, mutableInt1.intValue());
      assertEquals(68, (int)mutableInt1.getValue());
      assertEquals((byte)68, mutableInt1.byteValue());
      assertEquals(68, (int)mutableInt1.toInteger());
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt2);
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(Integer.MAX_VALUE);
      assertEquals(2147483647L, mutableInt3.longValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt3.toInteger());
      assertEquals((byte) (-1), mutableInt3.byteValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt3.getValue());
      assertEquals("2147483647", mutableInt3.toString());
      assertEquals((short) (-1), mutableInt3.shortValue());
      assertEquals(2.14748365E9F, mutableInt3.floatValue(), 0.01F);
      assertEquals(2.147483647E9, mutableInt3.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, mutableInt3.intValue());
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertNotNull(mutableInt3);
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt((-1));
      assertEquals((-1.0), mutableInt4.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt4.floatValue(), 0.01F);
      assertEquals((-1), mutableInt4.intValue());
      assertEquals((short) (-1), mutableInt4.shortValue());
      assertEquals((-1), (int)mutableInt4.toInteger());
      assertEquals((byte) (-1), mutableInt4.byteValue());
      assertEquals("-1", mutableInt4.toString());
      assertEquals((-1L), mutableInt4.longValue());
      assertEquals((-1), (int)mutableInt4.getValue());
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertNotNull(mutableInt4);
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt((-424));
      assertEquals((short) (-424), mutableInt5.shortValue());
      assertEquals("-424", mutableInt5.toString());
      assertEquals((-424L), mutableInt5.longValue());
      assertEquals((-424.0F), mutableInt5.floatValue(), 0.01F);
      assertEquals((-424.0), mutableInt5.doubleValue(), 0.01);
      assertEquals((-424), (int)mutableInt5.toInteger());
      assertEquals((-424), (int)mutableInt5.getValue());
      assertEquals((-424), mutableInt5.intValue());
      assertEquals((byte)88, mutableInt5.byteValue());
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertNotNull(mutableInt5);
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt mutableInt6 = new MutableInt(mutableInt5);
      assertEquals((short) (-424), mutableInt5.shortValue());
      assertEquals("-424", mutableInt5.toString());
      assertEquals((-424L), mutableInt5.longValue());
      assertEquals((-424.0F), mutableInt5.floatValue(), 0.01F);
      assertEquals((-424.0), mutableInt5.doubleValue(), 0.01);
      assertEquals((-424), (int)mutableInt5.toInteger());
      assertEquals((-424), (int)mutableInt5.getValue());
      assertEquals((-424), mutableInt5.intValue());
      assertEquals((byte)88, mutableInt5.byteValue());
      assertEquals((-424), (int)mutableInt6.getValue());
      assertEquals((byte)88, mutableInt6.byteValue());
      assertEquals((-424), (int)mutableInt6.toInteger());
      assertEquals((-424L), mutableInt6.longValue());
      assertEquals("-424", mutableInt6.toString());
      assertEquals((-424.0F), mutableInt6.floatValue(), 0.01F);
      assertEquals((-424.0), mutableInt6.doubleValue(), 0.01);
      assertEquals((short) (-424), mutableInt6.shortValue());
      assertEquals((-424), mutableInt6.intValue());
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      assertTrue(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertNotNull(mutableInt6);
      
      mutableIntArray0[6] = mutableInt6;
      MutableInt mutableInt7 = ArrayUtils.get(mutableIntArray0, 1);
      assertEquals(68L, mutableInt7.longValue());
      assertEquals(68.0F, mutableInt7.floatValue(), 0.01F);
      assertEquals(68, mutableInt7.intValue());
      assertEquals("68", mutableInt7.toString());
      assertEquals(68, (int)mutableInt7.getValue());
      assertEquals((byte)68, mutableInt7.byteValue());
      assertEquals(68.0, mutableInt7.doubleValue(), 0.01);
      assertEquals(68, (int)mutableInt7.toInteger());
      assertEquals((short)68, mutableInt7.shortValue());
      assertEquals(7, mutableIntArray0.length);
      assertFalse(mutableInt7.equals((Object)mutableInt6));
      assertFalse(mutableInt7.equals((Object)mutableInt5));
      assertFalse(mutableInt7.equals((Object)mutableInt3));
      assertTrue(mutableInt7.equals((Object)mutableInt0));
      assertTrue(mutableInt7.equals((Object)mutableInt2));
      assertFalse(mutableInt7.equals((Object)mutableInt4));
      assertNotNull(mutableInt7);
      assertNotSame(mutableInt7, mutableInt6);
      assertSame(mutableInt7, mutableInt1);
      assertNotSame(mutableInt7, mutableInt2);
      assertNotSame(mutableInt7, mutableInt5);
      assertNotSame(mutableInt7, mutableInt3);
      assertNotSame(mutableInt7, mutableInt0);
      assertNotSame(mutableInt7, mutableInt4);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(mutableInt7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 90.0;
      doubleArray0[1] = 1.5;
      ArrayUtils.shift(doubleArray0, 127, 203, 4496);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {90.0, 1.5}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 203;
      intArray0[1] = 203;
      int int0 = ArrayUtils.indexOf(intArray0, 4496, (-266));
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {203, 203}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-128));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      org.evosuite.runtime.Random.setNextRandom(203);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((-251.82489F));
      assertEquals((-251.82489F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-3299.6755F));
      assertEquals((-3299.6755F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(2263.3);
      assertEquals(2263.3F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-431.7459F));
      assertEquals((-431.7459F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-990.4698F));
      assertEquals((-990.4698F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(0.0F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = new Float((double) (-990.4698F));
      assertEquals((-990.4698F), (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      Float float7 = new Float(961.3F);
      assertEquals(961.3F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotNull(float7);
      
      floatArray0[7] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 905.82F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-251.82489F), (-3299.6755F), 2263.3F, (-431.7459F), (-990.4698F), 0.0F, (-990.4698F), 961.3F}, floatArray1, 0.01F);
      
      Short[] shortArray0 = new Short[1];
      short short0 = (short) (-126);
      Short short1 = new Short((short) (-126));
      assertEquals((short) (-126), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Class<Short[]> class0 = Short[].class;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0, class0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-126);
      intArray0[1] = (int) short0;
      intArray0[2] = (-2144382977);
      intArray0[3] = (int) (short) (-126);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short) (-126), (-126));
      assertEquals("{0, 1, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertEquals(4, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-126), (-126), (-2144382977), (-126)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      shortArray0[2] = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray1 = new Short[5];
      shortArray1[0] = short1;
      shortArray1[3] = (Short) (short)0;
      shortArray1[4] = short1;
      ArrayUtils.shift((Object[]) shortArray1, (int) (short)0);
      assertEquals(5, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, short0);
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, true}, booleanArray0));
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3534);
      shortArray0[2] = (short)0;
      Short short0 = new Short((short)91);
      assertEquals((short)91, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray1 = new Short[5];
      shortArray1[0] = short0;
      shortArray1[1] = (Short) (short)0;
      shortArray1[2] = short0;
      shortArray1[3] = (Short) (short)0;
      shortArray1[4] = short0;
      Class<Short[]> class0 = Short[].class;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1, class0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertNotNull(shortArray2);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      
      ArrayUtils.shift((Object[]) shortArray1, (int) (short)0);
      assertEquals(5, shortArray1.length);
      assertSame(shortArray1, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.swap(booleanArray0, (int) (byte) (-126), (-2146563517));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift(objectArray0, (int) (byte) (-126), (-2146563517), (int) (byte) (-126));
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)1779;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)1779}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)1779;
      doubleArray0[1] = (double) (short)1779;
      doubleArray0[2] = (double) (short)1779;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (short)1779;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 938.1, (double) (short)1779);
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(7, bitSet1.length());
      assertEquals(7, bitSet1.cardinality());
      assertEquals(7, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {1779.0, 1779.0, 1779.0, 0.0, 0.0, 0.0, 1779.0}, doubleArray0, 0.01);
      assertNotSame(bitSet1, bitSet0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '/';
      charArray0[2] = '&';
      charArray0[3] = 'n';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '/', '&', 'n'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-24);
      ArrayUtils.swap(byteArray0, (-1494), (-160), 435);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)95, (byte) (-44), (byte) (-89), (byte) (-116), (byte)67, (byte) (-24)}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'R');
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'9'}, charArray0);
      assertArrayEquals(new char[] {'9'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Float float0 = new Float((double) 435);
      assertEquals(435.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals((byte) (-77), mutableInt0.byteValue());
      assertEquals("435", mutableInt0.toString());
      assertEquals(435, (int)mutableInt0.toInteger());
      assertEquals(435, (int)mutableInt0.getValue());
      assertEquals(435L, mutableInt0.longValue());
      assertEquals(435.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)435, mutableInt0.shortValue());
      assertEquals(435.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(435, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-24));
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)95, (byte) (-44), (byte) (-89), (byte) (-116), (byte)67, (byte) (-24)}, byteArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-60));
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(8, byteArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)95, (byte) (-44), (byte) (-89), (byte) (-116), (byte)67, (byte) (-24)}, byteArray0);
      assertNotSame(bitSet1, bitSet0);
      
      bitSet0.andNot(bitSet1);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(8, byteArray0.length);
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)95, (byte) (-44), (byte) (-89), (byte) (-116), (byte)67, (byte) (-24)}, byteArray0);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(21, byteArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-87);
      intArray0[1] = (int) (byte) (-87);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      boolean boolean1 = ArrayUtils.contains(intArray0, (-87));
      assertTrue(boolean1);
      assertEquals(9, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-87), (-87), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean2);
      assertEquals(9, intArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new int[] {(-87), (-87), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character character0 = new Character('r');
      assertEquals('r', (char)character0);
      assertNotNull(character0);
      
      boolean boolean3 = ArrayUtils.isEquals(character0, character0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (Object) floatArray0[0]);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '`');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray2 = new float[9];
      floatArray2[0] = (float) (-87);
      floatArray2[1] = (float) 0;
      floatArray2[2] = 554.9F;
      floatArray2[3] = (float) (byte) (-87);
      floatArray2[4] = (float) (byte)122;
      floatArray2[5] = 1.0F;
      floatArray2[6] = (float) 0;
      floatArray2[7] = (float) 'r';
      floatArray2[8] = (float) 0;
      float[] floatArray3 = ArrayUtils.removeAllOccurences(floatArray2, (-690.587F));
      assertEquals(9, floatArray3.length);
      assertEquals(9, floatArray2.length);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {(-87.0F), 0.0F, 554.9F, (-87.0F), 122.0F, 1.0F, 0.0F, 114.0F, 0.0F}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {(-87.0F), 0.0F, 554.9F, (-87.0F), 122.0F, 1.0F, 0.0F, 114.0F, 0.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray2, floatArray3);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1353);
      intArray0[1] = 91;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1353);
      longArray0[1] = (long) (-1353);
      longArray0[2] = (-1L);
      longArray0[3] = (long) (-1353);
      ArrayUtils.swap(longArray0, 91, 91, (-1353));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1353L), (-1353L), (-1L), (-1353L), 0L}, longArray0);
      
      ArrayUtils.swap(intArray0, 91, (-2), (-927));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1353), 91, 0, 0, 0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-100);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)39, (int) (byte)1);
      assertEquals((-1), int0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-100), (byte) (-59), (byte) (-102), (byte)57, (byte)1, (byte) (-18), (byte)1, (byte) (-100)}, byteArray0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 91;
      integerArray0[1] = (Integer) (-1353);
      integerArray0[2] = (Integer) 91;
      integerArray0[3] = (Integer) (-1353);
      integerArray0[4] = (Integer) 91;
      integerArray0[5] = (Integer) (-1353);
      integerArray0[6] = (Integer) (-1353);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(91).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 5L;
      longArray0[1] = 5L;
      longArray0[3] = 555L;
      longArray0[4] = 0L;
      longArray0[5] = 555L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 555L);
      assertEquals(8, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {5L, 5L, 0L, 555L, 0L, 555L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {5L, 5L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'E');
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 5L;
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 'x';
      floatArray0[4] = (float) ',';
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 'x';
      ArrayUtils.swap(floatArray0, 1, (int) 'E', 1703);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {5.0F, 1.0F, 120.0F, 0.0F, 44.0F, 0.0F, 120.0F}, floatArray0, 0.01F);
      
      MutableInt mutableInt0 = new MutableInt((-869));
      assertEquals((-869), mutableInt0.intValue());
      assertEquals((-869.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-869.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-869), (int)mutableInt0.toInteger());
      assertEquals((byte) (-101), mutableInt0.byteValue());
      assertEquals((-869), (int)mutableInt0.getValue());
      assertEquals((-869L), mutableInt0.longValue());
      assertEquals((short) (-869), mutableInt0.shortValue());
      assertEquals("-869", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      mutableInt0.increment();
      assertEquals((-868), (int)mutableInt0.toInteger());
      assertEquals((-868), (int)mutableInt0.getValue());
      assertEquals((byte) (-100), mutableInt0.byteValue());
      assertEquals((-868L), mutableInt0.longValue());
      assertEquals((-868.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-868.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-868", mutableInt0.toString());
      assertEquals((short) (-868), mutableInt0.shortValue());
      assertEquals((-868), mutableInt0.intValue());
      
      String string0 = ArrayUtils.toString((Object) mutableInt0);
      assertEquals("-868", string0);
      assertEquals((-868), (int)mutableInt0.toInteger());
      assertEquals((-868), (int)mutableInt0.getValue());
      assertEquals((byte) (-100), mutableInt0.byteValue());
      assertEquals((-868L), mutableInt0.longValue());
      assertEquals((-868.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-868.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-868", mutableInt0.toString());
      assertEquals((short) (-868), mutableInt0.shortValue());
      assertEquals((-868), mutableInt0.intValue());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1048.4F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-2154.0F);
      floatArray0[3] = (-714.3814F);
      floatArray0[4] = 0.0F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1048.4F, 1.0F, (-2154.0F), (-714.3814F), 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)19);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)19}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)19;
      intArray0[1] = (int) (short)19;
      intArray0[2] = 16;
      intArray0[3] = (int) (short)19;
      intArray0[4] = (int) (short)19;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {19, 19, 16, 19, 19}, intArray0);
      assertArrayEquals(new int[] {19, 19, 16, 19, 19, 19, 19, 16, 19, 19}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1048.4F;
      floatArray0[4] = 1.0F;
      floatArray0[2] = (-2154.0F);
      floatArray0[3] = (-714.17523F);
      floatArray0[4] = 0.0F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1048.4F, 0.0F, (-2154.0F), (-714.17523F), 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)46);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)46}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[5];
      ArrayUtils.shuffle(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1989;
      shortArray0[1] = (short)3085;
      shortArray0[3] = (short)3085;
      shortArray0[4] = (short)0;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      BitSet bitSet0 = new BitSet();
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-87);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-87);
      shortArray0[1] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, 102);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-87), (short)0}, shortArray0);
      
      ArrayUtils.swap(booleanArray0, (-2145718405), (int) (short) (-87), (-1));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 99);
      assertEquals(1, int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-87), (short)0}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean1);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-87), (short)0}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-84), (double) 1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-87), (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-87), (short)0}, shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 128;
      intArray0[2] = 128;
      intArray0[2] = 128;
      intArray0[3] = 0;
      ArrayUtils.reverse((float[]) null, 0, (-4065));
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte)11;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-83), (byte) (-69), (byte)6, (byte)76, (byte) (-19), (byte) (-1), (byte) (-84), (byte)11}, byteArray0);
      
      ArrayUtils.shuffle(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      intArray0[2] = 9;
      intArray0[3] = 6;
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(9);
      assertEquals(9L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {9L}, longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (-516), (-516));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 88L;
      longArray0[1] = 1L;
      longArray0[2] = (-1476L);
      longArray0[3] = (-123L);
      longArray0[4] = (-2146563560L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1476L), (-1));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(5, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {88L, 1L, (-1476L), (-123L), (-2146563560L)}, longArray0);
      
      ArrayUtils.swap((int[]) null, (-1), 2396, 2396);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 1412L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 1412L}, longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1989;
      shortArray0[1] = (short)4187;
      shortArray0[2] = (short)4187;
      shortArray0[3] = (short) (byte) (-126);
      shortArray0[4] = (short) (byte) (-126);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)98);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1989, (short)4187, (short)4187, (short) (-126), (short) (-126)}, shortArray0);
      assertArrayEquals(new short[] {(short)1989, (short)4187, (short)4187, (short) (-126), (short) (-126)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 1412L}, longArray0);
      assertArrayEquals(new long[] {0L, 1412L, 0L, 1412L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = Integer.valueOf((int) (byte) (-126));
      assertEquals((-126), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(510);
      assertEquals(510, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((short)4187);
      assertEquals(4187, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("[");
      assertNull(integer3);
      
      integerArray0[3] = null;
      MutableInt mutableInt0 = new MutableInt(1412L);
      assertEquals(1412L, mutableInt0.longValue());
      assertEquals(1412.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("1412", mutableInt0.toString());
      assertEquals(1412, (int)mutableInt0.getValue());
      assertEquals(1412, (int)mutableInt0.toInteger());
      assertEquals((byte) (-124), mutableInt0.byteValue());
      assertEquals(1412.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1412, mutableInt0.intValue());
      assertEquals((short)1412, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer4 = mutableInt0.getValue();
      assertEquals(1412, (int)integer4);
      assertEquals(1412L, mutableInt0.longValue());
      assertEquals(1412.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("1412", mutableInt0.toString());
      assertEquals(1412, (int)mutableInt0.getValue());
      assertEquals(1412, (int)mutableInt0.toInteger());
      assertEquals((byte) (-124), mutableInt0.byteValue());
      assertEquals(1412.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1412, mutableInt0.intValue());
      assertEquals((short)1412, mutableInt0.shortValue());
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((short)1989);
      assertEquals(1989, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-42));
      assertEquals((-42), (int)integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short)4187);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-126), 510, 4187, 4187, 1412, 1989, (-42)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(12, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'l'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-119);
      MutableInt mutableInt0 = new MutableInt(551);
      assertEquals(551, (int)mutableInt0.toInteger());
      assertEquals(551, (int)mutableInt0.getValue());
      assertEquals(551, mutableInt0.intValue());
      assertEquals(551.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(551.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(551L, mutableInt0.longValue());
      assertEquals((short)551, mutableInt0.shortValue());
      assertEquals("551", mutableInt0.toString());
      assertEquals((byte)39, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[8];
      mutableIntArray0[0] = mutableInt0;
      mutableIntArray0[1] = mutableInt0;
      mutableInt0.setValue((-53));
      assertEquals((-53), mutableInt0.intValue());
      assertEquals("-53", mutableInt0.toString());
      assertEquals((-53.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-53), mutableInt0.shortValue());
      assertEquals((-53L), mutableInt0.longValue());
      assertEquals((-53.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-53), mutableInt0.byteValue());
      assertEquals((-53), (int)mutableInt0.toInteger());
      assertEquals((-53), (int)mutableInt0.getValue());
      
      mutableIntArray0[2] = mutableInt0;
      mutableIntArray0[3] = mutableInt0;
      mutableIntArray0[3] = mutableInt0;
      mutableIntArray0[5] = mutableInt0;
      mutableIntArray0[6] = mutableInt0;
      mutableIntArray0[7] = mutableInt0;
      MutableInt mutableInt1 = ArrayUtils.get(mutableIntArray0, 646);
      assertEquals(8, mutableIntArray0.length);
      assertNull(mutableInt1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte) (-119);
      Object object0 = new Object();
      assertNotNull(object0);
      
      mutableInt0.subtract(551);
      assertEquals((-604), (int)mutableInt0.getValue());
      assertEquals((-604), (int)mutableInt0.toInteger());
      assertEquals((byte) (-92), mutableInt0.byteValue());
      assertEquals((-604L), mutableInt0.longValue());
      assertEquals((-604.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-604), mutableInt0.intValue());
      assertEquals((-604.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-604", mutableInt0.toString());
      assertEquals((short) (-604), mutableInt0.shortValue());
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mutableInt0;
      objectArray0[4] = (Object) (byte) (-119);
      MutableInt mutableInt2 = new MutableInt((-3415));
      assertEquals((-3415.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-3415), (int)mutableInt2.getValue());
      assertEquals((byte) (-87), mutableInt2.byteValue());
      assertEquals((-3415), (int)mutableInt2.toInteger());
      assertEquals((-3415L), mutableInt2.longValue());
      assertEquals((-3415.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-3415), mutableInt2.intValue());
      assertEquals((short) (-3415), mutableInt2.shortValue());
      assertEquals("-3415", mutableInt2.toString());
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertNotNull(mutableInt2);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-119), 1);
      assertEquals(2, int0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-42), (byte) (-119)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      ArrayUtils.shift((long[]) null, (-1434));
      Long long0 = new Long((byte)6);
      assertEquals(6L, (long)long0);
      assertNotNull(long0);
      
      Short short0 = new Short((byte)6);
      assertEquals((short)6, (short)short0);
      assertNotNull(short0);
      
      String string0 = ArrayUtils.toString((Object) short0);
      assertEquals("6", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(booleanArray0, 59);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 59;
      intArray0[1] = (int) (byte)6;
      intArray0[2] = 59;
      intArray0[3] = 4422;
      intArray0[4] = (int) (byte)6;
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)28);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)28}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)15;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-332), (int) (byte) (-53));
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-78), (byte) (-53), (byte) (-1), (byte) (-60), (byte) (-62), (byte)15}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-78);
      ArrayUtils.shift(intArray0, (int) (byte) (-78));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-78)}, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte)15;
      floatArray0[2] = 1392.0F;
      floatArray0[3] = (-511.9F);
      floatArray0[4] = (float) (byte)15;
      floatArray0[5] = (float) (byte) (-62);
      floatArray0[6] = (-1587.4427F);
      floatArray0[7] = (float) (byte) (-1);
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {15.0F, 1392.0F, (-511.9F), 15.0F, (-62.0F), (-1587.4427F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-78);
      byteArray2[1] = (byte) (-62);
      byteArray2[2] = (byte) (-53);
      byteArray2[3] = (byte) (-53);
      byteArray2[4] = (byte) (-53);
      byteArray2[5] = (byte) (-60);
      byteArray2[6] = (byte) (-53);
      byteArray2[7] = (byte)1;
      byteArray2[8] = (byte) (-1);
      byte[] byteArray3 = ArrayUtils.addFirst(byteArray2, (byte) (-102));
      assertEquals(10, byteArray3.length);
      assertEquals(9, byteArray2.length);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-78), (byte) (-62), (byte) (-53), (byte) (-53), (byte) (-53), (byte) (-60), (byte) (-53), (byte)1, (byte) (-1)}, byteArray3);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-62), (byte) (-53), (byte) (-53), (byte) (-53), (byte) (-60), (byte) (-53), (byte)1, (byte) (-1)}, byteArray2);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-501L));
      assertEquals((-501L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)55;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-27), (byte)0, (byte)55}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte) (-27);
      doubleArray0[2] = 70.0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)55;
      doubleArray0[6] = (double) (byte) (-27);
      ArrayUtils.shift(doubleArray0, 101);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 55.0, (-27.0), 0.0, (-27.0), 70.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = 'k';
      charArray0[1] = '';
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)0);
      assertEquals(4, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-27), (byte)0, (byte)55}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)55}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-27.0), 0.0);
      assertEquals(2, int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 55.0, (-27.0), 0.0, (-27.0), 70.0, 0.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = ArrayUtils.get(stringArray0, (int) 0, "");
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = (-1214.5574F);
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1214.5574F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1214.5574F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Float float0 = new Float(3.40657890391901);
      assertEquals(3.406579F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)6;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)75;
      Byte byte3 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      byteArray0[2] = (Byte) byte2;
      byte byte4 = (byte) (-126);
      Byte byte5 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte2));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte7);
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte6));
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte)75, (byte)75, (byte) (-126), (byte)75, (byte)75}, byteArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)75;
      intArray0[1] = (int) byte2;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (int) byte0;
      intArray0[4] = (int) byte4;
      intArray0[5] = (int) (byte) (-126);
      intArray0[6] = (int) (byte) (-126);
      intArray0[7] = (int) byte2;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)75);
      assertEquals("{0, 1, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {75, 75, Integer.MAX_VALUE, 6, (-126), (-126), (-126), 75}, intArray0);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(70.0);
      assertEquals(70.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(70.0);
      assertEquals(70.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(0.0);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1746.3340736435418);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 59, 3822);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3974);
      shortArray0[1] = (short) (-1224);
      shortArray0[2] = (short) (-3343);
      ArrayUtils.reverse(shortArray0, (int) (short) (-1224), 3822);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-3343), (short) (-1224), (short) (-3974)}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'O');
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)713);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3043);
      intArray0[1] = (int) (short)713;
      intArray0[2] = (-3043);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'e'}, charArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2750);
      shortArray0[1] = (short)397;
      shortArray0[2] = (short)266;
      shortArray0[3] = (short)2199;
      shortArray0[4] = (short) (-95);
      shortArray0[5] = (short)55;
      shortArray0[6] = (short)2;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-864));
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2750), (short)397, (short)266, (short)2199, (short) (-95), (short)55, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2750), (short)397, (short)266, (short)2199, (short) (-95), (short)55, (short)2}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (short)397;
      intArray0[2] = (int) (short) (-2750);
      intArray0[3] = (int) (short)2;
      intArray0[4] = (int) 'e';
      intArray0[5] = (int) (short) (-2750);
      intArray0[6] = (int) (short)397;
      int[] intArray1 = ArrayUtils.add(intArray0, 1947);
      assertEquals(8, intArray1.length);
      assertEquals(7, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2, 397, (-2750), 2, 101, (-2750), 397, 1947}, intArray1);
      assertArrayEquals(new int[] {2, 397, (-2750), 2, 101, (-2750), 397}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "H";
      stringArray0[2] = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      stringArray0[3] = "";
      stringArray0[1] = "Index: ";
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = '>';
      charArray0[2] = '$';
      charArray0[3] = '5';
      charArray0[4] = '8';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'1', '>', '$', '5', '8'}, charArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-3015L);
      longArray1[1] = (long) '1';
      longArray1[2] = (long) '$';
      longArray1[3] = (long) '8';
      longArray1[4] = (long) '5';
      longArray1[5] = (long) '5';
      longArray1[6] = (long) '1';
      longArray1[7] = (long) '8';
      longArray1[8] = (long) '>';
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean1);
      assertEquals(0, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-3015L), 49L, 36L, 56L, 53L, 53L, 49L, 56L, 62L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1160.3566F;
      floatArray0[1] = Float.NaN;
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = 7;
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = (double) Float.NaN;
      floatArray0[1] = 1160.3566F;
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (double) 7;
      doubleArray0[4] = (double) 1160.3566F;
      doubleArray0[5] = (-1029.1);
      doubleArray0[6] = (double) 7;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-1.0));
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 7.0, 1160.3565673828125, (-1029.1), 7.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 7.0, 1160.3565673828125, (-1029.1), 7.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      ArrayUtils.shuffle(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {7, 7, 7, 7, 0, 0, 7}, intArray0);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 145, (long) 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 145, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1353);
      intArray0[1] = 91;
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'G');
      assertNull(charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertEquals((byte) (-14), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-122));
      assertEquals((byte) (-122), (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-14)}, byteArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (-3861.179746));
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-3861.179746)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3561);
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) byteArray1, 1047, (int)  (-3561));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(byteArray1, objectArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-3561);
      longArray0[1] = (long) (short) (-3561);
      longArray0[2] = (long) 1047;
      longArray0[3] = (long) 1047;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-3561L));
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-3561L), (-3561L), 1047L, 1047L}, longArray0);
      assertArrayEquals(new long[] {(-3561L), 1047L, 1047L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-106);
      byteArray0[3] = (byte)64;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-106);
      floatArray0[1] = (float) 1488;
      floatArray0[2] = (float) (byte)64;
      floatArray0[3] = (float) (byte) (-74);
      floatArray0[4] = (float) (byte)64;
      floatArray0[5] = (float) (byte) (-74);
      int int0 = ArrayUtils.indexOf(floatArray0, 1652.2872F, (int) (byte) (-106));
      assertEquals((-1), int0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-106.0F), 1488.0F, 64.0F, (-74.0F), 64.0F, (-74.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1488;
      intArray0[1] = (int) (byte)64;
      intArray0[2] = (int) (byte) (-106);
      intArray0[3] = 1488;
      intArray0[4] = (int) (byte)64;
      intArray0[5] = (int) (byte)64;
      boolean boolean0 = ArrayUtils.contains(intArray0, 1488);
      assertTrue(boolean0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1488, 64, (-106), 1488, 64, 64}, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean1);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1160.3566F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (-2753.7754F);
      int int0 = 43;
      ArrayUtils.swap(floatArray0, 43, 43);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1160.3566F, Float.NaN, (-2753.7754F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 43);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-22);
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, 43, 'L');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      long[] longArray0 = new long[6];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shift(longArray0, (-1065), 0, 6);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-119);
      ArrayUtils.reverse(byteArray0, 1517, 55);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-42), (byte) (-119)}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-119);
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-119.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'T';
      charArray0[1] = 'T';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', 'T'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-119.0F)}, floatArray0, 0.01F);
      
      Float float0 = new Float((double) (byte)3);
      assertEquals(3.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) float0, (-1932735283));
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'T'}, charArray0);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 55);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-119.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-119.0F), 55.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int[] intArray0 = new int[0];
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-119);
      doubleArray0[1] = (double) (byte)3;
      doubleArray0[2] = (double) (-1932735283);
      doubleArray0[3] = (double) (byte)3;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 55;
      doubleArray0[6] = (double) (byte) (-42);
      doubleArray0[7] = 219.7749489087136;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte)3);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-119.0), 3.0, (-1.932735283E9), 3.0, (-1.0), 55.0, (-42.0), 219.7749489087136}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0, (-119.0), 3.0, (-1.932735283E9), 3.0, (-1.0), 55.0, (-42.0), 219.7749489087136}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      longArray0[4] = 1L;
      longArray0[5] = 0L;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)1214);
      assertEquals((-1), int0);
      
      Float[] floatArray2 = new Float[1];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray2[0] = float0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(floatArray2, 0);
      assertTrue(boolean0);
      assertEquals(1, floatArray2.length);
      
      float[] floatArray3 = ArrayUtils.insert((-1621), floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray3.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) floatArray2, (Object) float0, (int) (short)1214);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(1, floatArray2.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true, 0);
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertEquals(1, booleanArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1107L);
      longArray0[1] = 4L;
      longArray0[2] = 2147483647L;
      longArray0[3] = (-3620L);
      longArray0[4] = 8L;
      longArray0[5] = 2997L;
      longArray0[6] = 1L;
      long long0 = 3588L;
      longArray0[7] = 3588L;
      longArray0[8] = (-198L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 2147483647L);
      assertEquals(9, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1107L), 4L, 2147483647L, (-3620L), 8L, 2997L, 1L, 3588L, (-198L)}, longArray0);
      assertArrayEquals(new long[] {(-1107L), 4L, (-3620L), 8L, 2997L, 1L, 3588L, (-198L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2466;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-2127961069), 2466);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2127961069, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = true;
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      int[] intArray0 = new int[0];
      int int0 = 1072;
      int int1 = 2276;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 1072, 2276);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1072, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = 90.0;
      doubleArray0[1] = 1.5;
      ArrayUtils.shift(doubleArray0, 127, 203, 4496);
      assertEquals(11, doubleArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)56;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)50;
      shortArray0[4] = (short)50;
      shortArray0[5] = (short)2;
      short[] shortArray1 = ArrayUtils.insert(203, (short[]) null, shortArray0);
      assertEquals(6, shortArray0.length);
      assertNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)56, (short)2, (short)50, (short)50, (short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'N';
      charArray0[2] = 'd';
      charArray0[3] = '$';
      charArray0[4] = 'a';
      ArrayUtils.reverse(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'a', '$', 'd', 'N', '\u0000'}, charArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)990;
      shortArray0[1] = (short)807;
      shortArray0[2] = (short)37;
      shortArray0[3] = (short)120;
      shortArray0[4] = (short)937;
      shortArray0[5] = (short)97;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)990);
      assertEquals(0, int0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)990, (short)807, (short)37, (short)120, (short)937, (short)97}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-84);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-87);
      shortArray0[1] = (short) (byte)122;
      ArrayUtils.shift(shortArray0, 102);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-87), (short)122}, shortArray0);
      
      ArrayUtils.swap(booleanArray0, (-2145718405), (int) (short) (-87), (-1));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)122, 99);
      assertEquals(1, int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-87), (short)122}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1517.478197799237);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-927));
      assertEquals((-927), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int1 = 32;
      Integer integer2 = new Integer(32);
      assertEquals(32, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(32);
      assertEquals(32, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer4 = new Integer(32);
      assertEquals(32, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      integerArray0[0] = integer4;
      integerArray0[1] = integer1;
      integerArray0[2] = integer2;
      integerArray0[3] = integer2;
      integerArray0[4] = integer2;
      integerArray0[5] = integer0;
      integerArray0[6] = integer1;
      integerArray0[7] = integer0;
      integerArray0[8] = integer3;
      Integer integer5 = new Integer(int1);
      assertEquals(32, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)int1));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(int1 == int0);
      assertNotNull(integer5);
      
      Integer integer6 = ArrayUtils.get(integerArray0, 1103, integer5);
      assertEquals(32, (int)integer6);
      assertEquals(9, integerArray0.length);
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)int1));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)int1));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(int1 == int0);
      assertNotNull(integer6);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) integerArray0, (Object) int1);
      assertEquals(8, objectArray0.length);
      assertEquals(9, integerArray0.length);
      assertFalse(int1 == int0);
      assertNotNull(objectArray0);
      assertNotSame(integerArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)122, (byte) (-87), (byte) (-84), (byte)0, (byte) (-80), (byte)0}, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-87);
      intArray0[1] = (int) (byte) (-87);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      boolean boolean1 = ArrayUtils.contains(intArray0, (-87));
      assertTrue(boolean1);
      assertEquals(9, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-87), (-87), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean2);
      assertEquals(9, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {(-87), (-87), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character character0 = new Character('r');
      assertEquals('r', (char)character0);
      assertNotNull(character0);
      
      boolean boolean3 = ArrayUtils.isEquals(character0, character0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (Object) floatArray0[0]);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '`');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-681));
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1644L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-681);
      longArray0[3] = (long) 0;
      longArray0[6] = (long) (-681);
      int int1 = 0;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2140730554, 1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      ArrayUtils.swap(doubleArray0, 0, (-681));
      assertEquals(20, doubleArray0.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(20, doubleArray0.length);
      
      char char0 = 'l';
      Character character0 = Character.valueOf('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = (Character) char0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      ArrayUtils.reverse((Object[]) characterArray1, 0, 0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      ArrayUtils.swap((Object[]) characterArray1, 0, 0, 2140730554);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-544));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -544, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-101);
      ArrayUtils.reverse(byteArray0, 1517, 55);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-42), (byte) (-101)}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-101);
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-101.0F)}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte) (-101), (int) (byte) (-42));
      assertEquals(0, int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-101.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-5125));
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Long long0 = new Long(1517);
      assertEquals(1517L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2147483648L));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1517L}, longArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-101);
      shortArray0[1] = (short) (byte) (-101);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)19);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-101), (short) (-101)}, shortArray0);
      
      Float[] floatArray1 = new Float[3];
      floatArray1[0] = (Float) (-101.0F);
      floatArray1[1] = (Float) (-101.0F);
      floatArray1[2] = (Float) (-101.0F);
      Float[] floatArray2 = ArrayUtils.removeElement(floatArray1, (Object) bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertEquals(2, shortArray0.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new short[] {(short) (-101), (short) (-101)}, shortArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(12, booleanArray0.length);
      
      long[] longArray0 = new long[10];
      longArray0[1] = (long) 1;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int1 = 90;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(90, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Length: 12
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1306.0795F);
      floatArray0[1] = (-1397.339F);
      floatArray0[2] = (-1.0F);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1306.0795F), (-1397.339F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 2147483647L;
      longArray0[2] = 157L;
      longArray0[3] = (-641L);
      longArray0[4] = 0L;
      longArray0[5] = 1L;
      ArrayUtils.shift(longArray0, 1447, Integer.MAX_VALUE, 70);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 2147483647L, 157L, (-641L), 0L, 1L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2753, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2753, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (-1));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1216.5375419);
      doubleArray0[2] = (double) (byte)68;
      doubleArray0[3] = (double) (byte)68;
      doubleArray0[4] = 10.0;
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)122, (byte) (-87), (byte) (-84), (byte)0, (byte) (-80), (byte)0}, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-87);
      intArray0[1] = (int) (byte) (-87);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      boolean boolean1 = ArrayUtils.contains(intArray0, (-87));
      assertTrue(boolean1);
      assertEquals(9, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-87), (-87), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean2);
      assertEquals(9, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {(-87), (-87), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, objectArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(objectArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, objectArray0);
      assertNotSame(booleanArray1, objectArray0);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = (-1214.5574F);
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1214.5574F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1214.5574F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Float float0 = new Float(3.40657890391901);
      assertEquals(3.406579F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[4] = byte4;
      Byte byte5 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte5);
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[5] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte)75, (byte)75, (byte) (-126), (byte)75, (byte)75}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-20);
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-68);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      shortArray0[3] = (short) (byte)68;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (short) (-68);
      doubleArray0[2] = (double) (short) (-20);
      doubleArray0[3] = (-1708.5640563166144);
      doubleArray0[4] = (double) (short) (-68);
      doubleArray0[5] = 10.0;
      doubleArray0[6] = (double) (byte)58;
      doubleArray0[7] = (double) (short) (-1);
      doubleArray0[8] = (double) (byte)58;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1216.5375419), 2753);
      assertEquals((-1), int0);
      assertEquals(19, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1.0);
      assertEquals(18, doubleArray1.length);
      assertEquals(19, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 2753);
      assertNull(floatArray0);
      
      Byte[] byteArray2 = new Byte[0];
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      Short[] shortArray0 = new Short[8];
      short short0 = (short)9;
      Short short1 = new Short((short)9);
      assertEquals((short)9, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)9);
      assertEquals((short)9, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short)110);
      assertEquals((short)110, (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short((short)110);
      assertEquals((short)110, (short)short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short((short)9);
      assertEquals((short)9, (short)short5);
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short2));
      assertNotNull(short5);
      
      shortArray0[4] = short5;
      shortArray0[5] = short1;
      Short short6 = new Short((short) (-1418));
      assertEquals((short) (-1418), (short)short6);
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short4));
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      Short short7 = new Short((short) (-118));
      assertEquals((short) (-118), (short)short7);
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short3));
      assertNotNull(short7);
      
      shortArray0[7] = short7;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) short0;
      doubleArray0[2] = (double) (short) (-1418);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 4395.01, (int) short0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0), 9.0, (-1418.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)121;
      ArrayUtils.shift(byteArray0, (int) shortArray0[6], (-859), (int) short0);
      assertEquals(8, shortArray0.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)55, (byte)0, (byte)50, (byte) (-65), (byte)118, (byte)121}, byteArray0);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'S');
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean1);
      assertEquals(8, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'W';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 87.0F);
      assertEquals(0, int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {87.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift((byte[]) null, 4045, (-831), (-1798));
      Byte byte0 = new Byte((byte)71);
      assertEquals((byte)71, (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.hashCode((Object) byte0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-97);
      ArrayUtils.shift(byteArray0, 95, 114, 32);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-8), (byte) (-97)}, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 947L;
      longArray0[1] = (-60L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {947L, (-60L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = '6';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte)42;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 544, 102);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte) (-76), (byte) (-114), (byte)6, (byte) (-4), (byte)0, (byte) (-19), (byte)42}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-1289));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'M';
      floatArray0[2] = (float) 'M';
      floatArray0[3] = (float) 'M';
      floatArray0[4] = (float) 'M';
      floatArray0[7] = (float) 'M';
      ArrayUtils.shuffle(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 77.0F, 77.0F, 77.0F, 0.0F, 0.0F, 77.0F, 0.0F, 77.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[21];
      longArray0[0] = (-11L);
      longArray0[13] = (long) 'M';
      longArray0[4] = (long) 'M';
      longArray0[5] = (long) 'M';
      ArrayUtils.swap(floatArray0, 2499, (-1431655764), 2499);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 77.0F, 77.0F, 77.0F, 0.0F, 0.0F, 77.0F, 0.0F, 77.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2, 0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-89);
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-431.7459F);
      floatArray0[1] = (float) (byte) (-44);
      floatArray0[2] = (float) (byte) (-116);
      floatArray0[3] = 1673.1F;
      floatArray0[4] = (float) (byte) (-44);
      floatArray0[5] = 1673.1F;
      floatArray0[6] = (float) (byte)67;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1673.1F);
      assertEquals(5, int1);
      assertEquals(7, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-431.7459F), (-44.0F), (-116.0F), 1673.1F, (-44.0F), 1673.1F, 67.0F}, floatArray0, 0.01F);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)157);
      assertEquals((short)157, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = new Short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = short0;
      shortArray1[1] = short0;
      shortArray1[2] = short0;
      shortArray1[3] = short0;
      shortArray1[4] = short0;
      Short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      Class<Integer> class3 = Integer.TYPE;
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1041, class3.getModifiers());
      assertEquals("int", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.equals((Object)class0));
      assertFalse(class3.equals((Object)class2));
      assertFalse(class3.equals((Object)class1));
      assertNotNull(class3);
      assertNotSame(class3, class0);
      assertNotSame(class3, class2);
      assertNotSame(class3, class1);
      
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      assertNotNull(classArray1);
      
      AbstractMap.SimpleImmutableEntry<String, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeElement((AbstractMap.SimpleImmutableEntry<String, Integer>[]) null, (Object) class2);
      assertFalse(class2.equals((Object)class3));
      assertNull(abstractMap_SimpleImmutableEntryArray0);
      assertSame(class2, class0);
      assertSame(class2, class1);
      assertNotSame(class2, class3);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) class1);
      assertEquals((-1), int0);
      assertFalse(class1.equals((Object)class3));
      assertNotSame(class1, class3);
      assertSame(class1, class2);
      assertSame(class1, class0);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)305;
      shortArray0[1] = (short)305;
      shortArray0[2] = (short)3354;
      shortArray0[3] = (short)2891;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)1731;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)305, 3005);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)305, (short)305, (short)3354, (short)2891, (short) (-1), (short)1731}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1340L;
      longArray0[1] = (long) (short)2891;
      longArray0[2] = (long) (short)1731;
      MockRandom mockRandom0 = new MockRandom((short) (-1));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {2891L, 1731L, 0L, 1340L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3561);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-3561);
      ArrayUtils.shuffle(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-3561L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      double[] doubleArray0 = new double[23];
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.insert(90, booleanArray0, booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      Long long0 = new Long(145L);
      assertEquals(145L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      long[] longArray1 = new long[0];
      ArrayUtils.shuffle(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.insert(90, booleanArray0, booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      Long long0 = new Long(145L);
      assertEquals(145L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      long[] longArray1 = new long[0];
      ArrayUtils.shuffle(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      Character character0 = Character.valueOf('J');
      assertEquals('J', (char)character0);
      assertNotNull(character0);
      
      ArrayUtils.hashCode((Object) character0);
      boolean boolean0 = ArrayUtils.isNotEmpty((Double[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[2] = (long) 'J';
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) 'J';
      longArray0[6] = (long) 'J';
      longArray0[7] = (long) 'J';
      boolean boolean1 = ArrayUtils.contains(longArray0, (-3L));
      assertFalse(boolean1);
      assertEquals(9, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 0L, 74L, 74L, 74L, 0L, 74L, 74L, 0L}, longArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'J', 0);
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J', 'J', 'J'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Long[] longArray1 = ArrayUtils.add((Long[]) null, (Long) 74L);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 74L, 74L, 74L, 0L, 74L, 74L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (-1631.551038488982);
      doubleArray0[1] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 2425.9048;
      doubleArray0[5] = 301.505;
      doubleArray0[6] = (-635.712355397);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(23, doubleArray0.length);
      assertEquals(23, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(23, doubleArray0.length);
      assertEquals(23, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertSame(doubleArray0, doubleArray2);
      assertSame(doubleArray2, doubleArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short) (-19);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-2962);
      shortArray0[5] = (short)860;
      shortArray0[6] = (short)3496;
      shortArray0[7] = (short) (-1229);
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-19), (short)0, (short) (-2962), (short)860, (short)3496, (short) (-1229)}, shortArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (short)0, (-3165L));
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-3165L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)3496;
      floatArray0[1] = (float) (short) (-1229);
      floatArray0[2] = (float) (short) (-1229);
      floatArray0[3] = (float) (short) (-1229);
      floatArray0[4] = (float) (short)0;
      ArrayUtils.shift(floatArray0, (int) (short) (-1229), (int) (short) (-19), (int) (short)0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {3496.0F, (-1229.0F), (-1229.0F), (-1229.0F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      Character character0 = Character.valueOf('J');
      assertEquals('J', (char)character0);
      assertNotNull(character0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'J';
      floatArray0[2] = (float) 'J';
      floatArray0[3] = 1048.0F;
      floatArray0[4] = (float) 'J';
      floatArray0[6] = (float) 'J';
      floatArray0[7] = (float) 'J';
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 1488, 1488);
      assertEquals((-1), int0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {74.0F, 0.0F, 74.0F, 1048.0F, 74.0F, 0.0F, 74.0F, 74.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1));
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 74.0F;
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 74.0F;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[1] = object0;
      objectArray1[2] = (Object) 74.0F;
      objectArray1[3] = (Object) character0;
      objectArray1[4] = (Object) 74.0F;
      Object object1 = ArrayUtils.get(objectArray1, 1488, (Object) character0);
      assertEquals('J', object1);
      assertEquals(5, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(object1);
      assertNotSame(objectArray1, objectArray0);
      
      objectArray0[1] = object1;
      Long long0 = new Long(555L);
      assertEquals(555L, (long)long0);
      assertNotNull(long0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) long0, (-1314));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(2, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotNull(bitSet0);
      assertNotSame(objectArray0, objectArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 74.0F;
      doubleArray0[1] = (double) 555L;
      doubleArray0[2] = (double) 555L;
      doubleArray0[3] = (double) 74.0F;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 74.0F;
      doubleArray0[6] = (double) 1048.0F;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {74.0, 555.0, 555.0, 74.0, (-1.0), 74.0, 1048.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {74.0, 555.0, 555.0, 74.0, (-1.0), 74.0, 1048.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '?');
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '?';
      longArray0[1] = (long) '?';
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean1);
      assertEquals(2, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {63L, 63L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertEquals(8, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(9, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, true}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 63L, 351);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(bitSet1, bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 157L);
      assertEquals((-1), int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {63L, 63L}, longArray0);
      
      ArrayUtils.reverse(charArray0, (-1307), 351);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1353);
      intArray0[1] = 91;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1353);
      longArray0[1] = (long) (-1353);
      longArray0[2] = (-1L);
      longArray0[3] = (long) (-1353);
      longArray0[4] = (long) (-1353);
      ArrayUtils.swap(longArray0, 91, 91, (-1353));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1353L), (-1353L), (-1L), (-1353L), (-1353L)}, longArray0);
      
      ArrayUtils.swap(intArray0, 91, (-2), (-927));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1353), 91, 0, 0, 0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-89);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)39, (int) (byte)1);
      assertEquals((-1), int0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-100), (byte) (-59), (byte) (-102), (byte)57, (byte)1, (byte) (-18), (byte)1, (byte) (-89)}, byteArray0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 91;
      integerArray0[1] = (Integer) (-1353);
      integerArray0[2] = (Integer) 91;
      integerArray0[3] = (Integer) (-1353);
      integerArray0[4] = (Integer) 91;
      integerArray0[5] = (Integer) (-1353);
      integerArray0[6] = (Integer) (-1353);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)45;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)45;
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      String string0 = ArrayUtils.toString((Object) boolean1);
      assertEquals("true", string0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "true";
      objectArray0[1] = (Object) 45L;
      objectArray0[2] = (Object) "true";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(2, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) (byte)45;
      doubleArray0[1] = (double) (byte)45;
      ArrayUtils.shift(doubleArray0, (int) (byte)45, (int) (byte)45, 1868);
      assertEquals(12, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      int int0 = 7;
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(7);
      assertEquals(7, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean3 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean3);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray1, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      intArray0[1] = 11;
      intArray0[2] = 9;
      intArray0[3] = 9;
      char[] charArray0 = new char[15];
      charArray0[0] = '\u001A';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(15, charArray0.length);
      assertEquals(15, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-516);
      longArray0[1] = (-516L);
      longArray0[1] = (long) (-516);
      longArray0[3] = (long) '\u001A';
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-516L), (-516L), 0L, 26L}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-516L), (-516L), 0L, 26L}, longArray0);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertEquals(15, charArray0.length);
      assertEquals(15, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      ArrayUtils.swap(longArray0, 9, (-584), 7);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-516L), (-516L), 0L, 26L}, longArray0);
      
      ArrayUtils.swap(intArray0, 1, (-927), 0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-516), 11, 9, 9, 0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (-516));
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-516.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, ", Length: ");
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = 'a';
      charArray0[2] = '_';
      charArray0[3] = ';';
      charArray0[4] = '+';
      charArray0[5] = 'w';
      charArray0[6] = 'R';
      charArray0[7] = '4';
      charArray0[8] = 's';
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '4';
      charArray1[1] = 's';
      charArray1[2] = 'R';
      charArray1[3] = 's';
      charArray1[4] = '-';
      charArray1[5] = 'a';
      charArray1[6] = ';';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(9, charArray0.length);
      assertEquals(4, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'4', 's', 'R', 's', '-', 'a', ';'}, charArray1);
      assertArrayEquals(new char[] {'8', 'a', '_', ';', '+', 'w', 'R', '4', 's'}, charArray0);
      assertArrayEquals(new char[] {'8', '_', '+', 'w'}, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(12, booleanArray0.length);
      
      long[] longArray0 = new long[10];
      longArray0[1] = (long) 1;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      float[] floatArray0 = new float[17];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) 'R';
      floatArray0[2] = (float) 1;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(17, floatArray0.length);
      assertEquals(17, floatArray1.length);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = ':';
      floatArray0[14] = (float) '#';
      charArray0[3] = '#';
      charArray0[4] = 'J';
      charArray0[5] = '|';
      charArray0[6] = '#';
      Character character0 = new Character('g');
      assertEquals('g', (char)character0);
      assertNotNull(character0);
      
      float[] floatArray2 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertEquals(34, floatArray2.length);
      assertEquals(17, floatArray0.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'g', ':', '\u0000', '#', 'J', '|', '#'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '/';
      charArray0[2] = 'n';
      Integer integer0 = new Integer((short)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1), 0, (-1), 0}, intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (int)integerArray0[3];
      floatArray0[1] = (float) 'n';
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (int)integerArray0[3];
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      ArrayUtils.shift(floatArray0, (int) (short)0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 110.0F, 1.0F, 0.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)22;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)22}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)22}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '/';
      charArray1[1] = '/';
      charArray1[2] = '/';
      charArray1[3] = '/';
      charArray1[4] = '.';
      charArray1[5] = '/';
      charArray1[6] = 'n';
      charArray1[7] = 'n';
      charArray1[8] = '/';
      ArrayUtils.swap(charArray1, (-1612), int0, (int) (byte)22);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'/', '/', '/', '/', '.', '/', 'n', 'n', '/'}, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = 3592;
      int int1 = ArrayUtils.lastIndexOf(longArray1, 0L, 3592);
      assertEquals((-1), int1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.reverse((short[]) null, 3592, (-1));
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)97);
      assertFalse(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 'B';
      charArray0[2] = 'U';
      charArray0[3] = 'T';
      charArray0[4] = 'J';
      charArray0[5] = '/';
      charArray0[6] = 'p';
      ArrayUtils.swap(charArray0, (-1165), 4, 1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'J', 'B', 'U', 'T', 'H', '/', 'p'}, charArray0);
      
      Character character0 = new Character('B');
      assertEquals('B', (char)character0);
      assertNotNull(character0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'p';
      intArray0[1] = (int) 'B';
      intArray0[2] = (int) 'U';
      intArray0[3] = (int) 'H';
      intArray0[4] = (-1165);
      intArray0[5] = (int) 'B';
      intArray0[6] = (int) (short)97;
      intArray0[7] = (int) 'H';
      intArray0[8] = (int) 'B';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 2);
      assertEquals(10, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1838);
      assertEquals(1838, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(17);
      assertEquals(17, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      assertEquals(2, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      try { 
        Integer.valueOf((String) null, 2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-228), (-516));
      assertNull(byteArray0);
      
      ArrayUtils.shift(intArray0, (-126));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-516), 0, 0, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)101;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)55;
      shortArray0[3] = (short)54;
      shortArray0[4] = (short)54;
      shortArray0[5] = (short)12;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)55, (-42));
      assertEquals(2, int0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)101, (short)1, (short)55, (short)54, (short)54, (short)12}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)4056);
      assertEquals((short)4056, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-1459));
      assertEquals((short) (-1459), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-3409.164F), (-1));
      assertEquals((-1), int0);
      assertEquals(4, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'n');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'n'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)shortArray0[0];
      ArrayUtils.shift(intArray0, 37, (-42), 4056);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {4056}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short)0, (-1117));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, shortArray1.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)45;
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z', (int) (byte)45);
      assertEquals(2, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)45;
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift(longArray0, 2);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 45L}, longArray0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      String string0 = ArrayUtils.toString((Object) boolean1);
      assertEquals("true", string0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(string0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)45);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      Character character0 = Character.valueOf('J');
      assertEquals('J', (char)character0);
      assertNotNull(character0);
      
      ArrayUtils.hashCode((Object) character0);
      boolean boolean0 = ArrayUtils.isNotEmpty((Double[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (long) 'J';
      longArray0[2] = (long) 'J';
      longArray0[3] = (long) 'J';
      Integer[] integerArray0 = new Integer[3];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3178);
      assertEquals(3178, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = (Integer) int0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 541);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {4, 3178, 4}, intArray0);
      
      int int1 = ArrayUtils.indexOf(longArray0, 3634L, int0);
      assertEquals((-1), int1);
      assertEquals(9, longArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {0L, 74L, 74L, 74L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      char[] charArray0 = new char[10];
      Object[] objectArray0 = new Object[5];
      int[] intArray0 = new int[1];
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Object object0 = ArrayUtils.get(objectArray0, 106);
      assertEquals(5, objectArray0.length);
      assertNull(object0);
      
      objectArray0[1] = null;
      int int0 = (-936);
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 101, 101, (-2));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Object[] objectArray0 = new Object[5];
      int[] intArray0 = new int[0];
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      Object object0 = ArrayUtils.get(objectArray0, 101);
      assertEquals(5, objectArray0.length);
      assertNull(object0);
      
      objectArray0[1] = null;
      int int0 = (-1042);
      Object object1 = ArrayUtils.get(objectArray0, (-1042));
      assertEquals(5, objectArray0.length);
      assertNull(object1);
      
      objectArray0[2] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      intArray0[2] = 9;
      intArray0[3] = 6;
      Object[] objectArray0 = new Object[0];
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(9);
      assertEquals(9L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {9L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 555L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertEquals(8, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 1L, 555L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1L, 555L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = ' ';
      charArray0[2] = '/';
      charArray0[3] = '!';
      charArray0[4] = '';
      charArray0[5] = '<';
      charArray0[6] = 'U';
      charArray0[7] = 'B';
      charArray0[8] = 'm';
      ArrayUtils.reverse(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'m', 'B', 'U', '<', '', '!', '/', ' ', 'x'}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = (Character) ' ';
      characterArray0[1] = (Character) 'B';
      characterArray0[2] = (Character) '!';
      characterArray0[3] = (Character) ' ';
      characterArray0[4] = (Character) 'm';
      characterArray0[5] = (Character) '<';
      characterArray0[6] = (Character) '';
      characterArray0[7] = (Character) ' ';
      characterArray0[8] = (Character) ' ';
      boolean boolean1 = ArrayUtils.isNotEmpty(characterArray0);
      assertTrue(boolean1);
      assertEquals(9, characterArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 364;
      intArray0[1] = 390;
      ArrayUtils.shift(intArray0, 364, 390, 364);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {364, 390}, intArray0);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('8');
      assertEquals('8', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertEquals('8', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertEquals('8', (char)character2);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character0);
      assertEquals('8', (char)character3);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertNotNull(character3);
      
      Character[] characterArray1 = ArrayUtils.add(characterArray0, character3);
      assertEquals(3, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character3));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = '=';
      charArray0[2] = 'U';
      charArray0[3] = '7';
      charArray0[4] = 'c';
      charArray0[5] = '`';
      charArray0[6] = 'a';
      ArrayUtils.swap(charArray0, 0, 1041);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'f', '=', 'U', '7', 'c', '`', 'a'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)107;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(272, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 272, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 34L;
      longArray0[1] = 587L;
      longArray0[2] = 1L;
      longArray0[3] = 1522L;
      longArray0[4] = 1479L;
      longArray0[5] = (-928L);
      longArray0[6] = 0L;
      int int0 = 75;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 75, 0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 75, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      int[] intArray0 = new int[4];
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertArrayEquals(new char[] {'('}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'('}, charArray0);
      assertNotSame(charArray0, charArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '(';
      floatArray0[1] = (float) '(';
      floatArray0[2] = (float) '(';
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) '(';
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new float[] {40.0F, 40.0F, 40.0F, (-1.0F), (-1.0F), (-1.0F), 40.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {40.0F, 40.0F, (-1.0F), (-1.0F), (-1.0F), 40.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = new float[0];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      float[] floatArray3 = ArrayUtils.removeElements(floatArray2, floatArray2);
      assertEquals(0, floatArray3.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray3);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-641L);
      ArrayUtils.shift(longArray0, Integer.MAX_VALUE, 1237, 76);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-641L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1306.0795F);
      floatArray0[1] = (-1397.339F);
      floatArray0[2] = (-1.0F);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1306.0795F), (-1397.339F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      long[] longArray0 = new long[6];
      longArray0[1] = 2147483647L;
      longArray0[2] = 157L;
      longArray0[3] = (-641L);
      longArray0[4] = 0L;
      longArray0[5] = 1L;
      ArrayUtils.shift(longArray0, 1463, Integer.MAX_VALUE, 70);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 2147483647L, 157L, (-641L), 0L, 1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((Double[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[8] = 1039L;
      boolean boolean1 = ArrayUtils.contains(longArray0, (-3L));
      assertFalse(boolean1);
      assertEquals(9, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1039L}, longArray0);
      
      char[] charArray0 = new char[23];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '\u0000', 0);
      assertEquals(23, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(23, bitSet0.cardinality());
      assertEquals(23, charArray0.length);
      assertNotNull(bitSet0);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)50;
      Byte byte1 = new Byte((byte)50);
      assertEquals((byte)50, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)50, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)50, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-91));
      assertEquals((byte) (-91), (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-1989));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1989, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 476;
      intArray0[2] = 0;
      intArray0[3] = 2377;
      Double double0 = new Double(476);
      assertEquals(476.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[4] = double0;
      Double double1 = new Double((double) doubleArray0[2]);
      assertEquals(476.0, (double)double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[5] = double1;
      doubleArray0[6] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(3038L);
      assertEquals(3038L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 476);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 476, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = (-3489);
      intArray0[3] = 749;
      intArray0[5] = (-2641);
      intArray0[6] = Integer.MAX_VALUE;
      ArrayUtils.shift(intArray0, (-2641));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-3489), 749, 0, (-2641), Integer.MAX_VALUE, 8, 0}, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) 749;
      floatArray0[2] = (float) (-3489);
      floatArray0[3] = (float) (-3489);
      floatArray0[4] = (float) (-2641);
      floatArray0[5] = (float) 749;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 749;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 749.0F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {8.0F, 749.0F, (-3489.0F), (-3489.0F), (-2641.0F), 749.0F, 0.0F, 749.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)476;
      shortArray0[1] = (short) (-1137);
      shortArray0[2] = (short)48;
      shortArray0[3] = (short)3;
      shortArray0[4] = (short)3143;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)476, (short) (-1137), (short)48, (short)3, (short)3143}, shortArray0);
      assertArrayEquals(new short[] {(short)476, (short) (-1137), (short)48, (short)3, (short)3143, (short)476, (short) (-1137), (short)48, (short)3, (short)3143}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3105);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y*jM";
      stringArray0[1] = "H";
      stringArray0[2] = "H";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-80);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-80)}, byteArray0);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte) (-80));
      assertFalse(boolean1);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean2);
      assertEquals(0, intArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new int[] {}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[0] = boolean3;
      Boolean boolean4 = Boolean.valueOf("H");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      booleanArray0[1] = boolean4;
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (int) 'r', (int) (byte) (-80));
      assertNull(charArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Class<Boolean[]> class0 = Boolean[].class;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0, class0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-80);
      shortArray0[1] = (short) (byte) (-80);
      shortArray0[2] = (short) (byte) (-80);
      shortArray0[3] = (short) (byte) (-80);
      short[] shortArray1 = ArrayUtils.addAll((short[]) null, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-80), (short) (-80), (short) (-80), (short) (-80)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-80), (short) (-80), (short) (-80), (short) (-80)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1353);
      intArray0[1] = 91;
      intArray0[2] = 272;
      intArray0[3] = (-1028);
      intArray0[1] = 2693;
      intArray0[5] = 272;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 360);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(6, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1353), 2693, 272, (-1028), 0, 272}, intArray0);
      
      Integer integer0 = new Integer((-1028));
      assertEquals((-1028), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(70);
      assertEquals(70, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(9);
      assertEquals(9, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(2693);
      assertEquals(2693, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) (-1028);
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) (-1028);
      intArray0[1] = 2693;
      integerArray0[4] = (Integer) 272;
      integerArray0[5] = (Integer) (-1028);
      integerArray0[6] = integer1;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 360);
      assertEquals(7, intArray1.length);
      assertEquals(7, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1028), 0, (-1028), 360, 272, (-1028), 70}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.swap((Object[]) integerArray0, 3178, 9, (-1));
      assertEquals(7, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 18688, 272);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3534);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)272;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3534), (short)0, (short)0, (short)272, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)272;
      doubleArray0[1] = (double) (short) (-3534);
      doubleArray0[2] = (double) (short) (-3534);
      doubleArray0[3] = (double) (short) (-3534);
      doubleArray0[4] = (double) (short) (-3534);
      doubleArray0[5] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (int) (short)0, 1.0);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {272.0, (-3534.0), (-3534.0), (-3534.0), (-3534.0), 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-2054);
      floatArray0[1] = (float) (short) (-3534);
      floatArray0[2] = (float) (short)272;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)272;
      floatArray0[5] = (float) (short) (-3534);
      floatArray0[6] = (float) (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.doubles((long) (-1), (double) (short) (-1028), 89.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[6] = 0L;
      longArray0[1] = 0L;
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) long0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)123;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-60));
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-100), (byte)123, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-60), (byte) (-100), (byte)123, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)76);
      assertEquals((-1), int1);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-100), (byte)123, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-47);
      shortArray0[1] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-68);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-2230);
      shortArray0[7] = (short)476;
      ArrayUtils.swap(shortArray0, (int) (short)476, 10, (-2305));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-47), (short) (-1), (short)0, (short)0, (short) (-68), (short) (-1), (short) (-2230), (short)476}, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)67;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)9;
      byte[] byteArray2 = ArrayUtils.insert((int) (short)0, byteArray0, byteArray1);
      assertEquals(4, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)0, (byte)9}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte)0, (byte)9}, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1160.3566F;
      floatArray0[1] = Float.NaN;
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = 7;
      intArray0[5] = 7;
      intArray0[6] = 7;
      ArrayUtils.shift(intArray0, 14);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {7, 7, 7, 7, 7, 7, 7}, intArray0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1160.3566F, Float.NaN, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1160.3566F, Float.NaN, 0.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) 14;
      doubleArray0[3] = (double) 7;
      doubleArray0[4] = (double) 14;
      doubleArray0[5] = (double) 7;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 7, 178);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {7.0, Double.NaN, 14.0, 7.0, 14.0, 7.0}, doubleArray0, 0.01);
      
      Float[] floatArray2 = new Float[9];
      floatArray2[0] = (Float) 1160.3566F;
      Float float0 = new Float((double) 7);
      assertEquals(7.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray2[1] = float0;
      Float float1 = new Float(1.0F);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray2[2] = float1;
      floatArray2[3] = (Float) Float.NaN;
      floatArray2[4] = (Float) Float.NaN;
      floatArray2[5] = (Float) Float.NaN;
      floatArray2[6] = (Float) Float.NaN;
      floatArray2[7] = (Float) 1160.3566F;
      floatArray2[8] = (Float) Float.NaN;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertEquals(9, floatArray3.length);
      assertEquals(9, floatArray2.length);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {1160.3566F, 7.0F, 1.0F, Float.NaN, Float.NaN, Float.NaN, Float.NaN, 1160.3566F, Float.NaN}, floatArray3, 0.01F);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)1779;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)10, (short)1779}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)1779;
      doubleArray0[1] = (double) (short)1779;
      doubleArray0[2] = (double) (short)1779;
      doubleArray0[3] = (double) (short)1779;
      doubleArray0[4] = (double) (short)10;
      doubleArray0[5] = (double) (short)10;
      doubleArray0[6] = (double) (short)1779;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 938.1, (double) (short)1779);
      assertEquals(64, bitSet1.size());
      assertEquals(7, bitSet1.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet1.toString());
      assertEquals(7, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(7, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {1779.0, 1779.0, 1779.0, 1779.0, 10.0, 10.0, 1779.0}, doubleArray0, 0.01);
      assertNotSame(bitSet1, bitSet0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = '/';
      charArray0[2] = '&';
      charArray0[3] = 'n';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'g', '/', '&', 'n'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3105);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y*jM";
      stringArray0[1] = "H";
      stringArray0[2] = "H";
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte) (-80));
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean2;
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (int) 'r', (int) (byte) (-80));
      assertNull(charArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Class<Boolean[]> class0 = Boolean[].class;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0, class0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'Y');
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 40L;
      longArray0[1] = (long) 'Y';
      longArray0[2] = (long) 'Y';
      longArray0[3] = 2422L;
      longArray0[4] = (long) 'Y';
      longArray0[5] = (long) 'Y';
      longArray0[6] = (long) 'Y';
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {40L, 89L, 89L, 2422L, 89L, 89L, 89L}, longArray0);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 40L;
      doubleArray0[2] = (double) 'Y';
      doubleArray0[3] = (double) 'Y';
      doubleArray0[4] = (-1406.153);
      doubleArray0[5] = (double) 2422L;
      doubleArray0[6] = (double) 40L;
      doubleArray0[7] = (double) 40L;
      doubleArray0[8] = (double) 40L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 89L);
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2, 3}", bitSet0.toString());
      assertEquals(9, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 40.0, 89.0, 89.0, (-1406.153), 2422.0, 40.0, 40.0, 40.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      short[] shortArray0 = new short[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) (short)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 938.1, (double) (short)0);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(7, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(bitSet1, bitSet0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '/';
      charArray0[2] = '&';
      charArray0[3] = 'n';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '/', '&', 'n'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      short[] shortArray0 = new short[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) (short)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 938.1, (double) (short)0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(7, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(bitSet1, bitSet0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '/';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean1);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '/', 'n', 'n'}, charArray0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2, (int) (short)0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2916.889F;
      floatArray0[1] = (-901.7326F);
      floatArray0[2] = (-901.7326F);
      floatArray0[3] = 2144.0F;
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      char[] charArray0 = new char[4];
      charArray0[1] = '/';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '/', 'n', 'n'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-3489.0), (-1106.0797255337968));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      charArray0[1] = '&';
      charArray0[2] = '/';
      charArray0[3] = 'o';
      charArray0[4] = 'g';
      charArray0[5] = 't';
      charArray0[6] = 'm';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'n', '&', '/', 'o', 'g', 't', 'm'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      intArray0[1] = 11;
      intArray0[2] = 9;
      intArray0[3] = 9;
      char[] charArray0 = new char[1];
      charArray0[0] = '\u001A';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u001A'}, charArray0);
      assertArrayEquals(new char[] {'\u001A'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-516);
      longArray0[1] = (-516L);
      longArray0[1] = (long) (-516);
      longArray0[3] = (long) '\u001A';
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-516L), (-516L), 0L, 26L}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-516L), (-516L), 0L, 26L}, longArray0);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u001A'}, charArray0);
      assertArrayEquals(new char[] {'\u001A'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      ArrayUtils.swap(longArray0, 9, (-584), 7);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-516L), (-516L), 0L, 26L}, longArray0);
      
      ArrayUtils.swap(intArray0, 1, (-927), 0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-516), 11, 9, 9, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-101);
      ArrayUtils.reverse(byteArray0, 1517, 55);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-42), (byte) (-101)}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-101);
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-101.0F)}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte) (-101), (int) (byte) (-42));
      assertEquals(0, int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-101.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-5125));
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Long long0 = new Long(1517);
      assertEquals(1517L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2147483648L));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1517L}, longArray1);
      
      ArrayUtils.swap(intArray0, 55, (int) (byte)3, (-1));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, 0L, 3592);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.reverse((short[]) null, 3592, (-1));
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)97);
      assertFalse(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'F';
      charArray0[1] = '%';
      charArray0[2] = ';';
      charArray0[3] = 'J';
      charArray0[4] = '_';
      charArray0[5] = 'y';
      charArray0[6] = 'U';
      charArray0[7] = 'l';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'l');
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{7}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(8, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'F', '%', ';', 'J', '_', 'y', 'U', 'l'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean1);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1160.3566F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (-2753.7754F);
      ArrayUtils.swap(floatArray0, 43, 43);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1160.3566F, Float.NaN, (-2753.7754F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 43);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)117;
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-1), (byte)65, (byte)70, (byte) (-22), (byte)0}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-1), (byte)65, (byte)70, (byte) (-22), (byte)0}, byteArray0);
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((short)506);
      assertEquals((short)506, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte) (-22));
      assertEquals((short) (-22), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((byte)117);
      assertEquals((short)117, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)1432);
      assertEquals((short)1432, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)233);
      assertEquals((short)233, (short)short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (short)506);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) (byte)86);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {86.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)86;
      intArray0[1] = (int) (byte)86;
      intArray0[2] = (int) (byte)86;
      intArray0[3] = (int) (byte)86;
      intArray0[4] = (int) (byte)86;
      intArray0[5] = (int) (byte)86;
      intArray0[6] = (int) (byte)86;
      intArray0[7] = (int) (byte)86;
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      charArray0[4] = 'U';
      char[] charArray1 = ArrayUtils.add(charArray0, 'A');
      assertEquals(6, charArray1.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'', 'q', 'q', 'q', 'U', 'A'}, charArray1);
      assertArrayEquals(new char[] {'', 'q', 'q', 'q', 'U'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      Double double0 = new Double(90.0);
      assertEquals(90.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertEquals(90.0, object0);
      assertNotNull(object0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 101;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 101);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {101}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 101;
      doubleArray0[1] = (double) 101;
      doubleArray0[2] = 90.0;
      doubleArray0[3] = (double) 101;
      doubleArray0[4] = (double) 101;
      doubleArray0[5] = (double) 101;
      doubleArray0[6] = (double) 101;
      doubleArray0[7] = (-647.2391);
      doubleArray0[8] = (double) 101;
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)17);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, (-1));
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {101}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 101;
      integerArray0[1] = (Integer) 101;
      integerArray0[2] = (Integer) 101;
      integerArray0[3] = (Integer) 101;
      integerArray0[4] = (Integer) 101;
      integerArray0[5] = (Integer) 101;
      integerArray0[6] = (Integer) 101;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(14, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      Class<Integer> class3 = Integer.TYPE;
      assertEquals("int", class3.toString());
      assertEquals(1041, class3.getModifiers());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.equals((Object)class1));
      assertFalse(class3.equals((Object)class0));
      assertFalse(class3.equals((Object)class2));
      assertNotNull(class3);
      assertNotSame(class3, class1);
      assertNotSame(class3, class0);
      assertNotSame(class3, class2);
      
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      assertNotNull(classArray1);
      
      AbstractMap.SimpleImmutableEntry<String, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeElement((AbstractMap.SimpleImmutableEntry<String, Integer>[]) null, (Object) class2);
      assertFalse(class2.equals((Object)class3));
      assertNull(abstractMap_SimpleImmutableEntryArray0);
      assertSame(class2, class1);
      assertNotSame(class2, class3);
      assertSame(class2, class0);
      
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)1, (int) (byte)1);
      assertEquals((-1), int0);
      
      byte byte0 = (byte) (-59);
      Byte byte1 = new Byte((byte) (-59));
      assertEquals((byte) (-59), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-19));
      assertEquals((byte) (-19), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)9);
      assertEquals((byte)9, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte byte4 = Byte.valueOf((byte)9);
      assertEquals((byte)9, (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte1;
      byteArray0[1] = byte2;
      byteArray0[2] = byte1;
      byteArray0[3] = byte4;
      byteArray0[4] = byte2;
      byteArray0[5] = byte4;
      byteArray0[6] = byte1;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)1;
      floatArray0[1] = (float) (byte) (-59);
      floatArray0[2] = (float) (byte)1;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) byte0;
      floatArray0[6] = (float) (byte)1;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-59.0F), 1.0F, (-1.0F), 1.0F, (-59.0F), 1.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, 0L, 3592);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte)101);
      assertEquals((byte)101, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)17);
      assertEquals((byte)17, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-83);
      Byte byte5 = new Byte((byte) (-83));
      assertEquals((byte) (-83), (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      byte byte6 = (byte)32;
      Byte byte7 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte)59);
      assertEquals((byte)59, (byte)byte8);
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte0));
      assertNotNull(byte8);
      
      byteArray0[6] = byte8;
      Byte byte9 = new Byte((byte)59);
      assertEquals((byte)59, (byte)byte9);
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte6));
      assertTrue(byte9.equals((Object)byte8));
      assertNotNull(byte9);
      
      byteArray0[7] = byte9;
      Byte byte10 = Byte.valueOf(byte4);
      assertEquals((byte) (-83), (byte)byte10);
      assertFalse(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte7));
      assertFalse(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte3));
      assertFalse(byte10.equals((Object)byte1));
      assertFalse(byte10.equals((Object)byte2));
      assertFalse(byte10.equals((Object)byte9));
      assertFalse(byte10.equals((Object)byte6));
      assertTrue(byte10.equals((Object)byte5));
      assertFalse(byte4 == byte6);
      assertNotNull(byte10);
      
      byteArray0[8] = byte10;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) byte6;
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) byte4;
      floatArray0[3] = (float) byte4;
      floatArray0[4] = (float) 3592;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {32.0F, (-1.0F), (-83.0F), (-83.0F), 3592.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-47);
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-68);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      shortArray0[3] = (short) (byte)68;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)68, (byte)58, (byte)58, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)58, (byte)58, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (short) (-68);
      doubleArray0[2] = (double) (short) (-47);
      doubleArray0[3] = (-1708.5640563166144);
      doubleArray0[4] = (double) (short) (-68);
      doubleArray0[5] = 10.0;
      doubleArray0[6] = (double) (byte)58;
      doubleArray0[7] = (double) (short) (-1);
      doubleArray0[8] = (double) (byte)58;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1216.5375419), 2753);
      assertEquals((-1), int0);
      assertEquals(19, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1.0);
      assertEquals(18, doubleArray1.length);
      assertEquals(19, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 2753);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (-1));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1216.5375419);
      doubleArray0[1] = (double) (byte)68;
      doubleArray0[2] = (double) (byte)68;
      doubleArray0[3] = (double) (byte)68;
      doubleArray0[4] = 10.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1216.5375419), (int) (byte)68);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1216.5375419), 68.0, 68.0, 68.0, 10.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (-1));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1216.5375419), 68.0, 68.0, 68.0, 10.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1216.5375419), 68.0, 68.0, 68.0, 10.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 0.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      int int0 = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals((-1), int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Object[] objectArray0 = new Object[7];
      int[] intArray0 = new int[2];
      intArray0[0] = (-2629);
      intArray0[1] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-87);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte) (-87);
      ArrayUtils.shift(intArray0, (int) (byte)0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, (-87)}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)122;
      Character character0 = Character.valueOf('I');
      assertEquals('I', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = new Character('#');
      assertEquals('#', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      characterArray0[3] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'I', 'I', '#', 'I'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -87, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3105);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y*jM";
      stringArray0[1] = "H";
      stringArray0[2] = "H";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-80);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-80)}, byteArray0);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte) (-80));
      assertFalse(boolean1);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean2);
      assertEquals(0, intArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[0] = boolean3;
      Boolean boolean4 = Boolean.valueOf("H");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      booleanArray0[1] = boolean4;
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, (int) (byte) (-84), 'r');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -84, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 555L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertEquals(8, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 1L, 555L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1L, 555L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (-329), (-32));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, (-32), (-32));
      assertEquals(8, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L, 1L, 555L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1L, 555L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("ss>TY-|'d;z");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("hWa(u@czu|rb6");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean3;
      booleanArray0[3] = boolean4;
      booleanArray0[4] = boolean0;
      Boolean boolean5 = new Boolean(true);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      booleanArray0[6] = boolean1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0L, (-329), (double) 0L);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-15L);
      longArray0[2] = 1L;
      longArray0[3] = 555L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertEquals(6, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-15L), 1L, 555L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-15L), 1L, 555L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (-329), 2);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 2, 2);
      assertEquals(6, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, (-15L), 1L, 555L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-15L), 1L, 555L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("ss>TY-|'d;z");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("hWa(u@czu|rb6");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean3;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean4;
      booleanArray0[4] = boolean0;
      Boolean boolean5 = new Boolean(true);
      assertTrue(boolean5);
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      booleanArray0[6] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-15L), (-329), (double) 0L);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 476;
      intArray0[2] = 0;
      intArray0[3] = 2377;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 476, 0, 2377, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)435;
      shortArray0[1] = (short)38;
      shortArray0[2] = (short) (-3378);
      shortArray0[3] = (short)952;
      shortArray0[4] = (short)3989;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)27334;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)435);
      assertEquals(0, int0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)435, (short)38, (short) (-3378), (short)952, (short)3989, (short)1, (short)27334}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 476, 0, 2377, 0}, intArray0);
      assertNotSame(intArray0, intArray1);
      
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 476, 0, 2377, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)27334;
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean1);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      Character character0 = Character.valueOf('J');
      assertEquals('J', (char)character0);
      assertNotNull(character0);
      
      ArrayUtils.hashCode((Object) character0);
      boolean boolean0 = ArrayUtils.isNotEmpty((Double[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (long) 'J';
      longArray0[2] = (long) 'J';
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) 'J';
      longArray0[5] = (long) 'J';
      longArray0[6] = (long) 'J';
      longArray0[7] = (long) 'J';
      longArray0[8] = 1039L;
      boolean boolean1 = ArrayUtils.contains(longArray0, (-3L));
      assertFalse(boolean1);
      assertEquals(9, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 74L, 74L, 74L, 74L, 74L, 74L, 74L, 1039L}, longArray0);
      
      char[] charArray0 = new char[23];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'J', 0);
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(23, charArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 4095, 608);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 4095;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 453);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {4095}, intArray0);
      assertArrayEquals(new int[] {4095}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.swap(intArray1, 453, 2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {4095}, intArray0);
      assertArrayEquals(new int[] {4095}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      Character character0 = Character.valueOf('J');
      assertEquals('J', (char)character0);
      assertNotNull(character0);
      
      ArrayUtils.hashCode((Object) character0);
      boolean boolean0 = ArrayUtils.isNotEmpty((Double[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (long) 'J';
      longArray0[2] = (long) 'J';
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) 'J';
      longArray0[5] = (long) 'J';
      longArray0[6] = (long) 'J';
      longArray0[7] = (long) 'J';
      longArray0[8] = 1039L;
      boolean boolean1 = ArrayUtils.contains(longArray0, (-3L));
      assertFalse(boolean1);
      assertEquals(9, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 74L, 74L, 74L, 74L, 74L, 74L, 74L, 1039L}, longArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'J', 0);
      assertEquals(6, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J', 'J', 'J'}, charArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'Q');
      assertEquals(7, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Q', 'J', 'J', 'J', 'J', 'J', 'J'}, charArray1);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J', 'J', 'J'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, true}, booleanArray0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) false;
      objectArray0[7] = (Object) true;
      objectArray0[8] = (Object) false;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(9, objectArray0.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2296.2716701647);
      doubleArray0[1] = (-431.16936955);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2296.2716701647), (-431.16936955)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertEquals(1, int0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 649;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 649;
      longArray1[1] = (long) 649;
      longArray1[2] = (long) 649;
      ArrayUtils.swap(longArray1, 649, 649);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {649L, 649L, 649L}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)351;
      shortArray0[1] = (short)351;
      longArray0[2] = (long) (short) (-3343);
      shortArray0[3] = (short)281;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1989);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)351, (short)351, (short)0, (short)281}, shortArray0);
      assertArrayEquals(new short[] {(short)351, (short)351, (short)0, (short)281}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      ArrayUtils.reverse((float[]) null, 17, 2144612966);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short)351;
      intArray1[1] = (int) (short)281;
      intArray1[2] = (int) (short)351;
      intArray1[3] = (int) (short) (-3343);
      intArray1[4] = (int) (short) (-3343);
      intArray1[5] = (int) (short)351;
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {351, 281, 351, (-3343), (-3343), 351}, intArray1);
      assertArrayEquals(new int[] {351, 281, 351, (-3343), (-3343), 351}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2051.2446F);
      floatArray0[1] = 1412.0F;
      floatArray0[2] = (-1214.5574F);
      floatArray0[3] = (-1807.867F);
      floatArray0[4] = Float.NaN;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 912, 912);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2051.2446F), 1412.0F, (-1214.5574F), (-1807.867F), Float.NaN}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)98;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)121, (int) (byte) (-76));
      assertEquals((-1), int0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)121, (byte)69, (byte) (-4), (byte)69, (byte) (-76), (byte)43, (byte)98}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-4);
      intArray0[1] = 45;
      intArray0[2] = (int) (byte) (-4);
      intArray0[3] = (int) (byte) (-4);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = (-3489);
      intArray0[3] = 749;
      intArray0[5] = (-2641);
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 749, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)0;
      short short0 = (short)109;
      Short short1 = new Short((short)109);
      assertEquals((short)109, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray1 = new Short[5];
      shortArray1[0] = short1;
      shortArray1[1] = (Short) (short)0;
      shortArray1[2] = short1;
      shortArray1[3] = (Short) (short)0;
      shortArray1[4] = short1;
      Class<Short[]> class0 = Short[].class;
      Short[] shortArray2 = ArrayUtils.nullToEmpty((Short[]) null, class0);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-5);
      ArrayUtils.swap(byteArray0, (-3286), (int) (byte) (-7), 2904);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-5)}, byteArray0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) short0);
      assertEquals(109.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (byte) (-5));
      assertEquals((-5.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) (short)109);
      assertEquals(109.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {109.0F, (-5.0F), 109.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      Float float0 = new Float((double) (byte) (-42));
      assertEquals((-42.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-42.0F), (-42.0F), (-42.0F), (-42.0F), (-42.0F)}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0, 187.73419F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-42.0F), (-42.0F), (-42.0F), (-42.0F), (-42.0F)}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3105);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = "H";
      stringArray0[2] = "H";
      Boolean[] booleanArray0 = new Boolean[7];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Class<Boolean[]> class0 = Boolean[].class;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0, class0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((-251.82489F));
      assertEquals((-251.82489F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-3299.6755F));
      assertEquals((-3299.6755F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(2263.3);
      assertEquals(2263.3F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-431.7459F));
      assertEquals((-431.7459F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-990.4698F));
      assertEquals((-990.4698F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(0.0F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = new Float((double) (-990.4698F));
      assertEquals((-990.4698F), (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      Float float7 = new Float(961.3F);
      assertEquals(961.3F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotNull(float7);
      
      floatArray0[7] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 905.82F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-251.82489F), (-3299.6755F), 2263.3F, (-431.7459F), (-990.4698F), 0.0F, (-990.4698F), 961.3F}, floatArray1, 0.01F);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-126));
      assertEquals((short) (-126), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Class<Short[]> class0 = Short[].class;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0, class0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)1779;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)10, (short)1779}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((Object[]) null, (int) (short)0, (int) (short)1779, 0);
      ArrayUtils.shuffle(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1779, (short)10}, shortArray0);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((short)1779);
      assertEquals(1779.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      assertEquals((-1.0), (double)double4, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[3]);
      assertEquals((-1.0), (double)double5, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      assertEquals(0.0, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short)1779);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 1779.0, (-1.0), (-1.0), (-1.0), 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1779;
      intArray0[1] = (int) (short)0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (short)10);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1779, 0}, intArray0);
      assertArrayEquals(new int[] {1779, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (-1214.5574F));
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1214.5574F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray2 = ArrayUtils.removeAllOccurrences(intArray0, (int) (short)10);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {1779, 0}, intArray0);
      assertArrayEquals(new int[] {1779, 0}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = 'v';
      charArray0[2] = 'O';
      charArray0[3] = 'u';
      charArray0[4] = 'q';
      charArray0[5] = '|';
      charArray0[6] = 'c';
      charArray0[7] = ' ';
      charArray0[8] = 'A';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {':', 'v', 'O', 'u', 'q', '|', 'c', ' ', 'A'}, charArray1);
      assertArrayEquals(new char[] {':', 'v', 'O', 'u', 'q', '|', 'c', ' ', 'A'}, charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      Double double0 = new Double(90.0);
      assertEquals(90.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertEquals(90.0, object0);
      assertNotNull(object0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 101;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 101);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {101}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 101;
      doubleArray0[1] = (double) 101;
      doubleArray0[2] = 90.0;
      doubleArray0[3] = (double) 101;
      doubleArray0[4] = (double) 101;
      doubleArray0[5] = (double) 101;
      doubleArray0[6] = (double) 101;
      doubleArray0[7] = (-647.2391);
      doubleArray0[8] = (double) 101;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1.5);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {101.0, 101.0, 90.0, 101.0, 101.0, 101.0, 101.0, (-647.2391), 101.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {101.0, 101.0, 90.0, 101.0, 101.0, 101.0, 101.0, (-647.2391), 101.0, 1.5}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shuffle(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {101}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = 'A';
      charArray0[2] = 'q';
      charArray0[3] = '#';
      charArray0[4] = '';
      charArray0[5] = 'U';
      charArray0[6] = 'N';
      char[] charArray1 = ArrayUtils.add(charArray0, '?');
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'@', 'A', 'q', '#', '', 'U', 'N'}, charArray0);
      assertArrayEquals(new char[] {'@', 'A', 'q', '#', '', 'U', 'N', '?'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      long[] longArray0 = new long[0];
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte byte0 = (byte)53;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)53;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)96, 2);
      assertEquals(0, int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)96, (byte)53, (byte)79, (byte)53}, byteArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)96;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1.0F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {96.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)53;
      intArray0[1] = 2;
      intArray0[2] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      short[] shortArray0 = new short[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) (short)0;
      char[] charArray0 = new char[4];
      charArray0[1] = '/';
      charArray0[2] = 'h';
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      Float float0 = new Float(2515.70985);
      assertEquals(2515.71F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[1];
      Float float1 = new Float(4381.032821);
      assertEquals(4381.0327F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[0] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {4381.0327F}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0, (-2457.784F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {4381.0327F}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      char[] charArray0 = new char[0];
      int int0 = 101;
      ArrayUtils.shift(charArray0, 101, 101, (-2));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Object[] objectArray0 = new Object[5];
      try { 
        Byte.valueOf("/606L8a,qhd");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/606L8a,qhd\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals(0, int0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true}, booleanArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = '&';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = 'w';
      charArray0[5] = 'Q';
      charArray0[6] = '\\';
      charArray0[7] = 'f';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'w');
      assertEquals(7, charArray1.length);
      assertEquals(8, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Q', '&', ' ', ' ', 'Q', '\\', 'f'}, charArray1);
      assertArrayEquals(new char[] {'Q', '&', ' ', ' ', 'w', 'Q', '\\', 'f'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(70.0);
      assertEquals(70.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(70.0);
      assertEquals(70.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(0.0);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1750.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 59, 3822);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3974);
      shortArray0[1] = (short) (-1224);
      shortArray0[2] = (short) (-3343);
      shortArray0[3] = (short)1768;
      ArrayUtils.reverse(shortArray0, (int) (short) (-1224), 4235);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1768, (short) (-3343), (short) (-1224), (short) (-3974)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, true, false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[3] = 0;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 97);
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) ')';
      floatArray0[4] = (float) ')';
      floatArray0[5] = 244.94577F;
      ArrayUtils.shift(floatArray0, 0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 41.0F, 41.0F, 244.94577F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 405);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(8, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      MockRandom mockRandom0 = new MockRandom((-1967L));
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(0);
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 405);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(8, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      char[] charArray0 = new char[1];
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) 0);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      ArrayUtils.shift(floatArray0, 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      MockRandom mockRandom0 = new MockRandom((-1967L));
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1353);
      intArray0[1] = 91;
      intArray0[2] = 272;
      intArray0[3] = (-1028);
      intArray0[1] = 2693;
      intArray0[5] = (-873);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1866);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(6, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1353), 2693, 272, (-1028), 0, (-873)}, intArray0);
      
      Integer integer0 = new Integer((-1028));
      assertEquals((-1028), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(70);
      assertEquals(70, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(9);
      assertEquals(9, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(8);
      assertEquals(8, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) (-1028);
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) (-1028);
      integerArray0[3] = (Integer) 2693;
      integerArray0[4] = (Integer) (-873);
      integerArray0[5] = (Integer) (-1028);
      integerArray0[6] = integer1;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 1866);
      assertEquals(7, intArray1.length);
      assertEquals(7, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1028), 0, (-1028), 2693, (-873), (-1028), 70}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1353);
      longArray0[1] = (long) 70;
      longArray0[2] = (long) 91;
      longArray0[3] = (long) (-1353);
      int int0 = ArrayUtils.indexOf(longArray0, (-2212L), (-2168));
      assertEquals((-1), int0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1353L), 70L, 91L, (-1353L)}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (-128));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -128, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2538;
      ArrayUtils.reverse(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)2538}, shortArray0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[2] = boolean1;
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[3] = boolean2;
      Boolean boolean3 = Boolean.valueOf("a?gzc`I:Osg/Z4k^");
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[4] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      booleanArray0[5] = boolean4;
      Boolean boolean5 = Boolean.valueOf(false);
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      booleanArray0[6] = boolean5;
      Boolean boolean6 = new Boolean("a?gzc`I:Osg/Z4k^");
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      
      booleanArray0[7] = boolean6;
      Boolean boolean7 = new Boolean(true);
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean3));
      assertNotNull(boolean7);
      
      booleanArray0[8] = boolean7;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2538;
      ArrayUtils.reverse(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)2538}, shortArray0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(false);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("a?gzc`I:Osg/Z4k^");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf(false);
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = new Boolean("a?gzc`I:Osg/Z4k^");
      assertFalse(boolean7);
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean1));
      assertNotNull(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = new Boolean(true);
      assertTrue(boolean8);
      assertTrue(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean5));
      assertFalse(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean3));
      assertTrue(boolean8.equals((Object)boolean2));
      assertNotNull(boolean8);
      
      booleanArray0[8] = boolean8;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)90;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-29), (byte) (-53), (byte) (-110), (byte)86, (byte) (-40), (byte)7, (byte)90}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-29), (byte) (-53), (byte) (-110), (byte)86, (byte) (-40), (byte)7, (byte)90}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1048.4F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-2154.0F);
      floatArray0[3] = (-714.17523F);
      floatArray0[4] = 0.0F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1048.4F, 1.0F, (-2154.0F), (-714.17523F), 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[5];
      ArrayUtils.shuffle(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 1235;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 1235.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-76);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)53, 45);
      assertEquals((-1), int0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)98, (byte)96, (byte)96, (byte)96, (byte) (-76)}, byteArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)96;
      longArray0[1] = (long) 1235;
      longArray0[2] = (long) 1235;
      longArray0[3] = (long) (byte)96;
      longArray0[4] = (long) (byte) (-76);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(5, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {96L, 1235L, 1235L, 96L, (-76L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 1235L;
      doubleArray0[2] = 2752.865307086;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1235L);
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0), 1235.0, 2752.865307086}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = 45.33991931959279;
      doubleArray0[2] = 2.144613615E9;
      doubleArray0[3] = 573.74149;
      doubleArray0[4] = 2034.285467;
      doubleArray0[5] = (-1.0);
      ArrayUtils.swap(doubleArray0, 221, 4187, (-1453));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.1, 45.33991931959279, 2.144613615E9, 573.74149, 2034.285467, (-1.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (-1523));
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      int int0 = 1269;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 1269, (-1047.0863086571887));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1269, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[10];
      longArray0[1] = (long) (-1);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[5];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[3] = 'R';
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'R';
      intArray0[1] = (-1);
      intArray0[2] = (int) 'R';
      intArray0[3] = (int) 'R';
      intArray0[5] = 320;
      intArray0[6] = (int) 'R';
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      long[] longArray0 = new long[4];
      double[] doubleArray0 = new double[5];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1517.478197799237);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Float float0 = new Float(336.78F);
      assertEquals(336.78F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = ArrayUtils.isSameType(integer0, float0);
      assertFalse(boolean1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short) (-2434);
      shortArray0[2] = (short)2256;
      shortArray0[3] = (short) (-3151);
      shortArray0[4] = (short) (-2775);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-653), (-1528));
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)121, (short) (-2434), (short)2256, (short) (-3151), (short) (-2775)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (-1));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1216.5375419);
      doubleArray0[1] = (double) (byte)68;
      doubleArray0[2] = (double) (byte)68;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = 1043L;
      longArray2[1] = (long) (byte)68;
      longArray2[2] = (long) (byte)68;
      longArray2[3] = 0L;
      longArray2[4] = (long) 1501;
      longArray2[5] = (-6305L);
      longArray2[6] = (long) 5;
      longArray2[7] = (-6305L);
      longArray2[8] = (-1926L);
      ArrayUtils.swap(longArray2, (-1), (-1235), 1456);
      assertEquals(9, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {1043L, 68L, 68L, 0L, 1501L, (-6305L), 5L, (-6305L), (-1926L)}, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1989;
      shortArray0[1] = (short)1989;
      shortArray0[2] = (short)1072;
      shortArray0[3] = (short)1072;
      shortArray0[4] = (short)1989;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1989);
      assertEquals(0, int0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1989, (short)1989, (short)1072, (short)1072, (short)1989}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2916.889F;
      floatArray0[1] = (-901.7326F);
      floatArray0[2] = (-773.0F);
      floatArray0[3] = 2144.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1248.142F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2916.889F, (-901.7326F), (-773.0F), 2144.0F, 0.0F, 0.0F, 1248.142F, 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1097L;
      longArray0[1] = 0L;
      longArray0[2] = (-2515L);
      longArray0[3] = 1043L;
      longArray0[4] = 0L;
      longArray0[5] = (-2341L);
      longArray0[6] = (-6305L);
      ArrayUtils.swap(longArray0, (-1235), 5, 1501);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-2341L), (-6305L), (-2515L), 1043L, 0L, 1097L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-681));
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-681);
      longArray0[3] = (long) 0;
      longArray0[6] = (long) (-681);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2140730554, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      ArrayUtils.swap(doubleArray0, 0, (-681));
      assertEquals(20, doubleArray0.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(20, doubleArray0.length);
      
      Character character0 = Character.valueOf('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      ArrayUtils.swap((Object[]) characterArray1, 0, 0, 2140730554);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-544));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -544, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 88L;
      longArray0[1] = 1L;
      longArray0[2] = (-1476L);
      longArray0[3] = (-123L);
      longArray0[4] = (-2146563560L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1476L), (-1));
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {88L, 1L, (-1476L), (-123L), (-2146563560L)}, longArray0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      intArray0[1] = 11;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-516);
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) (-523);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 11;
      doubleArray0[6] = (double) 11;
      doubleArray0[7] = (double) 9;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 11.0, (-516));
      assertEquals((-1), int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-516.0), 9.0, (-1.0), (-523.0), (-1.0), 11.0, 11.0, 9.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf((long[]) null, (long) (-523));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-3443));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3443, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-2305L));
      assertEquals((-2305L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-2305L));
      assertEquals((-2305L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) longArray0[0], (-2168));
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, 34);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 34, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      intArray0[1] = 11;
      intArray0[2] = 9;
      intArray0[3] = 6;
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertArrayEquals(new char[] {'!'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-516);
      longArray0[1] = (-516L);
      longArray0[2] = (long) (-516);
      longArray0[3] = (long) '!';
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-516L), (-516L), (-516L), 33L}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-516L), (-516L), (-516L), 33L}, longArray0);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertArrayEquals(new char[] {'!'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[0];
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean2);
      assertEquals(0, intArray0.length);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[1] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      boolean boolean4 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3105);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y*jM";
      stringArray0[1] = "H";
      stringArray0[2] = "H";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-80);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-80)}, byteArray0);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, 90);
      assertFalse(boolean1);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean2);
      assertEquals(0, intArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new int[] {}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[0] = boolean3;
      Boolean boolean4 = Boolean.valueOf("H");
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[1] = boolean4;
      Boolean boolean5 = new Boolean(true);
      assertTrue(boolean5);
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      
      booleanArray0[2] = boolean5;
      Boolean boolean6 = Boolean.valueOf("H");
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean3));
      assertNotNull(boolean6);
      
      booleanArray0[3] = boolean6;
      Boolean boolean7 = Boolean.valueOf((String) null);
      assertFalse(boolean7);
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean3));
      assertNotNull(boolean7);
      
      booleanArray0[4] = boolean7;
      Boolean boolean8 = Boolean.TRUE;
      assertTrue(boolean8);
      assertFalse(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean4));
      assertNotNull(boolean8);
      
      booleanArray0[5] = boolean8;
      Boolean boolean9 = Boolean.FALSE;
      assertFalse(boolean9);
      assertFalse(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean3));
      assertFalse(boolean9.equals((Object)boolean5));
      assertFalse(boolean9.equals((Object)boolean0));
      assertFalse(boolean9.equals((Object)boolean2));
      assertTrue(boolean9.equals((Object)boolean1));
      assertNotNull(boolean9);
      
      booleanArray0[6] = boolean9;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Byte byte0 = new Byte((byte)110);
      assertEquals((byte)110, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0, (-2420));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = '4';
      charArray0[2] = 'D';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'T');
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'D', '4', 'D'}, charArray0);
      assertArrayEquals(new char[] {'T', 'D', '4', 'D'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray1, '4');
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(5, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'D', '4', 'D'}, charArray0);
      assertArrayEquals(new char[] {'T', 'D', '4', 'D'}, charArray1);
      assertArrayEquals(new char[] {'4', 'T', 'D', '4', 'D'}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      short[] shortArray0 = new short[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Long long0 = new Long((-2374L));
      assertEquals((-2374L), (long)long0);
      assertNotNull(long0);
      
      Short short0 = new Short((short)110);
      assertEquals((short)110, (short)short0);
      assertNotNull(short0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) null, (Object) short0, (int) (short)0);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((long[]) null, 2);
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      String string0 = ArrayUtils.toString((Object) boolean1);
      assertEquals("true", string0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(string0);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short)1603);
      assertEquals((short)1603, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short short1 = (short)17;
      Short short2 = new Short((short)17);
      assertEquals((short)17, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short(short1);
      assertEquals((short)17, (short)short3);
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short((short)1603);
      assertEquals((short)1603, (short)short4);
      assertTrue(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short((short)14);
      assertEquals((short)14, (short)short5);
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertNotNull(short5);
      
      shortArray0[4] = short5;
      Short short6 = new Short((short) shortArray0[0]);
      assertEquals((short)1603, (short)short6);
      assertEquals(6, shortArray0.length);
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short5));
      assertTrue(short6.equals((Object)short4));
      assertTrue(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short1));
      assertNotNull(short6);
      
      shortArray0[5] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1603, (short)17, (short)17, (short)1603, (short)14, (short)1603}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = 'Q';
      charArray0[2] = 'E';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z', (-2685));
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'~', 'Q', 'E'}, charArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 3007L;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) '~';
      longArray0[3] = (long) 'Q';
      longArray0[4] = (long) '~';
      longArray0[5] = (long) (-2685);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {3007L, (-1L), 126L, 81L, 126L, (-2685L)}, longArray0);
      assertArrayEquals(new long[] {3007L, (-1L), 126L, 81L, 126L, (-2685L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'E';
      intArray0[1] = (int) 'Q';
      intArray0[2] = (int) 'Z';
      intArray0[3] = (-1);
      intArray0[4] = (int) 'Q';
      intArray0[5] = (int) 'E';
      intArray0[6] = (int) '~';
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1);
      assertEquals(7, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {69, 81, 90, (-1), 81, 69, 126}, intArray0);
      
      ArrayUtils.shift(longArray0, 69);
      assertEquals(6, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {81L, 126L, (-2685L), 3007L, (-1L), 126L}, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-47);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-47);
      ArrayUtils.swap(shortArray0, (int) (short) (-1), (-980), (-675));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-47), (short) (-1), (short) (-1), (short) (-47)}, shortArray0);
      
      int int0 = (-3740);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3740), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3740, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-47);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-68);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-2230);
      shortArray0[7] = (short)476;
      ArrayUtils.swap(shortArray0, (int) (short)476, 10, (-2305));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-47), (short) (-1), (short) (-1), (short) (-1), (short) (-68), (short) (-1), (short) (-2230), (short)476}, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)67;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)9;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-1), byteArray0, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)1779;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)1779}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)1779;
      doubleArray0[1] = (double) (short)1779;
      doubleArray0[2] = (double) (short)1779;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (short)1779;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 938.1, (double) (short)1779);
      assertEquals(7, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet1.toString());
      assertEquals(7, bitSet1.length());
      assertEquals(7, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {1779.0, 1779.0, 1779.0, 0.0, 0.0, 0.0, 1779.0}, doubleArray0, 0.01);
      assertNotSame(bitSet1, bitSet0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)1779;
      BitSet bitSet2 = ArrayUtils.indexesOf(intArray0, 2629, 108);
      assertEquals(0, bitSet2.length());
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertTrue(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertEquals(1, intArray0.length);
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertNotNull(bitSet2);
      assertArrayEquals(new int[] {1779}, intArray0);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 1921, 1921, (-2145718405));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1806.0);
      doubleArray0[1] = (double) (-2145718405);
      doubleArray0[2] = (double) (-2145718405);
      doubleArray0[3] = (double) 'M';
      doubleArray0[4] = (double) 'M';
      doubleArray0[5] = 99.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1806.0), 1921, (double) (-2145718405));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1806.0), (-2.145718405E9), (-2.145718405E9), 77.0, 77.0, 99.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '?');
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) '?';
      longArray0[1] = (long) '?';
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean1);
      assertEquals(2, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 63L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(8, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, true}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 0L, 351);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(bitSet1, bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 157L);
      assertEquals((-1), int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 63L}, longArray0);
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 157L;
      longArray1[1] = 157L;
      int int1 = ArrayUtils.indexOf(longArray1, (long) 351);
      assertEquals((-1), int1);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {157L, 157L}, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)4056);
      assertEquals((short)4056, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-1459));
      assertEquals((short) (-1459), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-3409.164F), (-1));
      assertEquals((-1), int0);
      assertEquals(4, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'n');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'n'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)shortArray0[0];
      ArrayUtils.shift(intArray0, 37, (-42), 4056);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {4056}, intArray0);
      
      ArrayUtils.reverse((Object[]) shortArray0);
      assertEquals(3, shortArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertEquals((-1), int1);
      assertEquals(1, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {4056}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3561);
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3561), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3561), (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.reverse((Object[]) byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-3561));
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-3561), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.swap(booleanArray0, (-1251), 34);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 88L;
      longArray0[1] = 1L;
      longArray0[2] = (-1476L);
      longArray0[3] = (-123L);
      ArrayUtils.swap((float[]) null, 43, Integer.MAX_VALUE);
      int[] intArray0 = new int[1];
      intArray0[0] = 43;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-36));
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {43}, intArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-1476L);
      objectArray0[1] = (Object) 43;
      objectArray0[2] = (Object) (-123L);
      objectArray0[3] = (Object) (-123L);
      objectArray0[4] = (Object) (-1476L);
      objectArray0[5] = (Object) (-1476L);
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean1);
      assertEquals(6, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-33);
      shortArray0[1] = (short) (byte) (-33);
      shortArray0[2] = (short) (byte) (-33);
      shortArray0[3] = (short) (byte) (-33);
      shortArray0[4] = (short)421;
      shortArray0[5] = (short) (byte) (-33);
      shortArray0[6] = (short) (byte) (-33);
      ArrayUtils.swap(shortArray0, 17, 0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-33), (short) (-33), (short) (-33), (short) (-33), (short)421, (short) (-33), (short) (-33)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)59;
      Float float0 = new Float((float) (short) (-47));
      assertEquals((-47.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-62));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)59}, byteArray0);
      
      Short short0 = new Short((byte) (-60));
      assertEquals((short) (-60), (short)short0);
      assertNotNull(short0);
      
      ArrayUtils.reverse(byteArray0, (int) (byte) (-62), 12);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)59}, byteArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-47);
      floatArray0[1] = (float) (short) (-47);
      floatArray0[2] = (float) (short) (-47);
      ArrayUtils.reverse(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-47.0F), (-47.0F), (-47.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-47.0F), (-47.0F), (-47.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = (-3489);
      intArray0[3] = 749;
      intArray0[4] = 1072;
      Short short0 = new Short((short) (-145));
      assertEquals((short) (-145), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)502);
      assertEquals((short)502, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)233);
      assertEquals((short)233, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short1;
      shortArray0[1] = short2;
      Short short3 = new Short((short)1);
      assertEquals((short)1, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      shortArray0[3] = short0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1072, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)117;
      ArrayUtils.reverse(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)117, (byte)117, (byte)70, (byte) (-1)}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)117, (byte)117, (byte)70, (byte) (-1)}, byteArray0);
      
      Short short0 = new Short((byte)65);
      assertEquals((short)65, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)16);
      assertEquals((short)16, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)1956);
      assertEquals((short)1956, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short short3 = new Short((byte) (-1));
      assertEquals((short) (-1), (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      
      Short short4 = new Short((short)6);
      assertEquals((short)6, (short)short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      
      Short[] shortArray0 = new Short[4];
      shortArray0[0] = short2;
      shortArray0[1] = short2;
      shortArray0[2] = short2;
      shortArray0[3] = short1;
      int[] intArray0 = new int[0];
      Short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short)6;
      intArray1[1] = (int) (byte)70;
      intArray1[2] = (int) (short)233;
      intArray1[3] = (-944);
      intArray1[4] = (int) (byte) (-1);
      intArray1[5] = (int) (byte) (-1);
      int[] intArray2 = ArrayUtils.removeAllOccurences(intArray1, (-98));
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {6, 70, 233, (-944), (-1), (-1)}, intArray1);
      assertArrayEquals(new int[] {6, 70, 233, (-944), (-1), (-1)}, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1160.3566F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (-2753.7754F);
      ArrayUtils.swap(floatArray0, 43, 43);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1160.3566F, Float.NaN, (-2753.7754F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 43);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)117;
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-1), (byte)65, (byte)70, (byte) (-22), (byte) (-33)}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-1), (byte)65, (byte)70, (byte) (-22), (byte) (-33)}, byteArray0);
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((short)506);
      assertEquals((short)506, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte) (-22));
      assertEquals((short) (-22), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((byte)117);
      assertEquals((short)117, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)1432);
      assertEquals((short)1432, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)233);
      assertEquals((short)233, (short)short4);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3534);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)272;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3534), (short)0, (short)0, (short)272, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)272;
      doubleArray0[1] = (double) (short) (-3534);
      doubleArray0[2] = (double) (short) (-3534);
      doubleArray0[3] = (double) (short) (-3534);
      doubleArray0[4] = (double) (short) (-3534);
      doubleArray0[5] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-403.516120065), (int) (short)0, 1.0);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {272.0, (-3534.0), (-3534.0), (-3534.0), (-3534.0), 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-2054);
      floatArray0[1] = (float) (short) (-3534);
      floatArray0[2] = (float) (short)272;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)272;
      floatArray0[5] = (float) (short) (-3534);
      floatArray0[6] = (float) (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.doubles((long) (-1), (double) (short) (-1028), 89.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)5);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-27), (int) (byte) (-1));
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (byte)5;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1082));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1082)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)5);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-27), (int) (byte) (-1));
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted((Object[]) floatArray0, comparator0);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.swap((Object[]) floatArray0, 3397, 102, (int) (byte)9);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)5;
      shortArray0[1] = (short)18;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1085));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1085)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = '6';
      charArray0[2] = '?';
      charArray0[3] = ')';
      charArray0[4] = 'L';
      charArray0[5] = '2';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'L';
      doubleArray0[1] = (double) ')';
      doubleArray0[2] = 2229.2209853282297;
      doubleArray0[3] = 2229.2209853282297;
      doubleArray0[4] = (double) ')';
      doubleArray0[5] = (double) '?';
      doubleArray0[6] = (double) '?';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-44.25291323576889));
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {76.0, 41.0, 2229.2209853282297, 2229.2209853282297, 41.0, 63.0, 63.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 1412.0F);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.addFirst((float[]) null, 1412.0F);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1412.0F}, floatArray1, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2229.2209853282297, 63.0);
      assertEquals("{2, 3}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {76.0, 41.0, 2229.2209853282297, 2229.2209853282297, 41.0, 63.0, 63.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(673.87);
      assertEquals(673.87, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-4333.8965F);
      floatArray0[2] = 1977.5635F;
      floatArray0[3] = (-4690.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1673.1F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, (-4333.8965F), 1977.5635F, (-4690.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1673.1F, 1.0F, (-4333.8965F), 1977.5635F, (-4690.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)123;
      MockRandom mockRandom0 = new MockRandom((byte) (-4));
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) (byte)123);
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-4)}, byteArray0);
      
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf('9');
      assertEquals('9', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('9');
      assertEquals('9', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('9');
      assertEquals('9', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('M');
      assertEquals('M', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'M';
      doubleArray0[1] = (double) (byte) (-4);
      doubleArray0[2] = (double) '9';
      doubleArray0[3] = (double) (byte)123;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (byte)123;
      doubleArray0[6] = (double) (char)character3;
      doubleArray0[7] = (double) (byte) (-4);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(4, int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {77.0, (-4.0), 57.0, 123.0, 0.0, 123.0, 77.0, (-4.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-164.9F));
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.addFirst((float[]) null, (float) (byte)123);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {123.0F}, floatArray1, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-4), (-3415.6));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {77.0, (-4.0), 57.0, 123.0, 0.0, 123.0, 77.0, (-4.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) (-533));
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-533L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      Short short0 = new Short((short) (-76));
      assertEquals((short) (-76), (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (-3409.164F), (-516));
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ArrayUtils.shift(intArray0, (-516), (-516), (-540));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-516), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-516);
      objectArray0[1] = (Object) short0;
      objectArray0[2] = (Object) (-516);
      objectArray0[3] = (Object) (-516);
      objectArray0[5] = (Object) short0;
      objectArray0[6] = (Object) (-516);
      objectArray0[7] = (Object) (-516);
      objectArray0[8] = (Object) short0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertEquals((-1), int1);
      assertEquals(8, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {(-516), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) short0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertEquals(1, int0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.indexOf(charArray0, ')');
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1;
      floatArray0[0] = (float) 1;
      floatArray0[3] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) ')';
      ArrayUtils.shift(floatArray0, (-1513));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 41.0F, 1.0F}, floatArray0, 0.01F);
      
      int int2 = ArrayUtils.indexOf(charArray0, '<', (-1513));
      assertEquals((-1), int2);
      assertEquals(0, charArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)68;
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 918);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3561);
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 56;
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) 56;
      floatArray0[3] = (float) ')';
      floatArray0[4] = (float) ')';
      floatArray0[5] = (float) 0;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      Character character0 = new Character('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3143;
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = '\"';
      ArrayUtils.shift(charArray0, 0, (int) (short)3143, 1921);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\"', '?', '?', '?', '?', '?'}, charArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '?';
      floatArray0[1] = (float) '?';
      floatArray0[2] = (float) 1921;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1194.1006F), 0);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {63.0F, 63.0F, 1921.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertEquals(0, int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-101);
      ArrayUtils.reverse(byteArray0, 1517, 55);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-42), (byte) (-101)}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-101);
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-101.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'T', 'T'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-101.0F)}, floatArray0, 0.01F);
      
      Float float0 = new Float((double) (byte)3);
      assertEquals(3.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) float0, (-1932735283));
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertArrayEquals(new char[] {'T', 'T'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1932735283);
      intArray0[1] = (int) (byte)3;
      intArray0[2] = (-1932735283);
      intArray0[3] = (-1932735283);
      intArray0[4] = 413;
      intArray0[5] = (int) 'T';
      intArray0[6] = (int) 'T';
      intArray0[7] = (-1932735283);
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1);
      assertEquals(8, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-1932735283), 3, (-1932735283), (-1932735283), 413, 84, 84, (-1932735283)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 84);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {(-101.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.0;
      doubleArray0[3] = 1.0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'D';
      charArray0[2] = 's';
      charArray0[3] = '0';
      charArray0[4] = 'w';
      charArray0[5] = 'S';
      ArrayUtils.swap(charArray0, 51, (-76), (-605));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'d', 'D', 's', '0', 'w', 'S'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 649;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 649;
      doubleArray0[1] = (double) 649;
      doubleArray0[2] = (double) 649;
      doubleArray0[4] = (double) 649L;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 0.0, 649.0}, doubleArray2, 0.01);
      assertSame(doubleArray0, doubleArray2);
      assertSame(doubleArray2, doubleArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3769;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1229);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)3769;
      shortArray0[5] = (short) (-2962);
      shortArray0[6] = (short) (-1229);
      shortArray0[7] = (short) (-2962);
      shortArray0[8] = (short) (-1229);
      ArrayUtils.shift(shortArray0, (-1494));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)3769, (short)0, (short) (-1229), (short)0, (short)3769, (short) (-2962), (short) (-1229), (short) (-2962), (short) (-1229)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.swap(booleanArray0, (int) (short)3769, 114, 2144612966);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)3769, (short)0, (short) (-1229), (short)0, (short)3769, (short) (-2962), (short) (-1229), (short) (-2962), (short) (-1229)}, shortArray0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 114);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 649L}, longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)3769;
      intArray0[1] = 2144612966;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3769, 2144612966}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'q';
      charArray0[1] = 'P';
      charArray0[2] = 'Y';
      charArray0[3] = 'A';
      charArray0[4] = '~';
      charArray0[5] = 'D';
      charArray0[6] = 'L';
      charArray0[7] = 'S';
      charArray0[8] = 'w';
      ArrayUtils.swap(charArray0, (int) (short) (-2962), 2445, (-76));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'q', 'P', 'Y', 'A', '~', 'D', 'L', 'S', 'w'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2916.889F;
      floatArray0[1] = (-909.979F);
      floatArray0[2] = (-773.0F);
      floatArray0[3] = 2144.0F;
      floatArray0[4] = (-1663.1F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1248.142F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2916.889F, (-909.979F), (-773.0F), 2144.0F, (-1663.1F), 0.0F, 1248.142F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)3;
      ArrayUtils.reverse(byteArray0, 1517, 55);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-42), (byte)3}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)3;
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {3.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte)3, (int) (byte) (-42));
      assertEquals(0, int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {3.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-5125));
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Long long0 = new Long(1517);
      assertEquals(1517L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[19];
      floatArray0[0] = (float) (long)long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte) (-42));
      assertEquals(19, longArray0.length);
      assertEquals(19, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-47);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-68);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)68;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)68, (byte)58, (byte)58, (byte)68}, byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)58, (byte)58, (byte)68}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (short) (-68);
      doubleArray0[2] = (double) (short) (-47);
      doubleArray0[3] = (-1708.5640563166144);
      doubleArray0[4] = (double) (short) (-68);
      doubleArray0[5] = 10.0;
      doubleArray0[6] = (double) (byte)58;
      doubleArray0[7] = (double) (short) (-1);
      doubleArray0[8] = (double) (byte)58;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1216.5375419), 2753);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-68.0), (-47.0), (-1708.5640563166144), (-68.0), 10.0, 58.0, (-1.0), 58.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-68);
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (byte)58;
      intArray0[3] = (int) (short) (-47);
      intArray0[4] = (int) (short) (-1);
      intArray0[5] = (int) (short) (-1);
      intArray0[6] = 2753;
      intArray0[7] = (int) (short) (-68);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2753, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 14L, 70);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 0);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      
      ArrayUtils.reverse((short[]) null, 70, (-1));
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int[] intArray0 = new int[5];
      intArray0[0] = 70;
      intArray0[1] = (-1);
      intArray0[2] = 70;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 70, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      Character character0 = Character.valueOf('J');
      assertEquals('J', (char)character0);
      assertNotNull(character0);
      
      ArrayUtils.hashCode((Object) character0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1888);
      doubleArray0[1] = (double) (-777);
      ArrayUtils.reverse(doubleArray0, (-1888), 1045);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-777.0), (-1888.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 457.5011F;
      floatArray0[1] = (float) 1045;
      floatArray0[2] = 457.5011F;
      floatArray0[3] = (float) (-777);
      floatArray0[4] = (float) 'J';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1100.0F);
      assertEquals((-1), int0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {457.5011F, 1045.0F, 457.5011F, (-777.0F), 74.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 0, 0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)122, (byte) (-87), (byte) (-84), (byte) (-87), (byte) (-80), (byte)0}, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-87);
      intArray0[1] = (int) (byte) (-87);
      intArray0[4] = (int) (byte) (-87);
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte) (-87);
      intArray0[7] = 0;
      intArray0[8] = 0;
      boolean boolean1 = ArrayUtils.contains(intArray0, (-87));
      assertTrue(boolean1);
      assertEquals(9, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-87), (-87), 0, 0, (-87), 0, (-87), 0, 0}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean2);
      assertEquals(9, intArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {(-87), (-87), 0, 0, (-87), 0, (-87), 0, 0}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.reverse((short[]) null);
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-461L));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (-1.0F);
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1989;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 0.0F);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1989.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1989.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)1426;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1426L}, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)1426;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (int) (short)1426;
      intArray0[4] = 1;
      intArray0[5] = (int) (short)1426;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short)1989;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertEquals(1, intArray1.length);
      assertEquals(6, intArray2.length);
      assertEquals(6, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {1989}, intArray1);
      assertArrayEquals(new int[] {1426, 1, 1, 1426, 1, 1426}, intArray2);
      assertArrayEquals(new int[] {1426, 1, 1, 1426, 1, 1426}, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-1018.0));
      assertEquals((-1018.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      MutableInt mutableInt0 = new MutableInt(63);
      assertEquals(63, (int)mutableInt0.getValue());
      assertEquals((short)63, mutableInt0.shortValue());
      assertEquals(63, (int)mutableInt0.toInteger());
      assertEquals((byte)63, mutableInt0.byteValue());
      assertEquals(63.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(63, mutableInt0.intValue());
      assertEquals("63", mutableInt0.toString());
      assertEquals(63.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(63L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = ArrayUtils.get((MutableInt[]) null, 63);
      assertNull(mutableInt1);
      
      Integer integer0 = new Integer(63);
      assertEquals(63, (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) doubleArray0, (Object) integer0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(9, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(9, doubleArray0.length);
      assertNull(object0);
      
      int int0 = ArrayUtils.indexOf((Object[]) doubleArray0, (Object) null, 63);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 128;
      intArray0[1] = 128;
      intArray0[2] = 128;
      intArray0[3] = 128;
      ArrayUtils.reverse((float[]) null, 128, (-4065));
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 128;
      intArray0[1] = 128;
      intArray0[2] = 128;
      intArray0[3] = 128;
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 476;
      intArray0[2] = 0;
      intArray0[3] = 2377;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 476, 0, 2377, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)435;
      shortArray0[1] = (short)38;
      shortArray0[2] = (short) (-3378);
      shortArray0[3] = (short)952;
      shortArray0[4] = (short)3989;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)27334;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)435);
      assertEquals(0, int0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)435, (short)38, (short) (-3378), (short)952, (short)3989, (short)1, (short)27334}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 476, 0, 2377, 0}, intArray0);
      assertNotSame(intArray0, intArray1);
      
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 476, 0, 2377, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, (-939));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)74;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)47, (byte)11, (byte)108, (byte)44, (byte)74}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      Double double0 = new Double(70.0);
      assertEquals(70.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayUtils.hashCode((Object) double0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) double0;
      Object object0 = ArrayUtils.get(objectArray0, 1847);
      assertEquals(7, objectArray0.length);
      assertNull(object0);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) double0;
      objectArray0[3] = (Object) double0;
      objectArray0[4] = (Object) double0;
      objectArray0[5] = (Object) double0;
      objectArray0[6] = (Object) double0;
      Object object1 = ArrayUtils.get(objectArray0, 1847);
      assertEquals(7, objectArray0.length);
      assertNull(object1);
      
      Character character0 = Character.valueOf('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) character0);
      assertFalse(boolean0);
      assertEquals(7, objectArray0.length);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (-394), (-2412));
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1847, 46);
      assertEquals(0, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      charArray0[1] = 'G';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 43, 3);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'}', 'G'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, 'G');
      assertTrue(boolean1);
      assertEquals(2, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'}', 'G'}, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)0;
      double[] doubleArray0 = new double[35];
      doubleArray0[0] = (double) (short)0;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[0];
      Double double0 = new Double((short)2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) double0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, objectArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (short)0);
      assertEquals(35, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, (double) (-1));
      assertFalse(boolean0);
      assertEquals(35, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertEquals(35, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = ';';
      charArray0[2] = '4';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'l', ';', '4', 'l', ';', '4'}, charArray1);
      assertArrayEquals(new char[] {'l', ';', '4'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      Short short0 = new Short((short) (-4161));
      assertEquals((short) (-4161), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-4161));
      assertEquals((short) (-4161), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      short short2 = (short)7;
      Short short3 = new Short((short)7);
      assertEquals((short)7, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertNotNull(short3);
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short0;
      shortArray0[1] = short1;
      shortArray0[2] = short3;
      shortArray0[3] = short3;
      shortArray0[4] = short3;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4161), (short) (-4161), (short)7, (short)7, (short)7, (short) (-4161), (short) (-4161), (short) (-4161)}, shortArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) short2;
      doubleArray0[1] = (-166.539947);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short) (-4161));
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {7.0, (-166.539947)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = '/';
      charArray0[2] = '?';
      charArray0[3] = '1';
      charArray0[4] = '6';
      charArray0[5] = 'f';
      charArray0[6] = '%';
      charArray0[7] = '|';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'F');
      assertFalse(boolean1);
      assertEquals(8, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'W', '/', '?', '1', '6', 'f', '%', '|'}, charArray0);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short) (-876));
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray2.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-4161), (short) (-4161), (short)7, (short)7, (short)7, (short) (-4161), (short) (-4161), (short) (-4161)}, shortArray2);
      assertArrayEquals(new short[] {(short) (-4161), (short) (-4161), (short)7, (short)7, (short)7, (short) (-4161), (short) (-4161), (short) (-4161)}, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      ArrayUtils.shift((short[]) null, 96);
      int int0 = 1;
      int int1 = 799;
      ArrayUtils.swap(booleanArray0, 1, (-860), 799);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (-1708.5640563166144);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1708.5640563166144)}, doubleArray0, 0.01);
      
      Boolean[] booleanArray1 = new Boolean[5];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) true;
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray1[3] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray1[4] = boolean2;
      int int2 = 11;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray1, 11, (Boolean) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      int int0 = (-1);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (-1));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)68;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      short short0 = (short)0;
      short short1 = (short)860;
      short short2 = (short)3496;
      int int1 = 43;
      ArrayUtils.shift((short[]) null, 43);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray1, (int) (short)3496, 3350L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3496, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'j');
      assertNull(charArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'j';
      longArray0[1] = (long) 'j';
      longArray0[2] = (long) 'j';
      longArray0[3] = (long) 'j';
      longArray0[4] = (long) 'j';
      longArray0[5] = (long) 'j';
      longArray0[6] = (long) 'j';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Character character0 = new Character('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(character0, "Y~jwMpB PD2HNPkO");
      assertNotNull(abstractMap_SimpleEntry0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      Character character1 = new Character('K');
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(character1, object0);
      assertTrue(character1.equals((Object)character0));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleEntry<Object, Object>[] abstractMap_SimpleEntryArray0 = ArrayUtils.toArray((AbstractMap.SimpleEntry<Object, Object>[]) null);
      assertNull(abstractMap_SimpleEntryArray0);
      
      char[] charArray1 = ArrayUtils.clone((char[]) null);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) (byte)0);
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Character[] characterArray0 = new Character[5];
      char char0 = '9';
      Character character0 = Character.valueOf('9');
      assertEquals('9', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = (Character) char0;
      Character character1 = Character.valueOf('9');
      assertEquals('9', (char)character1);
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      characterArray0[3] = (Character) char0;
      characterArray0[4] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'9', '9', '9', '9', '9'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)123;
      MockRandom mockRandom0 = new MockRandom((byte) (-4));
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) (byte)123);
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-4)}, byteArray0);
      
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf('9');
      assertEquals('9', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('9');
      assertEquals('9', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('9');
      assertEquals('9', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('M');
      assertEquals('M', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('9');
      assertEquals('9', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character1));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'9', '9', '9', 'M', '9'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3105);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y*jM";
      stringArray0[1] = "H";
      stringArray0[2] = "H";
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 3105;
      floatArray0[2] = Float.NaN;
      MockRandom mockRandom0 = new MockRandom(1127L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      booleanArray0[3] = false;
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 3105;
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {3105L}, longArray0);
      assertArrayEquals(new long[] {3105L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      MockRandom mockRandom0 = new MockRandom(2561L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2561L;
      floatArray0[1] = (float) 2561L;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2561.0F, 2561.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 1;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 2750.22476);
      assertEquals(0, int1);
      assertEquals(1, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      intArray0[2] = 9;
      int int0 = 6;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-516);
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) (-516);
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = (double) (-516);
      doubleArray0[6] = (double) 11;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1292.652), 1507);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-516.0), 11.0, 9.0, (-516.0), 9.0, (-516.0), 11.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (double) 6);
      assertEquals((-1), int1);
      assertEquals(7, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-516.0), 11.0, 9.0, (-516.0), 9.0, (-516.0), 11.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom((-5364L));
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) (-516);
      objectArray0[2] = (Object) (-516.0);
      // Undeclared exception!
      try { 
        mockRandom0.longs((-5364L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)123;
      MockRandom mockRandom0 = new MockRandom((byte) (-4));
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) (byte)123);
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-4)}, byteArray0);
      
      Character character0 = Character.valueOf('9');
      assertEquals('9', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('9');
      assertEquals('9', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('9');
      assertEquals('9', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character character3 = new Character('9');
      assertEquals('9', (char)character3);
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertNotNull(character3);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '9';
      doubleArray0[1] = (double) (byte) (-4);
      doubleArray0[3] = (double) (byte)123;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, (int) (byte) (-4));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {57.0, (-4.0), 0.0, 123.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3828.7471859, 2579.5);
      assertEquals((-1), int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {57.0, (-4.0), 0.0, 123.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'Q';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-110);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, (-516));
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-84), (byte) (-110)}, byteArray0);
      
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) null, (Object) mutableInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      
      int int0 = 608;
      int int1 = 4095;
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 4095, 608);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 4095;
      int int2 = 453;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 453);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {4095}, intArray0);
      assertArrayEquals(new int[] {4095}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int3 = 2;
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(object0, (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-61);
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte) (-61);
      ArrayUtils.shift(intArray0, (int) (byte)0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-61)}, intArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)8;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 8.0);
      assertEquals(0, int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 0.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-87);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte) (-87);
      ArrayUtils.shift(intArray0, (int) (byte)0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, (-87)}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)122;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 122.0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {122.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 0.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1665));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) 0);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      ArrayUtils.shift(floatArray0, 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'O');
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, int1);
      assertEquals(1, booleanArray0.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 649;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 649;
      doubleArray0[1] = (double) 649L;
      doubleArray0[2] = (double) 649L;
      doubleArray0[3] = (double) 649;
      doubleArray0[4] = (double) 649L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 649.0);
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {649.0, 649.0, 649.0, 649.0, 649.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 649;
      int int0 = 9;
      intArray0[1] = 9;
      intArray0[2] = 649;
      intArray0[3] = 649;
      intArray0[4] = 649;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 649, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, true}, booleanArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2411;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1333);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2411}, intArray0);
      assertArrayEquals(new int[] {2411}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "yUHYO]-#um:E@uK=R";
      stringArray0[1] = "`;%(=#{|Pw}YK";
      stringArray0[2] = "char";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(5, stringArray1.length);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      
      int int0 = ArrayUtils.indexOf((Object[]) stringArray1, (Object) "", 1333);
      assertEquals((-1), int0);
      assertEquals(5, stringArray1.length);
      assertEquals(5, stringArray0.length);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = (float) '\u0000';
      floatArray0[6] = (float) '\u0000';
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, (-185));
      assertFalse(boolean0);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 2536L;
      longArray0[1] = (-290L);
      longArray0[2] = (long) (-185);
      longArray0[3] = (long) (-185);
      longArray0[4] = (long) (-185);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-185), 78);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2536L, (-290L), (-185L), (-185L), (-185L)}, longArray0);
      assertArrayEquals(new long[] {2536L, (-290L), (-185L), (-185L), (-185L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-15L);
      long long0 = 1L;
      longArray0[2] = 1L;
      longArray0[3] = 555L;
      long long1 = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertEquals(6, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-15L), 1L, 555L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-15L), 1L, 555L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = 2;
      ArrayUtils.reverse((short[]) null, 654, 832);
      int int1 = (-3003);
      long[] longArray2 = ArrayUtils.subarray(longArray1, (-3003), 2);
      assertEquals(6, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, (-15L), 1L, 555L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-15L), 1L, 555L}, longArray1);
      assertArrayEquals(new long[] {(-15L), 1L}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = '}';
      char char0 = '4';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-3003), '4');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3003, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)123;
      Byte byte1 = new Byte((byte)123);
      assertEquals((byte)123, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)123, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)83);
      assertEquals((byte)83, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)123);
      assertEquals((byte)123, (byte)byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'Z';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'Z'}, charArray0);
      
      AbstractMap.SimpleEntry<Object, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 4);
      Integer integer0 = new Integer('f');
      assertEquals(102, (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float(29.0F);
      assertEquals(29.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(float0, "");
      assertNotNull(abstractMap_SimpleEntry0);
      
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) 'f';
      doubleArray0[1] = (double) 'F';
      doubleArray0[2] = (double) '\u0000';
      doubleArray0[3] = (double) 'f';
      doubleArray0[5] = (double) 'f';
      doubleArray0[6] = (double) 29.0F;
      doubleArray0[8] = (double) 'Z';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 29.0F, (int) 'Z');
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(13, doubleArray0.length);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 90.0, (double) 'Z');
      assertEquals(12, int0);
      assertEquals(13, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom('\u0000');
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) characterArray0, (Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'Z'}, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'F';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 70, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1031.92562230948);
      assertEquals(1031.92562230948, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      doubleArray0[5] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) doubleArray0[5];
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) doubleArray0[1];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(3, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'q';
      charArray0[2] = 'o';
      charArray0[3] = 'G';
      charArray0[4] = '~';
      charArray0[5] = ' ';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'H', 'q', 'o', 'G', '~', ' '}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      char char0 = '0';
      Character character0 = Character.valueOf('0');
      assertEquals('0', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      ArrayUtils.reverse((Object[]) characterArray0, (int) char0, (int) char0);
      assertEquals(6, characterArray0.length);
      assertSame(characterArray0, characterArray1);
      
      ArrayUtils.swap((Object[]) characterArray0, (int) char0, (int) char0, (-4380));
      assertEquals(6, characterArray0.length);
      assertSame(characterArray0, characterArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '0';
      intArray0[1] = (int) char0;
      intArray0[2] = (int) char0;
      intArray0[3] = (int) '0';
      intArray0[4] = (-4380);
      intArray0[5] = (-544);
      intArray0[6] = (int) char0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-1082));
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1082)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)42);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)5, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)5, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-1), (int) (byte) (-1));
      assertEquals(2, int0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)9, (byte)5, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)5, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)9, (byte)5, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)5, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      MockRandom mockRandom0 = new MockRandom((byte)9);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) floatArray0, (Random) mockRandom0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      intArray0[1] = 11;
      intArray0[2] = 9;
      intArray0[3] = 6;
      intArray0[4] = (-693);
      ArrayUtils.shift(intArray0, 7);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {11, 9, 6, (-693), 0, 0, 0, (-516)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)122;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-87);
      longArray0[1] = (long) (byte)122;
      longArray0[2] = (long) (byte) (-87);
      longArray0[3] = (long) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte) (-87));
      assertEquals(2, int0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-87L), 122L, (-87L), 0L}, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ':';
      charArray0[1] = '/';
      ArrayUtils.reverse(charArray0, 10, (int) (byte) (-87));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {':', '/'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("long");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("long");
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf(false);
      assertFalse(boolean5);
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertTrue(boolean6);
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true}, booleanArray1));
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)2);
      assertNull(shortArray0);
      
      Boolean boolean7 = Boolean.TRUE;
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean5));
      assertNotNull(boolean7);
      
      Boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray0, boolean1);
      assertEquals(7, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(boolean1.equals((Object)boolean7));
      assertFalse(boolean1.equals((Object)boolean6));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      assertEquals(6, (int)mutableInt0.toInteger());
      assertEquals(6, (int)mutableInt0.getValue());
      assertEquals(6, mutableInt0.intValue());
      assertEquals((short)6, mutableInt0.shortValue());
      assertEquals(6.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("6", mutableInt0.toString());
      assertEquals(6.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(6L, mutableInt0.longValue());
      assertEquals((byte)6, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndAdd((int) (byte)6);
      assertEquals(6, int0);
      assertEquals(12, mutableInt0.intValue());
      assertEquals(12.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("12", mutableInt0.toString());
      assertEquals(12.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)12, mutableInt0.byteValue());
      assertEquals(12, (int)mutableInt0.toInteger());
      assertEquals((short)12, mutableInt0.shortValue());
      assertEquals(12, (int)mutableInt0.getValue());
      assertEquals(12L, mutableInt0.longValue());
      
      boolean boolean8 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean8);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(mutableIntArray0, (int) 2, mutableInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-87);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte) (-87);
      ArrayUtils.shift(intArray0, (int) (byte)0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, (-87)}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)122, (byte) (-87), (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)4056);
      assertEquals((short)4056, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-1459));
      assertEquals((short) (-1459), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)shortArray0[1];
      longArray0[1] = (long) (short) (-1459);
      longArray0[2] = (long) 0;
      longArray0[3] = 2147483647L;
      longArray0[4] = (-1L);
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (short)shortArray0[0];
      longArray0[8] = (long) (short)shortArray0[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1459L), (-1459L), 0L, 2147483647L, (-1L), 0L, 0L, 4056L, 4056L}, longArray1);
      assertArrayEquals(new long[] {(-1459L), (-1459L), 0L, 2147483647L, (-1L), 0L, 0L, 4056L, 4056L}, longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-3719);
      intArray0[2] = (int) (short) (-1459);
      intArray0[3] = 0;
      intArray0[4] = (int) (short) (-1459);
      intArray0[5] = (-1);
      intArray0[6] = 0;
      intArray0[7] = (-1);
      intArray0[8] = (int) (short)shortArray0[1];
      ArrayUtils.reverse(intArray0, (-1), 192);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1459), (-1), 0, (-1), (-1459), 0, (-1459), (-3719), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 5;
      intArray0[1] = 3940;
      intArray0[2] = (-1);
      intArray0[3] = 65536;
      intArray0[4] = (-2245);
      intArray0[5] = 45;
      intArray0[6] = (-1);
      intArray0[7] = (-62);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 3940, 215);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {5, 3940, (-1), 65536, (-2245), 45, (-1), (-62)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, true}, booleanArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2411;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1333);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2411}, intArray0);
      assertArrayEquals(new int[] {2411}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "yUHYO]-#um:E@uK=R";
      stringArray0[1] = "`;%(=#{|Pw}YK";
      stringArray0[2] = "char";
      stringArray0[3] = "";
      stringArray0[4] = "";
      int[] intArray2 = ArrayUtils.subarray(intArray0, (-863), 2144389291);
      assertEquals(1, intArray2.length);
      assertEquals(1, intArray0.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {2411}, intArray2);
      assertArrayEquals(new int[] {2411}, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = (-3489);
      intArray0[3] = 749;
      intArray0[4] = 1072;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-3489), (-3489));
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {8, 0, (-3489), 749, 1072, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 749;
      doubleArray0[2] = (double) (-3489);
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 749;
      doubleArray0[5] = (double) 1072;
      doubleArray0[6] = (double) (-2641);
      ArrayUtils.swap(doubleArray0, 8, (-1602));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 749.0, (-3489.0), 8.0, 749.0, 1072.0, (-2641.0)}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-2641.0), 1072.0, 749.0, 8.0, (-3489.0), 749.0, 0.0}, doubleArray0, 0.01);
      
      Character character0 = Character.valueOf('S');
      assertEquals('S', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 649;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 649;
      longArray1[1] = (long) 649;
      longArray1[2] = (long) 649;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1229);
      shortArray0[1] = (short) (-1229);
      shortArray0[2] = (short) (-1229);
      shortArray0[3] = (short) (-1229);
      ArrayUtils.shift(shortArray0, 96);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1229), (short) (-1229), (short) (-1229), (short) (-1229)}, shortArray0);
      
      ArrayUtils.swap(booleanArray0, (-842), (-860), 649);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      long[] longArray0 = new long[4];
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 0L;
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertSame(doubleArray0, doubleArray2);
      assertSame(doubleArray2, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.swap(booleanArray0, (int) (short)3769, (int) (short) (-2962), 2144612966);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (short)0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)42);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)5, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)5, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-1), (int) (byte) (-1));
      assertEquals(2, int0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)9, (byte)5, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)5, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)9, (byte)5, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)5, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0, (float) (byte) (-1));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertSame(floatArray2, floatArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)5;
      doubleArray0[1] = 2579.5;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      int int1 = ArrayUtils.indexOf(doubleArray0, 2.0);
      assertEquals(2, int1);
      assertEquals(4, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {5.0, 2579.5, 2.0, 2.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = 'f';
      charArray0[2] = 'F';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'F', 'f', 'F'}, charArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0, "=");
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      assertArrayEquals(new char[] {'F', 'f', 'F'}, charArray0);
      
      AbstractMap.SimpleEntry<Object, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 4);
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float(29.0F);
      assertEquals(29.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Float> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Float>(integer0, float0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      Float float1 = new Float(29.0F);
      assertEquals(29.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(float1, "");
      assertEquals((float)float1, (float)float0, 0.01F);
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 'F';
      doubleArray0[2] = (double) 'F';
      doubleArray0[3] = (double) 'f';
      doubleArray0[4] = (double) 'F';
      doubleArray0[5] = (double) 'f';
      doubleArray0[6] = (double) 29.0F;
      doubleArray0[7] = (double) 'f';
      doubleArray0[8] = (double) 'F';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 29.0F, 0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{6}", bitSet0.toString());
      assertEquals(9, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 70.0, 70.0, 102.0, 70.0, 102.0, 29.0, 102.0, 70.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 1L, 0);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(4, longArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertNotSame(bitSet1, bitSet0);
      
      longArray0[1] = (long) 'F';
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 'F';
      BitSet bitSet2 = ArrayUtils.indexesOf(longArray0, 0L, 0);
      assertEquals(3, bitSet2.length());
      assertEquals("{0, 2}", bitSet2.toString());
      assertEquals(2, bitSet2.cardinality());
      assertFalse(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertEquals(4, longArray0.length);
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertNotNull(bitSet2);
      assertArrayEquals(new long[] {0L, 70L, 0L, 70L}, longArray0);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      
      bitSet0.or(bitSet2);
      assertEquals("{0, 2, 6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(3, bitSet2.length());
      assertEquals("{0, 2}", bitSet2.toString());
      assertEquals(2, bitSet2.cardinality());
      assertFalse(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertEquals(4, longArray0.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(bitSet0.equals((Object)bitSet2));
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertArrayEquals(new long[] {0L, 70L, 0L, 70L}, longArray0);
      assertArrayEquals(new double[] {0.0, 70.0, 70.0, 102.0, 70.0, 102.0, 29.0, 102.0, 70.0}, doubleArray0, 0.01);
      assertNotSame(bitSet0, bitSet2);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) "=", bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<Object, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 5);
      AbstractMap.SimpleEntry<Object, Object>[] abstractMap_SimpleEntryArray1 = ArrayUtils.toArray(abstractMap_SimpleEntryArray0);
      assertEquals(5, abstractMap_SimpleEntryArray0.length);
      assertEquals(5, abstractMap_SimpleEntryArray1.length);
      assertNotNull(abstractMap_SimpleEntryArray1);
      assertSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = 'e';
      charArray0[2] = 'K';
      charArray0[3] = 'P';
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'K', 'e', 'K', 'P'}, charArray1);
      assertArrayEquals(new char[] {'K', 'e', 'K', 'P'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      char[] charArray0 = new char[8];
      boolean boolean0 = ArrayUtils.contains(charArray0, 'S');
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ArrayUtils.reverse((long[]) null, (int) 'E', (-24));
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameType(boolean1, boolean1);
      assertTrue(boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean2 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1333L), (-536));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 128;
      doubleArray0[1] = (double) 128;
      doubleArray0[2] = (double) 128;
      doubleArray0[3] = 563.9710804670232;
      doubleArray0[4] = (double) 128;
      doubleArray0[5] = (double) 128;
      doubleArray0[6] = (double) 128;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {128.0, 128.0, 563.9710804670232, 128.0, 128.0, 128.0, 128.0}, doubleArray0, 0.01);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = new Integer(12);
      assertEquals(12, (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float((-1415.730381));
      assertEquals((-1415.7303F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = ArrayUtils.isSameType(integer0, float0);
      assertFalse(boolean1);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {128.0, 128.0, 563.9710804670232, 128.0, 128.0, 128.0, 128.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1527L), 13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-1));
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (-2955.51981);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-2955.51981)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toArray((Long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = '3';
      charArray0[2] = 'A';
      charArray0[3] = 'S';
      charArray0[4] = 'E';
      charArray0[5] = '`';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'E');
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'S', '3', 'A', 'S', 'E', '`'}, charArray0);
      
      ArrayUtils.reverse((long[]) null, (-680), Integer.MAX_VALUE);
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1);
      assertEquals(6, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'S', '3', 'A', 'S', 'E', '`'}, charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '`';
      doubleArray0[1] = (-1278.891);
      doubleArray0[2] = 18.256872200666;
      doubleArray0[3] = (double) 'S';
      doubleArray0[4] = (double) 'E';
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1278.891), 18.256872200666, 83.0, 69.0, 96.0}, doubleArray0, 0.01);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean2);
      assertEquals(true, object0);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(object0.equals((Object)boolean1));
      assertTrue(object0.equals((Object)boolean0));
      assertNotNull(object0);
      
      boolean boolean3 = ArrayUtils.isSameType(object0, boolean2);
      assertTrue(boolean3);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(object0.equals((Object)boolean1));
      assertTrue(object0.equals((Object)boolean0));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(10, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1278.891), 18.256872200666, 83.0, 69.0, 96.0, (-1278.891), 18.256872200666, 83.0, 69.0, 96.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1278.891), 18.256872200666, 83.0, 69.0, 96.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 22L, (-1297));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = ArrayUtils.toString((Object) "java.lang.Integer");
      assertEquals("java.lang.Integer", string0);
      assertNotNull(string0);
      
      objectArray0[0] = (Object) "java.lang.Integer";
      objectArray0[1] = objectArray0[0];
      Character character0 = Character.valueOf('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.isSameType("java.lang.Integer", "java.lang.Integer");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)117;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)117, (-1401));
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)117}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)59;
      intArray0[1] = (-1082);
      intArray0[2] = (int) (byte)59;
      intArray0[0] = (int) (byte)59;
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = '=';
      charArray0[2] = '%';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 59, 1137);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\\', '=', '%'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = new char[1];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = '%';
      boolean boolean0 = ArrayUtils.contains(charArray2, '%');
      assertTrue(boolean0);
      assertEquals(1, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'%'}, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 631;
      longArray0[1] = (long) 631;
      longArray0[2] = (long) 631;
      longArray0[3] = (long) 631;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, 631);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, 631, 631, 1506);
      assertEquals(4, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {631L, 631L, 631L, 631L}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 631L;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) 1506;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {631.0, 2.0, 1506.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) 631L;
      floatArray0[2] = (float) 1506;
      floatArray0[3] = (float) (byte)2;
      floatArray0[4] = (float) 631L;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 631L);
      assertEquals(3, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F, 1506.0F, 2.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F, 631.0F, 1506.0F, 2.0F, 631.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3105);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y*jM";
      stringArray0[1] = "Y*jM";
      stringArray0[2] = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      stringArray0[3] = "";
      stringArray0[4] = "Index: ";
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = '>';
      charArray0[2] = '$';
      charArray0[3] = '5';
      charArray0[4] = '8';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'1', '>', '$', '5', '8'}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2386;
      shortArray0[1] = (short)1681;
      shortArray0[2] = (short) (-1459);
      shortArray0[3] = (short)21;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean1);
      assertEquals(4, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)2386, (short)1681, (short) (-1459), (short)21}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)10;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      Short short0 = new Short((short)10);
      assertEquals((short)10, (short)short0);
      assertNotNull(short0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)10;
      doubleArray0[1] = (double) (short)10;
      doubleArray0[2] = (double) (short)10;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) short0, 10.0);
      assertEquals(0, int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {10.0, 10.0, 10.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-3489L);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (short)short0;
      longArray0[3] = (long) (short)10;
      longArray0[4] = (long) (short)short0;
      longArray0[5] = (-4393L);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (short)short0;
      longArray0[8] = (long) (short)10;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-3489L), 0L, 10L, 10L, 10L, (-4393L), 0L, 10L, 10L}, longArray0);
      
      long[] longArray1 = ArrayUtils.remove(longArray0, 2);
      assertEquals(8, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-3489L), 0L, 10L, 10L, (-4393L), 0L, 10L, 10L}, longArray1);
      assertArrayEquals(new long[] {(-3489L), 0L, 10L, 10L, 10L, (-4393L), 0L, 10L, 10L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 66.0F;
      floatArray0[1] = 3433.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1027.0F);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {66.0F, 3433.0F, (-1.0F), 1.0F, (-1027.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
      
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)122;
      byteArray0[1] = (byte) (-87);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-87), (byte)0, (byte) (-84), (byte)0, (byte) (-80), (byte)0}, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-87);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte) (-84);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      boolean boolean1 = ArrayUtils.contains(intArray0, 0);
      assertTrue(boolean1);
      assertEquals(9, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-87), 0, (-84), 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean2);
      assertEquals(9, intArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new int[] {(-87), 0, (-84), 0, 0, 0, 0, 0, 0}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = new boolean[3];
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      ArrayUtils.swap(booleanArray2, 0, (-1459), (int) (byte)0);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray2));
      
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurences(booleanArray2, false);
      assertEquals(3, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = 122;
      Integer integer0 = new Integer(122);
      assertEquals(122, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals(122, (int)mutableInt0.getValue());
      assertEquals((byte)122, mutableInt0.byteValue());
      assertEquals(122, (int)mutableInt0.toInteger());
      assertEquals(122, mutableInt0.intValue());
      assertEquals((short)122, mutableInt0.shortValue());
      assertEquals(122.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("122", mutableInt0.toString());
      assertEquals(122L, mutableInt0.longValue());
      assertEquals(122.0, mutableInt0.doubleValue(), 0.01);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.getValue();
      assertEquals(122, (int)integer1);
      assertEquals(122, (int)mutableInt0.getValue());
      assertEquals((byte)122, mutableInt0.byteValue());
      assertEquals(122, (int)mutableInt0.toInteger());
      assertEquals(122, mutableInt0.intValue());
      assertEquals((short)122, mutableInt0.shortValue());
      assertEquals(122.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("122", mutableInt0.toString());
      assertEquals(122L, mutableInt0.longValue());
      assertEquals(122.0, mutableInt0.doubleValue(), 0.01);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-329));
      assertEquals((-329), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals(122, (int)integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      assertEquals((-329), (int)integer4);
      assertEquals(8, integerArray0.length);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-323));
      assertEquals((-323), (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      mutableInt0.add(1566);
      assertEquals(1688, (int)mutableInt0.toInteger());
      assertEquals((byte) (-104), mutableInt0.byteValue());
      assertEquals("1688", mutableInt0.toString());
      assertEquals((short)1688, mutableInt0.shortValue());
      assertEquals(1688, mutableInt0.intValue());
      assertEquals(1688.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1688L, mutableInt0.longValue());
      assertEquals(1688, (int)mutableInt0.getValue());
      assertEquals(1688.0, mutableInt0.doubleValue(), 0.01);
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer5));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer4));
      
      Integer integer6 = Integer.getInteger("org.apache.commons.lang3.ArraySorter");
      assertNull(integer6);
      
      integerArray0[6] = null;
      Integer integer7 = new Integer((-260));
      assertEquals((-260), (int)integer7);
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      AbstractMap.SimpleImmutableEntry<String, Byte>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeElements((AbstractMap.SimpleImmutableEntry<String, Byte>[]) null, (AbstractMap.SimpleImmutableEntry<String, Byte>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1087;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1087.0F}, floatArray0, 0.01F);
      
      Long long0 = new Long(1087);
      assertEquals(1087L, (long)long0);
      assertNotNull(long0);
      
      Object object0 = ArrayUtils.get((Object[]) null, 1087, (Object) long0);
      assertEquals(1087L, object0);
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 2);
      assertEquals((-1), int0);
      
      org.evosuite.runtime.Random.setNextRandom(1890);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'j');
      assertNull(charArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'j';
      longArray0[1] = (long) 'j';
      longArray0[2] = (long) 'j';
      longArray0[3] = (long) 'j';
      longArray0[4] = (long) 'j';
      longArray0[5] = (long) 'j';
      longArray0[6] = (long) 'j';
      longArray0[7] = (long) 'j';
      ArrayUtils.swap(longArray0, 0, 0, 36);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {106L, 106L, 106L, 106L, 106L, 106L, 106L, 106L}, longArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 106L;
      doubleArray0[1] = (double) 106L;
      doubleArray0[2] = (-1047.0863086571887);
      doubleArray0[3] = (double) 106L;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {106.0, 106.0, (-1047.0863086571887), 106.0}, doubleArray0, 0.01);
      
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 3);
      Class<Short> class0 = Short.class;
      classArray0[0] = class0;
      Class<Short> class1 = Short.class;
      classArray0[1] = class1;
      Class<Short> class2 = Short.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      assertNotNull(classArray1);
      
      AbstractMap.SimpleImmutableEntry<String, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeElement((AbstractMap.SimpleImmutableEntry<String, Integer>[]) null, (Object) class0);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
      assertSame(class0, class1);
      assertSame(class0, class2);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      int[] intArray0 = new int[4];
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'('}, charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = (float) '(';
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) '(';
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new float[] {0.0F, 40.0F, 0.0F, (-1.0F), (-1.0F), (-1.0F), 40.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {40.0F, 0.0F, (-1.0F), (-1.0F), (-1.0F), 40.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1971L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[5] = (long) '(';
      longArray0[6] = (long) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1971L, 0L, 0L, 0L, 0L, 40L, 0L}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1971L, 0L, 0L, 0L, 0L, 40L, 0L}, longArray0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0L);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 1971L);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)47);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)47;
      shortArray0[1] = (short)3338;
      shortArray0[2] = (short) (byte)47;
      shortArray0[3] = (short) (byte)47;
      shortArray0[4] = (short) (byte)47;
      shortArray0[5] = (short) (byte)47;
      shortArray0[6] = (short) (byte)47;
      shortArray0[7] = (short) (byte)47;
      shortArray0[8] = (short) (byte)47;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean1);
      assertEquals(9, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)47, (short)3338, (short)47, (short)47, (short)47, (short)47, (short)47, (short)47, (short)47}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-1), 1, (-1));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-24);
      ArrayUtils.swap(byteArray0, (-1494), (-160), 435);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)67, (byte)104, (byte) (-34), (byte) (-89), (byte) (-116), (byte) (-77), (byte) (-24)}, byteArray0);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'R');
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = new char[4];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'R';
      charArray2[1] = 'R';
      charArray2[2] = 'R';
      charArray2[3] = '9';
      MockRandom mockRandom0 = new MockRandom(5069L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray2, (Random) mockRandom0);
      assertEquals(4, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'R', 'R', '9', 'R'}, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(12, booleanArray0.length);
      
      long[] longArray0 = new long[10];
      longArray0[1] = (long) 1;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[5];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\u0000');
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom('e');
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(charArray1, (Random) mockRandom0);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      ArrayUtils.shift(longArray0, (-611), 512, (-1407));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.toPrimitive((Object) "java.lang.Integer");
      assertEquals("java.lang.Integer", object0);
      assertNotNull(object0);
      
      objectArray0[0] = (Object) "java.lang.Integer";
      Object object1 = ArrayUtils.get(objectArray0, 1847);
      assertEquals(2, objectArray0.length);
      assertNull(object1);
      
      objectArray0[1] = null;
      Character character0 = Character.valueOf('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) character0);
      assertFalse(boolean0);
      assertEquals(2, objectArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)117;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)117, (-1401));
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)117}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 512;
      ArrayUtils.shift(longArray0, 512, 512, (int) (short)0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {512L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      long[] longArray0 = new long[4];
      ArrayUtils.shift(longArray0, 1506, Integer.MAX_VALUE, 97);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 0L;
      Character character0 = new Character('6');
      assertEquals('6', (char)character0);
      assertNotNull(character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertEquals('6', object0);
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      Short short0 = new Short((short) (-3286));
      assertEquals((short) (-3286), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) short0);
      assertFalse(boolean0);
      assertEquals(4, objectArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 97;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (short) (-3286), 1488);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 97.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.contains(intArray0, 0);
      assertFalse(boolean1);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 128;
      intArray0[1] = 128;
      intArray0[2] = 128;
      intArray0[3] = 128;
      ArrayUtils.reverse((float[]) null, 128, (-4065));
      char[] charArray0 = new char[0];
      float[] floatArray0 = ArrayUtils.insert(128, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-1818));
      assertEquals((short) (-1818), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = Short.valueOf((short) shortArray0[0]);
      assertEquals((short) (-1818), (short)short1);
      assertEquals(6, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[1]);
      assertEquals((short) (-1818), (short)short2);
      assertEquals(6, shortArray0.length);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-670));
      assertEquals((short) (-670), (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-505));
      assertEquals((short) (-505), (short)short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) shortArray0[4]);
      assertEquals((short) (-505), (short)short5);
      assertEquals(6, shortArray0.length);
      assertFalse(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short[] shortArray1 = ArrayUtils.add(shortArray0, short1);
      assertEquals(7, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(short1.equals((Object)short4));
      assertTrue(short1.equals((Object)short2));
      assertFalse(short1.equals((Object)short3));
      assertTrue(short1.equals((Object)short0));
      assertFalse(short1.equals((Object)short5));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      ArrayUtils.reverse((byte[]) null, 128, 1717986918);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((float) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (-1));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(floatArray0, (-1));
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray1 = new float[1];
      floatArray1[0] = (float) floatArray0[0];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1621), floatArray1, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1621, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Character character0 = new Character('a');
      assertEquals('a', (char)character0);
      assertNotNull(character0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(1693, floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1693;
      doubleArray0[1] = (double) 'a';
      doubleArray0[2] = (double) 1693;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1693.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1693.0, 97.0, 1693.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {97.0, 1693.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      int[] intArray0 = new int[8];
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 0;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(0, object0);
      assertEquals(8, objectArray0.length);
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) 0;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(8, objectArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)801;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(10, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)96, (-2420));
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Byte byte0 = new Byte((byte)110);
      assertEquals((byte)110, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0, (-2420));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = '4';
      charArray0[2] = '(';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'T');
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'D', '4', '('}, charArray0);
      assertArrayEquals(new char[] {'T', 'D', '4', '('}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray1, '4');
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(5, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'D', '4', '('}, charArray0);
      assertArrayEquals(new char[] {'T', 'D', '4', '('}, charArray1);
      assertArrayEquals(new char[] {'4', 'T', 'D', '4', '('}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)1214);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = 'e';
      charArray0[2] = 'M';
      charArray0[3] = '|';
      charArray0[4] = 'J';
      charArray0[5] = 'l';
      charArray0[6] = 'W';
      char[] charArray1 = ArrayUtils.add(charArray0, 'M');
      assertEquals(8, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {']', 'e', 'M', '|', 'J', 'l', 'W', 'M'}, charArray1);
      assertArrayEquals(new char[] {']', 'e', 'M', '|', 'J', 'l', 'W'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      Float[] floatArray2 = new Float[1];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray2[0] = float0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(floatArray2, 0);
      assertTrue(boolean0);
      assertEquals(1, floatArray2.length);
      
      float[] floatArray3 = ArrayUtils.insert((-1621), floatArray0, floatArray0);
      assertEquals(0, floatArray3.length);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) floatArray2, (Object) float0, (int) (short)1214);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, floatArray2.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2396.7F);
      floatArray0[1] = 599.0F;
      floatArray0[2] = (-3746.84F);
      floatArray0[3] = 1188.91F;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-2396.7F), 599.0F, (-3746.84F), 1188.91F}, floatArray0, 0.01F);
      
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 0L;
      longArray1[1] = (-785L);
      longArray1[2] = 3713L;
      longArray1[3] = 1412L;
      longArray1[4] = (-1565L);
      longArray1[5] = (-1L);
      ArrayUtils.swap(longArray1, 989, 1282, 989);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-785L), 3713L, 1412L, (-1565L), (-1L)}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0L, (double) (-1L));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-501L));
      assertEquals((-501L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf((double[]) null, (double) (byte)0, (int) (byte)0, 2709.039600153);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1665));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(8, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) 0);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      ArrayUtils.shift(floatArray0, 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1989;
      shortArray0[1] = (short)1072;
      shortArray0[2] = (short)1072;
      shortArray0[3] = (short)3058;
      shortArray0[4] = (short)1072;
      shortArray0[6] = (short)1072;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1989);
      assertEquals(0, int0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1989, (short)1072, (short)1072, (short)3058, (short)1072, (short)0, (short)1072}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)5);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-27), (int) (byte) (-1));
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted((Object[]) floatArray0, comparator0);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.swap((Object[]) floatArray0, 3397, 102, (int) (byte)9);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)5;
      shortArray0[1] = (short)18;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte)9;
      shortArray0[6] = (short)3058;
      shortArray0[7] = (short)1989;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1072);
      assertEquals((-1), int1);
      assertEquals(8, shortArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)5, (short)18, (short) (-1), (short) (-1), (short) (-1), (short)9, (short)3058, (short)1989}, shortArray0);
      
      boolean boolean2 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray2[6] = 0;
      intArray2[7] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray2, (-1665));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(8, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      ArrayUtils.shift(charArray0, (-681));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'U'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertArrayEquals(new char[] {'2'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(1433.7454F);
      assertEquals(1433.7454F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(2849.0F);
      assertEquals(2849.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-1));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(floatArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '1433.7454', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-87);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (int) (byte) (-87));
      assertEquals(0, int0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 87.0F;
      ArrayUtils.shift(floatArray0, (int) (byte) (-87));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {87.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, 87.0F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {87.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      int[] intArray0 = new int[0];
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y*jM";
      stringArray0[1] = "H";
      stringArray0[2] = "H";
      float[] floatArray0 = new float[9];
      floatArray0[2] = Float.NaN;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(12, booleanArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 3409;
      intArray0[1] = 18688;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18688, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, true}, booleanArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2411;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1333);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2411}, intArray0);
      assertArrayEquals(new int[] {2411}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "yUHYO]-#um:E@uK=R";
      stringArray0[1] = "`;%(=#{|Pw}YK";
      stringArray0[2] = "char";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(5, stringArray1.length);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Character character0 = new Character('k');
      assertEquals('k', (char)character0);
      assertNotNull(character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertEquals('k', object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (-1));
      assertEquals(2, objectArray0.length);
      assertNull(object1);
      
      objectArray0[1] = null;
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'k';
      intArray0[1] = 1325;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 832);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {107, 1325}, intArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-2993L));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3561);
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      MutableInt mutableInt0 = new MutableInt((int) (short) (-3561));
      assertEquals((-3561), (int)mutableInt0.getValue());
      assertEquals((-3561.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)23, mutableInt0.byteValue());
      assertEquals((short) (-3561), mutableInt0.shortValue());
      assertEquals("-3561", mutableInt0.toString());
      assertEquals((-3561), (int)mutableInt0.toInteger());
      assertEquals((-3561.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3561), mutableInt0.intValue());
      assertEquals((-3561L), mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.increment();
      assertEquals((-3560), (int)mutableInt0.getValue());
      assertEquals((-3560.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)24, mutableInt0.byteValue());
      assertEquals((-3560), (int)mutableInt0.toInteger());
      assertEquals((-3560.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-3560", mutableInt0.toString());
      assertEquals((short) (-3560), mutableInt0.shortValue());
      assertEquals((-3560), mutableInt0.intValue());
      assertEquals((-3560L), mutableInt0.longValue());
      
      int int0 = mutableInt0.incrementAndGet();
      assertEquals((-3559), int0);
      assertEquals((-3559), (int)mutableInt0.toInteger());
      assertEquals((-3559), (int)mutableInt0.getValue());
      assertEquals((byte)25, mutableInt0.byteValue());
      assertEquals((-3559.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3559L), mutableInt0.longValue());
      assertEquals((-3559), mutableInt0.intValue());
      assertEquals((-3559.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-3559", mutableInt0.toString());
      assertEquals((short) (-3559), mutableInt0.shortValue());
      
      boolean boolean0 = ArrayUtils.isEquals(mutableInt0, mutableInt0);
      assertTrue(boolean0);
      assertEquals((-3559), (int)mutableInt0.toInteger());
      assertEquals((-3559), (int)mutableInt0.getValue());
      assertEquals((byte)25, mutableInt0.byteValue());
      assertEquals((-3559.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3559L), mutableInt0.longValue());
      assertEquals((-3559), mutableInt0.intValue());
      assertEquals((-3559.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-3559", mutableInt0.toString());
      assertEquals((short) (-3559), mutableInt0.shortValue());
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[0] = 0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) 46;
      floatArray0[2] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 8.0F, 2146327221);
      assertEquals(0, int0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {8.0F, 46.0F, 0.0F}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf((int[]) null, 2613, 592);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = ArrayUtils.lastIndexOf(intArray0, (-2145969201), 46);
      assertEquals((-1), int2);
      assertEquals(7, intArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 8;
      longArray0[3] = (long) 592;
      longArray0[4] = (long) 8;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      shortArray0[2] = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray1 = new Short[5];
      shortArray1[0] = short1;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) short0;
      intArray0[1] = 2;
      intArray0[2] = (int) (short)0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, (-1825));
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 2, 0}, intArray0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean0);
      assertFalse(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 649;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 649;
      longArray1[1] = (long) 649;
      longArray1[2] = (long) 649;
      ArrayUtils.swap(longArray1, 119, 649);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {649L, 649L, 649L}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)351;
      shortArray0[1] = (short)4187;
      shortArray0[2] = (short) (-3343);
      shortArray0[3] = (short)281;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1989);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)351, (short)4187, (short) (-3343), (short)281}, shortArray0);
      assertArrayEquals(new short[] {(short)351, (short)4187, (short) (-3343), (short)281}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(2, classArray0.length);
      assertEquals(2, classArray1.length);
      assertNotNull(classArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 120;
      intArray0[1] = (int) (short)281;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-193), 13);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {120, 281}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEquals(class0, class0);
      assertTrue(boolean0);
      assertSame(class0, class1);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 97);
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      float[] floatArray0 = new float[6];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, 2093);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[21];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(21, floatArray0.length);
      assertEquals(21, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)4056);
      assertEquals((short)4056, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      shortArray0[1] = shortArray0[0];
      shortArray0[2] = shortArray0[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)4056, (short)4056, (short)4056}, shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[2] = (double) (short) (-1459);
      doubleArray0[3] = (double) 0.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)0, (-2688));
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1459.0), 0.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) shortArray0, (Object) null);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(3, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = (-1214.5574F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1214.5574F);
      doubleArray0[1] = (double) (-1214.5574F);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1214.557373046875), (-1214.557373046875)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-14);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-93), (byte) (-14), (byte)62, (byte) (-14)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-93), (byte) (-14), (byte)62, (byte) (-14)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-93), (byte) (-14), (byte)62, (byte) (-14)}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 69);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {69}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 1412L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 1412L}, longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1989;
      shortArray0[1] = (short)4187;
      shortArray0[2] = (short)4187;
      shortArray0[3] = (short) (byte) (-126);
      shortArray0[4] = (short) (byte) (-126);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)98);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1989, (short)4187, (short)4187, (short) (-126), (short) (-126)}, shortArray0);
      assertArrayEquals(new short[] {(short)1989, (short)4187, (short)4187, (short) (-126), (short) (-126)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      MutableInt[] mutableIntArray0 = new MutableInt[6];
      MutableInt mutableInt0 = new MutableInt((Number) (short) (-126));
      assertEquals("-126", mutableInt0.toString());
      assertEquals((byte) (-126), mutableInt0.byteValue());
      assertEquals((-126), (int)mutableInt0.toInteger());
      assertEquals((-126), (int)mutableInt0.getValue());
      assertEquals((-126.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-126.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-126L), mutableInt0.longValue());
      assertEquals((short) (-126), mutableInt0.shortValue());
      assertEquals((-126), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((int) (short)4187);
      assertEquals(4187, mutableInt1.intValue());
      assertEquals(4187, (int)mutableInt1.toInteger());
      assertEquals(4187, (int)mutableInt1.getValue());
      assertEquals(4187.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(4187L, mutableInt1.longValue());
      assertEquals("4187", mutableInt1.toString());
      assertEquals(4187.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)4187, mutableInt1.shortValue());
      assertEquals((byte)91, mutableInt1.byteValue());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(mutableInt1);
      assertEquals(4187, mutableInt1.intValue());
      assertEquals(4187, (int)mutableInt1.toInteger());
      assertEquals(4187, (int)mutableInt1.getValue());
      assertEquals(4187.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(4187L, mutableInt1.longValue());
      assertEquals("4187", mutableInt1.toString());
      assertEquals(4187.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)4187, mutableInt1.shortValue());
      assertEquals((byte)91, mutableInt1.byteValue());
      assertEquals((short)4187, mutableInt2.shortValue());
      assertEquals(4187.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(4187, (int)mutableInt2.toInteger());
      assertEquals(4187.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(4187, (int)mutableInt2.getValue());
      assertEquals(4187, mutableInt2.intValue());
      assertEquals("4187", mutableInt2.toString());
      assertEquals(4187L, mutableInt2.longValue());
      assertEquals((byte)91, mutableInt2.byteValue());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertNotNull(mutableInt2);
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt((Number) (short) (-126));
      assertEquals("-126", mutableInt3.toString());
      assertEquals((-126), mutableInt3.intValue());
      assertEquals((-126.0), mutableInt3.doubleValue(), 0.01);
      assertEquals((-126.0F), mutableInt3.floatValue(), 0.01F);
      assertEquals((-126L), mutableInt3.longValue());
      assertEquals((short) (-126), mutableInt3.shortValue());
      assertEquals((-126), (int)mutableInt3.getValue());
      assertEquals((byte) (-126), mutableInt3.byteValue());
      assertEquals((-126), (int)mutableInt3.toInteger());
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertNotNull(mutableInt3);
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt((Number) (short)4187);
      assertEquals((byte)91, mutableInt4.byteValue());
      assertEquals(4187L, mutableInt4.longValue());
      assertEquals(4187, (int)mutableInt4.getValue());
      assertEquals(4187, (int)mutableInt4.toInteger());
      assertEquals(4187.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals("4187", mutableInt4.toString());
      assertEquals(4187.0, mutableInt4.doubleValue(), 0.01);
      assertEquals(4187, mutableInt4.intValue());
      assertEquals((short)4187, mutableInt4.shortValue());
      assertTrue(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertNotNull(mutableInt4);
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt(230);
      assertEquals(230, (int)mutableInt5.toInteger());
      assertEquals((byte) (-26), mutableInt5.byteValue());
      assertEquals((short)230, mutableInt5.shortValue());
      assertEquals(230, mutableInt5.intValue());
      assertEquals(230.0, mutableInt5.doubleValue(), 0.01);
      assertEquals(230.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals("230", mutableInt5.toString());
      assertEquals(230L, mutableInt5.longValue());
      assertEquals(230, (int)mutableInt5.getValue());
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertNotNull(mutableInt5);
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt mutableInt6 = ArrayUtils.get(mutableIntArray0, (int) 4187);
      assertEquals(6, mutableIntArray0.length);
      assertNull(mutableInt6);
      
      int int0 = ArrayUtils.indexOf((Object[]) booleanArray1, (Object) null, (-87));
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 230;
      intArray0[1] = (int) (short)1989;
      intArray0[2] = 120;
      intArray0[3] = (int) (short) (-126);
      intArray0[4] = (int) (short)4187;
      intArray0[5] = (int) (byte) (-126);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, Integer.MAX_VALUE);
      assertEquals(7, intArray1.length);
      assertEquals(6, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 230, 1989, 120, (-126), 4187, (-126)}, intArray1);
      assertArrayEquals(new int[] {230, 1989, 120, (-126), 4187, (-126)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals((-1), int0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1989;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (-1));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1989.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1989.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[1];
      ArrayUtils.shuffle(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1989.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1989.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Short short0 = new Short((short)1989);
      assertEquals((short)1989, (short)short0);
      assertNotNull(short0);
      
      boolean[] booleanArray2 = ArrayUtils.insert(3, booleanArray0, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      
      Long long0 = new Long((-2466L));
      assertEquals((-2466L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray1 = ArrayUtils.add((Long[]) null, long0);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      Character character0 = new Character('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3143;
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = '\"';
      ArrayUtils.shift(charArray0, 0, (int) (short)3143, 1921);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\"', '?', '?', '?', '?', '?'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      int int0 = (-939);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-939), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -939, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertEquals(1, int0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.indexOf(charArray0, ')');
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[25];
      floatArray0[0] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) ')';
      ArrayUtils.shift(floatArray0, (-1513));
      assertEquals(25, floatArray0.length);
      
      int int2 = ArrayUtils.indexOf(charArray0, ')', (-1513));
      assertEquals((-1), int2);
      assertEquals(0, charArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)68;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)58, (byte)68}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)58, (byte)68}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)68;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)68, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)68, (short)68, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 807.0F;
      floatArray0[2] = 120.0F;
      ArrayUtils.shift(floatArray0, (-2));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {120.0F, 1.0F, 807.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-41);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-128), (byte) (-96), (byte)0, (byte)71, (byte)64, (byte) (-41)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-128), (byte) (-96), (byte)0, (byte)71, (byte)64, (byte) (-41)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-128), (byte) (-96), (byte)0, (byte)71, (byte)64, (byte) (-41)}, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      ArrayUtils.shift(floatArray0, (-1), (int) (byte)64, (int) (byte)0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {120.0F, 1.0F, 807.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1631.551038488982);
      doubleArray0[2] = 1.5;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 2425.9048;
      doubleArray0[5] = 301.505;
      doubleArray0[6] = (-635.712355397);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1631.551038488982), 0.0, 1.5, 1.0, 2425.9048, 301.505, (-635.712355397)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1631.551038488982), 0.0, 1.5, 1.0, 2425.9048, 301.505, (-635.712355397)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1631.551038488982), 0.0, 1.5, 1.0, 2425.9048, 301.505, (-635.712355397)}, doubleArray2, 0.01);
      assertSame(doubleArray0, doubleArray2);
      assertSame(doubleArray2, doubleArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)3769;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-2962);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1631.551038488982), 0.0, 1.5, 1.0, 2425.9048, 301.505, (-635.712355397)}, doubleArray0, 0.01);
      assertSame(doubleArray0, doubleArray2);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(7, int0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3845;
      ArrayUtils.shift(shortArray0, 1295);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)3845}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, 1295, (int) (short)3496, (int) (short)3496);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1325;
      shortArray0[5] = (short) (-1908);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (short)0, (short)0);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0, (short)0, (short)1325, (short) (-1908)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)0, (short)0, (short)0, (short)1325, (short) (-1908)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (int) (short) (-1908), (int) (short)0);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0, (short)0, (short)1325, (short) (-1908)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      ArrayUtils.swap((int[]) null, (int) (short)0, (int) (short)1325);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)1325;
      objectArray0[2] = (Object) (short)2;
      objectArray0[3] = (Object) (short)1325;
      objectArray0[4] = (Object) (short)2;
      ArrayUtils.swap(objectArray0, (-1292), (int) (short) (-1908), 1351);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1353);
      intArray0[1] = 91;
      intArray0[2] = 272;
      intArray0[3] = (-1028);
      intArray0[1] = 2693;
      intArray0[5] = (-873);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 360);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(6, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1353), 2693, 272, (-1028), 0, (-873)}, intArray0);
      
      Integer integer0 = new Integer((-1028));
      assertEquals((-1028), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(70);
      assertEquals(70, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(9);
      assertEquals(9, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(8);
      assertEquals(8, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) (-1028);
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) (-1028);
      intArray0[1] = 2693;
      integerArray0[4] = (Integer) (-873);
      integerArray0[5] = (Integer) (-1028);
      integerArray0[6] = integer1;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 360);
      assertEquals(7, intArray1.length);
      assertEquals(7, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1028), 0, (-1028), 360, (-873), (-1028), 70}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.swap((Object[]) integerArray0, 3178, 9, (-1));
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 649;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 649;
      longArray1[1] = (long) 649;
      longArray1[2] = (long) 649;
      ArrayUtils.swap(longArray1, 119, 649);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {649L, 649L, 649L}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)351;
      shortArray0[1] = (short)4187;
      shortArray0[2] = (short) (-3343);
      shortArray0[3] = (short)281;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1989);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)351, (short)4187, (short) (-3343), (short)281}, shortArray0);
      assertArrayEquals(new short[] {(short)351, (short)4187, (short) (-3343), (short)281}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 972.7153240328514);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-84), (byte)0, (byte) (-80), (byte)0}, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)0;
      intArray0[8] = 0;
      boolean boolean1 = ArrayUtils.contains(intArray0, 0);
      assertTrue(boolean1);
      assertEquals(9, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean2);
      assertEquals(9, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      ArrayUtils.reverse((float[]) null, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 649;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 649;
      longArray1[1] = (long) 649;
      longArray1[2] = (long) 649;
      ArrayUtils.swap(longArray1, 119, 649);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {649L, 649L, 649L}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)351;
      shortArray0[1] = (short)4187;
      longArray0[2] = (long) (short) (-3343);
      shortArray0[3] = (short)281;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1989);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)351, (short)4187, (short)0, (short)281}, shortArray0);
      assertArrayEquals(new short[] {(short)351, (short)4187, (short)0, (short)281}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      ArrayUtils.reverse((float[]) null, 17, 2144612966);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2051.2446F);
      floatArray0[1] = 1412.0F;
      floatArray0[2] = (-1214.5574F);
      floatArray0[3] = (-1807.867F);
      floatArray0[4] = Float.NaN;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 912, 912);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2051.2446F), 1412.0F, (-1214.5574F), (-1807.867F), Float.NaN}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)98;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)121, (int) (byte) (-76));
      assertEquals((-1), int0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)96, (byte)121, (byte)69, (byte) (-4), (byte) (-82), (byte) (-76), (byte)43, (byte)98}, byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short) (byte)96;
      shortArray0[2] = (short) (byte)43;
      shortArray0[3] = (short) (byte)96;
      shortArray0[4] = (short) (byte)69;
      shortArray0[5] = (short) (byte) (-82);
      shortArray0[6] = (short) (byte) (-76);
      shortArray0[7] = (short) (byte)43;
      shortArray0[8] = (short) (byte)96;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)6, (short)96, (short)43, (short)96, (short)69, (short) (-82), (short) (-76), (short)43, (short)96}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("long");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("long");
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf(false);
      assertFalse(boolean5);
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertTrue(boolean6);
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true}, booleanArray1));
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)2);
      assertNull(shortArray0);
      
      Boolean boolean7 = Boolean.TRUE;
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean5));
      assertNotNull(boolean7);
      
      Boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray0, boolean1);
      assertEquals(7, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(boolean1.equals((Object)boolean7));
      assertFalse(boolean1.equals((Object)boolean6));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      assertEquals("6", mutableInt0.toString());
      assertEquals(6, mutableInt0.intValue());
      assertEquals(6.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(6L, mutableInt0.longValue());
      assertEquals(6.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(6, (int)mutableInt0.getValue());
      assertEquals((short)6, mutableInt0.shortValue());
      assertEquals(6, (int)mutableInt0.toInteger());
      assertEquals((byte)6, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(mutableIntArray0, (int) 2, mutableInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[3] = 8;
      intArray0[4] = 8;
      intArray0[5] = (-2641);
      Boolean[] booleanArray0 = new Boolean[0];
      ArrayUtils.reverse((byte[]) null, 96, 8);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) 55;
      floatArray0[2] = (float) 8;
      floatArray0[3] = (float) (byte) (-42);
      floatArray0[4] = (float) (-3489);
      floatArray0[5] = (float) 8;
      ArrayUtils.reverse(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {8.0F, (-3489.0F), (-42.0F), 8.0F, 55.0F, 8.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'T', 'T'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {8.0F, (-3489.0F), (-42.0F), 8.0F, 55.0F, 8.0F}, floatArray0, 0.01F);
      
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) float0, (-3489));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      long[] longArray0 = new long[8];
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 13L;
      floatArray0[6] = (float) 13L;
      floatArray0[7] = (float) 13L;
      floatArray0[8] = (float) 0L;
      ArrayUtils.reverse(floatArray0, (-1), 2532);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 13.0F, 13.0F, 13.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      long[] longArray0 = new long[19];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 639L, 1351);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(19, longArray0.length);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 639L);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(19, longArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1351;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1351;
      doubleArray0[3] = (double) 1351;
      doubleArray0[4] = (double) 1351;
      doubleArray0[5] = (double) 639L;
      doubleArray0[6] = (double) 1351;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1351.0, 0.0, 1351.0, 1351.0, 1351.0, 639.0, 1351.0}, doubleArray0, 0.01);
      
      bitSet0.andNot(bitSet1);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(19, longArray0.length);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      int int0 = 14;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 14;
      doubleArray0[1] = (double) 14;
      doubleArray0[2] = (double) 14;
      doubleArray0[3] = 1876.14;
      doubleArray0[4] = (double) 14;
      doubleArray0[5] = (double) 14;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(14, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 14;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 14;
      doubleArray0[1] = (double) 14;
      doubleArray0[2] = (double) 14;
      doubleArray0[3] = 1876.14;
      doubleArray0[4] = (double) 14;
      doubleArray0[5] = (double) 14;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(14, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      long[] longArray0 = new long[5];
      ArrayUtils.shift(longArray0, 512, 1010, 4530);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)96, (int) (byte)96);
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Byte byte0 = new Byte((byte)96);
      assertEquals((byte)96, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.swap(byteArray0, (int) (byte)96, (int) (byte)96, (-1));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Float float0 = new Float((float) (-3286));
      assertEquals((-3286.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-4346.415702226524));
      assertEquals((-4346.4155F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3105);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y*jM";
      stringArray0[1] = "H";
      stringArray0[2] = "H";
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 3105;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (float) 3105;
      floatArray0[4] = (float) 3105;
      floatArray0[5] = (float) 912;
      floatArray0[6] = (float) 912;
      floatArray0[7] = Float.NaN;
      floatArray0[8] = Float.NaN;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1235, (-1));
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 3105.0F, Float.NaN, 3105.0F, 3105.0F, 912.0F, 912.0F, Float.NaN, Float.NaN}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)96;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)98, 48);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)96}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-64), 0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Double double0 = new Double(70.0);
      assertEquals(70.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayUtils.hashCode((Object) double0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 70.0;
      doubleArray0[2] = 70.0;
      doubleArray0[2] = 70.0;
      doubleArray0[3] = 70.0;
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("Arguments cannot both be null");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean("`~g>ww");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.valueOf("}>m%%4^Ks$I\"");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      Boolean[] booleanArray1 = new Boolean[2];
      booleanArray1[0] = boolean0;
      booleanArray1[1] = boolean2;
      Boolean boolean5 = Boolean.TRUE;
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      
      Boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray1, boolean5);
      assertEquals(3, booleanArray2.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, 0L, 3592);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.reverse((short[]) null, 3592, (-1));
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = new Boolean("QnLAuc([;>3xw");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("I3zzN#aK3[TPOSA'");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean1);
      assertFalse(boolean3);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean("QnLAuc([;>3xw");
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = new Boolean("QnLAuc([;>3xw");
      assertFalse(boolean7);
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean5));
      assertNotNull(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = Boolean.valueOf("^.JvB");
      assertFalse(boolean8);
      assertTrue(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean5));
      assertNotNull(boolean8);
      
      booleanArray0[8] = boolean8;
      Boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, boolean5);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(boolean5.equals((Object)boolean6));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean8));
      assertTrue(boolean5.equals((Object)boolean7));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 8);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {8L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 8;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, Double.NaN, Double.NaN);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 8.0, 8.0, 8.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)59);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-204.3344F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-204.3344F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '?';
      doubleArray0[1] = (double) (-204.3344F);
      doubleArray0[2] = (double) '?';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-204.3344F), 3, 94.17);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {63.0, (-204.3343963623047), 63.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-839.703457);
      doubleArray0[1] = 1166.245;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (byte) (-42);
      doubleArray0[4] = 429.046580119;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-839.703457);
      doubleArray0[7] = (-839.703457);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)3, 1, (double) (byte)3);
      assertEquals(5, int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-839.703457), 1166.245, (-1.0), (-42.0), 429.046580119, 1.0, (-839.703457), (-839.703457)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)1779;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)10, (short)1779}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((Object[]) null, (int) (short)0, (int) (short)1779, 0);
      ArrayUtils.shuffle(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1779, (short)10}, shortArray0);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((short)1779);
      assertEquals(1779.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      assertEquals((-1.0), (double)double4, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[3]);
      assertEquals((-1.0), (double)double5, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      assertEquals(0.0, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short)1779);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 1779.0, (-1.0), (-1.0), (-1.0), 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1779;
      intArray0[1] = (int) (short)0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (short)10);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1779, 0}, intArray0);
      assertArrayEquals(new int[] {1779, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (-1214.5574F));
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1214.5574F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray1, 0.0, (-1031.92562230948));
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 1779.0, (-1.0), (-1.0), (-1.0), 0.0}, doubleArray1, 0.01);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("(M}gUn'cbXGvo");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2688);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-2688), (-2688));
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2688.0)}, doubleArray0, 0.01);
      
      Byte byte0 = new Byte((byte) (-55));
      assertEquals((byte) (-55), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray0, (Object) byte0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (int) (short)0);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[0];
      Double double0 = new Double((short)2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) double0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (int) (short)2);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[0];
      Double double0 = new Double((short)2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) double0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertEquals(1, int0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.indexOf(charArray0, ')');
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) ')';
      ArrayUtils.shift(floatArray0, (-1513));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 41.0F, 1.0F}, floatArray0, 0.01F);
      
      int int2 = ArrayUtils.indexOf(charArray0, '<', (-1513));
      assertEquals((-1), int2);
      assertEquals(0, charArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)68;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)58, (byte)68}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)58, (byte)68}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 41.0F;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) '<';
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = 1.0;
      int int3 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), (-523));
      assertEquals((-1), int3);
      assertEquals(6, doubleArray0.length);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertArrayEquals(new double[] {41.0, 0.0, 0.0, 60.0, 0.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (-1));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-1), 0);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) (-64);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-64), 2);
      assertEquals(1, int0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-64), (byte) (-64), (byte)59, (byte) (-64), (byte) (-64), (byte) (-64), (byte) (-64), (byte) (-64)}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short)0;
      byte[] byteArray0 = new byte[5];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3534);
      shortArray0[1] = (short) (-2054);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)272;
      shortArray0[4] = (short) (-1028);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3534), (short) (-2054), (short)0, (short)272, (short) (-1028)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-146L));
      assertEquals((-146L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short)0);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-1720L));
      assertEquals((-1720L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[1]);
      assertEquals(0L, (long)long3);
      assertEquals(4, longArray0.length);
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((short)0);
      assertEquals(0L, (long)long4);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long1));
      assertNotNull(long4);
      
      Long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, long4);
      assertEquals(4, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) double0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) double0);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, objectArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (double) (-1));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      int[] intArray0 = new int[4];
      char[] charArray0 = new char[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = (float) '\u0000';
      floatArray0[6] = (float) '\u0000';
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, (-185));
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short)2904;
      shortArray0[2] = (short)512;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)16);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)16, (short)2904, (short)512}, shortArray0);
      assertArrayEquals(new short[] {(short)16, (short)2904, (short)512, (short)16}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(5, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = 'a';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = 'a';
      charArray0[5] = 'a';
      charArray0[6] = '`';
      charArray0[7] = '`';
      ArrayUtils.swap(charArray0, 0, 91);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'`', 'a', '`', '`', 'a', 'a', '`', '`'}, charArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'a';
      objectArray0[1] = (Object) '`';
      objectArray0[2] = (Object) '`';
      objectArray0[3] = (Object) 'a';
      Object[] objectArray1 = ArrayUtils.removeAllOccurences(objectArray0, objectArray0[3]);
      assertEquals(4, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)10, (int) (byte)10);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom((byte)10);
      assertNotNull(mockRandom0);
      
      ArrayUtils.reverse((byte[]) null, (-1), (-2117));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2117);
      doubleArray0[1] = (double) (-2117);
      doubleArray0[2] = (double) (byte)10;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 90.0;
      int int1 = ArrayUtils.indexOf(doubleArray0, 90.0);
      assertEquals(4, int1);
      assertEquals(5, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-2117.0), (-2117.0), 10.0, (-1.0), 90.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(5, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'F';
      charArray0[0] = 'F';
      char char1 = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'Z';
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      String string0 = "=";
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "=");
      assertNull(stringArray0);
      
      AbstractMap.SimpleEntry<Object, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 4);
      int int0 = 0;
      try { 
        Integer.decode("=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      int[] intArray0 = new int[16];
      intArray0[0] = (-5);
      intArray0[1] = 476;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(16, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(16, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray0);
      assertEquals(16, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(16, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3989;
      shortArray0[1] = (short)436;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-760), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -760, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1353);
      intArray0[1] = 91;
      intArray0[2] = 272;
      intArray0[3] = (-1028);
      intArray0[1] = 2693;
      intArray0[5] = (-873);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 360);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(6, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1353), 2693, 272, (-1028), 0, (-873)}, intArray0);
      
      Integer integer0 = new Integer((-1028));
      assertEquals((-1028), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(70);
      assertEquals(70, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(9);
      assertEquals(9, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(8);
      assertEquals(8, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) (-1028);
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) (-1028);
      integerArray0[3] = (Integer) 2693;
      integerArray0[4] = (Integer) (-873);
      integerArray0[5] = (Integer) (-1028);
      integerArray0[6] = integer1;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 360);
      assertEquals(7, intArray1.length);
      assertEquals(7, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1028), 0, (-1028), 2693, (-873), (-1028), 70}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1946;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)14;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)7;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 104);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)13;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short) (-381);
      shortArray0[3] = (short)6;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)19664;
      shortArray0[6] = (short)9;
      shortArray0[7] = (short)241;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)241);
      assertEquals(8, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)13, (short)4, (short) (-381), (short)6, (short)0, (short)19664, (short)9, (short)241}, shortArray0);
      assertArrayEquals(new short[] {(short)13, (short)4, (short) (-381), (short)6, (short)0, (short)19664, (short)9}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.insert(90, booleanArray0, booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      Long long0 = new Long(145L);
      assertEquals(145L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      long[] longArray1 = new long[0];
      ArrayUtils.shuffle(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(90, shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-2070787803));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2070787803, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = (-297L);
      longArray0[0] = (-297L);
      longArray0[1] = 241L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-297L));
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-297L), 241L}, longArray0);
      assertArrayEquals(new long[] {241L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1520;
      short short0 = (short) (-1);
      shortArray0[1] = (short) (-1);
      short short1 = (short)2012;
      shortArray0[2] = (short)2012;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1));
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1520, (short) (-1), (short)2012}, shortArray0);
      assertArrayEquals(new short[] {(short)1520, (short)2012}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-297L));
      assertEquals((-297.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      // Undeclared exception!
      try { 
        Double.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      Integer integer0 = Integer.getInteger("[");
      assertNull(integer0);
      
      MutableInt mutableInt0 = new MutableInt((-2140730553));
      assertEquals((-2140730553L), mutableInt0.longValue());
      assertEquals((byte)71, mutableInt0.byteValue());
      assertEquals((-2.1407305E9F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2140730553), (int)mutableInt0.getValue());
      assertEquals((short)2887, mutableInt0.shortValue());
      assertEquals((-2140730553), (int)mutableInt0.toInteger());
      assertEquals((-2.140730553E9), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2140730553), mutableInt0.intValue());
      assertEquals("-2140730553", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.getValue();
      assertEquals((-2140730553), (int)integer1);
      assertEquals((-2140730553L), mutableInt0.longValue());
      assertEquals((byte)71, mutableInt0.byteValue());
      assertEquals((-2.1407305E9F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2140730553), (int)mutableInt0.getValue());
      assertEquals((short)2887, mutableInt0.shortValue());
      assertEquals((-2140730553), (int)mutableInt0.toInteger());
      assertEquals((-2.140730553E9), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2140730553), mutableInt0.intValue());
      assertEquals("-2140730553", mutableInt0.toString());
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1168));
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-2140730553), (-1168)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3845;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 8.0;
      doubleArray0[1] = 102.0;
      doubleArray0[2] = 90.0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {8.0, 102.0, 90.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 36);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 36;
      longArray0[1] = (long) 36;
      longArray0[2] = 122L;
      longArray0[3] = (long) 36;
      longArray0[4] = (long) 36;
      longArray0[5] = (long) 36;
      longArray0[6] = (long) 36;
      longArray0[7] = (long) 36;
      longArray0[8] = (long) 36;
      int[] intArray0 = new int[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertEquals(9, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {36L, 36L, 122L, 36L, 36L, 36L, 36L, 36L, 36L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {36L, 36L, 122L, 36L, 36L, 36L, 36L, 36L, 36L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 36L;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {36.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)122, (byte) (-87), (byte) (-84), (byte)0, (byte) (-80), (byte)0}, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-87);
      intArray0[1] = (int) (byte) (-87);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[5];
      Short short1 = new Short((short)82);
      assertEquals((short)82, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      Short short2 = new Short((byte) (-84));
      assertEquals((short) (-84), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[3] = short2;
      shortArray0[4] = short0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -87, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      int[] intArray0 = new int[4];
      byte[] byteArray0 = new byte[0];
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertArrayEquals(new char[] {'('}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'('}, charArray0);
      assertNotSame(charArray0, charArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '(';
      floatArray0[1] = (float) '(';
      floatArray0[2] = (float) '(';
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) '(';
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new float[] {40.0F, 40.0F, 40.0F, (-1.0F), (-1.0F), (-1.0F), 40.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {40.0F, 40.0F, (-1.0F), (-1.0F), (-1.0F), 40.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1971L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[5] = (long) '(';
      longArray0[6] = (long) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1971L, 0L, 0L, 0L, 0L, 40L, 0L}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1971L, 0L, 0L, 0L, 0L, 40L, 0L}, longArray0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2389.31);
      assertEquals(2389.31, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 1971L);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 2389.31}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-1018.0));
      assertEquals((-1018.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((-1018.0), (double)double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals((-1018.0), (double)double2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1971L;
      longArray0[1] = 1971L;
      longArray0[2] = 1971L;
      longArray0[3] = 8L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1971L, 1971L, 1971L, 8L}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1971L, 1971L, 1971L, 8L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (int) (short)2);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[1];
      Double double0 = new Double((short)2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) double0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = (-1214.5574F);
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1214.5574F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1214.5574F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Float float0 = new Float(3.40657890391901);
      assertEquals(3.406579F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Long long0 = new Long((-288L));
      assertEquals((-288L), (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) long0, (-1932735283));
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Float float1 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      ArrayUtils.shift((byte[]) null, 120);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) boolean0;
      objectArray0[2] = (Object) boolean0;
      objectArray0[3] = (Object) boolean0;
      objectArray0[4] = (Object) boolean0;
      objectArray0[5] = (Object) boolean0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 90);
      assertEquals((-1), int0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      short[] shortArray0 = new short[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, false, false, true}, booleanArray0));
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-675));
      assertEquals(5, int0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean((boolean) boolean0);
      assertFalse(boolean5);
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      boolean boolean6 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean6);
      assertEquals(6, booleanArray0.length);
      
      boolean boolean7 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean7);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean7 == boolean6);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      long[] longArray0 = new long[19];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 639L, 1351);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(19, longArray0.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(1, booleanArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotSame(bitSet1, bitSet0);
      
      bitSet0.xor(bitSet1);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(19, longArray0.length);
      assertEquals(1, booleanArray0.length);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-533);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2068.8649141023784);
      doubleArray0[1] = (-839.703457);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-533);
      doubleArray0[5] = 1.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 429.046580119, (-1), 0.1);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-2068.8649141023784), (-839.703457), 0.0, 0.0, (-533.0), 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)10;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = new Short((short)10);
      assertEquals((short)10, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)10;
      doubleArray0[1] = (double) (short)10;
      doubleArray0[2] = (double) (short)10;
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (short)10, 10.0);
      assertEquals(0, int1);
      assertEquals(3, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {10.0, 10.0, 10.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-3489L);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (short)10;
      longArray0[3] = (long) (short)10;
      longArray0[4] = (long) (short)10;
      longArray0[5] = (-4393L);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (short)10;
      longArray0[8] = (long) (short)10;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-3489L), 0L, 10L, 10L, 10L, (-4393L), 0L, 10L, 10L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1275.2719159948;
      doubleArray0[1] = 1.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 196.875985467, 2986.135146);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1275.2719159948, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("java.lang.Short");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'a';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'V';
      charArray0[2] = 'h';
      charArray0[3] = 'T';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'O', 'V', 'h', 'T'}, charArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'V';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)105;
      byte byte0 = (byte) (-118);
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)101;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-2), (byte)91, (byte) (-12), (byte)105, (byte) (-118), (byte)81, (byte)101, (byte)46}, byteArray0);
      
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-2);
      intArray0[1] = (int) (byte)91;
      intArray0[2] = (int) (byte) (-2);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) float0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 910);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 910);
      assertEquals((-1), int0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Character character0 = Character.valueOf(' ');
      assertEquals(' ', (char)character0);
      assertNotNull(character0);
      
      String string0 = ArrayUtils.toString((Object) character0, "");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) ' ';
      intArray0[1] = (-1);
      intArray0[2] = 910;
      intArray0[3] = (int) ' ';
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2144146449);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {32, (-1), 910, 32}, intArray1);
      assertArrayEquals(new int[] {32, (-1), 910, 32}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      short[] shortArray0 = new short[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) (short)0;
      char[] charArray0 = new char[4];
      charArray0[1] = '/';
      charArray0[2] = 'h';
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, '\u0000');
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      Character character0 = new Character('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3143;
      shortArray0[1] = (short)3143;
      shortArray0[2] = (short)3143;
      shortArray0[3] = (short)3143;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3143, (short)3143, (short)3143, (short)3143}, shortArray0);
      assertArrayEquals(new short[] {(short)3143, (short)3143, (short)3143, (short)3143, (short)3143, (short)3143, (short)3143, (short)3143}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1508, shortArray0, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1508, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 910);
      assertEquals((-1), int0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-25.6799286857161);
      doubleArray0[1] = (double) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-12), (int) (short) (-1));
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-25.6799286857161), (-1.0)}, doubleArray0, 0.01);
      
      Double double0 = new Double((short) (-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Object[] objectArray0 = new Object[0];
      Short short0 = ArrayUtils.get((Short[]) null, 19);
      assertNull(short0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, objectArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-1397));
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-1397)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Double double0 = new Double(70.0);
      assertEquals(70.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayUtils.hashCode((Object) double0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 70.0;
      doubleArray0[2] = 70.0;
      doubleArray0[2] = 70.0;
      doubleArray0[3] = 70.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 70.0, (-610));
      assertEquals(0, int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {70.0, 0.0, 70.0, 70.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-517);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)52;
      shortArray0[5] = (short)283;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)91);
      assertEquals(7, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)91, (short)9, (short)1, (short) (-517), (short) (-1), (short)52, (short)283}, shortArray1);
      assertArrayEquals(new short[] {(short)9, (short)1, (short) (-517), (short) (-1), (short)52, (short)283}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {70.0, 70.0, 70.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)6243;
      shortArray0[1] = (short) (-1017);
      shortArray0[2] = (short)2;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)6243, (short) (-1017), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)6243, (short) (-1017), (short)2}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      Character character0 = Character.valueOf('J');
      assertEquals('J', (char)character0);
      assertNotNull(character0);
      
      ArrayUtils.hashCode((Object) character0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'J';
      floatArray0[2] = (float) 'J';
      floatArray0[3] = 1048.0F;
      floatArray0[4] = (float) 'J';
      floatArray0[6] = (float) 'J';
      floatArray0[7] = (float) 'J';
      floatArray0[8] = (float) 'J';
      ArrayUtils.shuffle(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 74.0F, 1048.0F, 74.0F, 0.0F, 74.0F, 74.0F, 74.0F, 74.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Double[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[21];
      longArray0[0] = 0L;
      longArray0[1] = (long) 'J';
      longArray0[2] = (long) 'J';
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) 'J';
      longArray0[5] = (long) 'J';
      longArray0[6] = (long) 'J';
      longArray0[7] = (long) 'J';
      longArray0[8] = 1039L;
      boolean boolean1 = ArrayUtils.contains(longArray0, (-3L));
      assertFalse(boolean1);
      assertEquals(21, longArray0.length);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[1] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'J', 0);
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 4, 5}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'J', 'J', 'J', '\u0000', 'J', 'J'}, charArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)3163;
      shortArray0[2] = (short)328;
      shortArray0[3] = (short) (-1604);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1476;
      shortArray0[6] = (short) (-149);
      shortArray0[7] = (short)187;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)3163, (short)328, (short) (-1604), (short)1, (short)1476, (short) (-149), (short)187}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)3163, (short)328, (short) (-1604), (short)1, (short)1476, (short) (-149), (short)187}, shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      long[] longArray0 = new long[4];
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 0L;
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertSame(doubleArray0, doubleArray2);
      assertSame(doubleArray2, doubleArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3769;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1229);
      shortArray0[3] = (short)0;
      shortArray0[8] = (short)3769;
      shortArray0[5] = (short) (-2962);
      shortArray0[3] = (short) (-1229);
      shortArray0[7] = (short) (-2962);
      shortArray0[8] = (short) (-1229);
      ArrayUtils.shift(shortArray0, (-1494));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)3769, (short)0, (short) (-1229), (short) (-1229), (short)0, (short) (-2962), (short)0, (short) (-2962), (short) (-1229)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.swap(booleanArray0, (int) (short)3769, 114, 2144612966);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 114);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)3769;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)3769, (short)0, (short) (-1229), (short) (-1229), (short)0, (short) (-2962), (short)0, (short) (-2962), (short) (-1229)}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1229));
      assertEquals(9, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3769, (short)0, (short) (-1229), (short) (-1229), (short)0, (short) (-2962), (short)0, (short) (-2962), (short) (-1229)}, shortArray0);
      assertArrayEquals(new short[] {(short)3769, (short)0, (short)0, (short) (-2962), (short)0, (short) (-2962)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'L';
      charArray0[2] = 'b';
      charArray0[3] = '(';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'O', 'L', 'b', '('}, charArray0);
      assertArrayEquals(new char[] {'O', 'L', 'b', '('}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'L';
      longArray0[1] = (long) 'O';
      longArray0[2] = (long) 'L';
      longArray0[3] = (long) '(';
      longArray0[4] = (long) 'O';
      longArray0[5] = (long) '(';
      longArray0[6] = (long) 'L';
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {76L, 79L, 76L, 40L, 79L, 40L, 76L}, longArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)100;
      shortArray0[1] = (short) (-13107);
      shortArray0[2] = (short)3592;
      shortArray0[3] = (short)46;
      shortArray0[4] = (short)20971;
      shortArray0[5] = (short) (-517);
      shortArray0[6] = (short)1335;
      shortArray0[7] = (short) (-1036);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-13107), 0);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)100, (short) (-13107), (short)3592, (short)46, (short)20971, (short) (-517), (short)1335, (short) (-1036)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 8;
      intArray0[2] = (-3489);
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)125;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)38;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(12, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte)7);
      assertFalse(boolean1);
      assertEquals(7, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {8, 8, (-3489), 0, 0, 0, 0}, intArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (byte) (-100);
      doubleArray0[3] = (double) (byte)7;
      doubleArray0[4] = (double) (byte) (-100);
      doubleArray0[5] = (double) (-3489);
      doubleArray0[6] = (double) 8;
      doubleArray0[7] = (double) (byte)125;
      doubleArray0[8] = (double) (byte)7;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1.0));
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-100.0), 7.0, (-100.0), (-3489.0), 8.0, 125.0, 7.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-100.0), 7.0, (-100.0), (-3489.0), 8.0, 125.0, 7.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      char[] charArray0 = new char[4];
      charArray0[1] = 'Z';
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)45;
      floatArray0[1] = (float) 'Z';
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) 'Z';
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) 1;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 55, 302);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {45.0F, 90.0F, 0.0F, 90.0F, 1.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'Z');
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', 'Z', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-501L));
      assertEquals((-501L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)55;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-27), (byte)0, (byte)55}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte) (-27);
      doubleArray0[2] = 70.0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)55;
      doubleArray0[6] = (double) (byte) (-27);
      ArrayUtils.shift(doubleArray0, 101);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 55.0, (-27.0), 0.0, (-27.0), 70.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = 'k';
      charArray0[1] = '';
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)0);
      assertEquals(4, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-27), (byte)0, (byte)55}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)55}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-27.0), 0.0);
      assertEquals(2, int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 55.0, (-27.0), 0.0, (-27.0), 70.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'C');
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-29);
      byteArray0[8] = (byte) (-28);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)61, (byte) (-87), (byte) (-124), (byte) (-1), (byte)28, (byte) (-61), (byte)0, (byte) (-29), (byte) (-28)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-87);
      floatArray0[1] = (float) (byte) (-124);
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte) (-28);
      floatArray0[4] = (float) (byte) (-28);
      floatArray0[5] = (float) (byte)28;
      floatArray0[6] = (float) (byte) (-1);
      floatArray0[7] = (float) (byte)28;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte) (-28), (int) (byte)0);
      assertEquals(0, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-87.0F), (-124.0F), (-1.0F), (-28.0F), (-28.0F), 28.0F, (-1.0F), 28.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 1412L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 1412L}, longArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)51;
      ArrayUtils.swap(byteArray0, 4126, 90);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-106), (byte) (-74), (byte)64, (byte)20, (byte) (-80), (byte)51}, byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-74);
      floatArray0[1] = (float) 1412L;
      floatArray0[2] = (float) (byte)51;
      int int0 = ArrayUtils.indexOf(floatArray0, 3251.5728F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-74.0F), 1412.0F, 51.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)4);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-106), (byte) (-74), (byte)64, (byte)20, (byte) (-80), (byte)51}, byteArray0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 922, 4126);
      assertEquals(0, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-74.0F), 1412.0F, 51.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.reverse(booleanArray0, (-178), 1989);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2396.7F);
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 0, (-4937));
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-111), (int) (byte) (-64));
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-64)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)1779;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)10, (short)1779}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((Object[]) null, (int) (short)0, (int) (short)1779, 0);
      ArrayUtils.shuffle(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1779, (short)10}, shortArray0);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((short)1779);
      assertEquals(1779.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      assertEquals((-1.0), (double)double4, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[3]);
      assertEquals((-1.0), (double)double5, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(0.0);
      assertEquals(0.0, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short)1779);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 1779.0, (-1.0), (-1.0), (-1.0), 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) doubleArray0[0];
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) (short)1779;
      doubleArray2[4] = (double) doubleArray0[4];
      doubleArray2[5] = (double) doubleArray0[2];
      doubleArray2[6] = (double) doubleArray0[6];
      int int0 = ArrayUtils.indexOf(doubleArray2, (double) doubleArray0[6], (int) (short)1779);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 1779.0, (-1.0), 1779.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = '=';
      charArray0[2] = 'U';
      charArray0[3] = '7';
      charArray0[4] = 'c';
      charArray0[5] = '`';
      charArray0[6] = 'a';
      ArrayUtils.swap(charArray0, 0, 1041);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'f', '=', 'U', '7', 'c', '`', 'a'}, charArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'a';
      objectArray0[1] = (Object) '`';
      objectArray0[2] = (Object) 'f';
      objectArray0[3] = (Object) 'c';
      Object[] objectArray1 = ArrayUtils.removeAllOccurences(objectArray0, objectArray0[0]);
      assertEquals(4, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = (-3489);
      intArray0[3] = 749;
      intArray0[4] = 749;
      intArray0[5] = (-2641);
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)3398;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1));
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)1, (short)3398}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)1, (short)3398}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray0, boolean0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)305;
      shortArray0[1] = (short)763;
      shortArray0[2] = (short)3354;
      shortArray0[3] = (short)2891;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)1731;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)305, 3005);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)305, (short)763, (short)3354, (short)2891, (short) (-1), (short)1731}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1340L;
      longArray0[1] = (long) (short)2891;
      longArray0[2] = (long) (short)1731;
      longArray0[3] = (long) (short)2891;
      MockRandom mockRandom0 = new MockRandom((short) (-1));
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {2891L, 1731L, 2891L, 1340L}, longArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)36;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 941);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 941, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3105);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y*jM";
      stringArray0[1] = "H";
      stringArray0[2] = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      stringArray0[3] = "";
      stringArray0[4] = "Index: ";
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = '>';
      charArray0[2] = '$';
      charArray0[3] = '5';
      charArray0[4] = '8';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'1', '>', '$', '5', '8'}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)69;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte)69);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 69, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("(M}gUn'cbXGvo");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (-265));
      assertNull(shortArray0);
      
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      Boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray0, boolean0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean3));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      assertEquals(6, (int)mutableInt0.toInteger());
      assertEquals((byte)6, mutableInt0.byteValue());
      assertEquals(6.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(6, (int)mutableInt0.getValue());
      assertEquals("6", mutableInt0.toString());
      assertEquals(6.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(6L, mutableInt0.longValue());
      assertEquals((short)6, mutableInt0.shortValue());
      assertEquals(6, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[9];
      mutableIntArray0[2] = mutableInt0;
      mutableIntArray0[3] = mutableInt0;
      mutableIntArray0[4] = mutableInt0;
      mutableIntArray0[5] = mutableInt0;
      mutableIntArray0[6] = mutableInt0;
      mutableIntArray0[7] = mutableInt0;
      mutableIntArray0[8] = mutableInt0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(mutableIntArray0, (int)  (-265), mutableInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -265, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'L';
      charArray0[2] = 'b';
      charArray0[3] = '(';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'O', 'L', 'b', '('}, charArray0);
      assertArrayEquals(new char[] {'O', 'L', 'b', '('}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'L';
      longArray0[1] = (long) 'O';
      longArray0[2] = (long) 'L';
      longArray0[3] = (long) '(';
      longArray0[4] = (long) 'O';
      longArray0[5] = (long) '(';
      longArray0[6] = (long) 'L';
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {76L, 79L, 76L, 40L, 79L, 40L, 76L}, longArray0);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = (Character) '(';
      characterArray0[1] = (Character) 'L';
      Character character0 = new Character((char) characterArray0[1]);
      assertEquals('L', (char)character0);
      assertEquals(5, characterArray0.length);
      assertNotNull(character0);
      
      characterArray0[2] = character0;
      Character character1 = new Character('M');
      assertEquals('M', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[3] = character1;
      characterArray0[4] = (Character) 'L';
      Character character2 = Character.valueOf((char) characterArray0[1]);
      assertEquals('L', (char)character2);
      assertEquals(5, characterArray0.length);
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(characterArray0, (int) characterArray0[1], character2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 76, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-1018.0));
      assertEquals((-1018.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((-1018.0), (double)double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals((-1018.0), (double)double2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(102.0);
      assertEquals(102.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-1018.0));
      assertEquals((-1018.0), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(534.0151);
      assertEquals(534.0151, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((-283.82889123581));
      assertEquals((-283.82889123581), (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(102.0);
      assertEquals(102.0, (double)double8, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotNull(double8);
      
      doubleArray0[8] = double8;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1353);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-27), (-1353));
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1353));
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1353), 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1353), (-1353), 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'v');
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'v'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom((-99L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray1, (Random) mockRandom0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'v'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)56);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)5);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.hashCode((Object) byte0);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      
      ArrayUtils.swap(longArray0, 1779, 1779);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1116);
      shortArray0[1] = (short)351;
      shortArray0[2] = (short) (-128);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)4187;
      shortArray0[5] = (short)1989;
      shortArray0[6] = (short)4187;
      shortArray0[7] = (short) (-3343);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)54);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1116), (short)351, (short) (-128), (short)1, (short)4187, (short)1989, (short)4187, (short) (-3343)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1116), (short)351, (short) (-128), (short)1, (short)4187, (short)1989, (short)4187, (short) (-3343)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-15L);
      longArray0[2] = 1L;
      longArray0[3] = 555L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)1214);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = 'e';
      charArray0[2] = 'M';
      charArray0[3] = '|';
      charArray0[4] = 'J';
      charArray0[5] = 'l';
      charArray0[6] = 'W';
      char[] charArray1 = ArrayUtils.add(charArray0, 'M');
      assertEquals(8, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {']', 'e', 'M', '|', 'J', 'l', 'W', 'M'}, charArray1);
      assertArrayEquals(new char[] {']', 'e', 'M', '|', 'J', 'l', 'W'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      longArray0[4] = 1L;
      longArray0[5] = 0L;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)1214);
      assertEquals((-1), int0);
      
      float[] floatArray2 = ArrayUtils.insert((-1621), floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      
      boolean[] booleanArray0 = new boolean[1];
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 1412L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 1412L}, longArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 555L);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 1412L}, longArray0);
      assertArrayEquals(new long[] {0L, 1412L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-126);
      shortArray0[1] = (short) (byte) (-126);
      shortArray0[2] = (short) (byte) (-126);
      shortArray0[3] = (short) (byte) (-126);
      shortArray0[4] = (short) (byte) (-126);
      shortArray0[5] = (short) (byte) (-126);
      shortArray0[6] = (short)660;
      ArrayUtils.reverse(shortArray0, 6, (int) (short) (-126));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-126), (short) (-126), (short) (-126), (short) (-126), (short) (-126), (short) (-126), (short)660}, shortArray0);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 2, (int) (short) (-126));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 1412L}, longArray0);
      assertArrayEquals(new long[] {0L, 1412L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = '}';
      charArray0[2] = 'f';
      charArray0[3] = 'W';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-464), '\'');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -464, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1631.551038488982);
      doubleArray0[1] = (-1631.551038488982);
      doubleArray0[2] = 1.5;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 2425.9048;
      doubleArray0[5] = 301.505;
      doubleArray0[6] = (-635.712355397);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1631.551038488982), (-1631.551038488982), 1.5, 1.0, 2425.9048, 301.505, (-635.712355397)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1631.551038488982), (-1631.551038488982), 1.5, 1.0, 2425.9048, 301.505, (-635.712355397)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1631.551038488982), (-1631.551038488982), 1.5, 1.0, 2425.9048, 301.505, (-635.712355397)}, doubleArray2, 0.01);
      assertSame(doubleArray0, doubleArray2);
      assertSame(doubleArray2, doubleArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)3769;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-2962);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)3496;
      shortArray0[7] = (short) (-1229);
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)3769, (short)0, (short)0, (short) (-2962), (short)0, (short)3496, (short) (-1229)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, 54, (-538), (int) (short) (-2962));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'j');
      assertNull(charArray0);
      
      long[] longArray0 = new long[8];
      longArray0[1] = (long) 'j';
      longArray0[2] = (long) 'j';
      longArray0[3] = (long) 'j';
      longArray0[4] = (long) 'j';
      longArray0[5] = (long) 'j';
      longArray0[6] = (long) 'j';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Character character0 = new Character('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(character0, "Y~jwMpB PD2HNPkO");
      assertNotNull(abstractMap_SimpleEntry0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      Character character1 = new Character('K');
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(character1, object0);
      assertTrue(character1.equals((Object)character0));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleEntry<Object, Object>[] abstractMap_SimpleEntryArray0 = ArrayUtils.toArray((AbstractMap.SimpleEntry<Object, Object>[]) null);
      assertNull(abstractMap_SimpleEntryArray0);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 649;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 649;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 649.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-284L);
      longArray0[1] = (-669L);
      longArray0[2] = 1111L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-284L), (-669L), 1111L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 101, 101, (-2));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Object[] objectArray0 = new Object[5];
      int[] intArray0 = new int[0];
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      Object object0 = ArrayUtils.get(objectArray0, 101);
      assertEquals(5, objectArray0.length);
      assertNull(object0);
      
      objectArray0[1] = null;
      int int0 = (-1042);
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = '6';
      charArray0[2] = '?';
      charArray0[3] = ')';
      charArray0[4] = 'L';
      charArray0[5] = '2';
      charArray0[6] = 'M';
      charArray0[7] = 'F';
      ArrayUtils.shift(charArray0, (-12), (-12), (-12));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'W', '6', '?', ')', 'L', '2', 'M', 'F'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[0];
      int int0 = 101;
      ArrayUtils.shift(charArray0, 101, 101, (-2));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Object[] objectArray0 = new Object[5];
      try { 
        Byte.valueOf("/606L8a,Gqhd");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/606L8a,Gqhd\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = (-3489);
      intArray0[3] = 749;
      intArray0[5] = (-2641);
      intArray0[6] = Integer.MAX_VALUE;
      ArrayUtils.shift(intArray0, (-2641));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-3489), 749, 0, (-2641), Integer.MAX_VALUE, 8, 0}, intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-3489);
      longArray0[1] = (long) 8;
      longArray0[2] = (long) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(3, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-3489L), 8L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-101);
      ArrayUtils.reverse(byteArray0, 1517, 55);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-42), (byte) (-101)}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-101);
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-101.0F)}, floatArray0, 0.01F);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(3497.119909035);
      assertEquals(3497.119909035, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((byte) (-101));
      assertEquals((-101.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1517);
      assertEquals(1517.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3497.119909035, (-101.0), 1517.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-101);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-101)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 18688, 8);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap(booleanArray1, 0, 0, (-3714));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1631.551038488982);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 2425.9048;
      doubleArray0[5] = 301.505;
      doubleArray0[6] = (-635.712355397);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1631.551038488982), 0.0, 1.5, 1.0, 2425.9048, 301.505, (-635.712355397)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1631.551038488982), 0.0, 1.5, 1.0, 2425.9048, 301.505, (-635.712355397)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1631.551038488982), 0.0, 1.5, 1.0, 2425.9048, 301.505, (-635.712355397)}, doubleArray2, 0.01);
      assertSame(doubleArray0, doubleArray2);
      assertSame(doubleArray2, doubleArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)3769;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-2962);
      shortArray0[5] = (short)860;
      shortArray0[6] = (short)3496;
      shortArray0[7] = (short) (-1229);
      ArrayUtils.shift(shortArray0, (int) (short)3769);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1229), (short)0, (short)3769, (short)0, (short)0, (short) (-2962), (short)860, (short)3496}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, 54, (-538), (int) (short)860);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) true;
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Object[] objectArray0 = new Object[0];
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Object[] objectArray0 = new Object[7];
      int[] intArray0 = new int[2];
      intArray0[0] = (-2629);
      intArray0[1] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      int[] intArray0 = new int[0];
      String[] stringArray0 = new String[7];
      stringArray0[3] = "Y*jM";
      stringArray0[4] = "H";
      stringArray0[2] = "H";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-4);
      ArrayUtils.swap(byteArray0, (int) (byte) (-84), (int) (byte) (-84), (-90));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-84), (byte) (-84), (byte) (-84), (byte) (-4)}, byteArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-4);
      floatArray0[1] = (float) (byte) (-84);
      floatArray0[2] = (float) 1;
      floatArray0[4] = (float) (byte) (-84);
      ArrayUtils.swap(floatArray0, (-857), (-1418), (-857));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-4.0F), (-84.0F), 1.0F, 0.0F, (-84.0F)}, floatArray0, 0.01F);
      
      String string0 = ArrayUtils.toString((Object) "H");
      assertEquals("H", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2629);
      intArray0[1] = 1;
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'R');
      assertEquals(4, charArray1.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'e', 'R', 'R', 'R'}, charArray1);
      assertArrayEquals(new char[] {'e', 'R', 'R', 'R', 'R'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      MockRandom mockRandom0 = new MockRandom(2768L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray1, (Random) mockRandom0);
      assertEquals(4, charArray1.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'R', 'R', 'R', 'e'}, charArray1);
      assertArrayEquals(new char[] {'e', 'R', 'R', 'R', 'R'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-1), 1, (-1));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int int1 = 547;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 547, (-1214.5574F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 547, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-1), 1, (-1));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-24);
      ArrayUtils.swap(byteArray0, (-1494), (-160), 435);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)67, (byte)95, (byte) (-44), (byte) (-89), (byte) (-116), (byte) (-77), (byte) (-24)}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'R');
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'9'}, charArray0);
      assertArrayEquals(new char[] {'9'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      intArray0[2] = 23;
      intArray0[3] = 6;
      intArray0[4] = (-516);
      ArrayUtils.shift(intArray0, 7);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 23, 6, (-516), 0, 0, 0, (-516)}, intArray0);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      MockRandom mockRandom0 = new MockRandom(2566L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2566L;
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 1412L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 1412L}, longArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-74);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      Short short0 = new Short((short) (-8));
      assertEquals((short) (-8), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)59);
      assertEquals((short)59, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)110);
      assertEquals((short)110, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short short3 = new Short((short)110);
      assertEquals((short)110, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      Short short4 = new Short((short) (-8));
      assertEquals((short) (-8), (short)short4);
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertNotNull(short4);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 37.0F);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)59;
      intArray0[1] = (int) (short)110;
      intArray0[2] = (int) (short) (-8);
      intArray0[3] = (int) (short)59;
      intArray0[4] = (int) (short)59;
      intArray0[5] = (int) (short)110;
      intArray0[6] = (int) (short) (-8);
      intArray0[7] = (int) (short)110;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 110, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      short[] shortArray0 = new short[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 2;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {0.0, 2.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, (int) (short)0);
      assertEquals(0, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 2.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1048.4F;
      floatArray0[4] = 1.0F;
      floatArray0[2] = (-2154.0F);
      floatArray0[3] = (-714.9856F);
      floatArray0[4] = (-2154.0F);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1048.4F, 0.0F, (-2154.0F), (-714.9856F), (-2154.0F)}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)46);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)46}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[5];
      ArrayUtils.shuffle(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray2 = new short[5];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)46;
      shortArray2[1] = (short)46;
      shortArray2[2] = (short)46;
      shortArray2[3] = (short)46;
      shortArray2[4] = (short)46;
      short[] shortArray3 = ArrayUtils.subarray(shortArray2, (int) (short)46, (int) (short)46);
      assertEquals(0, shortArray3.length);
      assertEquals(5, shortArray2.length);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {}, shortArray3);
      assertArrayEquals(new short[] {(short)46, (short)46, (short)46, (short)46, (short)46}, shortArray2);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray3);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = '=';
      charArray0[2] = 'U';
      charArray0[3] = '7';
      charArray0[4] = 'c';
      charArray0[5] = '`';
      charArray0[6] = 'a';
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-102);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-102)}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 'U';
      doubleArray0[2] = (double) (byte) (-102);
      doubleArray0[3] = (double) '`';
      doubleArray0[4] = (double) 1L;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '=';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) 'U';
      intArray0[3] = (int) '7';
      intArray0[4] = (int) '7';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 85, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[21];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(21, floatArray0.length);
      assertEquals(21, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short[] shortArray0 = new Short[3];
      short short0 = (short)4056;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short) (-1459));
      assertEquals((short) (-1459), (short)short0);
      assertNotNull(short0);
      
      shortArray0[1] = short0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[2] = short1;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)4056);
      assertEquals((short)4056, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-1459));
      assertEquals((short) (-1459), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)4056, (short) (-1459), (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      
      ArrayUtils.shift(floatArray0, (int) (short)3496, 1465, (int) (short) (-1229));
      assertEquals(4, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2051.2446F);
      floatArray0[1] = 1412.0F;
      floatArray0[2] = (-1214.5574F);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2051.2446F), 1412.0F, (-1214.5574F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      charArray0[1] = '1';
      charArray0[2] = '9';
      charArray0[3] = '8';
      charArray0[4] = '$';
      charArray0[5] = '8';
      charArray0[6] = '$';
      charArray0[7] = '8';
      charArray0[8] = '1';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'$', '1', '9', '8', '$', '8', '$', '8', '1'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'j');
      assertNull(charArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'j';
      longArray0[1] = (long) 'j';
      longArray0[2] = (long) 'j';
      longArray0[3] = (long) 'j';
      longArray0[4] = (long) 'j';
      longArray0[5] = (long) 'j';
      longArray0[6] = (long) 'j';
      longArray0[7] = (long) 'j';
      ArrayUtils.swap(longArray0, 0, 0, 36);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {106L, 106L, 106L, 106L, 106L, 106L, 106L, 106L}, longArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 106L;
      doubleArray0[1] = (double) 106L;
      doubleArray0[2] = (-1047.0863086571887);
      doubleArray0[3] = (double) 106L;
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, 1, 36);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 0, 1);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-2305L));
      assertEquals((-2305L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-2305L));
      assertEquals((-2305L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)122, (byte) (-87), (byte) (-84), (byte)0, (byte) (-80), (byte)0}, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-87);
      intArray0[1] = (int) (byte) (-87);
      intArray0[2] = (int) (byte) (-84);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      boolean boolean1 = ArrayUtils.contains(intArray0, (-87));
      assertTrue(boolean1);
      assertEquals(9, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-87), (-87), (-84), 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean2);
      assertEquals(9, intArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new int[] {(-87), (-87), (-84), 0, 0, 0, 0, 0, 0}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-84);
      intArray0[1] = 8;
      intArray0[2] = 21;
      intArray0[3] = (int) (byte) (-84);
      intArray0[4] = (int) (byte) (-84);
      intArray0[5] = (int) (byte) (-84);
      boolean boolean0 = ArrayUtils.contains(intArray0, Integer.MAX_VALUE);
      assertFalse(boolean0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-84), 8, 21, (-84), (-84), (-84)}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1);
      assertEquals(6, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-84), 8, 21, (-84), (-84), (-84)}, intArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) null);
      assertNull(objectArray0);
      
      ArrayUtils.shift((char[]) null, Integer.MAX_VALUE, 121, (-2142636055));
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)6;
      intArray0[1] = (int) (byte)6;
      intArray0[2] = (-2);
      intArray0[3] = (int) (byte)6;
      intArray0[4] = (int) (byte)6;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {6, 6, (-2), 6, 6}, intArray0);
      assertArrayEquals(new int[] {6, 6, (-2), 6, 6, 6, 6, (-2), 6, 6}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = (-3489);
      intArray0[3] = 749;
      intArray0[5] = (-2641);
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = (-3489);
      intArray0[3] = 749;
      intArray0[4] = 1072;
      intArray0[5] = (-2641);
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-681));
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1644L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-681);
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (-681);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2140730554, 1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      ArrayUtils.swap(doubleArray0, 0, (-681));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      Character character0 = Character.valueOf('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)0;
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      ArrayUtils.shift((double[]) null, 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-71);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-71));
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)2, (byte)51, (byte) (-47), (byte)83, (byte)9, (byte) (-71)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)2, (byte)51, (byte) (-47), (byte)83, (byte)9}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (byte)9, (-2168.9506909));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      charArray0[1] = 'B';
      charArray0[2] = 'z';
      charArray0[3] = '@';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '5');
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'w', 'B', 'z', '@'}, charArray1);
      assertArrayEquals(new char[] {'w', 'B', 'z', '@'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 2144.0F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2144.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-87);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte) (-87);
      ArrayUtils.shift(intArray0, (int) (byte)0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, (-87)}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)122;
      char char0 = 'I';
      Character character0 = Character.valueOf('I');
      assertEquals('I', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char[] charArray0 = new char[7];
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = 'I';
      charArray0[5] = 'I';
      charArray0[6] = char0;
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = char0;
      charArray1[1] = char0;
      charArray1[2] = char0;
      charArray1[3] = 'I';
      charArray1[4] = 'I';
      charArray1[5] = 'I';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean0);
      assertEquals(6, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'I', 'I', 'I', 'I', 'I', 'I'}, charArray1);
      assertArrayEquals(new char[] {'I', 'I', 'I', 'I', 'I', 'I', 'I'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      long[] longArray0 = new long[4];
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 0L;
      ArrayUtils.shift(doubleArray0, 13);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-501L));
      assertEquals((-501L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)55;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-27), (byte)0, (byte)55}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte) (-27);
      doubleArray0[2] = 70.0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)55;
      doubleArray0[6] = (double) (byte) (-27);
      ArrayUtils.shift(doubleArray0, 74);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 55.0, (-27.0), 0.0, (-27.0), 70.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = 'k';
      charArray0[2] = '';
      charArray0[3] = '1';
      charArray0[4] = 'e';
      charArray0[5] = 'j';
      charArray0[6] = 'z';
      charArray0[7] = 'w';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean1);
      assertEquals(8, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {',', 'k', '', '1', 'e', 'j', 'z', 'w'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-14));
      assertEquals((byte) (-14), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-87));
      assertEquals((byte) (-87), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      Long long0 = new Long((byte)6);
      assertEquals(6L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      Short short0 = new Short((short)91);
      assertEquals((short)91, (short)short0);
      assertNotNull(short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short)91, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double('O');
      assertEquals(79.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double('O');
      assertEquals(79.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double3;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3974);
      shortArray0[1] = (short) (-1224);
      shortArray0[2] = (short) (-3343);
      ArrayUtils.reverse(shortArray0, (int) (short) (-1224), 3822);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-3343), (short) (-1224), (short) (-3974)}, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1674L);
      longArray0[1] = (long) (short) (-3343);
      int int0 = ArrayUtils.indexOf(longArray0, 54L);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1674L), (-3343L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-681));
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1644L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-681);
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (-681);
      ArrayUtils.reverse(longArray0, 0, 91);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-681L), 0L, (-681L), 0L, 0L, 0L, 1644L}, longArray0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) (-681L));
      assertEquals((-681.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      ArrayUtils.reverse((int[]) null, 0, (-1));
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      intArray0[2] = 9;
      intArray0[3] = 6;
      intArray0[4] = (-693);
      ArrayUtils.shift(intArray0, 7);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 9, 6, (-693), 0, 0, 0, (-516)}, intArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)122;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte) (-80);
      ArrayUtils.shift(intArray0, (-117));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {122, 0, (-80)}, intArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-117);
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (-80);
      longArray0[4] = (long) 122;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (-3L);
      longArray0[7] = (long) (byte) (-84);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-3L));
      assertEquals(7, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-117L), 0L, 0L, (-80L), 122L, 0L, (-84L)}, longArray1);
      assertArrayEquals(new long[] {(-117L), 0L, 0L, (-80L), 122L, 0L, (-3L), (-84L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      Object object0 = ArrayUtils.get(objectArray0, (-1494));
      assertEquals(10, objectArray0.length);
      assertNull(object0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1494);
      doubleArray0[1] = (double) (-1494);
      doubleArray0[2] = (double) (-1494);
      doubleArray0[3] = (double) (-1494);
      doubleArray0[4] = (double) (-1494);
      doubleArray0[5] = (double) (-1494);
      doubleArray0[6] = 102.0;
      doubleArray0[7] = (double) (-1494);
      doubleArray0[8] = (double) (-1494);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1494.0), (-1494.0), (-1494.0), (-1494.0), (-1494.0), (-1494.0), 102.0, (-1494.0), (-1494.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true}, booleanArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-295);
      intArray0[1] = 2;
      intArray0[2] = 2144;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2144, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals((-1), int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1989;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (-1));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1989.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1989.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)1989;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1989L}, longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)1989;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[0];
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      boolean boolean3 = ArrayUtils.isEmpty((Object[]) booleanArray0);
      assertFalse(boolean3);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)102);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      org.evosuite.runtime.Random.setNextRandom((-1015));
      boolean[] booleanArray1 = new boolean[0];
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2144146449);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 649;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (double) 2753;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 10.0, 2753);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {10.0, 2753.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int1);
      assertEquals(2, booleanArray0.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals(0, int0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[2] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.cardinality());
      assertEquals(7, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'i');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals((-1), int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Object[] objectArray0 = new Object[7];
      int[] intArray0 = new int[2];
      intArray0[1] = (-1);
      objectArray0[1] = (Object) (-1);
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray1, true, (-1));
      assertEquals((-1), int1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = '5';
      charArray0[2] = '_';
      charArray0[3] = 'W';
      charArray0[4] = 'O';
      charArray0[5] = 'y';
      charArray0[6] = 'r';
      charArray0[7] = '}';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '_');
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(8, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'_', '5', '_', 'W', 'O', 'y', 'r', '}'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 104);
      assertEquals((-1), int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, (-1494));
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      ArrayUtils.swap((byte[]) null, (-2961), (-3339), (-2961));
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-3339);
      floatArray0[1] = (float) (-3339);
      int int0 = ArrayUtils.indexOf(floatArray0, (-3339.0F), (-2146860981));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      int int0 = (-1494);
      Object object0 = ArrayUtils.get(objectArray0, (-1494));
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      int int0 = 1351;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 639L, 1351);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(objectArray0, (Comparator<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2144146449;
      intArray0[1] = 2144146449;
      intArray0[2] = 2144146449;
      intArray0[3] = 2144146449;
      intArray0[4] = 2144146449;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 12);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2144146449, 2144146449, 2144146449, 2144146449, 2144146449}, intArray0);
      assertArrayEquals(new int[] {2144146449, 2144146449, 2144146449, 2144146449, 2144146449}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.shift(intArray1, 2144146449, 2144146449, 7229);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2144146449, 2144146449, 2144146449, 2144146449, 2144146449}, intArray0);
      assertArrayEquals(new int[] {2144146449, 2144146449, 2144146449, 2144146449, 2144146449}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.swap((long[]) null, (-521), 2144146449, 2144146449);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short)0;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-22);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-22), (int) (byte) (-22));
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-22), (byte) (-22), (byte) (-22), (byte) (-22)}, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'o', (-3833));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)28);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-22), (byte) (-22), (byte) (-22), (byte) (-22)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-22), (byte) (-22), (byte) (-22), (byte) (-22), (byte)28}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      ArrayUtils.shift(longArray0, (-611), 512, (-611));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[2] = "";
      int[] intArray0 = new int[2];
      intArray0[0] = 7;
      intArray0[1] = (-1);
      ArrayUtils.shift(intArray0, (-1));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1), 7}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = (-3489);
      intArray0[3] = 749;
      intArray0[4] = 1072;
      intArray0[5] = (-2641);
      intArray0[6] = Integer.MAX_VALUE;
      ArrayUtils.shift(intArray0, (-2641));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-3489), 749, 1072, (-2641), Integer.MAX_VALUE, 8, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2377;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 2377, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2916.889F;
      floatArray0[1] = (-909.979F);
      floatArray0[2] = (-773.0F);
      floatArray0[3] = 2144.0F;
      floatArray0[4] = (-1663.1F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1248.142F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2916.889F, (-909.979F), (-773.0F), 2144.0F, (-1663.1F), 0.0F, 1248.142F, 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.swap(booleanArray0, (-3353), (-3353));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 13L;
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'g');
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'g', 'g'}, charArray0);
      assertArrayEquals(new char[] {'g'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 2080374784);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2080374784, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3845;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 4095, 608);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 4095;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 453);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {4095}, intArray0);
      assertArrayEquals(new int[] {4095}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3845}, shortArray0);
      assertArrayEquals(new short[] {(short)3845}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-228), (-516));
      assertNull(byteArray0);
      
      ArrayUtils.shift(intArray0, (-126));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-516), 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 4066, 608);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 4066;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 453);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {4066}, intArray0);
      assertArrayEquals(new int[] {4066}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true, false, true}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-1), 608);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 608;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 608);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {608, (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)701;
      shortArray0[2] = (short)1232;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-2343);
      shortArray0[5] = (short)2;
      shortArray0[6] = (short) (-1);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)701, (short)1232, (short)0, (short) (-2343), (short)2, (short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)701, (short)1232, (short)0, (short) (-2343), (short)2, (short) (-1)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      Character character0 = Character.valueOf('J');
      assertEquals('J', (char)character0);
      assertNotNull(character0);
      
      ArrayUtils.hashCode((Object) character0);
      boolean boolean0 = ArrayUtils.isNotEmpty((Double[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'J';
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) 'J';
      longArray0[6] = (long) 'J';
      longArray0[7] = (long) 'J';
      boolean boolean1 = ArrayUtils.contains(longArray0, 74L);
      assertTrue(boolean1);
      assertEquals(9, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {74L, 0L, 0L, 74L, 74L, 0L, 74L, 74L, 0L}, longArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'J', 0);
      assertEquals("{0, 1, 3, 4, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'J', 'J', '\u0000', 'J', 'J', 'J'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Long[] longArray1 = ArrayUtils.add((Long[]) null, (Long) 74L);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 74L, 74L, 0L, 74L, 74L, 0L, 74L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      shortArray0[2] = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray1 = new Short[5];
      shortArray1[0] = short1;
      shortArray1[1] = (Short) (short)0;
      shortArray1[2] = short1;
      shortArray1[3] = (Short) (short)0;
      shortArray1[4] = short1;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      Float float0 = new Float((float) short0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayUtils.shift(byteArray0, (int) short0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)9438);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      
      Short[] shortArray3 = ArrayUtils.toObject(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray3.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (short)0);
      assertFalse(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertArrayEquals(new char[] {'2'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray0, '2');
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      Double double0 = new Double(70.0);
      assertEquals(70.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayUtils.hashCode((Object) double0);
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 70.0;
      doubleArray0[3] = 70.0;
      int int0 = new Integer((-610));
      assertEquals((-610), int0);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      Character character0 = Character.valueOf('J');
      assertEquals('J', (char)character0);
      assertNotNull(character0);
      
      ArrayUtils.hashCode((Object) character0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'J';
      floatArray0[1] = (float) 'J';
      floatArray0[2] = (float) 'J';
      floatArray0[3] = 1048.0F;
      floatArray0[4] = (float) 'J';
      floatArray0[5] = (float) 'J';
      floatArray0[6] = (float) 'J';
      floatArray0[7] = (float) 'J';
      floatArray0[8] = (float) 'J';
      ArrayUtils.shuffle(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {74.0F, 74.0F, 1048.0F, 74.0F, 74.0F, 74.0F, 74.0F, 74.0F, 74.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Double[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (long) 'J';
      longArray0[2] = (long) 'J';
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) 'J';
      longArray0[5] = (long) 'J';
      longArray0[6] = (long) 'J';
      longArray0[7] = (long) 'J';
      longArray0[8] = 1039L;
      boolean boolean1 = ArrayUtils.contains(longArray0, (-3L));
      assertFalse(boolean1);
      assertEquals(9, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 74L, 74L, 74L, 74L, 74L, 74L, 74L, 1039L}, longArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'J', 0);
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(6, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J', 'J', 'J'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)9438;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-488));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)9438}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.swap(booleanArray0, (int) (byte) (-126), (-2146563517));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      ArrayUtils.shift(objectArray0, (int) (byte) (-126), (-2146563517), (int) (byte) (-126));
      assertEquals(1, objectArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2146563517);
      floatArray0[1] = (float) (byte) (-126);
      floatArray0[2] = (float) (byte) (-126);
      floatArray0[3] = (float) (-2146563517);
      ArrayUtils.swap(floatArray0, (int) (byte) (-126), (-1164));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-2.14656346E9F), (-126.0F), (-126.0F), (-2.14656346E9F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)1779;
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((Object[]) null, (int) (short)0, (int) (short)1779, 0);
      ArrayUtils.shuffle(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1779, (short)0}, shortArray0);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((short)1779);
      assertEquals(1779.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1779;
      shortArray1[1] = (short)1779;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray1, (short) (-2801));
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(2, shortArray1.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(bitSet1);
      assertArrayEquals(new short[] {(short)1779, (short)1779}, shortArray1);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, (int) (short)2, (-2070787803));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) null, (int) (short)2, (int) (short)0, (int) (short)0);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.valueOf("lng");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[2] = boolean1;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)5);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)5, (byte)5, (byte)5}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)5, (byte)5}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)5, (int) (byte)5);
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)5, (byte)5, (byte)5}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)5, (byte)5, (byte)5}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)5, (byte)5}, byteArray1);
      assertArrayEquals(new byte[] {(byte)5}, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (-1));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1216.5375419);
      doubleArray0[1] = (double) (byte)68;
      doubleArray0[2] = (double) (byte)68;
      doubleArray0[3] = (double) (byte)68;
      doubleArray0[4] = 10.0;
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray1);
      
      MutableInt[] mutableIntArray0 = new MutableInt[7];
      MutableInt mutableInt0 = new MutableInt(68.0);
      assertEquals("68", mutableInt0.toString());
      assertEquals((short)68, mutableInt0.shortValue());
      assertEquals((byte)68, mutableInt0.byteValue());
      assertEquals(68.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(68, (int)mutableInt0.getValue());
      assertEquals(68, (int)mutableInt0.toInteger());
      assertEquals(68.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(68, mutableInt0.intValue());
      assertEquals(68L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(68.0);
      assertEquals(68, (int)mutableInt1.getValue());
      assertEquals((byte)68, mutableInt1.byteValue());
      assertEquals(68.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(68, (int)mutableInt1.toInteger());
      assertEquals(68L, mutableInt1.longValue());
      assertEquals(68.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals("68", mutableInt1.toString());
      assertEquals((short)68, mutableInt1.shortValue());
      assertEquals(68, mutableInt1.intValue());
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      mutableIntArray0[1] = mutableInt1;
      mutableIntArray0[2] = mutableInt1;
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      intArray0[2] = (-516);
      intArray0[3] = 0;
      intArray0[4] = (-693);
      ArrayUtils.shift(intArray0, 7);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, (-516), 0, (-693), 0, 0, 0, (-516)}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)64;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-1));
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)64}, byteArray0);
      assertArrayEquals(new byte[] {(byte)64}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null, (int) (byte) (-1));
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.insert(90, booleanArray0, booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      Long long0 = new Long(145L);
      assertEquals(145L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      long[] longArray1 = new long[0];
      ArrayUtils.shuffle(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-2146030681));
      assertEquals((-2146030681), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals((-2146030681), (int)integer1);
      assertEquals(3, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(8192);
      assertEquals(8192, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, (Integer[]) null);
      assertEquals(3, integerArray1.length);
      assertEquals(3, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-91);
      byteArray0[4] = (byte) (-61);
      byteArray0[7] = (byte)7;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(2670, intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      ArrayUtils.reverse(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((byte)26);
      assertEquals(26, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      Integer integer1 = new Integer((byte)39);
      assertEquals(39, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(18688);
      assertEquals(18688, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte)26, (byte) (-61));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 26, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-4);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)57, (byte) (-23), (byte) (-4)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-222));
      assertEquals((-222), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[2]);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0, (-222)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte)7;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)39, (byte)26, (byte)0, (byte) (-119), (byte)95, (byte) (-91), (byte) (-61), (byte)7}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(2670, intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-91);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-91.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-91.0F), (-91.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      ArrayUtils.reverse(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((byte)26);
      assertEquals(26, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((byte)39);
      assertEquals(39, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(18688);
      assertEquals(18688, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((byte)39);
      assertEquals(39, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((byte)0);
      assertEquals(0, (int)integer5);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[3]);
      assertEquals(18688, (int)integer6);
      assertEquals(8, integerArray0.length);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-102));
      assertEquals((-102), (int)integer7);
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {26, (-1), 39, 18688, 39, 0, 18688, (-102)}, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 91;
      intArray0[2] = 272;
      intArray0[3] = (-1028);
      intArray0[1] = 2693;
      intArray0[5] = (-873);
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      Integer integer0 = new Integer((-1028));
      assertEquals((-1028), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(70);
      assertEquals(70, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(9);
      assertEquals(9, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(8);
      assertEquals(8, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) (-1028);
      intArray0[1] = 0;
      integerArray0[2] = (Integer) (-1028);
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) (-873);
      integerArray0[5] = (Integer) (-1028);
      integerArray0[6] = integer1;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 360);
      assertEquals(7, intArray1.length);
      assertEquals(7, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1028), 360, (-1028), 0, (-873), (-1028), 70}, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-47);
      shortArray0[1] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[3] = (short)0;
      shortArray0[6] = (short) (-2230);
      ArrayUtils.swap(shortArray0, (int) (short)0, 10, (-2305));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-47), (short) (-1), (short)0, (short)0, (short) (-1), (short)0, (short) (-2230), (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-47);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-47.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-47.0F), (-47.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) short0);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((Number) short0);
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals("0", mutableInt1.toString());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0, mutableInt1.intValue());
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 0;
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)125;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-100);
      byteArray0[5] = (byte)38;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(12, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte)0);
      assertTrue(boolean1);
      assertEquals(7, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {8, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean2);
      assertEquals(0, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[0] = boolean3;
      Boolean boolean4 = Boolean.valueOf(true);
      assertTrue(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      booleanArray0[1] = boolean4;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      int[] intArray0 = new int[0];
      String[] stringArray0 = new String[10];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-94);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1989, (Object[]) stringArray0, (Object[]) stringArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1989, Length: 10
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = (-3489);
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)125;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)38;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(12, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte)7);
      assertFalse(boolean1);
      assertEquals(7, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {8, 0, (-3489), 0, 0, 0, 0}, intArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = (-1214.5574F);
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, " in an array of ");
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte)2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)2}, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (byte)2;
      boolean boolean0 = ArrayUtils.contains(intArray0, 2);
      assertTrue(boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)122, (byte) (-87), (byte) (-84), (byte)0, (byte) (-80), (byte)0}, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte) (-87);
      intArray0[2] = (int) (byte) (-84);
      intArray0[3] = (int) (byte) (-84);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      boolean boolean1 = ArrayUtils.contains(intArray0, (-87));
      assertTrue(boolean1);
      assertEquals(9, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, (-87), (-84), (-84), 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 2144);
      assertEquals(9, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1, (-2753), (double) (-2753));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2144;
      floatArray0[1] = (float) 2144;
      floatArray0[2] = (float) 2144;
      floatArray0[3] = (float) 2144;
      floatArray0[4] = (float) 1;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (float) 2144;
      floatArray0[8] = (float) 2144;
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, 1.0F, 0);
      assertEquals(5, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals("{4}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(9, floatArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new float[] {2144.0F, 2144.0F, 2144.0F, 2144.0F, 1.0F, 0.0F, 0.0F, 2144.0F, 2144.0F}, floatArray0, 0.01F);
      assertNotSame(bitSet1, bitSet0);
      
      bitSet0.xor(bitSet1);
      assertEquals(5, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals("{4}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, doubleArray0.length);
      assertEquals(9, floatArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new float[] {2144.0F, 2144.0F, 2144.0F, 2144.0F, 1.0F, 0.0F, 0.0F, 2144.0F, 2144.0F}, floatArray0, 0.01F);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(bitSet0, bitSet1);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1431655765, (-1897));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)0;
      MockRandom mockRandom0 = new MockRandom((byte) (-69));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-69), (byte)0, (byte) (-1)}, byteArray0);
      
      Character character0 = Character.valueOf('9');
      assertEquals('9', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('9');
      assertEquals('9', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('9');
      assertEquals('9', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = new Character('');
      assertEquals('', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) '9';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 57.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-792.0F));
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.addFirst((float[]) null, (float) (byte) (-69));
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-69.0F)}, floatArray1, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 57.0, 0.0);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0), 57.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 3547, 3547, 3547);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Long[] longArray0 = new Long[2];
      Long long0 = Long.valueOf((-2367L));
      assertEquals((-2367L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(3547);
      assertEquals(3547L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-2147483648L));
      assertEquals((-2147483648L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      Long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, long2);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)34, (-1675), 90.0);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[0];
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      short[] shortArray0 = new short[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Boolean[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) (short)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 938.1, (double) (short)0);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(7, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(bitSet1, bitSet0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '/';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean1);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '/', 'n', 'n'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 2144);
      assertEquals(9, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1, (-2753), (double) (-2753));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2144;
      floatArray0[1] = (float) 2144;
      floatArray0[2] = (float) 2144;
      floatArray0[3] = (float) 2144;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (float) 2144;
      floatArray0[8] = (float) 2144;
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, 1.0F, 0);
      assertEquals("{4, 5}", bitSet1.toString());
      assertEquals(2, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(6, bitSet1.length());
      assertEquals(9, floatArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new float[] {2144.0F, 2144.0F, 2144.0F, 2144.0F, 1.0F, 1.0F, 0.0F, 2144.0F, 2144.0F}, floatArray0, 0.01F);
      assertNotSame(bitSet1, bitSet0);
      
      bitSet0.xor(bitSet1);
      assertEquals("{4, 5}", bitSet1.toString());
      assertEquals(2, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(6, bitSet1.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals("{4, 5}", bitSet0.toString());
      assertEquals(0, doubleArray0.length);
      assertEquals(9, floatArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new float[] {2144.0F, 2144.0F, 2144.0F, 2144.0F, 1.0F, 1.0F, 0.0F, 2144.0F, 2144.0F}, floatArray0, 0.01F);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(bitSet0, bitSet1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-2305L));
      assertEquals((-2305L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-2305L));
      assertEquals((-2305L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1316);
      ArrayUtils.shift(shortArray0, (-945));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1316)}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-1316)}, shortArray0);
      
      long[] longArray1 = ArrayUtils.insert((int) (short) (-1316), (long[]) null, (long[]) null);
      assertNull(longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      ArrayUtils.shift(byteArray0, (int) (short) (-1316));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)19, (byte)19}, byteArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-1), object0);
      assertNotNull(object0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)19;
      intArray0[1] = (int) (byte)19;
      intArray0[2] = (int) (byte) (-1);
      int[] intArray1 = ArrayUtils.insert(1, intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {19, 19, (-1)}, intArray0);
      assertArrayEquals(new int[] {19, 19, 19, (-1), 19, (-1)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean boolean2 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean2);
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-533);
      ArrayUtils.shift(intArray0, 11);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, (-533), 0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-533);
      floatArray0[1] = (float) (-533);
      floatArray0[2] = (float) (-533);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-533.0F), (-533.0F), (-533.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-533.0F), (-533.0F), (-533.0F)}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1997);
      shortArray0[1] = (short)512;
      shortArray0[2] = (short) (-2065);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1997), (short)512, (short) (-2065)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'('}, charArray0);
      
      float[] floatArray0 = new float[7];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[2] = (-181);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 122);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 122, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      longArray0[4] = 1L;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.shift(floatArray0, (int) (short) (-1229), 1465, (int) (short)3496);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = (-1214.5574F);
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1214.5574F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      charArray0[1] = '1';
      charArray0[2] = '9';
      charArray0[3] = '8';
      charArray0[4] = '$';
      charArray0[5] = '8';
      charArray0[6] = '$';
      charArray0[7] = '8';
      int int0 = ArrayUtils.indexOf(floatArray0, (-1214.5574F), (-5125));
      assertEquals(2, int0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1214.5574F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '9';
      intArray0[1] = (int) '8';
      intArray0[2] = (int) '8';
      intArray0[3] = (-5125);
      intArray0[4] = (-1610612736);
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {57, 56, 56, (-5125), (-1610612736)}, intArray0);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-1610612736));
      assertEquals((-1610612736L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2147483648L));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1610612736L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2545;
      shortArray0[1] = (short)2491;
      shortArray0[2] = (short)1946;
      shortArray0[3] = (short) (-453);
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)3235;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2545, (short)2491, (short)1946, (short) (-453), (short)4, (short)1, (short)2, (short)3235}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-556), (int) (short)2491);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2545, (short)2491, (short)1946, (short) (-453), (short)4, (short)1, (short)2, (short)3235}, shortArray0);
      assertArrayEquals(new short[] {(short)2545, (short)2491, (short)1946, (short) (-453), (short)4, (short)1, (short)2, (short)3235}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short)3235;
      floatArray0[2] = (float) (short)3235;
      int int0 = ArrayUtils.indexOf(floatArray0, 3235.0F, (int) (short)1946);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 3235.0F, 3235.0F}, floatArray0, 0.01F);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray0);
      assertEquals(8, shortArray2.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)2545, (short)2491, (short)1946, (short) (-453), (short)4, (short)1, (short)2, (short)3235}, shortArray2);
      assertArrayEquals(new short[] {(short)2545, (short)2491, (short)1946, (short) (-453), (short)4, (short)1, (short)2, (short)3235}, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)4;
      intArray0[1] = (int) (short)4;
      intArray0[2] = 2766;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) (short)4;
      intArray0[5] = (int) (short)1946;
      intArray0[6] = 10;
      intArray0[7] = (int) (short)1946;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-3003));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3003, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short) (-280);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)5348;
      shortArray0[4] = (short)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2379), 2960);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)91, (short) (-280), (short)0, (short)5348, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)91, (short) (-280), (short)0, (short)5348, (short)1}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      int int0 = 2748;
      int[] intArray0 = new int[4];
      intArray0[0] = 2748;
      intArray0[1] = 2748;
      intArray0[1] = 2748;
      intArray0[3] = 2748;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2748, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2748, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      Long long0 = new Long((-2305L));
      assertEquals((-2305L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-2305L));
      assertEquals((-2305L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-15846);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2305L);
      doubleArray0[3] = (-1637.4350553426402);
      doubleArray0[4] = (-1420.0);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-2305.0), 0.0, 0.0, (-1637.4350553426402), (-1420.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)7;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)7}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)7, (byte) (-4), (byte)7}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray1, (byte)7);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)7}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)7, (byte) (-4), (byte)7}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-4), (byte) (-4)}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-15846);
      longArray0[1] = (long) (byte) (-4);
      longArray0[2] = (long) (byte)7;
      longArray0[3] = (long) (byte)7;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-4L));
      assertEquals(1, int0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-15846L), (-4L), 7L, 7L}, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-4);
      intArray0[1] = (int) (byte) (-4);
      intArray0[2] = 1;
      intArray0[3] = (int) (byte)7;
      intArray0[4] = (int) (byte)7;
      intArray0[5] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-4), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-533);
      ArrayUtils.swap(intArray0, (-533), (-533), (-533));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-533), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-533), 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      int[] intArray0 = new int[4];
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertArrayEquals(new char[] {'('}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '(';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      int int0 = 2748;
      int[] intArray0 = new int[4];
      intArray0[0] = 2748;
      intArray0[1] = 2748;
      intArray0[2] = 2748;
      intArray0[3] = 2748;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2748, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2748, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)122;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) (byte) (-12);
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[4] = (double) (byte)2;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {122.0, 2.0, (-12.0), 0.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-3615.6701390152994);
      double double1 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 439.302738184;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 391.09254673098866;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.0, (-3615.6701390152994), 0.0, 439.302738184, 1.0, 391.09254673098866, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = 8;
      Integer integer0 = new Integer(8);
      assertEquals(8, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3105);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y*jM";
      stringArray0[1] = "H";
      stringArray0[2] = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      stringArray0[3] = "";
      stringArray0[4] = "Index: ";
      stringArray0[5] = ", '";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1306.0795F);
      ArrayUtils.swap((byte[]) null, 4126, 1219);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-106);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)20;
      ArrayUtils.swap(byteArray0, 4126, 90);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-106), (byte)0, (byte)64, (byte)20, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)123;
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) (byte)123);
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)123, (byte)0}, byteArray0);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[1] = characterArray0[0];
      characterArray0[3] = characterArray0[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      int[] intArray0 = new int[8];
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(673.87);
      assertEquals(673.87, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)1, (int) (byte)1);
      assertEquals((-1), int0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, false);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 649;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      ArrayUtils.shift(shortArray0, 96);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      ArrayUtils.swap(booleanArray0, (-842), (-860), 649);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 1;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      char[] charArray0 = new char[8];
      charArray0[0] = '/';
      charArray0[1] = 'e';
      charArray0[2] = 'W';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = '/';
      charArray0[6] = ' ';
      charArray0[7] = '#';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertEquals(16, charArray1.length);
      assertEquals(8, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'/', 'e', 'W', '\'', '\'', '/', ' ', '#'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-14));
      assertEquals((byte) (-14), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-122));
      assertEquals((byte) (-122), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte2;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)75;
      shortArray0[1] = (short) (byte) (-14);
      shortArray0[2] = (short) (byte) (-126);
      ArrayUtils.shift(shortArray0, (int) (byte) (-14));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-126), (short)75, (short) (-14)}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-126), (short)75, (short) (-14)}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean1);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[11];
      booleanArray0[1] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-47);
      shortArray0[0] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[3] = (short)0;
      shortArray0[6] = (short)0;
      ArrayUtils.swap(shortArray0, (int) (short)0, 10, (int) (short) (-1));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)0, (short)0, (short) (-1), (short)0, (short)0, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[0];
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1));
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      ArrayUtils.reverse(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-693);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 9;
      longArray0[5] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 22);
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-693L), 0L, 9L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-87);
      int[] intArray0 = new int[2];
      ArrayUtils.reverse(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1822L;
      longArray0[1] = (long) (byte)122;
      longArray0[2] = (long) (byte) (-87);
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)122;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) 1720;
      longArray0[7] = (long) (byte)1;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)122);
      assertEquals(4, int0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {1822L, 122L, (-87L), 0L, 122L, 0L, 1720L, 1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 8, 8);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 8);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {8L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 97L);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-42);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'S');
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'W', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ArrayUtils.reverse((long[]) null, (int) 'E', 46);
      double[] doubleArray0 = new double[6];
      ArrayUtils.reverse(charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'W'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-747.3447776317711);
      doubleArray0[1] = (-2651.997);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2601.2909547496);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2337.4140744;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 2403.11825;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-747.3447776317711), (-2651.997), 0.0, (-2601.2909547496), 0.0, 2337.4140744, 0.0, 1.0, 2403.11825}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.insert((-938), (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)453;
      shortArray0[1] = (short)1389;
      shortArray0[2] = (short)567;
      shortArray0[3] = (short) (-448);
      shortArray0[4] = (short)1627;
      shortArray0[5] = (short) (-1486);
      shortArray0[6] = (short) (-753);
      shortArray0[7] = (short) (-515);
      ArrayUtils.reverse(shortArray0, (int) (short)453, (-938));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)453, (short)1389, (short)567, (short) (-448), (short)1627, (short) (-1486), (short) (-753), (short) (-515)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1161L);
      longArray0[1] = (-15L);
      longArray0[2] = 1L;
      longArray0[3] = 555L;
      longArray0[4] = 0L;
      longArray0[5] = (-1161L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-1161L));
      assertEquals(6, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1161L), (-15L), 1L, 555L, 0L, (-1161L)}, longArray0);
      assertArrayEquals(new long[] {(-15L), 1L, 555L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 2, 2);
      assertEquals(6, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-1161L), (-15L), 1L, 555L, 0L, (-1161L)}, longArray0);
      assertArrayEquals(new long[] {(-15L), 1L, 555L, 0L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1160.5233F;
      Character character0 = new Character('3');
      assertEquals('3', (char)character0);
      assertNotNull(character0);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, (int) '3', '3');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, (-35L));
      assertEquals((-1), int0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-15L);
      longArray0[2] = 1L;
      longArray0[3] = 555L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertEquals(6, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-15L), 1L, 555L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-15L), 1L, 555L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (-329), 2);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 2, 2);
      assertEquals(6, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, (-15L), 1L, 555L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-15L), 1L, 555L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = 'f';
      charArray0[2] = '_';
      charArray0[3] = 'r';
      charArray0[4] = 'W';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-329), '}');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -329, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'S');
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'R', 'R'}, charArray0);
      assertArrayEquals(new char[] {'R', 'R'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 631;
      longArray0[1] = (long) 631;
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {631L, 631L, 0L, 0L}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {631L, 631L, 0L, 0L}, longArray0);
      
      char[] charArray1 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-3075.6606F);
      floatArray0[1] = 2123.0F;
      floatArray0[2] = (float) (byte)5;
      floatArray0[3] = (float) (byte)5;
      floatArray0[4] = 990.0F;
      ArrayUtils.shift(floatArray0, (-3896), 3, (-427));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {2123.0F, 5.0F, (-3075.6606F), 5.0F, 990.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = (double) 5.0F;
      doubleArray0[2] = (double) 5.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-352.1180924704), (-851.0));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {3.0, 5.0, 5.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 2146690621);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146690621, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1665));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1665);
      floatArray0[1] = (float) (-1665);
      floatArray0[3] = (float) (-1665);
      floatArray0[4] = (float) (-1665);
      floatArray0[5] = (float) 'U';
      floatArray0[6] = (float) 'U';
      floatArray0[7] = (float) 'U';
      ArrayUtils.shift(floatArray0, (-1665));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1665.0F), 0.0F, (-1665.0F), (-1665.0F), 85.0F, 85.0F, 85.0F, (-1665.0F)}, floatArray0, 0.01F);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 18688, 8);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 18688);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {18688L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift((float[]) null, 2648);
      int[] intArray0 = new int[9];
      intArray0[0] = 18688;
      intArray0[1] = 2648;
      intArray0[2] = 2648;
      intArray0[3] = 18688;
      intArray0[4] = 2648;
      intArray0[5] = 2648;
      intArray0[6] = 2648;
      intArray0[7] = 2648;
      intArray0[8] = 18688;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18688, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-681));
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1644L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-681);
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (-681);
      ArrayUtils.reverse(longArray0, 0, 91);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-681L), 0L, (-681L), 0L, 0L, 0L, 1644L}, longArray0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) (-681L));
      assertEquals((-681.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[6] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.shift(floatArray0, (int) (short) (-1229), 1465, (int) (short)3496);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-204.3344F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-204.3344F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = '?';
      charArray0[2] = '#';
      charArray0[3] = '?';
      int int0 = ArrayUtils.indexOf(charArray0, '}', (-2484));
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'g', '?', '#', '?'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 11;
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) 11;
      floatArray0[3] = (float) ')';
      floatArray0[4] = (float) ')';
      floatArray0[5] = (float) 0;
      ArrayUtils.shift(floatArray0, 0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 11.0F, 0.0F, 41.0F, 41.0F, 0.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)68;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-12), (byte)68, (byte)68, (byte)68}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte)68, (byte)68, (byte)68}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      ArrayUtils.shift(floatArray0, 1235, 90, (-1));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, 'K');
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertEquals(1, int0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.indexOf(charArray0, ')');
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) ')';
      ArrayUtils.shift(floatArray0, (-1513));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, 0.0F, 0.0F, 41.0F, 1.0F}, floatArray0, 0.01F);
      
      int int2 = ArrayUtils.indexOf(charArray0, '<', (-1513));
      assertEquals((-1), int2);
      assertEquals(0, charArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)68;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-20), (byte)0, (byte)0, (byte)58, (byte)68}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-20), (byte)0, (byte)0, (byte)58, (byte)68}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      long[] longArray0 = new long[19];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 639L, 1351);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(19, longArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-533);
      ArrayUtils.shift(intArray0, 11);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-533);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 0;
      ArrayUtils.toStringArray(objectArray0, (String) null);
      ArrayUtils.removeAllOccurrences(floatArray0, (float) (-533));
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Double double0 = new Double(70.0);
      ArrayUtils.hashCode((Object) double0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 70.0;
      doubleArray0[1] = 70.0;
      doubleArray0[2] = 70.0;
      doubleArray0[3] = 70.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 70.0, (-610));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)0;
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      Object[] objectArray0 = new Object[0];
      Double double0 = new Double((short)0);
      ArrayUtils.indexesOf(objectArray0, (Object) double0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (short)0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '?');
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '?';
      longArray0[1] = (long) '?';
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.indexesOf(doubleArray0, (double) 63L, 351);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 157L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      ArrayUtils.hashCode((Object) double0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      int int0 = ArrayUtils.indexOf(doubleArray0, Double.NaN, (-610));
      assertEquals(0, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      long[] longArray0 = new long[4];
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 0L;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1517.478197799237);
      assertEquals((-1), int0);
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)2;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      Object[] objectArray0 = new Object[0];
      Double double0 = new Double((short)2);
      ArrayUtils.indexesOf(objectArray0, (Object) double0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (short)0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)0;
      Short short0 = new Short((short)91);
      Short[] shortArray1 = new Short[5];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1, "Threshold must not be negative");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, " in bn arra[ of ");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = 102.0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'F';
      charArray0[0] = 'F';
      charArray0[1] = 'f';
      charArray0[2] = 'Z';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      ArrayUtils.toStringArray((Object[]) characterArray0, "=");
      AbstractMap.SimpleEntry<Object, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 4);
      Integer integer0 = new Integer(0);
      Float float0 = new Float(29.0F);
      AbstractMap.SimpleImmutableEntry<Integer, Float> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Float>(integer0, float0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      Float float1 = new Float(29.0F);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(float1, "");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 'F';
      doubleArray0[2] = (double) 'F';
      doubleArray0[3] = (double) 'f';
      doubleArray0[4] = (double) 'F';
      doubleArray0[5] = (double) 'f';
      doubleArray0[6] = (double) 29.0F;
      doubleArray0[7] = (double) 'f';
      doubleArray0[8] = (double) 'Z';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 29.0F, 0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) "=", bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-92);
      intArray0[1] = 1526;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2749);
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = (-2780);
      intArray0[4] = 0;
      intArray0[5] = 56;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 0);
      assertArrayEquals(new int[] {1, (-2780), 56}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.indexesOf(intArray0, 3105);
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-2475));
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1353);
      intArray0[1] = 91;
      intArray0[2] = 272;
      intArray0[3] = (-1028);
      intArray0[4] = 2693;
      intArray0[5] = (-873);
      ArrayUtils.indexesOf(intArray0, 360);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 1, (byte) (-126));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 36);
      int[] intArray0 = new int[1];
      intArray0[0] = 36;
      int int0 = ArrayUtils.indexOf(intArray0, 36);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)6;
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)671;
      shortArray0[2] = (short) (-1490);
      shortArray0[3] = (short)56;
      shortArray0[4] = (short) (-2602);
      ArrayUtils.clone(shortArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-516);
      intArray0[2] = 9;
      intArray0[3] = 6;
      intArray0[4] = (-693);
      ArrayUtils.shift(intArray0, 7);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)116;
      ArrayUtils.indexOf(byteArray0, (byte)90);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)102;
      shortArray0[1] = (short) (-2677);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short short0 = (short)682;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-586), (short)682);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -586, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1214.5574F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1289.3716F;
      floatArray0[5] = (-3340.953F);
      floatArray0[6] = (-5253.75F);
      floatArray0[7] = (-309.9384F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-1214.5574F));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)0;
      byteArray0[1] = (byte)8;
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte) (-61);
      ArrayUtils.shift(intArray0, (int) (byte)0);
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 0.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-106.0F);
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      char[] charArray1 = ArrayUtils.add(charArray0, '{');
      assertArrayEquals(new char[] {'W', '{'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1587.6F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1538.4F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-1.0F), (-1587.6F), 1538.4F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      Character character0 = new Character('H');
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3143;
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      charArray0[5] = '\"';
      ArrayUtils.shift(charArray0, 0, (int) (short)3143, 1921);
      assertArrayEquals(new char[] {'\"', 'H', 'H', 'H', 'H', 'H'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)91);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 38);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      short[] shortArray0 = new short[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(2, bitSet0.cardinality());
      
      ArrayUtils.isSorted((Boolean[]) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) (short)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 938.1, (double) (short)0);
      assertTrue(bitSet1.isEmpty());
      
      char[] charArray0 = new char[4];
      charArray0[1] = '/';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      ArrayUtils.reverse((float[]) null);
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(4, characterArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.removeAllOccurrences(intArray0, 0);
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      ArrayUtils.indexesOf(intArray1, (-1665));
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      ArrayUtils.shift(charArray0, (int) 'U');
      ArrayUtils.toPrimitive((Double[]) null, (double) 0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      ArrayUtils.shift(floatArray0, 0);
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)3;
      ArrayUtils.reverse(byteArray0, 1517, 1517);
      float[] floatArray0 = new float[1];
      byteArray0[2] = (byte)3;
      ArrayUtils.reverse(floatArray0);
      ArrayUtils.shift(floatArray0, (int) (byte)3, (-1128), 256);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)1779;
      ArrayUtils.indexesOf(shortArray0, (short)0);
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)1779, (short)10}, shortArray0);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-1.0));
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      doubleArray0[1] = double1;
      Double double2 = new Double((short)1779);
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[3]);
      doubleArray0[3] = double5;
      Double double6 = new Double(0.0);
      doubleArray0[6] = double6;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short)1779);
      assertArrayEquals(new double[] {(-1.0), 0.0, 1779.0, (-1.0), (-1.0), 1779.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'v');
      MockRandom mockRandom0 = new MockRandom((-99L));
      ArrayUtils.shuffle(charArray1, (Random) mockRandom0);
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-99L));
      doubleArray0[0] = double0;
      Double double1 = new Double((-99L));
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[1]);
      doubleArray0[4] = double4;
      Double double5 = new Double((-3773.4432));
      doubleArray0[5] = double5;
      ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray1, 1827, '4');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1827, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)3;
      ArrayUtils.reverse(byteArray0, 1517, 1517);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '3');
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      int int0 = 631;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 631;
      longArray0[1] = (long) 631;
      longArray0[2] = (long) 631;
      longArray0[3] = (long) 631;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(631, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 631, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      ArrayUtils.isSorted(charArray0);
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 2, (-503));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 1412L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1325;
      shortArray0[5] = (short) (-1908);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (short)0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)0, (short)0, (short)0, (short)1325, (short) (-1908)}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (int) (short) (-1908), (int) (short)0);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.indexesOf(shortArray0, (short)0);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2, (int) (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2917.648F;
      long[] longArray0 = new long[6];
      longArray0[0] = (-3165L);
      longArray0[1] = (-3165L);
      longArray0[2] = (-3165L);
      int int0 = 649;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 649, 3528L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 649, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1325;
      shortArray0[5] = (short) (-1908);
      ArrayUtils.add(shortArray0, (int) (short)0, (short)0);
      ArrayUtils.subarray(shortArray0, (int) (short) (-1908), (int) (short)0);
      ArrayUtils.swap((int[]) null, (int) (short)0, (int) (short)1325);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) 1L;
      floatArray0[4] = (float) 1L;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1L;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = 'z';
      charArray0[2] = 'B';
      charArray0[3] = '}';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(4, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      boolean boolean0 = ArrayUtils.isSorted(floatArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'V';
      charArray0[2] = 'h';
      charArray0[3] = 'T';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(4, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'V';
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1948.9077F);
      floatArray0[3] = (float) 'h';
      floatArray0[4] = (float) 'O';
      floatArray0[5] = (float) 'h';
      floatArray0[6] = (float) 'O';
      floatArray0[7] = (float) 'h';
      floatArray0[8] = (float) 'h';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3845;
      ArrayUtils.swap(shortArray0, (int) (short)3845, (int) (short)3845, (int) (short)3845);
      assertArrayEquals(new short[] {(short)3845}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)41);
      assertArrayEquals(new byte[] {(byte)86}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = (-1214.5574F);
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.reverse(booleanArray0);
      Byte byte0 = new Byte((byte) (-14));
      Byte byte1 = new Byte((byte) (-14));
      Byte byte2 = new Byte((byte) (-59));
      Long long0 = new Long((byte) (-14));
      Long[] longArray0 = new Long[9];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) longArray0[1]);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1214.5574F), 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      byte[] byteArray0 = null;
      ArrayUtils.indexOf((byte[]) null, (byte)1, (int) (byte)1);
      ArrayUtils.nullToEmpty((long[]) null);
      MockRandom mockRandom0 = new MockRandom((byte)1);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      shortArray0[2] = (short)0;
      Short short1 = new Short((short)0);
      Short[] shortArray1 = new Short[5];
      shortArray1[0] = short1;
      shortArray1[3] = (Short) (short)0;
      shortArray1[4] = short1;
      ArrayUtils.shift((Object[]) shortArray1, (int) (short)0);
      ArrayUtils.indexesOf(shortArray0, short0);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 1468.123F);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-610));
      assertEquals(0, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      char[] charArray0 = new char[8];
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1652.2872F;
      int int0 = ArrayUtils.indexOf(floatArray0, 749.0F, 972);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-42));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      Character.valueOf('M');
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'M';
      floatArray0[2] = (float) 'M';
      floatArray0[3] = 1048.0F;
      floatArray0[4] = (float) 'M';
      floatArray0[6] = (float) 'M';
      floatArray0[7] = (float) 'M';
      floatArray0[8] = (float) 'M';
      ArrayUtils.shuffle(floatArray0);
      boolean boolean0 = ArrayUtils.isNotEmpty((Double[]) null);
      long[] longArray0 = new long[21];
      longArray0[0] = (-11L);
      longArray0[1] = (long) 'M';
      longArray0[2] = (long) 'M';
      longArray0[3] = (long) 'M';
      longArray0[4] = (long) 'M';
      longArray0[5] = (long) 'M';
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 77.0F, 1048.0F, 77.0F, 0.0F, 77.0F, 77.0F, 77.0F, 77.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-23L);
      ArrayUtils.swap(longArray0, 2041, 2041);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      float[] floatArray0 = new float[17];
      floatArray0[3] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      ArrayUtils.toObject((byte[]) null);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2457.784F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2457.784F));
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)82;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-83));
      assertArrayEquals(new short[] {(short) (-83), (short)82}, shortArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)82;
      floatArray0[1] = (float) (short) (-83);
      floatArray0[2] = (float) (short)82;
      floatArray0[3] = (float) (short)82;
      floatArray0[4] = (float) (short)82;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 82.0F, (-1));
      assertEquals("{0, 2, 3, 4}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 0);
      ArrayUtils.nullToEmpty(classArray0);
      ArrayUtils.toStringArray((Object[]) classArray0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
  }
}
