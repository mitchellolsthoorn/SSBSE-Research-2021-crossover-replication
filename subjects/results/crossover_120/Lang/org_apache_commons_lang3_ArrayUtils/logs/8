* EvoSuite 1.1.0
* Configuration: crossover_120
* Going to generate test cases for class: org.apache.commons.lang3.ArrayUtils
* Starting Client-0
* Connecting to master process on port 5693
* Analyzing classpath: 
  - projects/Lang/commons-lang3-3.12.0.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.lang3.ArrayUtils
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 8739
* Using seed 2308047070
* Starting evolution
* Initial Number of Goals in DynaMOSA = 2360 / 8739
[MASTER] 15:24:57.866 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 15:24:57.875 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 15:25:39.775 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 126s and 59 generations, 74789 statements, best individual has fitness: 1288.0
[MASTER] 15:27:16.788 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 20 seconds more than allowed.
* Minimizing test suite
[MASTER] 15:29:21.519 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 2107
* Number of covered goals: 1999
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 90%
* Total number of goals: 1640
* Number of covered goals: 1484
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 62
* Number of covered goals: 62
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 81%
* Total number of goals: 1654
* Number of covered goals: 1339
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 65%
* Total number of goals: 982
* Number of covered goals: 643
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 99%
* Total number of goals: 358
* Number of covered goals: 356
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 97%
* Total number of goals: 358
* Number of covered goals: 346
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 1640
* Number of covered goals: 1334
* Generated 1080 tests with total length 19687
* Resulting test suite's coverage: 83% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 15:31:49.255 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6710916666666666% of time used, but only 80/1080 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 14%
* Compiling and checking tests
[MASTER] 15:33:01.123 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_707_1619796781078/org/apache/commons/lang3/ArrayUtils_707_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_707_1619796781078/org/apache/commons/lang3/ArrayUtils_707_tmp__ESTest_scaffolding.java]]
[MASTER] 15:33:01.124 [logback-2] ERROR JUnitAnalyzer - Classpath: projects/Lang/commons-lang3-3.12.0.jar:/evosuite-bin/evosuite.jar:/evosuite/projects/Lang/commons-lang3-3.12.0.jar
[MASTER] 15:33:01.124 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /evosuite-bin/evosuite.jar:/evosuite/projects/Lang/commons-lang3-3.12.0.jar
[MASTER] 15:33:01.129 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: int cannot be converted to java.lang.Short: 71
[MASTER] 15:33:01.132 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_707_1619796781078/org/apache/commons/lang3/ArrayUtils_707_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Apr 30 15:33:01 GMT 2021
4:  */
5: 
6: package org.apache.commons.lang3;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import org.apache.commons.lang3.ArrayUtils;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class ArrayUtils_707_tmp__ESTest extends ArrayUtils_707_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       double[] doubleArray0 = new double[6];
21:       doubleArray0[0] = (-11.193588670977903);
22:       boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)72);
23:       assertFalse(boolean0);
24:       
25:       int int0 = ArrayUtils.indexOf(doubleArray0, (-11.193588670977903), 69, (double) (byte)72);
26:       assertArrayEquals(new double[] {(-11.193588670977903), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
27:       assertEquals((-1), int0);
28:       assertEquals(6, doubleArray0.length);
29:       
30:       float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
31:       assertNull(floatArray0);
32:       
33:       short[] shortArray0 = new short[7];
34:       shortArray0[0] = (short) (byte)72;
35:       shortArray0[1] = (short) (byte)72;
36:       shortArray0[2] = (short) (byte)72;
37:       shortArray0[3] = (short)0;
38:       shortArray0[4] = (short) (byte)72;
39:       shortArray0[5] = (short) (byte)72;
40:       shortArray0[6] = (short) (byte)72;
41:       ArrayUtils.reverse(shortArray0, 2100, (int) (short)72);
42:       assertArrayEquals(new short[] {(short)72, (short)72, (short)72, (short)0, (short)72, (short)72, (short)72}, shortArray0);
43:       assertEquals(7, shortArray0.length);
44:       
45:       Object[] objectArray0 = new Object[4];
46:       objectArray0[0] = (Object) (short)0;
47:       objectArray0[1] = (Object) (short)72;
48:       objectArray0[2] = (Object) (short)72;
49:       objectArray0[3] = (Object) (short)72;
50:       ArrayUtils.reverse(objectArray0);
51:       assertEquals(4, objectArray0.length);
52:       
53:       long[] longArray0 = new long[0];
54:       long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
55:       assertArrayEquals(new long[] {}, longArray0);
56:       assertArrayEquals(new long[] {}, longArray1);
57:       assertFalse(longArray1.equals((Object)longArray0));
58:       assertNotNull(longArray1);
59:       assertNotSame(longArray0, longArray1);
60:       assertNotSame(longArray1, longArray0);
61:       assertEquals(0, longArray0.length);
62:       assertEquals(0, longArray1.length);
63:       
64:       Short[] shortArray1 = new Short[6];
65:       shortArray1[0] = (Short) (short)72;
66:       shortArray1[1] = (Short) (short)72;
67:       shortArray1[2] = (Short) (short)72;
68:       shortArray1[3] = (Short) (short)0;
69:       shortArray1[4] = (Short) (short)72;
70:       shortArray1[5] = (Short) (short)72;
71:       Short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray1, (Short) 72);
72:       assertFalse(shortArray2.equals((Object)shortArray1));
73:       assertNotNull(shortArray2);
74:       assertNotSame(shortArray1, shortArray2);
75:       assertNotSame(shortArray2, shortArray1);
76:       assertEquals(6, shortArray1.length);
77:       assertEquals(1, shortArray2.length);
78:       
79:       Short[] shortArray3 = ArrayUtils.toObject(shortArray0);
80:       assertArrayEquals(new short[] {(short)72, (short)72, (short)72, (short)0, (short)72, (short)72, (short)72}, shortArray0);
81:       assertFalse(shortArray3.equals((Object)shortArray1));
82:       assertFalse(shortArray3.equals((Object)shortArray2));
83:       assertNotNull(shortArray3);
84:       assertNotSame(shortArray3, shortArray1);
85:       assertNotSame(shortArray3, shortArray2);
86:       assertEquals(7, shortArray0.length);
87:       assertEquals(7, shortArray3.length);
88:   }
89: }
RegularFileObject[/tmp/EvoSuite_707_1619796781078/org/apache/commons/lang3/ArrayUtils_707_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Apr 30 15:33:01 GMT 2021
5:  */
6: 
7: package org.apache.commons.lang3;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class ArrayUtils_707_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.lang3.ArrayUtils"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/evosuite"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ArrayUtils_707_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.apache.commons.lang3.mutable.MutableInt",
82:       "org.apache.commons.lang3.ArraySorter",
83:       "org.apache.commons.lang3.builder.ToStringStyle",
84:       "org.apache.commons.lang3.ArrayUtils",
85:       "org.apache.commons.lang3.BooleanUtils",
86:       "org.apache.commons.lang3.StringUtils",
87:       "org.apache.commons.lang3.CharUtils",
88:       "org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle",
89:       "org.apache.commons.lang3.CharSequenceUtils",
90:       "org.apache.commons.lang3.ClassUtils",
91:       "org.apache.commons.lang3.builder.ToStringStyle$NoClassNameToStringStyle",
92:       "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle",
93:       "org.apache.commons.lang3.builder.ToStringBuilder",
94:       "org.apache.commons.lang3.mutable.Mutable",
95:       "org.apache.commons.lang3.math.NumberUtils",
96:       "org.apache.commons.lang3.builder.Builder",
97:       "org.apache.commons.lang3.builder.HashCodeBuilder",
98:       "org.apache.commons.lang3.builder.ToStringStyle$JsonToStringStyle",
99:       "org.apache.commons.lang3.builder.ToStringStyle$NoFieldNameToStringStyle",
100:       "org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle",
101:       "org.apache.commons.lang3.builder.EqualsBuilder",
102:       "org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle"
103:     );
104:   } 
105: 
106:   private static void resetClasses() {
107:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ArrayUtils_707_tmp__ESTest_scaffolding.class.getClassLoader()); 
108: 
109:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
110:       "org.apache.commons.lang3.ArrayUtils",
111:       "org.apache.commons.lang3.CharUtils",
112:       "org.apache.commons.lang3.ClassUtils",
113:       "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle",
114:       "org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle",
115:       "org.apache.commons.lang3.builder.ToStringStyle$NoFieldNameToStringStyle",
116:       "org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle",
117:       "org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle",
118:       "org.apache.commons.lang3.builder.ToStringStyle$NoClassNameToStringStyle",
119:       "org.apache.commons.lang3.builder.ToStringStyle$JsonToStringStyle",
120:       "org.apache.commons.lang3.builder.ToStringStyle",
121:       "org.apache.commons.lang3.math.NumberUtils",
122:       "org.apache.commons.lang3.ArraySorter",
123:       "org.apache.commons.lang3.mutable.MutableInt",
124:       "org.apache.commons.lang3.builder.HashCodeBuilder",
125:       "org.apache.commons.lang3.builder.EqualsBuilder",
126:       "org.apache.commons.lang3.BooleanUtils",
127:       "org.apache.commons.lang3.builder.ToStringBuilder",
128:       "org.apache.commons.lang3.StringUtils",
129:       "org.apache.commons.lang3.CharSequenceUtils"
130:     );
131:   }
132: }

[MASTER] 15:33:01.152 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
double[] doubleArray0 = new double[6];
doubleArray0[0] = (-11.193588670977903);
boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)72);
assertFalse(boolean0);

int int0 = ArrayUtils.indexOf(doubleArray0, (-11.193588670977903), 69, (double) (byte)72);
assertArrayEquals(new double[] {(-11.193588670977903), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
assertEquals((-1), int0);
assertEquals(6, doubleArray0.length);

float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
assertNull(floatArray0);

short[] shortArray0 = new short[7];
shortArray0[0] = (short) (byte)72;
shortArray0[1] = (short) (byte)72;
shortArray0[2] = (short) (byte)72;
shortArray0[3] = (short)0;
shortArray0[4] = (short) (byte)72;
shortArray0[5] = (short) (byte)72;
shortArray0[6] = (short) (byte)72;
ArrayUtils.reverse(shortArray0, 2100, (int) (short)72);
assertArrayEquals(new short[] {(short)72, (short)72, (short)72, (short)0, (short)72, (short)72, (short)72}, shortArray0);
assertEquals(7, shortArray0.length);

Object[] objectArray0 = new Object[4];
objectArray0[0] = (Object) (short)0;
objectArray0[1] = (Object) (short)72;
objectArray0[2] = (Object) (short)72;
objectArray0[3] = (Object) (short)72;
ArrayUtils.reverse(objectArray0);
assertEquals(4, objectArray0.length);

long[] longArray0 = new long[0];
long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
assertArrayEquals(new long[] {}, longArray0);
assertArrayEquals(new long[] {}, longArray1);
assertFalse(longArray1.equals((Object)longArray0));
assertNotNull(longArray1);
assertNotSame(longArray0, longArray1);
assertNotSame(longArray1, longArray0);
assertEquals(0, longArray0.length);
assertEquals(0, longArray1.length);

Short[] shortArray1 = new Short[6];
shortArray1[0] = (Short) (short)72;
shortArray1[1] = (Short) (short)72;
shortArray1[2] = (Short) (short)72;
shortArray1[3] = (Short) (short)0;
shortArray1[4] = (Short) (short)72;
shortArray1[5] = (Short) (short)72;
Short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray1, (Short) 72);
assertFalse(shortArray2.equals((Object)shortArray1));
assertNotNull(shortArray2);
assertNotSame(shortArray1, shortArray2);
assertNotSame(shortArray2, shortArray1);
assertEquals(6, shortArray1.length);
assertEquals(1, shortArray2.length);

Short[] shortArray3 = ArrayUtils.toObject(shortArray0);
assertArrayEquals(new short[] {(short)72, (short)72, (short)72, (short)0, (short)72, (short)72, (short)72}, shortArray0);
assertFalse(shortArray3.equals((Object)shortArray1));
assertFalse(shortArray3.equals((Object)shortArray2));
assertNotNull(shortArray3);
assertNotSame(shortArray3, shortArray1);
assertNotSame(shortArray3, shortArray2);
assertEquals(7, shortArray0.length);
assertEquals(7, shortArray3.length);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'ArrayUtils_ESTest' to results/crossover_120/Lang/org_apache_commons_lang3_ArrayUtils/tests/8
* Done!

* Computation finished
